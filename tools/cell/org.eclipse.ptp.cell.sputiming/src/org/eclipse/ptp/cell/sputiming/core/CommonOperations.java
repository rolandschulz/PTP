/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
package org.eclipse.ptp.cell.sputiming.core;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.Path;
import org.eclipse.core.runtime.Status;
import org.eclipse.ptp.cell.sputiming.Activator;
import org.eclipse.ptp.cell.utils.stream.StreamBridge;
import org.eclipse.ui.console.ConsolePlugin;
import org.eclipse.ui.console.IConsole;
import org.eclipse.ui.console.IConsoleManager;
import org.eclipse.ui.console.IOConsole;


/**
 * Class containing operations that are used to extract sputiming information
 * from managed build process and from simple build process.
 * 
 * @author Richard Maciel
 *
 */
public class CommonOperations {

	private IPath selectedFile;
	private IProject project;
	
	public CommonOperations(IProject project, IPath selectedFile) {
		this.selectedFile = selectedFile.makeAbsolute();
		this.project = project;
	}
	
	
	public void displayOutputFile(IPath sputiminggenfile, IOConsole console) throws CoreException {
		try {
			FileInputStream generatedfile = new FileInputStream(sputiminggenfile.toOSString());
			//TextStreamBridge filebridge = new TextStreamBridge(generatedfile, console.newOutputStream(), null);
			StreamBridge filebridge = new StreamBridge(generatedfile, console.newOutputStream());
			filebridge.run();
		} catch (FileNotFoundException e) {
			throw new CoreException(new Status(Status.ERROR, 
					Activator.getDefault().getBundle().getSymbolicName(),
					0, Messages.CommonOperations_DisplayFile_NoFileFound, e));
		}
	}

	/**
		 * Return an extension used to identify assembler input files which will be used in sputiming
		 * @return
		 * @throws CoreException
		 */
		public String getAssemblerExtension() throws CoreException {
	//		Get an extension used by the assembler tool.
		/*	ITool asmTool = ManagedBuildManager.
			getExtensionTool("cell.managedbuild.tool.cell.spu.gnu.assembler");
	
			if(asmTool == null)
			{
				throw new CoreException(new Status(Status.ERROR, 
						Activator.getDefault().getBundle().getSymbolicName(),
						0, "Problem fetching assembler tool from CDT", null));
			}	
			
	//		 Get the first extension available as input extension.
			String [] asmExtensionList = asmTool.getAllInputExtensions();
	
			if(asmExtensionList.length == 0)
			{
				throw new CoreException(new Status(Status.ERROR, 
						Activator.getDefault().getBundle().getSymbolicName(),
						0, "Assembler extension list is empty", null));
			}
			*/
			return "spuS"; //$NON-NLS-1$
		}

	/**
	 * Return the name of the directory where the files generated by this plugin will be created
	 * @return directory name
	 */
	public String getBuildDirectoryName() {
		return "sputiming"; //$NON-NLS-1$
	}

	/**
	 * Return the path of the directory where the files generated by this plugin will be created
	 * 
	 * @return directory {@link IPath}
	 */
	public IPath getWorkingDirectory() {
		String workdir = selectedFile.removeLastSegments(1).addTrailingSeparator().
		append(getBuildDirectoryName()).toOSString(); 
		return new Path(workdir);
	}

	public String getOutputFilenameWithoutExtension() {
		String filename = selectedFile.removeFileExtension().lastSegment();
		//String filename = selectedFile.removeFileExtension().
		//makeRelative().removeFirstSegments(1).toOSString(); 
		return filename;
	}

	/**
	 * Return the path of the assembly file that will be generated from selectedFile
	 * @return IPath Containing the assembly file path
	 * @throws CoreException
	 */
	public IPath getAssemblyFilePath() throws CoreException {
		String outputwoext = getOutputFilenameWithoutExtension();
		
		IPath asmFilePath = getWorkingDirectory().addTrailingSeparator().append(
				outputwoext + "." + //$NON-NLS-1$
			getAssemblerExtension());
		
		return asmFilePath;
	}


	/**
	 * Create the directory which will host the files created by this plugin.
	 * If the directory already exists, do nothing.
	 * <br>
	 * The directory will always be created in the same directory as the
	 * source file is. 
	 *  
	 * @param monitor
	 * @throws CoreException
	 */
	public void createWorkingDirectory(IProgressMonitor monitor) throws CoreException {
		File workingDir = new File(getWorkingDirectory().toOSString());
		workingDir.mkdir();
		//IFolder sputimingDir = project.getFolder(getBuildDirectoryName());
		/*if(sputimingDir.exists())
			return;
		sputimingDir.create(false, true, monitor);*/
	}


	/**
	 * Creates an Eclipse console (killing any previously existing with the
	 * same name), adds it to the list of available consolesand returns it.
	 * 
	 * @param consoleName
	 * @author Daniel Felix Ferber and Richard Maciel
	 * @since 1.0
	 */
	public IOConsole createConsole(String consoleName)
	{
		IConsoleManager manager = ConsolePlugin.getDefault().getConsoleManager();
		IConsole[] consoles = manager.getConsoles();
		for(int i = 0; i < consoles.length; i++) 
		{
			IConsole console = consoles[i];
			if (console.getName().equals(consoleName)) 
				manager.removeConsoles(new IConsole[] {console});
		}
		IOConsole spuTimingConsole   = new IOConsole(consoleName, null);
		manager.addConsoles(new IConsole[] {spuTimingConsole});
		
		return spuTimingConsole;	
	}
	
}
