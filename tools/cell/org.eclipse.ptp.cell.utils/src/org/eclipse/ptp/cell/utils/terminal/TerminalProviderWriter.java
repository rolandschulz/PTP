/******************************************************************************
 * Copyright (c) 2006 IBM Corporation.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     IBM Corporation - Initial Implementation
 *
 *****************************************************************************/

package org.eclipse.ptp.cell.utils.terminal;

/**
 * A set of facility methods to write data on an AbstractTerminalProvider.
 * 
 * @author Daniel Felix Ferber
 * @since 1.0
 */
public class TerminalProviderWriter {
	
	AbstractTerminalProvider terminalProvider;

	public TerminalProviderWriter(AbstractTerminalProvider terminalProvider) {
		super();
		this.terminalProvider = terminalProvider;
	}

	/**
	 * Write a string on the console, pretending as it were generated by stdout
	 * of the terminal.
	 * 
	 * @param string
	 */
	public void writeConsole(String string) {
		byte bytes[] = string.getBytes();
		writeConsole(bytes, bytes.length);
	}

	public  void writeConsole(byte[] bytes, int length) {
		terminalProvider.receiveDataFromTerminal(bytes, length);
	}

	/**
	 * Write a string on the console, pretending as it were generated by stderr
	 * of the terminal.
	 * 
	 * @param string
	 */
	public void writeError(String string) {
		byte bytes[] = string.getBytes();
		writeError(bytes, bytes.length);
	}

	public void writeError(byte[] bytes, int length) {
		terminalProvider.receiveErrorFromTerminal(bytes, length);
	}
	
	/**
	 * Write a string on the console as meta data.
	 */
	public void writeMetaMessage(String string) {
		terminalProvider.receiveMetaMessage(string);
	}

	/**
	 * Write a string on the terminal, without echo on the console, pretending
	 * as it were typed in the console.
	 * 
	 * @param string
	 */
	public void writeTerminal(String string) {
		byte bytes[] = string.getBytes();
		writeTerminal(bytes, bytes.length);
	}

	public void writeTerminal(byte[] bytes, int length) {
		terminalProvider.writeDataToTerminal(bytes, length);
	}

	/**
	 * Write a string on the console and on the terminal, pretending as it were
	 * typed in the console.
	 * 
	 * @param string
	 */
	public void writeBoth(String string) {
		byte bytes[] = string.getBytes();
		writeBoth(bytes, bytes.length);
	}

	public void writeBoth(byte[] bytes, int length) {
		writeConsole(bytes, length);
		writeTerminal(bytes, length);
		
	}

}
