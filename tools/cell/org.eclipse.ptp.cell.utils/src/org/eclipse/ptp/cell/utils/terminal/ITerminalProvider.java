/******************************************************************************
 * Copyright (c) 2006 IBM Corporation.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     IBM Corporation - Initial Implementation
 *
 *****************************************************************************/

package org.eclipse.ptp.cell.utils.terminal;

/**
 * Offers capabilities to inform an ITerminalReceiver about data
 * received from an entity that behaves like a terminal and to send
 * data to this entity.
 * <p>
 * Commonly, the ITerminalReceiver is a visual console, while ITerminalProvider
 * is an application whose stdout, stderr and stdin stream are redirected to the
 * ITerminalReceivers.
 * <p>
 * The ITerminalProvider and ITerminalReceiver provide a interface to be used
 * as separation between program control/model (that implements ITerminalProvider) and
 * program visual (implements ITerminalReceiver).
 * <p>
 * More than one ITerminalReceiver may be registered to the ITerminalProvider.
 * <p>
 * The ITerminalProvider defines methods to be notified by the terminal behaving entity about
 * three kinds of received data:
 * <ul>
 * <li>Data: normal bytes generated from terminals stdout 
 * <li>Error: normal bytes generated from terminals stderr
 * <li>Meta: messages generated by the application that has the terminal.
 * Used to send off-topic data to the terminal, bypassing the normal streams. 
 * </ul>
 * <p>
 * The ITerminalProvider also defines a method to send data to the terminal.
 * This method should be used by the ITerminalReceiver to simulate data 
 * typed in into the terminal.
 * 
 * @author Daniel Felix Ferber
 * @since 1.0
 */
public interface ITerminalProvider {
	// Manage terminal receivers that are notified.
	public void addListener(ITerminalReceiver receiver);
	public void removeListener(ITerminalReceiver receiver);
	
	// Used by the service that has the terminal, to notify receivers
	// about data received from the terminal.
	void receiveMetaMessage(String message);
	void receiveDataFromTerminal(byte bytes[], int length);
	void receiveErrorFromTerminal(byte bytes[], int length);
	
	// Used by the terminal receiver, to write data to the terminal service.
	void writeDataToTerminal(byte bytes[], int length);
}
