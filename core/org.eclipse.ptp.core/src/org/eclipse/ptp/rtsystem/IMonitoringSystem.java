/*******************************************************************************
 * Copyright (c) 2005 The Regents of the University of California. 
 * This material was produced under U.S. Government contract W-7405-ENG-36 
 * for Los Alamos National Laboratory, which is operated by the University 
 * of California for the U.S. Department of Energy. The U.S. Government has 
 * rights to use, reproduce, and distribute this software. NEITHER THE 
 * GOVERNMENT NOR THE UNIVERSITY MAKES ANY WARRANTY, EXPRESS OR IMPLIED, OR 
 * ASSUMES ANY LIABILITY FOR THE USE OF THIS SOFTWARE. If software is modified 
 * to produce derivative works, such modified software should be clearly marked, 
 * so as not to confuse it with the version available from LANL.
 * 
 * Additionally, this program and the accompanying materials 
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * LA-CC 04-115
 *******************************************************************************/

package org.eclipse.ptp.rtsystem;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.ptp.core.attributes.AttributeManager;
import org.eclipse.ptp.core.elements.IPElement;

/**
 * A Monitoring System is a portion of a runtime system that handles status and information about
 * the system (generally things outside the control of the runtime system).  This includes
 * what machines are available, the nodes for those machines, the status of those nodes, etc.
 * 
 * @author Nathan DeBardeleben
 *
 */
public interface IMonitoringSystem {

	/**
	 * Applies a filter specified by the attributes in the filterAttributes argument to events being sent by
	 * the runtime system. The effect of this command is to reduce the volume of events and/or number of
	 * event attributes that are sent. The runtime system is free to choose how it implements event filtering,
	 * but must do so in a manner that ensures the filtering is applied <i>before</i> the events are generated.
	 * 
	 * Filter attributes are always StringAttributes, but can be applied to attributes of different
	 * types. How the filtering behaves depends on the type of attribute being filtered:
	 * 
	 * StringAttribute: filter specifies an exact match or a regular expression
	 * [Big]IntegerAttribute: filter specifies an exact match or an expression (!, >, <, >=, <=)
	 * DoubleAttribute: filter specifies an exact match or an expression (!, >, <, >=, <=)
	 * EnumeratedAttribute: filter specifies an exact match or an expression (!)
	 * BooleanAttribute: filter specifies an exact match or an expression (!)
	 * 
	 * The name of the filter attribute is the name of the attribute it applies to, with
	 * the word 'Filter' appended.
	 * 
	 * A filter must also specify the element that it applies to using the 'element' argument. All events
	 * generated with for this element will be filtered.
	 * 
	 * The filterChildren argument specifies that the filter is to be applied events generated by children of the 
	 * specified element.
	 * 
	 * A filter is removed from an element by supplying an AttributeManager with no attributes.
	 * 
 	 * Example 1: to filter the IntegerAttribute 'jobNumProcs' to jobs with greater than
	 * 100 processes, the StringAttribute 'jobNumProcsFilter' would be set to the value '>100'.
	 * 
	 * Example 2: to receive job notification events for the queue normalQueue but only for user 'greg', 
	 * an attribute manger would be created with string attribute 'userFilter' set to 'greg' and called
	 * as follows: filterEvents(normalQueue, true, filterAttributes);
	 * 
	 * @param element
	 * @param filterChildren
	 * @param filterAttributes
	 * @throws CoreException
	 */
	public void filterEvents(IPElement element, boolean filterChildren, AttributeManager filterAttributes) throws CoreException;
	
	/**
	 * Causes the runtime system to begin sending events. May be issued at any time after
	 * the runtime system has started. Multiple calls has no effect.
	 * 
	 * @throws CoreException
	 */
	public void startEvents() throws CoreException;
	
	/**
	 * Causes the runtime system to drain the event queue and stop sending events. May be issued at any time
	 * after the runtime system has started. Any events that have been queued for sending by the runtime system 
	 * will still be sent. Multiple calls have no effect.
	 * 
	 * @throws CoreException
	 */
	public void stopEvents() throws CoreException;
}
