     TYPE :: LIST ! A list of anything
       TYPE(LIST), POINTER :: NEXT => NULL()
       CLASS(*), ALLOCATABLE :: ITEM
     END TYPE LIST

     TYPE(LIST), POINTER :: IN_LIST, LIST_COPY => NULL()
     TYPE(LIST), POINTER :: IN_WALK, NEW_TAIL
     ! Copy IN_LIST to LIST_COPY

     IF (ASSOCIATED(IN_LIST)) THEN
       IN_WALK => IN_LIST
       ALLOCATE(LIST_COPY)
       NEW_TAIL => LIST_COPY
       DO
         ALLOCATE(NEW_TAIL%ITEM, SOURCE=IN_WALK%ITEM)
         IN_WALK => IN_WALK%NEXT
         IF (.NOT. ASSOCIATED(IN_WALK)) EXIT
         ALLOCATE(NEW_TAIL%NEXT)
         NEW_TAIL => NEW_TAIL%NEXT
       END DO
     END IF
end
