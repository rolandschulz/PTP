/* The following code was generated by JFlex 1.4.1 on 5/13/08 8:29 PM */

/*******************************************************************************
 * Copyright (c) 2007 University of Illinois at Urbana-Champaign and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     UIUC - Initial API and implementation
 *******************************************************************************/

/*
 * First phase of fixed form lexical analysis for Fortran 95 parser
 *
 * FixedFormLexerPhase1 acts as a "token stream" feeding FreeFormLexerPhase2
 * and is feeded by FixedFormLexerPrepass
 * (See FixedFormLexerPrepass and FixedFormLexerPhase2.java and f95t.bnf)
 *
 * @author Jeffrey Overbey and Dirk Rossow
 * 
 * @see FixedFormLexerPrepass
 * @see FixedFormLexerPhase2
 * @see Parser
 *
 * NOTE: Get rid of (space out) "yybegin(YYSTANDARD);" in the lines
 * for any tokens that can appear in an IMPLICIT statement
 * (It was also omitted in the lines for T_SLASH so that
 * INTERFACE OPERATOR (/) would tokenize correctly.)
 *
 * Changes:
 * 29.06.2005 Jeff Overbey: Added Fortran INCLUDE and CPP directives
 */
 
package org.eclipse.photran.internal.core.lexer;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import java.util.LinkedList;
import org.eclipse.core.resources.IFile;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 5/13/08 8:29 PM from the specification file
 * <tt>FixedFormLexerPhase1.flex</tt>
 */
class FixedFormLexerPhase1 implements ILexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int OPERATORorFORMAT = 6;
  public static final int DBLQUOTED = 3;
  public static final int QUOTED = 2;
  public static final int YYINITIAL = 0;
  public static final int IDENT = 7;
  public static final int HOLLERITH = 4;
  public static final int YYSTANDARD = 5;
  public static final int IMPLICIT = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\46\1\2\2\36\1\1\22\0\1\46\1\36\1\16\1\37"+
    "\1\0\1\61\1\0\1\14\1\33\1\35\1\3\1\6\1\34\1\7"+
    "\1\11\1\62\2\15\6\20\2\4\1\56\1\36\1\60\1\47\1\57"+
    "\2\0\1\22\1\13\1\42\1\10\1\5\1\25\1\27\1\23\1\24"+
    "\1\12\1\52\1\41\1\45\1\40\1\17\1\30\1\55\1\44\1\26"+
    "\1\50\1\43\1\51\1\54\1\31\1\53\1\21\4\0\1\32\1\0"+
    "\1\22\1\13\1\42\1\10\1\5\1\25\1\27\1\23\1\24\1\12"+
    "\1\52\1\41\1\45\1\40\1\17\1\30\1\55\1\44\1\26\1\50"+
    "\1\43\1\51\1\54\1\31\1\53\1\21\12\0\1\36\u1fa2\0\2\36"+
    "\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\2\2\1\3\1\4\1\1\1\5\1\6"+
    "\3\1\1\7\1\10\10\1\1\11\1\12\1\13\1\14"+
    "\7\1\1\15\3\1\1\16\1\17\1\20\1\21\1\22"+
    "\1\4\1\1\1\5\1\6\10\1\1\12\1\22\1\23"+
    "\1\24\1\25\1\23\1\26\1\27\1\30\1\12\1\31"+
    "\1\32\1\33\7\0\1\34\33\0\1\35\1\36\12\0"+
    "\1\37\32\0\1\40\1\41\1\42\6\0\1\43\1\44"+
    "\1\45\1\46\3\0\1\47\1\50\1\51\5\0\1\52"+
    "\1\0\1\53\1\54\1\55\1\56\3\0\1\57\14\0"+
    "\1\60\25\0\1\61\74\0\1\62\17\0\1\52\1\0"+
    "\1\63\1\0\1\52\10\0\1\64\10\0\1\65\4\0"+
    "\1\66\1\67\5\0\1\70\2\0\1\71\1\0\1\72"+
    "\2\0\1\73\1\74\1\75\2\0\1\76\1\77\1\0"+
    "\1\100\3\0\1\101\1\102\2\0\1\103\1\104\17\0"+
    "\1\105\1\0\1\106\2\0\1\107\2\0\1\110\1\0"+
    "\1\111\2\0\1\112\3\0\1\113\11\0\2\114\4\0"+
    "\1\115\1\0\1\116\1\0\1\117\1\120\4\0\1\121"+
    "\1\122\5\0\1\123\1\124\3\0\1\125\4\0\1\126"+
    "\1\127\4\0\1\52\2\130\1\0\2\131\1\4\2\0"+
    "\1\132\1\0\1\133\12\0\1\134\12\0\1\135\1\136"+
    "\2\0\1\137\2\0\1\140\13\0\1\141\11\0\1\142"+
    "\1\143\3\0\1\144\2\0\1\145\2\0\1\146\5\0"+
    "\1\147\7\0\1\150\10\0\1\151\1\152\1\153\1\0"+
    "\1\154\3\0\1\155\5\0\1\156\1\157\1\160\1\161"+
    "\1\162\15\0\1\163\4\0\1\164\1\165\3\0\1\166"+
    "\1\167\2\0\1\170\14\0\1\171\4\0\1\172\1\173"+
    "\1\0\1\174\6\0\1\175\7\0\1\176\7\0\1\177"+
    "\3\0\1\124\1\200\1\0\1\201\1\202\1\203\1\204"+
    "\1\205\4\0\1\206\5\0\1\207\5\0\1\210\2\0"+
    "\1\211\1\0\1\212\2\0\1\213\5\0\1\214\1\215"+
    "\1\216\2\0\1\217\2\0\1\220\7\0\1\221\1\222"+
    "\3\0\1\223\1\0\1\224\2\0\1\225\1\226\1\227"+
    "\2\0\1\230\4\0\1\231\1\232\7\0\1\233\4\0"+
    "\1\165\4\0\1\234\1\235\1\236\1\0\1\237\6\0"+
    "\1\240\1\0\1\241\1\0\1\242\6\0\1\243\1\244"+
    "\1\0\1\245\1\246\7\0\1\247\1\0\1\250\2\0"+
    "\1\251\1\252\1\253\3\0\1\254\1\255\1\256\2\0"+
    "\1\257\1\0\1\217\1\260\1\261\4\0\1\262\1\263"+
    "\1\264\1\265\1\227\1\230\1\266\2\0\1\267\4\0"+
    "\1\270\1\0\1\271\1\0\1\272\1\0\1\273\1\274"+
    "\1\0\1\275\2\0\1\276\2\0\1\277\1\0\1\300"+
    "\1\0\1\301\1\302\1\266\1\0\1\303\1\304\2\0"+
    "\1\305\1\306\2\0\1\307\1\0\1\307";

  private static int [] zzUnpackAction() {
    int [] result = new int[824];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\u01cb\0\u0198\0\u01fe\0\u0231\0\u0264\0\u0198\0\u0198"+
    "\0\u0297\0\u02ca\0\u02fd\0\u0198\0\u0198\0\u0330\0\u0363\0\u0396"+
    "\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495\0\u0198\0\u0198\0\u0198"+
    "\0\u0198\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594\0\u05c7\0\u05fa"+
    "\0\u062d\0\u0660\0\u0693\0\u06c6\0\u0198\0\u06f9\0\u072c\0\u0198"+
    "\0\u075f\0\u0792\0\u07c5\0\u07f8\0\u07f8\0\u082b\0\u085e\0\u0891"+
    "\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990\0\u09c3\0\u09f6\0\u0a29"+
    "\0\u0198\0\u0a5c\0\u0a8f\0\u0ac2\0\u0198\0\u0198\0\u0af5\0\u0198"+
    "\0\u0b28\0\u0198\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a"+
    "\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2"+
    "\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a"+
    "\0\u0fbd\0\u0ff0\0\u1023\0\u1056\0\u1089\0\u10bc\0\u10ef\0\u1122"+
    "\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u1221\0\u0198\0\u1254\0\u1287"+
    "\0\u12ba\0\u12ed\0\u1320\0\u1353\0\u1386\0\u13b9\0\u13ec\0\u141f"+
    "\0\u1452\0\u1485\0\u14b8\0\u14eb\0\u151e\0\u1551\0\u1584\0\u15b7"+
    "\0\u15ea\0\u161d\0\u1650\0\u1683\0\u16b6\0\u16e9\0\u171c\0\u174f"+
    "\0\u1782\0\u17b5\0\u17e8\0\u181b\0\u184e\0\u1881\0\u18b4\0\u18e7"+
    "\0\u191a\0\u194d\0\u1980\0\u19b3\0\u0198\0\u0198\0\u0198\0\u19e6"+
    "\0\u1a19\0\u1a4c\0\u1a7f\0\u1ab2\0\u1ae5\0\u0198\0\u0198\0\u0198"+
    "\0\u0198\0\u1b18\0\u1b4b\0\u1b7e\0\u0198\0\u0198\0\u0198\0\u1bb1"+
    "\0\u1be4\0\u1c17\0\u1c4a\0\u1c7d\0\u1cb0\0\u1ce3\0\u0198\0\u0198"+
    "\0\u0198\0\u0198\0\u1d16\0\u1d49\0\u1d7c\0\u1daf\0\u1de2\0\u1e15"+
    "\0\u1e48\0\u1e7b\0\u1eae\0\u1ee1\0\u1f14\0\u1f47\0\u1f7a\0\u1fad"+
    "\0\u1fe0\0\u2013\0\u0198\0\u2046\0\u2079\0\u20ac\0\u20df\0\u2112"+
    "\0\u2145\0\u2178\0\u21ab\0\u21de\0\u2211\0\u2244\0\u2277\0\u22aa"+
    "\0\u22dd\0\u2310\0\u2343\0\u2376\0\u23a9\0\u23dc\0\u240f\0\u2442"+
    "\0\u0198\0\u2475\0\u24a8\0\u24db\0\u250e\0\u2541\0\u2574\0\u25a7"+
    "\0\u25da\0\u260d\0\u2640\0\u2673\0\u26a6\0\u26d9\0\u270c\0\u273f"+
    "\0\u2772\0\u27a5\0\u27d8\0\u280b\0\u283e\0\u2871\0\u28a4\0\u28d7"+
    "\0\u290a\0\u293d\0\u2970\0\u29a3\0\u29d6\0\u2a09\0\u2a3c\0\u2a6f"+
    "\0\u2aa2\0\u2ad5\0\u2b08\0\u2b3b\0\u2b6e\0\u2ba1\0\u2bd4\0\u2c07"+
    "\0\u2c3a\0\u2c6d\0\u2ca0\0\u2cd3\0\u2d06\0\u2d39\0\u2d6c\0\u2d9f"+
    "\0\u2dd2\0\u2e05\0\u2e38\0\u2e6b\0\u2e9e\0\u2ed1\0\u2f04\0\u2f37"+
    "\0\u2f6a\0\u2f9d\0\u2fd0\0\u3003\0\u3036\0\u0198\0\u3069\0\u309c"+
    "\0\u30cf\0\u3102\0\u3135\0\u3168\0\u319b\0\u31ce\0\u3201\0\u3234"+
    "\0\u3267\0\u329a\0\u32cd\0\u3300\0\u3333\0\u3366\0\u3399\0\u33cc"+
    "\0\u33cc\0\u0198\0\u33ff\0\u3432\0\u3465\0\u3498\0\u34cb\0\u34fe"+
    "\0\u3531\0\u3564\0\u0198\0\u3597\0\u35ca\0\u35fd\0\u3630\0\u3663"+
    "\0\u3696\0\u36c9\0\u36fc\0\u0198\0\u372f\0\u3762\0\u3795\0\u37c8"+
    "\0\u37fb\0\u0198\0\u382e\0\u3861\0\u3894\0\u38c7\0\u38fa\0\u0198"+
    "\0\u392d\0\u3960\0\u0198\0\u3993\0\u0198\0\u39c6\0\u39f9\0\u0198"+
    "\0\u0198\0\u0198\0\u3a2c\0\u3a5f\0\u0198\0\u0198\0\u3a92\0\u0198"+
    "\0\u3ac5\0\u3af8\0\u3b2b\0\u0198\0\u3b5e\0\u3b91\0\u3bc4\0\u0198"+
    "\0\u0198\0\u3bf7\0\u3c2a\0\u3c5d\0\u3c90\0\u3cc3\0\u3cf6\0\u3d29"+
    "\0\u3d5c\0\u3d8f\0\u3dc2\0\u3df5\0\u3e28\0\u3e5b\0\u3e8e\0\u3ec1"+
    "\0\u3ef4\0\u3f27\0\u0198\0\u3f5a\0\u3f8d\0\u0198\0\u3fc0\0\u3ff3"+
    "\0\u0198\0\u4026\0\u0198\0\u4059\0\u408c\0\u0198\0\u40bf\0\u40f2"+
    "\0\u4125\0\u0198\0\u4158\0\u418b\0\u41be\0\u41f1\0\u4224\0\u4257"+
    "\0\u428a\0\u42bd\0\u42f0\0\u4323\0\u0198\0\u4356\0\u4389\0\u43bc"+
    "\0\u43ef\0\u0198\0\u4422\0\u4455\0\u4488\0\u0198\0\u0198\0\u44bb"+
    "\0\u44ee\0\u4521\0\u4554\0\u0198\0\u0198\0\u4587\0\u45ba\0\u45ed"+
    "\0\u4620\0\u4653\0\u4686\0\u46b9\0\u46ec\0\u471f\0\u4752\0\u0198"+
    "\0\u4785\0\u47b8\0\u47eb\0\u481e\0\u0198\0\u0198\0\u4851\0\u4884"+
    "\0\u48b7\0\u48ea\0\u3399\0\u491d\0\u3465\0\u4950\0\u4983\0\u0198"+
    "\0\u3531\0\u49b6\0\u49e9\0\u0198\0\u4a1c\0\u0198\0\u4a4f\0\u4a82"+
    "\0\u4ab5\0\u4ae8\0\u4b1b\0\u4b4e\0\u4b81\0\u4bb4\0\u4be7\0\u4c1a"+
    "\0\u0198\0\u4c4d\0\u4c80\0\u4cb3\0\u4ce6\0\u4d19\0\u4d4c\0\u4d7f"+
    "\0\u4db2\0\u4de5\0\u4e18\0\u0198\0\u0198\0\u4e4b\0\u4e7e\0\u0198"+
    "\0\u4eb1\0\u4ee4\0\u4f17\0\u4f4a\0\u4f7d\0\u4fb0\0\u4fe3\0\u5016"+
    "\0\u5049\0\u507c\0\u50af\0\u50e2\0\u5115\0\u5148\0\u0198\0\u517b"+
    "\0\u51ae\0\u51e1\0\u5214\0\u5247\0\u527a\0\u52ad\0\u52e0\0\u5313"+
    "\0\u0198\0\u0198\0\u5346\0\u5379\0\u53ac\0\u0198\0\u53df\0\u5412"+
    "\0\u0198\0\u5445\0\u5478\0\u0198\0\u54ab\0\u54de\0\u5511\0\u5544"+
    "\0\u5577\0\u0198\0\u55aa\0\u55dd\0\u5610\0\u5643\0\u5676\0\u56a9"+
    "\0\u56dc\0\u0198\0\u570f\0\u5742\0\u5775\0\u57a8\0\u57db\0\u580e"+
    "\0\u5841\0\u5874\0\u0198\0\u0198\0\u0198\0\u58a7\0\u0198\0\u58da"+
    "\0\u590d\0\u5940\0\u0198\0\u5973\0\u59a6\0\u59d9\0\u5a0c\0\u5a3f"+
    "\0\u0198\0\u0198\0\u0198\0\u5a72\0\u0198\0\u5aa5\0\u5ad8\0\u5b0b"+
    "\0\u5b3e\0\u5b71\0\u5ba4\0\u5bd7\0\u5c0a\0\u5c3d\0\u5c70\0\u5ca3"+
    "\0\u5cd6\0\u5d09\0\u0198\0\u5d3c\0\u5d6f\0\u5da2\0\u5dd5\0\u0198"+
    "\0\u5e08\0\u5e3b\0\u5e6e\0\u5ea1\0\u0198\0\u0198\0\u5ed4\0\u5f07"+
    "\0\u0198\0\u5f3a\0\u5f6d\0\u5fa0\0\u5fd3\0\u6006\0\u6039\0\u606c"+
    "\0\u609f\0\u60d2\0\u6105\0\u6138\0\u616b\0\u0198\0\u619e\0\u61d1"+
    "\0\u6204\0\u6237\0\u0198\0\u626a\0\u629d\0\u62d0\0\u6303\0\u6336"+
    "\0\u6369\0\u639c\0\u63cf\0\u6402\0\u0198\0\u6435\0\u6468\0\u649b"+
    "\0\u64ce\0\u6501\0\u6534\0\u6567\0\u0198\0\u659a\0\u65cd\0\u6600"+
    "\0\u6633\0\u6666\0\u6699\0\u66cc\0\u0198\0\u66ff\0\u6732\0\u6765"+
    "\0\u590d\0\u0198\0\u6798\0\u0198\0\u0198\0\u0198\0\u0198\0\u0198"+
    "\0\u67cb\0\u67fe\0\u6831\0\u6864\0\u0198\0\u6897\0\u68ca\0\u68fd"+
    "\0\u6930\0\u6963\0\u0198\0\u6996\0\u69c9\0\u69fc\0\u6a2f\0\u6a62"+
    "\0\u0198\0\u6a95\0\u6ac8\0\u0198\0\u6afb\0\u0198\0\u6b2e\0\u6b61"+
    "\0\u0198\0\u6b94\0\u6bc7\0\u6bfa\0\u6c2d\0\u6c60\0\u0198\0\u0198"+
    "\0\u0198\0\u6c93\0\u6cc6\0\u6cf9\0\u6d2c\0\u6d5f\0\u0198\0\u6d92"+
    "\0\u6dc5\0\u6df8\0\u6e2b\0\u6e5e\0\u6e91\0\u6ec4\0\u0198\0\u0198"+
    "\0\u6ef7\0\u6f2a\0\u6f5d\0\u0198\0\u6f90\0\u0198\0\u6fc3\0\u6ff6"+
    "\0\u0198\0\u0198\0\u7029\0\u705c\0\u708f\0\u70c2\0\u70f5\0\u7128"+
    "\0\u715b\0\u718e\0\u0198\0\u71c1\0\u71f4\0\u7227\0\u725a\0\u728d"+
    "\0\u72c0\0\u72f3\0\u7326\0\u0198\0\u7359\0\u738c\0\u73bf\0\u73f2"+
    "\0\u6a95\0\u7425\0\u7458\0\u748b\0\u74be\0\u0198\0\u0198\0\u0198"+
    "\0\u74f1\0\u0198\0\u7524\0\u7557\0\u758a\0\u75bd\0\u75f0\0\u7623"+
    "\0\u0198\0\u7656\0\u0198\0\u7689\0\u0198\0\u76bc\0\u76ef\0\u7722"+
    "\0\u7755\0\u7788\0\u77bb\0\u0198\0\u0198\0\u77ee\0\u0198\0\u0198"+
    "\0\u7821\0\u7854\0\u7887\0\u78ba\0\u78ed\0\u7920\0\u7953\0\u0198"+
    "\0\u7986\0\u0198\0\u79b9\0\u79ec\0\u0198\0\u0198\0\u0198\0\u7a1f"+
    "\0\u7a52\0\u7a85\0\u0198\0\u0198\0\u0198\0\u7ab8\0\u7aeb\0\u0198"+
    "\0\u7b1e\0\u75bd\0\u0198\0\u0198\0\u7b51\0\u7b84\0\u7bb7\0\u7bea"+
    "\0\u0198\0\u0198\0\u0198\0\u0198\0\u77ee\0\u7821\0\u7c1d\0\u7c50"+
    "\0\u7c83\0\u0198\0\u7cb6\0\u7ce9\0\u7d1c\0\u7d4f\0\u0198\0\u7d82"+
    "\0\u0198\0\u7db5\0\u0198\0\u7de8\0\u0198\0\u0198\0\u7e1b\0\u0198"+
    "\0\u7e4e\0\u7e81\0\u0198\0\u7eb4\0\u7ee7\0\u0198\0\u7f1a\0\u0198"+
    "\0\u7f4d\0\u0198\0\u0198\0\u7e4e\0\u7f80\0\u0198\0\u0198\0\u7fb3"+
    "\0\u7fe6\0\u0198\0\u0198\0\u8019\0\u804c\0\u807f\0\u80b2\0\u80b2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[824];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\11\1\23\1\24\1\15\1\25\1\26"+
    "\1\15\1\27\1\30\1\11\1\31\1\32\1\33\1\34"+
    "\1\35\1\11\1\36\1\37\1\40\1\41\1\11\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\11\1\51"+
    "\1\52\1\11\1\53\1\11\1\54\1\11\1\55\1\56"+
    "\1\57\1\60\1\61\1\11\1\12\1\13\1\14\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\11\1\70\1\24"+
    "\1\62\1\25\1\71\1\62\1\72\1\30\1\11\1\73"+
    "\1\74\1\33\1\75\1\35\1\11\1\36\1\76\1\40"+
    "\1\41\1\11\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\11\1\51\1\52\1\11\1\53\1\11\1\54"+
    "\1\11\1\55\1\56\1\57\1\60\1\77\1\100\2\101"+
    "\11\100\1\102\46\100\1\103\2\101\13\103\1\104\44\103"+
    "\1\105\2\106\60\105\1\11\1\12\1\13\1\14\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\11\1\70\1\24"+
    "\1\62\1\25\1\71\1\62\1\72\1\30\1\11\1\73"+
    "\1\74\1\33\1\75\1\35\1\11\1\36\1\107\1\40"+
    "\1\41\1\11\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\11\1\51\1\52\1\11\1\53\1\11\1\54"+
    "\1\11\1\55\1\56\1\57\1\60\1\77\1\11\1\12"+
    "\1\13\1\14\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\11\1\70\1\24\1\62\1\25\1\71\1\62\1\72"+
    "\1\30\1\11\1\73\1\74\1\33\1\75\1\35\1\11"+
    "\1\36\1\37\1\40\1\41\1\11\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\11\1\51\1\52\1\11"+
    "\1\53\1\11\1\54\1\11\1\55\1\56\1\57\1\60"+
    "\1\61\2\110\1\0\2\110\1\111\2\110\1\111\1\110"+
    "\2\111\3\110\1\111\1\110\11\111\6\110\6\111\2\110"+
    "\6\111\5\110\65\0\1\13\63\0\1\112\63\0\1\15"+
    "\1\113\7\0\1\15\2\0\1\15\73\0\1\114\6\0"+
    "\1\115\1\116\2\0\1\117\10\0\1\120\12\0\1\121"+
    "\11\0\1\122\2\0\1\123\1\0\1\124\43\0\1\125"+
    "\2\0\1\126\1\0\2\126\3\0\1\127\1\0\1\126"+
    "\1\130\2\126\1\131\1\126\1\132\2\126\6\0\1\133"+
    "\1\134\4\126\2\0\1\135\5\126\21\0\1\136\1\0"+
    "\1\137\3\0\1\140\16\0\1\141\35\0\1\142\1\0"+
    "\1\143\11\0\1\144\7\0\1\145\2\0\1\146\33\0"+
    "\1\147\1\0\1\150\54\0\1\151\15\0\1\152\12\0"+
    "\1\153\1\154\37\0\1\155\5\0\1\156\12\0\1\157"+
    "\4\0\1\160\34\0\1\161\4\0\1\162\16\0\1\163"+
    "\1\0\1\164\22\0\1\165\14\0\1\166\1\0\1\167"+
    "\16\0\1\170\4\0\1\171\31\0\1\172\62\0\1\173"+
    "\2\0\1\174\20\0\1\175\1\176\23\0\1\177\2\0"+
    "\1\200\13\0\1\201\3\0\1\202\10\0\1\203\1\0"+
    "\1\204\24\0\1\205\11\0\1\206\2\0\1\207\20\0"+
    "\1\210\1\0\1\211\22\0\1\212\11\0\1\213\62\0"+
    "\1\214\2\0\1\215\1\216\15\0\1\217\11\0\1\220"+
    "\35\0\1\221\11\0\1\222\27\0\1\223\74\0\1\224"+
    "\112\0\1\225\7\0\1\226\22\0\1\227\2\0\1\230"+
    "\1\231\27\0\1\232\33\0\1\233\61\0\1\234\20\0"+
    "\1\235\65\0\1\236\62\0\1\237\62\0\1\240\12\0"+
    "\1\241\4\0\1\62\1\242\2\0\1\243\1\244\3\0"+
    "\1\62\2\0\1\62\2\0\1\245\4\0\1\246\1\247"+
    "\35\0\1\250\10\0\1\250\2\0\1\250\5\0\1\251"+
    "\2\0\1\114\6\0\1\252\1\116\2\0\1\117\10\0"+
    "\1\120\11\0\1\253\10\0\1\253\2\0\1\253\46\0"+
    "\1\254\1\121\7\0\1\254\1\0\1\122\1\254\1\0"+
    "\1\123\1\0\1\124\42\0\1\255\1\125\2\0\1\126"+
    "\1\0\2\126\1\0\1\255\1\0\1\127\1\255\1\126"+
    "\1\130\2\126\1\131\1\126\1\132\2\126\6\0\1\133"+
    "\1\134\4\126\2\0\1\135\5\126\11\0\1\254\7\0"+
    "\1\136\1\254\1\137\1\0\1\254\1\0\1\140\16\0"+
    "\1\141\25\0\1\254\7\0\1\142\1\254\1\143\1\0"+
    "\1\254\7\0\1\144\7\0\1\145\2\0\1\146\23\0"+
    "\1\254\7\0\1\147\1\254\1\150\1\0\1\254\46\0"+
    "\1\254\10\0\1\254\1\0\1\155\1\254\4\0\1\156"+
    "\12\0\1\157\4\0\1\160\21\0\1\254\10\0\1\254"+
    "\1\0\1\161\1\254\3\0\1\162\16\0\1\163\1\0"+
    "\1\164\21\0\1\250\10\0\1\250\1\0\1\172\1\250"+
    "\47\0\1\256\2\0\1\256\1\0\2\256\3\0\1\256"+
    "\1\0\11\256\6\0\6\256\2\0\6\256\4\0\1\257"+
    "\35\0\1\260\11\0\1\240\12\0\1\241\1\100\2\0"+
    "\11\100\1\0\46\100\14\0\1\261\46\0\1\103\2\0"+
    "\13\103\1\0\44\103\16\0\1\262\126\0\1\257\4\0"+
    "\2\111\2\0\1\111\1\0\2\111\1\0\1\111\1\0"+
    "\14\111\5\0\6\111\2\0\6\111\11\0\1\263\10\0"+
    "\1\263\2\0\1\263\66\0\1\264\23\0\1\265\22\0"+
    "\1\266\37\0\1\267\17\0\1\270\20\0\1\271\100\0"+
    "\1\272\61\0\1\273\41\0\1\274\2\0\1\275\13\0"+
    "\1\276\64\0\1\277\67\0\1\300\56\0\1\301\1\302"+
    "\22\0\1\126\2\0\1\126\1\303\2\126\3\0\1\126"+
    "\1\0\11\126\6\0\6\126\2\0\5\126\1\304\12\0"+
    "\1\126\2\0\1\126\1\303\2\126\3\0\1\126\1\0"+
    "\11\126\6\0\6\126\2\0\6\126\12\0\1\126\2\0"+
    "\1\126\1\303\2\126\3\0\1\126\1\0\11\126\6\0"+
    "\4\126\1\305\1\126\2\0\6\126\12\0\1\126\2\0"+
    "\1\126\1\303\2\126\3\0\1\126\1\0\11\126\6\0"+
    "\1\306\5\126\2\0\6\126\12\0\1\126\2\0\1\126"+
    "\1\303\2\126\3\0\1\126\1\0\1\126\1\307\7\126"+
    "\6\0\6\126\2\0\6\126\12\0\1\310\2\0\1\126"+
    "\1\303\2\126\3\0\1\126\1\0\11\126\6\0\6\126"+
    "\2\0\1\311\5\126\12\0\1\312\2\0\1\126\1\303"+
    "\2\126\3\0\1\313\1\0\11\126\6\0\6\126\2\0"+
    "\6\126\12\0\1\314\2\0\1\126\1\303\2\126\3\0"+
    "\1\126\1\0\11\126\6\0\6\126\2\0\1\315\5\126"+
    "\12\0\1\126\2\0\1\126\1\303\2\126\3\0\1\126"+
    "\1\0\11\126\6\0\4\126\1\316\1\126\2\0\6\126"+
    "\22\0\1\317\62\0\1\320\107\0\1\321\37\0\1\322"+
    "\2\0\1\323\55\0\1\324\2\0\1\324\57\0\1\325"+
    "\2\0\1\325\47\0\1\326\42\0\1\327\53\0\1\330"+
    "\71\0\1\331\16\0\2\332\2\0\1\332\2\0\1\332"+
    "\1\0\1\332\2\0\1\332\1\0\1\332\2\0\1\332"+
    "\14\0\1\332\24\0\2\333\2\0\1\333\2\0\1\333"+
    "\1\0\1\333\2\0\1\333\1\0\1\333\2\0\1\333"+
    "\14\0\1\333\71\0\1\334\37\0\1\335\75\0\1\336"+
    "\63\0\1\337\5\0\1\340\40\0\1\341\12\0\1\342"+
    "\40\0\1\343\22\0\1\344\5\0\1\345\4\0\1\346"+
    "\35\0\1\347\76\0\1\350\57\0\1\351\61\0\1\352"+
    "\72\0\1\353\53\0\1\354\13\0\1\355\56\0\1\356"+
    "\32\0\1\357\54\0\1\360\66\0\1\361\2\0\1\362"+
    "\110\0\1\363\36\0\1\364\1\0\1\365\44\0\1\366"+
    "\32\0\1\367\1\370\31\0\1\371\30\0\1\372\23\0"+
    "\1\373\11\0\1\374\4\0\1\375\76\0\1\376\1\377"+
    "\2\0\1\u0100\23\0\1\u0101\102\0\1\u0102\12\0\1\u0103"+
    "\66\0\1\u0104\42\0\1\u0105\76\0\1\u0106\53\0\1\u0107"+
    "\71\0\1\u0108\67\0\1\u0109\56\0\1\u010a\3\0\1\u010b"+
    "\56\0\1\u010c\61\0\1\u010d\51\0\1\u010e\73\0\1\u010f"+
    "\4\0\1\u0110\43\0\1\u0111\12\0\1\u0112\43\0\1\u0113"+
    "\57\0\1\u0114\105\0\1\u0115\25\0\1\u0116\101\0\1\u0117"+
    "\1\u0118\57\0\1\u0119\3\0\1\u011a\13\0\1\u011b\5\0"+
    "\1\u011c\3\0\1\u011d\16\0\1\u011e\116\0\1\u011f\23\0"+
    "\1\u0120\105\0\1\u0121\72\0\1\u0122\27\0\1\u0123\16\0"+
    "\1\u0124\62\0\1\u0125\42\0\1\u0126\1\0\2\u0127\5\0"+
    "\1\u0126\2\0\1\u0126\46\0\1\u0128\1\0\2\u0129\5\0"+
    "\1\u0128\2\0\1\u0128\42\0\4\u012a\1\255\1\u012b\2\u012a"+
    "\1\243\1\u012a\2\0\1\u012a\1\255\1\u012a\1\0\1\255"+
    "\11\0\6\u012a\6\0\2\u012a\6\0\5\u012a\4\0\1\250"+
    "\4\0\1\u012c\3\0\1\250\2\0\1\250\46\0\1\250"+
    "\10\0\1\250\2\0\1\250\46\0\1\250\3\0\1\266"+
    "\4\0\1\250\2\0\1\250\27\0\1\267\16\0\1\253"+
    "\10\0\1\253\2\0\1\253\7\0\1\246\36\0\1\254"+
    "\4\0\1\u012d\3\0\1\254\2\0\1\254\46\0\1\255"+
    "\1\u012b\2\0\1\243\4\0\1\255\2\0\1\255\51\0"+
    "\1\u012e\24\0\1\u012f\1\u0130\31\0\1\263\4\0\1\u0131"+
    "\3\0\1\263\2\0\1\263\70\0\1\u0132\21\0\1\u0133"+
    "\17\0\1\u0134\65\0\1\u0135\2\0\1\u0136\10\0\1\u0137"+
    "\1\u0138\1\u0139\1\0\1\u013a\14\0\1\u013b\1\0\1\u013c"+
    "\1\u013d\3\0\1\u013e\52\0\1\u013f\63\0\1\u0140\22\0"+
    "\1\u0141\124\0\1\u0142\37\0\1\u0143\77\0\1\u0144\43\0"+
    "\1\u0145\64\0\1\u0146\51\0\1\u0147\71\0\1\u0148\45\0"+
    "\1\u0149\62\0\1\u014a\62\0\1\126\2\0\1\126\1\u014b"+
    "\2\126\3\0\1\126\1\0\11\126\6\0\6\126\2\0"+
    "\1\126\1\u014c\4\126\12\0\1\126\2\0\1\126\1\u014d"+
    "\2\126\3\0\1\126\1\0\11\126\6\0\6\126\2\0"+
    "\6\126\12\0\1\126\2\0\1\u014e\1\303\2\126\3\0"+
    "\1\126\1\0\11\126\6\0\6\126\2\0\6\126\12\0"+
    "\1\126\2\0\1\126\1\303\2\126\3\0\1\126\1\0"+
    "\11\126\6\0\1\126\1\u014f\4\126\2\0\6\126\12\0"+
    "\1\126\2\0\1\126\1\u0150\2\126\3\0\1\126\1\0"+
    "\11\126\6\0\6\126\2\0\6\126\12\0\1\126\2\0"+
    "\1\126\1\u0151\2\126\3\0\1\126\1\0\11\126\6\0"+
    "\6\126\2\0\6\126\12\0\1\126\2\0\1\126\1\u0152"+
    "\2\126\3\0\1\126\1\0\11\126\6\0\6\126\2\0"+
    "\5\126\1\u0153\12\0\1\126\2\0\1\126\1\303\2\126"+
    "\3\0\1\126\1\0\11\126\6\0\6\126\2\0\1\u0154"+
    "\5\126\12\0\1\126\2\0\1\126\1\u0155\2\126\3\0"+
    "\1\126\1\0\11\126\6\0\6\126\2\0\6\126\12\0"+
    "\1\126\2\0\1\126\1\u0156\2\126\3\0\1\126\1\0"+
    "\11\126\6\0\6\126\2\0\6\126\12\0\1\126\2\0"+
    "\1\126\1\303\2\126\3\0\1\126\1\0\11\126\6\0"+
    "\3\126\1\u0157\2\126\2\0\6\126\21\0\1\u0158\1\317"+
    "\62\0\1\320\1\u0158\116\0\1\u0159\52\0\1\u015a\60\0"+
    "\1\u015b\36\0\1\u015c\1\324\2\0\1\324\57\0\1\325"+
    "\1\u015c\1\0\1\325\102\0\1\u015d\3\0\1\u015e\42\0"+
    "\1\u015f\111\0\1\u0160\13\0\2\332\2\0\1\332\2\0"+
    "\1\332\1\u0161\1\332\2\0\1\332\1\0\1\332\2\0"+
    "\1\332\14\0\1\332\24\0\2\333\2\0\1\333\2\0"+
    "\1\333\1\0\1\333\1\u0161\1\0\1\333\1\0\1\333"+
    "\2\0\1\333\14\0\1\333\42\0\1\u0162\64\0\1\u0163"+
    "\55\0\1\u0164\50\0\1\u0165\101\0\1\u0166\106\0\1\u0167"+
    "\17\0\1\u0168\120\0\1\u0169\60\0\1\u016a\26\0\1\u016b"+
    "\36\0\1\u016c\61\0\1\u016d\60\0\1\u016e\43\0\1\u016f"+
    "\22\0\1\u0170\22\0\1\u0171\117\0\1\u0172\67\0\1\u0173"+
    "\20\0\1\u0174\120\0\1\u0175\24\0\1\u0176\62\0\1\u0177"+
    "\121\0\1\u0178\46\0\1\u0179\102\0\1\u017a\31\0\1\u017b"+
    "\103\0\1\u017c\46\0\1\u017d\105\0\1\u017e\41\0\1\u017f"+
    "\56\0\1\u0180\101\0\1\u0181\26\0\1\u0182\117\0\1\u0183"+
    "\47\0\1\u0184\12\0\1\u0185\60\0\1\u0186\10\0\1\u0187"+
    "\21\0\1\u0188\76\0\1\u0189\1\0\1\u018a\100\0\1\u018b"+
    "\43\0\1\203\35\0\1\u0102\1\u018c\1\u018d\60\u0102\42\0"+
    "\1\u018e\42\0\1\u018f\100\0\1\u018a\32\0\1\u0190\122\0"+
    "\1\u0191\17\0\1\u0192\62\0\1\u0193\116\0\1\u0194\34\0"+
    "\1\u0195\116\0\1\u0196\62\0\1\u0197\37\0\1\u0198\106\0"+
    "\1\u0199\42\0\1\u019a\14\0\1\u019b\22\0\1\u019c\116\0"+
    "\1\u019d\65\0\1\u019e\44\0\1\u019f\75\0\1\u01a0\71\0"+
    "\1\u01a1\31\0\1\u01a2\53\0\1\u01a3\30\0\1\u01a4\64\0"+
    "\1\u01a5\60\0\1\u01a6\1\0\1\u01a7\3\0\1\u01a8\56\0"+
    "\1\u01a9\43\0\1\u01aa\101\0\1\u01ab\46\0\1\u01ac\73\0"+
    "\1\u01ad\27\0\1\u01ae\65\0\1\u01af\116\0\1\u01b0\57\0"+
    "\1\u01b1\71\0\1\u01b2\16\0\1\u0126\4\0\1\u0131\3\0"+
    "\1\u0126\2\0\1\u0126\46\0\1\u01b3\10\0\1\u01b3\2\0"+
    "\1\u01b3\46\0\1\u0128\10\0\1\u0128\2\0\1\u0128\46\0"+
    "\1\u01b3\1\0\2\u0127\5\0\1\u01b3\2\0\1\u01b3\46\0"+
    "\1\u01b4\10\0\1\u01b4\2\0\1\u01b4\46\0\1\u01b5\10\0"+
    "\1\u01b5\2\0\1\u01b5\47\0\1\u01b6\2\0\1\u01b6\1\0"+
    "\2\u01b6\3\0\1\u01b6\1\0\11\u01b6\6\0\6\u01b6\2\0"+
    "\6\u01b6\12\0\1\256\2\0\1\256\1\0\2\256\3\0"+
    "\1\256\1\0\11\256\6\0\6\256\2\0\6\256\6\0"+
    "\1\u01b7\1\u01b8\31\0\1\u01b8\1\0\1\u01b8\30\0\1\u01b9"+
    "\10\0\1\u01b9\2\0\1\u01b9\112\0\1\u01ba\56\0\1\u01bb"+
    "\35\0\1\u01bc\104\0\1\u01bd\46\0\1\u01be\12\0\1\u01bf"+
    "\41\0\1\u01c0\4\0\1\u01c1\16\0\1\u01c2\24\0\1\u01c3"+
    "\35\0\1\u01c4\63\0\1\u01c5\35\0\1\u01c6\116\0\1\u01c7"+
    "\32\0\1\u01c8\112\0\1\u01c9\14\0\1\u01ca\101\0\1\u01cb"+
    "\27\0\1\u01cc\57\0\1\u01cd\52\0\1\u01ce\64\0\1\u01cf"+
    "\64\0\1\u01d0\56\0\1\u01d1\63\0\1\u01d2\60\0\1\u01d3"+
    "\27\0\1\126\2\0\1\126\1\u01d4\2\126\3\0\1\126"+
    "\1\0\11\126\6\0\6\126\2\0\6\126\12\0\1\126"+
    "\2\0\1\126\1\u01d5\2\126\3\0\1\126\1\0\11\126"+
    "\6\0\6\126\2\0\6\126\12\0\1\126\2\0\1\126"+
    "\1\303\2\126\3\0\1\126\1\0\5\126\1\u01d6\3\126"+
    "\6\0\6\126\2\0\6\126\12\0\1\126\2\0\1\126"+
    "\1\303\2\126\3\0\1\126\1\0\11\126\6\0\6\126"+
    "\2\0\1\126\1\u01d7\4\126\12\0\1\126\2\0\1\126"+
    "\1\u01d8\2\126\3\0\1\126\1\0\11\126\6\0\6\126"+
    "\2\0\6\126\12\0\1\u01d9\2\0\1\126\1\303\2\126"+
    "\3\0\1\126\1\0\11\126\6\0\6\126\2\0\6\126"+
    "\33\0\1\u01da\106\0\1\u01db\62\0\1\u01dc\15\0\1\u01dd"+
    "\77\0\1\u01de\57\0\1\u01df\103\0\1\u01e0\51\0\1\u01e1"+
    "\75\0\1\u01e2\46\0\1\u01e3\53\0\1\u01e4\65\0\1\u01e5"+
    "\100\0\1\u01e6\72\0\1\u01e7\55\0\1\u01e8\46\0\1\u01e9"+
    "\10\0\1\u01ea\3\0\1\u01eb\42\0\1\u01ec\62\0\1\u01ed"+
    "\62\0\1\u01ee\77\0\1\u01ef\43\0\1\u01f0\24\0\1\u01f1"+
    "\62\0\1\u01f2\63\0\1\u01f3\54\0\1\u01f4\25\0\1\u01f5"+
    "\124\0\1\u01f6\32\0\1\u01f7\106\0\1\u01f8\3\0\1\u01f9"+
    "\63\0\1\u01fa\62\0\1\u01fb\17\0\1\u01fc\122\0\1\u01fd"+
    "\41\0\1\u01fe\62\0\1\u01ff\102\0\1\u0200\23\0\1\u0201"+
    "\125\0\1\u0202\34\0\1\u0203\64\0\1\u0189\63\0\1\u0102"+
    "\42\0\1\u0102\74\0\1\u0204\45\0\1\u018d\121\0\1\u0205"+
    "\50\0\1\u0206\40\0\1\u0189\121\0\1\u0207\26\0\1\u0208"+
    "\30\0\1\u0209\5\0\1\u020a\37\0\1\u020b\43\0\1\u020c"+
    "\117\0\1\u020d\42\0\1\u020e\1\0\1\u020f\77\0\1\u0210"+
    "\40\0\1\u0211\65\0\1\u0212\45\0\1\u0213\62\0\1\u0214"+
    "\124\0\1\u0215\57\0\1\u0216\65\0\1\u0217\4\0\1\u0218"+
    "\11\0\1\u0219\120\0\1\u021a\70\0\1\u021b\57\0\1\u021c"+
    "\62\0\1\u021d\56\0\1\u021e\63\0\1\u021f\26\0\1\u0220"+
    "\124\0\1\u0221\20\0\1\u0222\62\0\1\u0223\62\0\1\u0224"+
    "\61\0\1\u01b4\1\u012d\7\0\1\u01b4\2\0\1\u01b4\76\0"+
    "\1\u012f\1\u0130\27\0\1\u01b8\127\0\1\u0225\53\0\1\u0226"+
    "\41\0\1\u0227\113\0\1\u0228\56\0\1\u0229\57\0\1\u022a"+
    "\61\0\1\u022b\63\0\1\u022c\34\0\1\u022d\66\0\1\u022e"+
    "\53\0\1\u022f\102\0\1\u0230\37\0\1\u0231\115\0\1\u0232"+
    "\47\0\1\u0233\60\0\1\u0234\61\0\1\u0235\57\0\1\u0236"+
    "\104\0\1\u0237\70\0\1\u0238\20\0\1\u0239\125\0\1\u023a"+
    "\40\0\1\u023b\41\0\1\u023c\2\0\1\126\1\303\2\126"+
    "\3\0\1\126\1\0\11\126\6\0\6\126\2\0\6\126"+
    "\12\0\1\126\2\0\1\126\1\u023d\2\126\3\0\1\126"+
    "\1\0\11\126\6\0\6\126\2\0\6\126\12\0\1\126"+
    "\2\0\1\126\1\u023e\2\126\3\0\1\126\1\0\11\126"+
    "\6\0\6\126\2\0\6\126\35\0\1\u023f\42\0\1\u0240"+
    "\121\0\1\u0241\23\0\1\u0242\122\0\1\u0243\52\0\1\u0244"+
    "\64\0\1\u0245\60\0\1\u0246\44\0\1\u0247\66\0\1\u0248"+
    "\74\0\1\u0249\72\0\1\u024a\41\0\1\u024b\43\0\1\u024c"+
    "\57\0\1\u024d\125\0\1\u024e\37\0\1\u024f\75\0\1\u0250"+
    "\66\0\1\u0251\60\0\1\u0252\61\0\1\u0253\71\0\1\u0254"+
    "\36\0\1\u0255\106\0\1\u0256\52\0\1\u0257\65\0\1\u0258"+
    "\45\0\1\u0259\41\0\1\u025a\101\0\1\u025b\43\0\1\u025c"+
    "\117\0\1\u025d\46\0\1\u025e\56\0\1\u025f\50\0\1\u0260"+
    "\122\0\1\u0261\56\0\1\u0102\61\0\1\u0262\64\0\1\u0263"+
    "\22\0\1\u0264\124\0\1\u0265\37\0\1\u0266\63\0\1\u0267"+
    "\101\0\1\u0268\40\0\1\u0269\64\0\1\u026a\76\0\1\u026b"+
    "\27\0\1\u026c\115\0\1\u026d\64\0\1\u026e\65\0\1\u026f"+
    "\61\0\1\u0270\22\0\1\u0271\10\0\1\u0271\2\0\1\u0271"+
    "\112\0\1\u0272\40\0\1\u0273\74\0\1\u0274\32\0\1\u0275"+
    "\57\0\1\u0276\125\0\1\u0277\61\0\1\u0278\35\0\1\u0279"+
    "\102\0\1\u027a\25\0\1\u027b\77\0\1\u027c\45\0\1\u027d"+
    "\117\0\1\u027e\25\0\1\u027f\121\0\1\u0280\45\0\1\u0281"+
    "\76\0\1\u0282\24\0\1\u0283\121\0\1\u0284\66\0\1\u0285"+
    "\17\0\1\u0286\116\0\1\u0287\63\0\1\u0288\70\0\1\u0289"+
    "\15\0\1\u028a\24\0\1\u028b\101\0\1\u028c\37\0\1\u028d"+
    "\43\0\1\126\2\0\1\126\1\u028e\2\126\3\0\1\126"+
    "\1\0\11\126\6\0\6\126\2\0\6\126\27\0\1\u028f"+
    "\62\0\1\u0290\107\0\1\u0291\32\0\1\u0292\65\0\1\u0293"+
    "\45\0\1\u0294\122\0\1\u0295\65\0\1\u0296\61\0\1\u0297"+
    "\62\0\1\u0298\62\0\1\u0299\63\0\1\u029a\17\0\1\u029b"+
    "\121\0\1\u029c\40\0\1\u029d\66\0\1\u029e\41\0\1\u029f"+
    "\101\0\1\u02a0\106\0\1\u02a1\31\0\1\u02a2\105\0\1\u02a3"+
    "\62\0\1\u02a4\5\0\1\u02a5\62\0\1\u02a6\61\0\1\u02a7"+
    "\57\0\1\u02a8\35\0\1\u02a9\113\0\1\u02aa\36\0\1\u02ab"+
    "\103\0\1\u02ac\60\0\1\u02ad\24\0\1\u02ae\65\0\1\u018a"+
    "\74\0\1\u0102\102\0\1\u02af\46\0\1\u02b0\107\0\1\u02b1"+
    "\56\0\1\u02b2\54\0\1\u02b3\61\0\1\u02b4\65\0\1\u02b5"+
    "\50\0\1\u02b6\101\0\1\u02b7\34\0\1\u02b8\64\0\1\u02b9"+
    "\62\0\1\u02ba\77\0\1\u02bb\73\0\1\u02bc\54\0\1\u02bd"+
    "\57\0\1\u02be\71\0\1\u02bf\54\0\1\u02c0\37\0\1\u02c1"+
    "\107\0\1\u02c2\57\0\1\u02c3\26\0\1\u02c4\77\0\1\u02c5"+
    "\104\0\1\u02c6\23\0\1\u02c7\77\0\1\u02c8\44\0\1\u02c9"+
    "\10\0\1\u02c9\2\0\1\u02c9\106\0\1\u02ca\35\0\1\u02cb"+
    "\105\0\1\u02cc\70\0\1\u02cd\56\0\1\u02ce\57\0\1\u02cf"+
    "\70\0\1\u02d0\20\0\1\u02d1\62\0\1\u02d2\14\0\1\u02d3"+
    "\63\0\1\u02d4\53\0\1\u02d5\1\0\1\u02d5\27\0\1\u029b"+
    "\17\0\1\u02d6\121\0\1\u02d7\44\0\1\u02d8\106\0\1\u02d9"+
    "\17\0\1\u02da\115\0\1\u02db\44\0\1\u02dc\45\0\1\u02dd"+
    "\101\0\1\u02de\62\0\1\u02df\76\0\1\u02e0\27\0\1\u02e1"+
    "\74\0\1\u02e2\107\0\1\u02e3\65\0\1\u02e4\63\0\1\u02e5"+
    "\15\0\1\u02e6\105\0\1\u02e7\41\0\1\u02e8\60\0\1\u02e9"+
    "\64\0\1\u02ea\125\0\1\u02eb\62\0\1\u02ec\63\0\1\u02ed"+
    "\21\0\1\u02ee\77\0\1\u02ef\76\0\1\u02f0\45\0\1\u02f1"+
    "\106\0\1\u02f2\55\0\1\u02f3\41\0\1\u02f4\45\0\1\u02f5"+
    "\116\0\1\u02f6\26\0\1\u02f7\115\0\1\u02f8\72\0\1\u02f9"+
    "\17\0\1\u02fa\115\0\1\u02fb\27\0\1\u02fc\77\0\1\u02fd"+
    "\100\0\1\u02fe\35\0\1\u02ff\116\0\1\u0300\13\0\1\u02d5"+
    "\2\0\11\u02d5\1\u0301\1\u02d5\1\u0301\44\u02d5\4\0\1\u0302"+
    "\10\0\1\u0302\2\0\1\u0302\47\0\1\u0303\117\0\1\u0304"+
    "\30\0\1\u0305\100\0\1\u0306\56\0\1\u0307\100\0\1\u0308"+
    "\71\0\1\u0309\57\0\1\u030a\56\0\1\u030b\27\0\1\u030c"+
    "\61\0\1\u030d\10\0\1\u030d\2\0\1\u030d\46\0\1\u030e"+
    "\10\0\1\u030e\2\0\1\u030e\106\0\1\u030f\66\0\1\u0310"+
    "\17\0\1\u0311\62\0\1\u0312\77\0\1\u0313\62\0\1\u0314"+
    "\57\0\1\u0315\113\0\1\u0316\57\0\1\u0317\57\0\1\u0318"+
    "\25\0\1\u0319\117\0\1\u031a\70\0\1\u031b\53\0\1\u031c"+
    "\21\0\1\u02d5\1\u018c\1\u018d\11\u02d5\1\u0301\1\u02d5\1\u0301"+
    "\44\u02d5\47\0\1\u031d\20\0\1\u031e\116\0\1\u031f\26\0"+
    "\1\u0320\60\0\1\u0321\64\0\1\u0322\124\0\1\u0323\63\0"+
    "\1\u0324\54\0\1\u0325\60\0\1\u0326\46\0\1\u0327\43\0"+
    "\1\u0328\101\0\1\u0329\43\0\1\u032a\124\0\1\u032b\17\0"+
    "\1\u032c\10\0\1\u032c\2\0\1\u032c\52\0\1\u032d\74\0"+
    "\1\u032e\45\0\1\u032f\115\0\1\u0330\50\0\1\u0331\103\0"+
    "\1\u0332\20\0\1\u0333\101\0\1\u0334\55\0\1\u0335\103\0"+
    "\1\u0336\25\0\1\u0337\63\0\1\u0338\10\0\1\u0338\2\0"+
    "\1\u0338\42\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[32997];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\11\1\1\1\11\3\1\2\11\3\1\2\11"+
    "\10\1\4\11\13\1\1\11\2\1\1\11\20\1\1\11"+
    "\3\1\2\11\1\1\1\11\1\1\1\11\7\0\1\1"+
    "\33\0\1\11\1\1\12\0\1\1\32\0\3\11\6\0"+
    "\4\11\2\0\1\2\3\11\5\0\1\1\1\0\4\11"+
    "\3\0\1\1\14\0\1\11\25\0\1\11\74\0\1\11"+
    "\17\0\1\1\1\0\1\1\1\0\1\15\5\0\1\2"+
    "\2\0\1\11\10\0\1\11\4\0\1\1\1\11\5\0"+
    "\1\11\2\0\1\11\1\0\1\11\2\0\3\11\2\0"+
    "\2\11\1\0\1\11\3\0\1\11\1\1\2\0\2\11"+
    "\17\0\1\1\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\0\1\11\2\0\1\11\3\0\1\11\11\0\1\1"+
    "\1\11\4\0\1\11\1\0\1\1\1\0\2\11\4\0"+
    "\2\11\5\0\2\1\3\0\1\11\4\0\2\11\4\0"+
    "\3\1\1\0\1\5\1\15\1\1\2\0\1\11\1\0"+
    "\1\11\12\0\1\11\12\0\2\11\2\0\1\11\2\0"+
    "\1\1\13\0\1\11\11\0\2\11\3\0\1\11\2\0"+
    "\1\11\2\0\1\11\5\0\1\11\7\0\1\11\10\0"+
    "\3\11\1\0\1\11\3\0\1\11\5\0\3\11\1\1"+
    "\1\11\15\0\1\11\4\0\1\11\1\1\3\0\2\11"+
    "\2\0\1\11\14\0\1\11\4\0\1\11\1\1\1\0"+
    "\1\1\6\0\1\11\7\0\1\11\7\0\1\11\3\0"+
    "\1\1\1\11\1\0\5\11\4\0\1\11\5\0\1\11"+
    "\5\0\1\11\2\0\1\11\1\0\1\11\2\0\1\11"+
    "\5\0\3\11\2\0\1\1\2\0\1\11\7\0\2\11"+
    "\3\0\1\11\1\0\1\11\2\0\2\11\1\1\2\0"+
    "\1\1\4\0\1\11\1\1\7\0\1\11\4\0\1\1"+
    "\4\0\3\11\1\0\1\11\6\0\1\11\1\0\1\11"+
    "\1\0\1\11\6\0\2\11\1\0\2\11\7\0\1\11"+
    "\1\0\1\11\2\0\3\11\3\0\3\11\2\0\1\11"+
    "\1\0\1\1\2\11\4\0\4\11\3\1\2\0\1\11"+
    "\4\0\1\11\1\0\1\11\1\0\1\11\1\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\0\1\11"+
    "\1\0\2\11\1\1\1\0\2\11\2\0\2\11\2\0"+
    "\1\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[824];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	private FixedFormLexerPrepass prepass;
    	
	private TokenFactory tokenFactory;
    
    public FixedFormLexerPhase1(InputStream in, FixedFormLexerPrepass _prepass, TokenFactory tokenFactory) {
		this(new LineAppendingInputStream(in));
		this.prepass=_prepass;
		this.tokenFactory = tokenFactory;
    }
    
    //unset start of line state
    private void unsetSOL() {
    	if (yystate()==YYINITIAL) yybegin(YYSTANDARD); 
    }
    
    public int getLine() {
      return prepass.getLine(yychar);
    }
    public int getCol() {
      return prepass.getColumn(yychar);
    }
    
    protected IFile lastTokenFile = null;
    protected int lastTokenLine = 1, lastTokenCol = 1, lastTokenFileOffset = 0, lastTokenStreamOffset = 0, lastTokenLength = 0;
    
	private IToken token(Terminal terminal)
	{
		lastTokenLine = prepass.getLine(yychar)+1;
		lastTokenCol = prepass.getColumn(yychar)+1;
		lastTokenFileOffset = prepass.getOffset(yychar);
		lastTokenStreamOffset = prepass.getOffset(yychar);
		lastTokenLength = prepass.getOffset(yychar+yylength()-1)-prepass.getOffset(yychar)+1;
		return tokenFactory.createToken(terminal,
		                 "",
		                 terminal == Terminal.T_SCON || terminal == Terminal.T_HCON
		                     ? stringBuffer.toString()
		                     : yytext(),
		                 "");
	}

	/*
	private IToken token(Terminal terminal)
	{
		IToken t = new Token();
		t.setTerminal(terminal);
		t.setFilename(this.filename);
		t.setFileOffset(prepass.getOffset(yychar));
		t.setStreamOffset(prepass.getOffset(yychar));
		t.setLength(prepass.getOffset(yychar+yylength()-1)-prepass.getOffset(yychar)+1);
		t.setText(terminal == Terminal.T_SCON || terminal == Terminal.T_HCON
		          ? stringBuffer.toString()
		          : yytext());
		t.setStartLine(prepass.getLine(yychar)+1);
		t.setStartCol(prepass.getColumn(yychar)+1);
		t.setEndLine(prepass.getLine(yychar+yylength()-1)+1);
		t.setEndCol(prepass.getColumn(yychar+yylength()-1)+1);

		return t;
	}
	*/

	private StringBuffer stringBuffer = null;
	private int hollerithLength = 0;

	private boolean wantEos = false;
	
	private String filename = "<stdin>";
    
	public FixedFormLexerPhase1(java.io.InputStream in, FixedFormLexerPrepass _prepass, String filename, TokenFactory tokenFactory)
	{
	    this(in, _prepass, tokenFactory);
	    this.filename = filename;
	}
	
    public String getFilename()
    {
        return filename;
    }
    
    public TokenFactory getTokenFactory()
    {
    	return tokenFactory;
    }

    public int getLastTokenLine()
    {
        return lastTokenLine;
    }

    public int getLastTokenCol()
    {
        return lastTokenCol;
    }
    
    public IFile getLastTokenFile()
    {
        return lastTokenFile;
    }
    
    public int getLastTokenFileOffset()
    {
        return lastTokenFileOffset;
    }
    
    public int getLastTokenStreamOffset()
    {
        return lastTokenStreamOffset;
    }
    
    public int getLastTokenLength()
    {
        return lastTokenLength;
    }

//	private List/*<NonTreeToken>*/ nonTreeTokens = new LinkedList();
//    public List/*<NonTreeToken>*/ getNonTreeTokens()
//    {
//    	return nonTreeTokens;
//    }
//
	private void storeNonTreeToken()
	{
//		nonTreeTokens.add(new NonTreeToken(this.filename,
//				prepass.getOffset(yychar),   // int offset
//				prepass.getLine(yychar)+1,   // int row
//				prepass.getColumn(yychar)+1, // int col
//		        yytext()));
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  FixedFormLexerPhase1(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  FixedFormLexerPhase1(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 182) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IToken yylex() throws java.io.IOException, Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;
    int zzPushbackPosL = zzPushbackPos = -1;
    boolean zzWasPushback;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;

      zzWasPushback = false;

      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            zzPushbackPos = zzPushbackPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            zzPushbackPosL = zzPushbackPos;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 2) == 2 )
            zzPushbackPosL = zzCurrentPosL;

          if ( (zzAttributes & 1) == 1 ) {
            zzWasPushback = (zzAttributes & 4) == 4;
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;
      if (zzWasPushback)
        zzMarkedPos = zzPushbackPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 47: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_END);
          }
        case 200: break;
        case 98: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FORMEQ);
          }
        case 201: break;
        case 174: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_BLOCKDATA);
          }
        case 202: break;
        case 71: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SAVE);
          }
        case 203: break;
        case 146: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_POINTER);
          }
        case 204: break;
        case 20: 
          { throw new Exception("Lexer Error (line " + (getLine()+1) + ", col " + (getCol()+1) + "): String literal spans multiple lines without continuation");
          }
        case 205: break;
        case 86: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_THEN);
          }
        case 206: break;
        case 108: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_READEQ);
          }
        case 207: break;
        case 76: 
          { storeNonTreeToken();
          }
        case 208: break;
        case 137: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DIRECTEQ);
          }
        case 209: break;
        case 77: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NONE);
          }
        case 210: break;
        case 177: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_INTRINSIC);
          }
        case 211: break;
        case 55: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ERREQ);
          }
        case 212: break;
        case 50: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_USE);
          }
        case 213: break;
        case 94: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_AND);
          }
        case 214: break;
        case 125: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PUBLIC);
          }
        case 215: break;
        case 10: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_LPAREN);
          }
        case 216: break;
        case 22: 
          { stringBuffer.append('\"');
								  yybegin(YYSTANDARD);
								  wantEos = true;
								  return token(Terminal.T_SCON);
          }
        case 217: break;
        case 24: 
          { throw new Exception("Lexer Error (line " + (getLine()+1) + ", col " + (getCol()+1) + "): Hollerith literal spans multiple lines without continuation");
          }
        case 218: break;
        case 152: 
          { wantEos = true; unsetSOL();          ; return token(Terminal.T_COMPLEX);
          }
        case 219: break;
        case 136: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DEFAULT);
          }
        case 220: break;
        case 42: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_RCON);
          }
        case 221: break;
        case 195: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDBLOCKDATA);
          }
        case 222: break;
        case 23: 
          { hollerithLength--;
									stringBuffer.append(yytext());
									if (hollerithLength==0) {
									  	yybegin(YYSTANDARD);
									  	wantEos = true;
									  	return token(Terminal.T_HCON);
									 }
          }
        case 223: break;
        case 28: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DO);
          }
        case 224: break;
        case 96: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_BLOCK);
          }
        case 225: break;
        case 18: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_SLASH);
          }
        case 226: break;
        case 121: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_INTENT);
          }
        case 227: break;
        case 3: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_ASTERISK);
          }
        case 228: break;
        case 156: 
          { wantEos = true; yybegin(OPERATORorFORMAT);  return token(Terminal.T_OPERATOR);
          }
        case 229: break;
        case 141: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ACTIONEQ);
          }
        case 230: break;
        case 82: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CALL);
          }
        case 231: break;
        case 161: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FUNCTION);
          }
        case 232: break;
        case 175: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_IOLENGTHEQ);
          }
        case 233: break;
        case 8: 
          { stringBuffer = new StringBuffer();
								  stringBuffer.append('\"');
								  yybegin(DBLQUOTED);
          }
        case 234: break;
        case 11: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_COMMA);
          }
        case 235: break;
        case 59: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_GE);
          }
        case 236: break;
        case 166: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CONTINUE);
          }
        case 237: break;
        case 17: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PERCENT);
          }
        case 238: break;
        case 46: 
          { stringBuffer.append('\"');
          }
        case 239: break;
        case 80: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_LENEQ);
          }
        case 240: break;
        case 4: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_ICON);
          }
        case 241: break;
        case 182: 
          { wantEos = true; unsetSOL();          ; return token(Terminal.T_CHARACTER);
          }
        case 242: break;
        case 92: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENTRY);
          }
        case 243: break;
        case 191: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDFUNCTION);
          }
        case 244: break;
        case 70: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FMTEQ);
          }
        case 245: break;
        case 151: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_LOGICAL);
          }
        case 246: break;
        case 5: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_PLUS);
          }
        case 247: break;
        case 160: 
          { wantEos = true; yybegin(IMPLICIT); return token(Terminal.T_IMPLICIT);
          }
        case 248: break;
        case 81: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CASE);
          }
        case 249: break;
        case 69: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FILE);
          }
        case 250: break;
        case 37: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_SLASHEQ);
          }
        case 251: break;
        case 116: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DELIMEQ);
          }
        case 252: break;
        case 62: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_LE);
          }
        case 253: break;
        case 148: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PRIVATE);
          }
        case 254: break;
        case 45: 
          { stringBuffer.append('\'');
          }
        case 255: break;
        case 112: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_WHILE);
          }
        case 256: break;
        case 58: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_OR);
          }
        case 257: break;
        case 171: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ELSEWHERE);
          }
        case 258: break;
        case 25: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_UNEXPECTED_CHARACTER);
          }
        case 259: break;
        case 118: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_NEQV);
          }
        case 260: break;
        case 117: 
          { wantEos = true; unsetSOL();          ; return token(Terminal.T_DOUBLE);
          }
        case 261: break;
        case 109: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_RECLEQ);
          }
        case 262: break;
        case 147: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PROGRAM);
          }
        case 263: break;
        case 38: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_SLASHSLASH);
          }
        case 264: break;
        case 143: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_INTEGER);
          }
        case 265: break;
        case 107: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_UNITEQ);
          }
        case 266: break;
        case 79: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NMLEQ);
          }
        case 267: break;
        case 13: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_EQUALS);
          }
        case 268: break;
        case 179: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PARAMETER);
          }
        case 269: break;
        case 184: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDPROGRAM);
          }
        case 270: break;
        case 190: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_READWRITEEQ);
          }
        case 271: break;
        case 139: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_OPENEDEQ);
          }
        case 272: break;
        case 27: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_POW);
          }
        case 273: break;
        case 100: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SIZEEQ);
          }
        case 274: break;
        case 64: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_BCON);
          }
        case 275: break;
        case 169: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDMODULE);
          }
        case 276: break;
        case 168: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDSELECT);
          }
        case 277: break;
        case 39: 
          { stringBuffer = new StringBuffer();
								  String text = yytext();
								  stringBuffer.append(text);								  
								  hollerithLength=Integer.parseInt(text.substring(0,text.length()-1));
								  if (hollerithLength==0) throw new Exception("Lexer Error (line " + (getLine()+1) + ", col " + (getCol()+1) + "): Invalid length of hollerith literal: 0"); 
								  yybegin(HOLLERITH);
          }
        case 278: break;
        case 16: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_LESSTHAN);
          }
        case 279: break;
        case 163: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NEXTRECEQ);
          }
        case 280: break;
        case 159: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ALLOCATE);
          }
        case 281: break;
        case 74: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PADEQ);
          }
        case 282: break;
        case 149: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NULLIFY);
          }
        case 283: break;
        case 2: 
          { yybegin(YYINITIAL); boolean b = wantEos; wantEos = false; if (b) return token(Terminal.T_EOS); else storeNonTreeToken();
          }
        case 284: break;
        case 93: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_EQV);
          }
        case 285: break;
        case 135: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDTYPE);
          }
        case 286: break;
        case 157: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_OPTIONAL);
          }
        case 287: break;
        case 162: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SEQUENCE);
          }
        case 288: break;
        case 91: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDIF);
          }
        case 289: break;
        case 73: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_GOTO);
          }
        case 290: break;
        case 134: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDFILE);
          }
        case 291: break;
        case 122: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FORALL);
          }
        case 292: break;
        case 52: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_EXIT);
          }
        case 293: break;
        case 187: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FORMATTEDEQ);
          }
        case 294: break;
        case 95: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_NOT);
          }
        case 295: break;
        case 51: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DCON);
          }
        case 296: break;
        case 180: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_PRECISION);
          }
        case 297: break;
        case 66: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_OPEN);
          }
        case 298: break;
        case 101: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_STATEQ);
          }
        case 299: break;
        case 26: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_IDENT);
          }
        case 300: break;
        case 129: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_RETURN);
          }
        case 301: break;
        case 36: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_LESSTHANEQ);
          }
        case 302: break;
        case 188: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SELECTCASE);
          }
        case 303: break;
        case 186: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ASSIGNMENT);
          }
        case 304: break;
        case 32: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_EQEQ);
          }
        case 305: break;
        case 60: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_GT);
          }
        case 306: break;
        case 72: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_STOP);
          }
        case 307: break;
        case 133: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_WRITEEQ);
          }
        case 308: break;
        case 123: 
          { wantEos = true; yybegin(OPERATORorFORMAT); return token(Terminal.T_FORMAT);
          }
        case 309: break;
        case 49: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_OUT);
          }
        case 310: break;
        case 127: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_COMMON);
          }
        case 311: break;
        case 105: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CLOSE);
          }
        case 312: break;
        case 34: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_TO);
          }
        case 313: break;
        case 145: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_STATUSEQ);
          }
        case 314: break;
        case 40: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PCON);
          }
        case 315: break;
        case 19: 
          { stringBuffer.append( yytext() );
          }
        case 316: break;
        case 155: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDWHERE);
          }
        case 317: break;
        case 9: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_UNDERSCORE);
          }
        case 318: break;
        case 83: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_READ);
          }
        case 319: break;
        case 113: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_WRITE);
          }
        case 320: break;
        case 68: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_ZCON);
          }
        case 321: break;
        case 193: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ALLOCATABLE);
          }
        case 322: break;
        case 6: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_MINUS);
          }
        case 323: break;
        case 170: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ELEMENTAL);
          }
        case 324: break;
        case 189: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SUBROUTINE);
          }
        case 325: break;
        case 173: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_BACKSPACE);
          }
        case 326: break;
        case 35: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_GREATERTHANEQ);
          }
        case 327: break;
        case 63: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_LT);
          }
        case 328: break;
        case 57: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_EQ);
          }
        case 329: break;
        case 87: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_TYPE);
          }
        case 330: break;
        case 144: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_INQUIRE);
          }
        case 331: break;
        case 176: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_INTERFACE);
          }
        case 332: break;
        case 54: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ELSE);
          }
        case 333: break;
        case 41: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_XCON);
          }
        case 334: break;
        case 150: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NUMBEREQ);
          }
        case 335: break;
        case 110: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_KINDEQ);
          }
        case 336: break;
        case 197: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_UNFORMATTEDEQ);
          }
        case 337: break;
        case 85: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_RECEQ);
          }
        case 338: break;
        case 172: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DIMENSION);
          }
        case 339: break;
        case 61: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_NE);
          }
        case 340: break;
        case 43: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_LPARENSLASH);
          }
        case 341: break;
        case 199: 
          { wantEos = true; unsetSOL();          ; return token(Terminal.T_DOUBLEPRECISION);
          }
        case 342: break;
        case 30: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_IN);
          }
        case 343: break;
        case 119: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_TRUE);
          }
        case 344: break;
        case 111: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_WHERE);
          }
        case 345: break;
        case 140: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ACCESSEQ);
          }
        case 346: break;
        case 178: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_POSITIONEQ);
          }
        case 347: break;
        case 21: 
          { stringBuffer.append('\'');
								  yybegin(YYSTANDARD);
								  wantEos = true;
								  return token(Terminal.T_SCON);
          }
        case 348: break;
        case 196: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDINTERFACE);
          }
        case 349: break;
        case 14: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_COLON);
          }
        case 350: break;
        case 75: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PURE);
          }
        case 351: break;
        case 181: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PROCEDURE);
          }
        case 352: break;
        case 7: 
          { stringBuffer = new StringBuffer();
								  stringBuffer.append('\'');
								  yybegin(QUOTED);
          }
        case 353: break;
        case 56: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DATA);
          }
        case 354: break;
        case 132: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_TARGET);
          }
        case 355: break;
        case 31: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_GO);
          }
        case 356: break;
        case 65: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_OCON);
          }
        case 357: break;
        case 115: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ELSEIF);
          }
        case 358: break;
        case 104: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NAMEEQ);
          }
        case 359: break;
        case 102: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PAUSE);
          }
        case 360: break;
        case 29: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_IF);
          }
        case 361: break;
        case 90: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDDO);
          }
        case 362: break;
        case 97: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_INOUT);
          }
        case 363: break;
        case 48: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_XDOP);
          }
        case 364: break;
        case 78: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_NULL);
          }
        case 365: break;
        case 106: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CYCLE);
          }
        case 366: break;
        case 120: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_BLANKEQ);
          }
        case 367: break;
        case 103: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PRINT);
          }
        case 368: break;
        case 185: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DEALLOCATE);
          }
        case 369: break;
        case 164: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NAMELIST);
          }
        case 370: break;
        case 126: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NAMEDEQ);
          }
        case 371: break;
        case 44: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SLASHRPAREN);
          }
        case 372: break;
        case 1: 
          { yypushback(1); 
									int state=yystate();
									yybegin(IDENT);
									IToken token = yylex();
									yybegin(state);
									return token;
          }
        case 373: break;
        case 153: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_EXTERNAL);
          }
        case 374: break;
        case 12: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_RPAREN);
          }
        case 375: break;
        case 165: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CONTAINS);
          }
        case 376: break;
        case 130: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_REWIND);
          }
        case 377: break;
        case 128: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_RESULT);
          }
        case 378: break;
        case 99: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FILEEQ);
          }
        case 379: break;
        case 194: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SEQUENTIALEQ);
          }
        case 380: break;
        case 183: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_RECURSIVE);
          }
        case 381: break;
        case 198: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDSUBROUTINE);
          }
        case 382: break;
        case 33: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_EQGREATERTHAN);
          }
        case 383: break;
        case 192: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_EQUIVALENCE);
          }
        case 384: break;
        case 124: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SELECT);
          }
        case 385: break;
        case 131: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_MODULE);
          }
        case 386: break;
        case 167: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDFORALL);
          }
        case 387: break;
        case 89: 
          { wantEos = true;                     return token(Terminal.T_X_IMPL);
          }
        case 388: break;
        case 84: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_REAL);
          }
        case 389: break;
        case 138: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_FALSE);
          }
        case 390: break;
        case 67: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ONLY);
          }
        case 391: break;
        case 53: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDEQ);
          }
        case 392: break;
        case 15: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_GREATERTHAN);
          }
        case 393: break;
        case 142: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_IOSTATEQ);
          }
        case 394: break;
        case 158: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ADVANCEEQ);
          }
        case 395: break;
        case 154: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDBLOCK);
          }
        case 396: break;
        case 88: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FCON);
          }
        case 397: break;
        case 114: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_EXISTEQ);
          }
        case 398: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case OPERATORorFORMAT: {
              wantEos = false; yybegin(YYSTANDARD); return token(Terminal.END_OF_INPUT);
            }
            case 825: break;
            case DBLQUOTED: {
              throw new Exception("Lexer Error (line " + (getLine()+1) + ", col " + (getCol()+1) + "): End of file encountered before string literal terminated");
            }
            case 826: break;
            case QUOTED: {
              throw new Exception("Lexer Error (line " + (getLine()+1) + ", col " + (getCol()+1) + "): End of file encountered before string literal terminated");
            }
            case 827: break;
            case YYINITIAL: {
              wantEos = false; yybegin(YYSTANDARD); return token(Terminal.END_OF_INPUT);
            }
            case 828: break;
            case HOLLERITH: {
              throw new Exception("Lexer Error (line " + (getLine()+1) + ", col " + (getCol()+1) + "): End of file encountered before hollerith literal terminated");
            }
            case 829: break;
            case YYSTANDARD: {
              wantEos = false; yybegin(YYSTANDARD); return token(Terminal.END_OF_INPUT);
            }
            case 830: break;
            case IMPLICIT: {
              wantEos = false; yybegin(YYSTANDARD); return token(Terminal.END_OF_INPUT);
            }
            case 831: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
