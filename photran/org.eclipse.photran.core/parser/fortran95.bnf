## LUDWIG GRAMMAR FOR FORTRAN 95
## 
## Author: Jeffrey Overbey, based on an Eli grammar
## by W.B. Clodius, W.M. Waite, J. Hoffmann, and R. Jakob
## available from http://members.aol.com/wclodius/Parse95.html
## 
## The Eli grammar on which this is based is
## Copyright (c) <1999> <W. B. Clodius and W. M. Waite>
## Permission is hereby granted, free of charge, to any person
## obtaining a copy of this software and associated documentation
## files (the "Software"), to deal in the Software without restriction,
## including without limitation the rights to use, copy, modify,
## merge, publish, distribute, sublicense, and/or sell
## copies of the Software, and to permit persons to whom the Software
## is furnished to do so, subject to the following conditions:
## 
## The above copyright notice and this permission notice shall be
## included in all copies or substantial portions of the Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
## EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
## OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
## NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
## HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
## WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
## OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
## DEALINGS IN THE SOFTWARE.
## 
## Changes:
## 19.04.2005 Dirk Rossow: Added T_Hcon Hollerith Constants
## 19.04.2005 Dirk Rossow: Modified xUFPrimary with <xSubstringRange>

# Two conflicts are resolved manually in the parser spec file

<< Section: Section 2 Rules >>

# R201
<ExecutableProgram> ::=
    <ProgramUnit>
  | @:<ExecutableProgram> <ProgramUnit>

# R202
<ProgramUnit> ::=
    <MainProgram>
  | <FunctionSubprogram>
  | <SubroutineSubprogram>
  | <Module>
  | <BlockDataSubprogram>

# R203 chain rule eliminated

# R1101 doesn't ensure ordering as the standard requires
<MainProgram> ::=
    <MainRange>
  | <ProgramStmt> <MainRange>

<MainRange> ::=
    <Body> <EndProgramStmt>
  | <BodyPlusInternals> <EndProgramStmt>
  | <EndProgramStmt>

<Body> ::=
    <BodyConstruct>
  | @:<Body> <BodyConstruct>

<BodyConstruct> ::=
    <SpecificationPartConstruct>
  | <ExecutableConstruct>


# R203 chain rule omitted

<< Section: Section 12 Rules >>

#R1216
<FunctionSubprogram> ::=
  <FunctionStmt> <FunctionRange>


<FunctionRange> ::=
    <Body> <EndFunctionStmt>
  | <EndFunctionStmt>
  | <BodyPlusInternals> <EndFunctionStmt>


# R1221
<SubroutineSubprogram> ::=
  <SubroutineStmt> <SubroutineRange>


<SubroutineRange> ::=
    <Body> <EndSubroutineStmt>
  | <EndSubroutineStmt>
  | <BodyPlusInternals> <EndSubroutineStmt>


<< Section: Section 11 Rules >>

# R1104
<Module> ::=
  <ModuleStmt> <ModuleBlock>

<ModuleBlock> ::=
    <ModuleBody> <EndModuleStmt>
  | <EndModuleStmt>

<ModuleBody> ::=
    <SpecificationPartConstruct>
  | <ModuleSubprogramPartConstruct>
  | @:<ModuleBody> <SpecificationPartConstruct>
  | @:<ModuleBody> <ModuleSubprogramPartConstruct>


# R1112
<BlockDataSubprogram> ::=
    <BlockDataStmt> <BlockDataBody> <EndBlockDataStmt>
  | <BlockDataStmt> <EndBlockDataStmt>


<BlockDataBody> ::=
    <BlockDataBodyConstruct>
  | @:<BlockDataBody> <BlockDataBodyConstruct>

<BlockDataBodyConstruct> ::=
  <SpecificationPartConstruct>


<< Section: More Section 2 Rules >>

# R204 doesn't ensure ordering as the standard requires
<SpecificationPartConstruct> ::=
    <UseStmt>
  | <ImplicitStmt>
  | <ParameterStmt>
  | <FormatStmt>
  | <EntryStmt>
  | <DeclarationConstruct>


# R205 see R204

# R206 see R204

# R207 also see R204
<DeclarationConstruct> ::=
    <DerivedTypeDef>
  | <InterfaceBlock>
  | <TypeDeclarationStmt>
  | <SpecificationStmt>


# R208

# R209
<ExecutionPartConstruct> ::=
    <ObsoleteExecutionPartConstruct>
  | <ExecutableConstruct>
  | <FormatStmt>
  | <EntryStmt>

<ObsoleteExecutionPartConstruct> ::= <DataStmt>


# R210
<BodyPlusInternals> ::=
    <Body> <ContainsStmt> <InternalSubprogram>
  | <ContainsStmt> <InternalSubprogram>
  | @:<BodyPlusInternals> <InternalSubprogram>


# R211
<InternalSubprogram> ::=
    <FunctionSubprogram>
  | <SubroutineSubprogram>


# R212 doesn't ensure ordering as standard requires
<ModuleSubprogramPartConstruct> ::=
    <ContainsStmt>
  | <ModuleSubprogram>


# R213
<ModuleSubprogram> ::=
    <FunctionSubprogram>
  | <SubroutineSubprogram>


# R214
<SpecificationStmt> ::=
    <AccessStmt>
  | <AllocatableStmt>
  | <CommonStmt>
  | <DataStmt>
  | <DimensionStmt>
  | <EquivalenceStmt>
  | <ExternalStmt>
  | <IntentStmt>
  | <IntrinsicStmt>
  | <NamelistStmt>
  | <OptionalStmt>
  | <PointerStmt>
  | <SaveStmt>
  | <TargetStmt>


# R215
<ExecutableConstruct> ::=
    <ActionStmt>
  | <CaseConstruct>
  | <DoConstruct>
  | <ForallConstruct>
  | <IfConstruct>
  | <WhereConstruct>
  | <EndDoStmt>
  #/* see the note on R818 */

# R216
<ActionStmt> ::=
    <ObsoleteActionStmt>
  | <AllocateStmt>
  | <AssignmentStmt>
  | <BackspaceStmt>
  | <CallStmt>
  | <CloseStmt>
  | <ContinueStmt>
  | <CycleStmt>
  | <DeallocateStmt>
  | <EndfileStmt>
  | <ExitStmt>
  | <ForallStmt>
  | <GotoStmt>
  | <IfStmt>
  | <InquireStmt>
  | <NullifyStmt>
  | <OpenStmt>
  | <PointerAssignmentStmt>
  | <PrintStmt>
  | <ReadStmt>
  | <ReturnStmt>
  | <RewindStmt>
  | <StopStmt>
  | <WhereStmt>
  | <WriteStmt>

<ObsoleteActionStmt> ::=
    <StmtFunctionStmt>
  | <ArithmeticIfStmt>
  | <ComputedGotoStmt>


<< Section: Section 3 Rules >>

# R301-R303 are components of symbols recognized by the lexical analyzer

# R304 recognized by the lexical analyzer as T_ICON? is this different in F90
<Name> ::= T_IDENT


# R305
#dirk rossow added T_HCON
<Constant> ::=
    <NamedConstantUse>
  | <UnsignedArithmeticConstant>
  | T_PLUS <UnsignedArithmeticConstant>
  | T_MINUS <UnsignedArithmeticConstant>
  | T_SCON
  | T_ICON T_UNDERSCORE T_SCON
  | <NamedConstantUse> T_UNDERSCORE T_SCON
  | <LogicalConstant>
  | <StructureConstructor>
  | <BozLiteralConstant>
  | T_HCON


# R306 chain rule deleted

# R307
<NamedConstant> ::= T_IDENT

<NamedConstantUse> ::= T_IDENT


# R308 chain rule deleted

# R309 chain rule deleted

# R310 recognized semantically

<< Section: Section 7 Rules and R311-313 >>

# R708
<PowerOp> ::= T_POW


# R709
<MultOp> ::=
    T_ASTERISK
  | T_SLASH


# R710
<AddOp> ::=
    T_PLUS
  | T_MINUS

<Sign> ::=
    T_PLUS
  | T_MINUS


# R712
<ConcatOp> ::= T_SLASHSLASH


# R714
<RelOp> ::=
    T_EQ
  | T_NE
  | T_LT
  | T_LE
  | T_GT
  | T_GE
  | T_EQEQ
  | T_SLASHEQ
  | T_LESSTHAN
  | T_LESSTHANEQ
  | T_GREATERTHAN
  | T_GREATERTHANEQ


# R719
<NotOp> ::= T_NOT


# R720
<AndOp> ::= T_AND


# R721
<OrOp> ::= T_OR


# R722
<EquivOp> ::=
    T_EQV
  | T_NEQV


# R311
<DefinedOperator> ::=
    T_XDOP
  | <ConcatOp>
  | <PowerOp>
  | <MultOp>
  | <AddOp>
  | <RelOp>
  | <NotOp>
  | <AndOp>
  | <OrOp>
  | <EquivOp>


# R704
<DefinedUnaryOp> ::=
  T_XDOP


# R724
<DefinedBinaryOp> ::=
  T_XDOP


# R312 recognized semantically

# R313 recognized by the lexical analyzer as T_ICON
<Label> ::=
  T_ICON


<< Section: Section 4 Rules >>

# R401 recognized by the lexical analyzer in the context of R413

# R402 recognized by the lexical analyzer in the context of R413, T_ICON

# R403 chain rule deleted see R305

# R404
<UnsignedArithmeticConstant> ::=
    T_ICON
  | T_RCON
  | T_DCON
  | <ComplexConst>
  | T_ICON T_UNDERSCORE <KindParam>
  | T_RCON T_UNDERSCORE <KindParam>
  | T_DCON T_UNDERSCORE <KindParam>


# R405
<KindParam> ::=
    T_ICON
  | <NamedConstantUse>


# R406 see R305

# R407
<BozLiteralConstant> ::=
    T_BCON
  | T_OCON
  | T_ZCON


# R408 recognized by the lexical analyzer as T_BCON

# R409 recognized by the lexical analyzer as T_OCON

# R410 recognized by the lexical analyzer as T_ZCON

# R411 component of a symbol recognized by the lexical analyzer

# R412 see R404

# R413 see R404

# R414-R416 components of symbols recognized by the lexical analyzer

# R417
<ComplexConst> ::= T_LPAREN <Expr> T_COMMA <Expr> T_RPAREN


# R418 chain rule deleted

# R419 chain rule deleted

# R420 chain rule deleted see R305

# R421
<LogicalConstant> ::=
    T_TRUE
  | T_FALSE
  | T_TRUE T_UNDERSCORE <KindParam>
  | T_FALSE T_UNDERSCORE <KindParam>


# R422 This does not enforce the required sequence
<DerivedTypeDef> ::=
  <DerivedTypeStmt> <DerivedTypeBody> <EndTypeStmt>

<DerivedTypeBody> ::=
    <DerivedTypeBodyConstruct>
  | @:<DerivedTypeBody> <DerivedTypeBodyConstruct>

<DerivedTypeBodyConstruct> ::=
    <PrivateSequenceStmt>
  | <ComponentDefStmt>


# R423
<DerivedTypeStmt> ::=
    <LblDef> T_TYPE <TypeName> T_EOS
  | <LblDef> T_TYPE T_COLON T_COLON <TypeName> T_EOS
  | <LblDef> T_TYPE T_COMMA <AccessSpec> T_COLON T_COLON <TypeName> T_EOS


# R424
<PrivateSequenceStmt> ::=
    <LblDef> T_PRIVATE T_EOS
  | <LblDef> T_SEQUENCE T_EOS


# R425
<ComponentDefStmt> ::=
    <LblDef> <TypeSpec> T_COMMA <ComponentAttrSpecList> T_COLON T_COLON <ComponentDeclList> T_EOS
  | <LblDef> <TypeSpec> T_COLON T_COLON <ComponentDeclList> T_EOS
  | <LblDef> <TypeSpec> <ComponentDeclList> T_EOS


# R426
<ComponentAttrSpecList> ::=
    <ComponentAttrSpec>
  | @:<ComponentAttrSpecList> T_COMMA <ComponentAttrSpec>

<ComponentAttrSpec> ::=
    T_POINTER
  | T_DIMENSION T_LPAREN <ComponentArraySpec> T_RPAREN


# R427
<ComponentArraySpec> ::=
    <ExplicitShapeSpecList>
  | <DeferredShapeSpecList>


# R428
<ComponentDeclList> ::=
    <ComponentDecl>
  | @:<ComponentDeclList> T_COMMA <ComponentDecl>

<ComponentDecl> ::=
    <ComponentName> T_LPAREN <ComponentArraySpec> T_RPAREN T_ASTERISK <CharLength> <ComponentInitialization>
  | <ComponentName> T_LPAREN <ComponentArraySpec> T_RPAREN <ComponentInitialization>
  | <ComponentName> T_ASTERISK <CharLength> <ComponentInitialization>
  | <ComponentName> <ComponentInitialization>
  | <ComponentName> T_LPAREN <ComponentArraySpec> T_RPAREN T_ASTERISK <CharLength>
  | <ComponentName> T_LPAREN <ComponentArraySpec> T_RPAREN
  | <ComponentName> T_ASTERISK <CharLength>
  | <ComponentName>


# R429
<ComponentInitialization> ::=
    T_EQUALS <Expr>
  | T_EQGREATERTHAN T_NULL T_LPAREN T_RPAREN


# R430
<EndTypeStmt> ::=
    <LblDef> T_ENDTYPE <TypeName>? T_EOS
  | <LblDef> T_END T_TYPE <TypeName>? T_EOS


# R431
<StructureConstructor> ::= <TypeName> T_LPAREN <ExprList> T_RPAREN

<ExprList> ::=
    <Expr>
  | @:<ExprList> T_COMMA <Expr>


# R432
<ArrayConstructor> ::= T_LPARENSLASH <AcValueList> T_SLASHRPAREN


# R433 Why <AcValueList1>?
<AcValueList> ::=
    <Expr>
  | <AcValueList1>

<AcValueList1> ::=
    <Expr> T_COMMA <Expr>
  | <Expr> T_COMMA <AcImpliedDo>
  | <AcImpliedDo>
  | @:<AcValueList1> T_COMMA <Expr>
  | @:<AcValueList1> T_COMMA <AcImpliedDo>


# R434
<AcImpliedDo> ::=
    T_LPAREN <Expr> T_COMMA <ImpliedDoVariable> T_EQUALS <Expr> T_COMMA <Expr> T_RPAREN
  | T_LPAREN <Expr> T_COMMA <ImpliedDoVariable> T_EQUALS <Expr> T_COMMA <Expr> T_COMMA <Expr> T_RPAREN
  | T_LPAREN <AcImpliedDo> T_COMMA <ImpliedDoVariable> T_EQUALS <Expr> T_COMMA <Expr> T_RPAREN
  | T_LPAREN <AcImpliedDo> T_COMMA <ImpliedDoVariable> T_EQUALS <Expr> T_COMMA <Expr> T_COMMA <Expr> T_RPAREN


# R435 chain rule deleted

# R436 chain rule deleted

<< Section: Section 5 Rules >>

# R501
<TypeDeclarationStmt> ::=
    <LblDef> <TypeSpec> <AttrSpecSeq> T_COLON T_COLON <EntityDeclList> T_EOS
  | <LblDef> <TypeSpec> T_COLON T_COLON <EntityDeclList> T_EOS
  | <LblDef> <TypeSpec> <EntityDeclList> T_EOS

<AttrSpecSeq> ::=
    T_COMMA <AttrSpec>
  | @:<AttrSpecSeq> T_COMMA <AttrSpec>


# R502
<TypeSpec> ::=
    T_INTEGER
  | T_REAL
  | T_DOUBLEPRECISION
  | T_COMPLEX
  | T_LOGICAL
  | T_CHARACTER
  | T_INTEGER <KindSelector>
  | T_REAL <KindSelector>
  | T_DOUBLE T_PRECISION
  | T_COMPLEX <KindSelector>
  | T_CHARACTER <CharSelector>
  | T_LOGICAL <KindSelector>
  | T_TYPE T_LPAREN <TypeName> T_RPAREN


# R503
<AttrSpec> ::=
    T_PARAMETER
  | <AccessSpec>
  | T_ALLOCATABLE
  | T_DIMENSION T_LPAREN <ArraySpec> T_RPAREN
  | T_EXTERNAL
  | T_INTENT T_LPAREN <IntentSpec> T_RPAREN
  | T_INTRINSIC
  | T_OPTIONAL
  | T_POINTER
  | T_SAVE
  | T_TARGET


# R504
<EntityDeclList> ::=
    <EntityDecl>
  | @:<EntityDeclList> T_COMMA <EntityDecl>

<EntityDecl> ::=
    <ObjectName> ( T_LPAREN <ArraySpec> T_RPAREN )? ( T_ASTERISK <CharLength> )? <Initialization>?
  | <InvalidEntityDecl>

<InvalidEntityDecl> ::=
  <ObjectName> T_ASTERISK <CharLength> T_LPAREN <ArraySpec> T_RPAREN <Initialization>?


# R505
<Initialization> ::=
    T_EQUALS <Expr>
  | T_EQGREATERTHAN T_NULL T_LPAREN T_RPAREN


# R506 Should this be 'kind=' or 'kind' '='?
<KindSelector> ::=
    T_LPAREN T_KINDEQ <Expr> T_RPAREN
  | T_LPAREN <Expr> T_RPAREN


# R507
<CharSelector> ::=
    <LengthSelector>
  | T_LPAREN T_LENEQ <CharLenParamValue> T_COMMA T_KINDEQ <Expr> T_RPAREN
  | T_LPAREN T_LENEQ <CharLenParamValue> T_COMMA <Expr> T_RPAREN
  | T_LPAREN T_KINDEQ <Expr> T_RPAREN
  | T_LPAREN T_LENEQ <CharLenParamValue> T_RPAREN
  | T_LPAREN <CharLenParamValue> T_RPAREN


# R508 chain rule deleted
<LengthSelector> ::=
  T_ASTERISK <CharLength>


# R509
<CharLength> ::=
    T_LPAREN <CharLenParamValue> T_RPAREN
  | T_ICON


# R510 <CharLenParamValue> was <TypeParamValue>
<CharLenParamValue> ::=
    <Expr>
  | T_ASTERISK


# R511
<AccessSpec> ::=
    T_PUBLIC
  | T_PRIVATE


# R512
<IntentSpec> ::=
    T_IN
  | T_OUT
  | T_INOUT
  | T_IN T_OUT


# R513 see 16
<ArraySpec> ::=
    <ExplicitShapeSpecList>
  | <AssumedSizeSpec>
  | <AssumedShapeSpecList>
  | <DeferredShapeSpecList>

<AssumedShapeSpecList> ::=
    <LowerBound> T_COLON
  | <DeferredShapeSpecList> T_COMMA <LowerBound> T_COLON
  | @:<AssumedShapeSpecList> T_COMMA <AssumedShapeSpec>


# R514
<ExplicitShapeSpecList> ::=
    <ExplicitShapeSpec>
  | @:<ExplicitShapeSpecList> T_COMMA <ExplicitShapeSpec>

<ExplicitShapeSpec> ::=
    <LowerBound> T_COLON <UpperBound>
  | <UpperBound>


# R515
<LowerBound> ::= <Expr>


# R516
<UpperBound> ::= <Expr>


# R517
<AssumedShapeSpec> ::=
    <LowerBound> T_COLON
  | T_COLON


# R518
<DeferredShapeSpecList> ::=
    <DeferredShapeSpec>
  | @:<DeferredShapeSpecList> T_COMMA <DeferredShapeSpec>

<DeferredShapeSpec> ::= T_COLON


# R519
<AssumedSizeSpec> ::=
    T_ASTERISK
  | <LowerBound> T_COLON T_ASTERISK
  | <ExplicitShapeSpecList> T_COMMA T_ASTERISK
  | <ExplicitShapeSpecList> T_COMMA <LowerBound> T_COLON T_ASTERISK


# R520
<IntentStmt> ::=
  <LblDef> T_INTENT T_LPAREN <IntentSpec> T_RPAREN ( T_COLON T_COLON )? <IntentParList> T_EOS

<IntentParList> ::=
    <IntentPar>
  | @:<IntentParList> T_COMMA <IntentPar>

<IntentPar> ::=
  <DummyArgName>


# R521
<OptionalStmt> ::=
  <LblDef> T_OPTIONAL ( T_COLON T_COLON )? <OptionalParList> T_EOS

<OptionalParList> ::=
    <OptionalPar>
  | @:<OptionalParList> T_COMMA <OptionalPar>

<OptionalPar> ::= <DummyArgName>


# R522
<AccessStmt> ::=
    <LblDef> <AccessSpec> ( T_COLON T_COLON )? <AccessIdList> T_EOS
  | <LblDef> <AccessSpec> T_EOS


# R523
<AccessIdList> ::=
    <AccessId>
  | @:<AccessIdList> T_COMMA <AccessId>

<AccessId> ::=
    <GenericName>
  | <GenericSpec>


# R524
<SaveStmt> ::=
    <LblDef> T_SAVE T_EOS
  | <LblDef> T_SAVE ( T_COLON T_COLON )? <SavedEntityList> T_EOS


# R525
<SavedEntityList> ::=
    <SavedEntity>
  | @:<SavedEntityList> T_COMMA <SavedEntity>

<SavedEntity> ::=
    <VariableName>
  | <SavedCommonBlock>

<SavedCommonBlock> ::= T_SLASH <CommonBlockName> T_SLASH


# R526
<DimensionStmt> ::=
  <LblDef> T_DIMENSION ( T_COLON T_COLON )? <ArrayDeclaratorList> T_EOS

<ArrayDeclaratorList> ::=
    <ArrayDeclarator>
  | @:<ArrayDeclaratorList> T_COMMA <ArrayDeclarator>

<ArrayDeclarator> ::= <VariableName> T_LPAREN <ArraySpec> T_RPAREN


# R527
<AllocatableStmt> ::=
  <LblDef> T_ALLOCATABLE ( T_COLON T_COLON )? <ArrayAllocationList> T_EOS

<ArrayAllocationList> ::=
    <ArrayAllocation>
  | @:<ArrayAllocationList> T_COMMA <ArrayAllocation>

<ArrayAllocation> ::=
    <ArrayName>
  | <ArrayName> T_LPAREN <DeferredShapeSpecList> T_RPAREN


# R528 /* <ObjectName> renamed to <PointerName> to simplify Sem. Anal. */
<PointerStmt> ::=
  <LblDef> T_POINTER ( T_COLON T_COLON )? <PointerStmtObjectList> T_EOS

<PointerStmtObjectList> ::=
    <PointerStmtObject>
  | @:<PointerStmtObjectList> T_COMMA <PointerStmtObject>

<PointerStmtObject> ::=
    <PointerName>
  | <PointerName> T_LPAREN <DeferredShapeSpecList> T_RPAREN

<PointerName> ::= T_IDENT


# R529 /* <ObjectName> renamed to <TargetName> to simplify Sem. Anal. */
<TargetStmt> ::=
  <LblDef> T_TARGET ( T_COLON T_COLON )? <TargetObjectList> T_EOS

<TargetObjectList> ::=
    <TargetObject>
  | @:<TargetObjectList> T_COMMA <TargetObject>

<TargetObject> ::=
    <TargetName>
  | <TargetName> T_LPAREN <ArraySpec> T_RPAREN

<TargetName> ::= T_IDENT


# R530
<ParameterStmt> ::=
  <LblDef> T_PARAMETER T_LPAREN <NamedConstantDefList> T_RPAREN T_EOS


# R531
<NamedConstantDefList> ::=
    <NamedConstantDef>
  | @:<NamedConstantDefList> T_COMMA <NamedConstantDef>

<NamedConstantDef> ::= <NamedConstant> T_EQUALS <Expr>


# R532
<DataStmt> ::=
  <LblDef> T_DATA <Datalist> T_EOS

<Datalist> ::=
    <DataStmtSet>
  | @:<Datalist> <DataStmtSet>
  | @:<Datalist> T_COMMA <DataStmtSet>


# R533
<DataStmtSet> ::= <DataStmtObjectList> T_SLASH <DataStmtValueList> T_SLASH


# R534
<DataStmtObjectList> ::=
    <DataStmtObject>
  | @:<DataStmtObjectList> T_COMMA <DataStmtObject>

<DataStmtObject> ::=
    <Variable>
  | <DataImpliedDo>


# R535 <Expr> must be scalar-int-expr
<DataImpliedDo> ::=
    T_LPAREN <DataIDoObjectList> T_COMMA <ImpliedDoVariable> T_EQUALS <Expr> T_COMMA <Expr> T_RPAREN
  | T_LPAREN <DataIDoObjectList> T_COMMA <ImpliedDoVariable> T_EQUALS <Expr> T_COMMA <Expr> T_COMMA <Expr> T_RPAREN


# R536 <StructureComponent> must be <ScalarStructureComponent>
<DataIDoObjectList> ::=
    <DataIDoObject>
  | @:<DataIDoObjectList> T_COMMA <DataIDoObject>

<DataIDoObject> ::=
    <ArrayElement>
  | <DataImpliedDo>
  | <StructureComponent>


# R537 chain rule deleted

# R538
<DataStmtValueList> ::=
    <DataStmtValue>
  | @:<DataStmtValueList> T_COMMA <DataStmtValue>

<DataStmtValue> ::=
    <DataStmtConstant>
  | T_ICON T_ASTERISK <DataStmtConstant>
  | <NamedConstantUse> T_ASTERISK <DataStmtConstant>


# R539 chain rule deleted

# R540 only a subset of <constant> is allowed
<DataStmtConstant> ::=
    <Constant>
  | T_NULL T_LPAREN T_RPAREN


# R541
<ImplicitStmt> ::=
    <LblDef> T_IMPLICIT <ImplicitSpecList> T_EOS
  | <LblDef> T_IMPLICIT T_NONE T_EOS


# R542
<ImplicitSpecList> ::=
    <ImplicitSpec>
  | @:<ImplicitSpecList> T_COMMA <ImplicitSpec>

<ImplicitSpec> ::= <TypeSpec> T_xImpl


# R543 chain rule deleted

# R544
<NamelistStmt> ::=
  <LblDef> T_NAMELIST <NamelistGroups> T_EOS

<NamelistGroups> ::=
    T_SLASH <NamelistGroupName> T_SLASH <NamelistGroupObject>
  | @:<NamelistGroups> T_SLASH <NamelistGroupName> T_SLASH <NamelistGroupObject>
  | @:<NamelistGroups> T_COMMA T_SLASH <NamelistGroupName> T_SLASH <NamelistGroupObject>
  | @:<NamelistGroups> T_COMMA <NamelistGroupObject>


# R545
<NamelistGroupObject> ::= <VariableName>


# R546
<EquivalenceStmt> ::=
  <LblDef> T_EQUIVALENCE <EquivalenceSetList> T_EOS


# R547
<EquivalenceSetList> ::=
    <EquivalenceSet>
  | @:<EquivalenceSetList> T_COMMA <EquivalenceSet>

<EquivalenceSet> ::= T_LPAREN <EquivalenceObject> T_COMMA <EquivalenceObjectList> T_RPAREN


# R548
<EquivalenceObjectList> ::=
    <EquivalenceObject>
  | @:<EquivalenceObjectList> T_COMMA <EquivalenceObject>

# JO -- Changed xVariable to <Variable>
<EquivalenceObject> ::= <Variable>


# R549
<CommonStmt> ::=
  <LblDef> T_COMMON <Comlist> T_EOS

<Comlist> ::=
    <CommonBlockObject>
  | <Comblock> <CommonBlockObject>
  | @:<Comlist> T_COMMA <CommonBlockObject>
  | @:<Comlist> <Comblock> <CommonBlockObject>
  | @:<Comlist> T_COMMA <Comblock> <CommonBlockObject>

<Comblock> ::=
    T_SLASH T_SLASH
  | T_SLASH <CommonBlockName> T_SLASH


# R550
<CommonBlockObject> ::=
    <VariableName>
  | <ArrayDeclarator>


<< Section: Section 6 Rules >>

# R601 The various forms of variables have to be recognized semantically;
<Variable> ::= 
    <DataRef> ( T_LPAREN <SectionSubscriptList> T_RPAREN ( <SubstringRange> )? )?
  | <SubstrConst>
# JO -- Added substring of constant strings

<SubstrConst> ::=
  T_SCON <SubstringRange>
# JO -- Added substring of constant strings

<VariableName> ::= T_IDENT

<ScalarVariable> ::=
    <VariableName>
  | <ArrayElement>


# R603-R608 chain rules deleted

# R609 see 601

# R610 see 601

# R611
<SubstringRange> ::= T_LPAREN <SubscriptTriplet> T_RPAREN


# R612
<DataRef> ::=
    <Name>
  | <DataRef> ( T_LPAREN <SectionSubscriptList> T_RPAREN )? T_PERCENT <Name>

<SFDataRef> ::=
    <Name> T_PERCENT <Name>
  | <Name> T_LPAREN <SectionSubscriptList> T_RPAREN
  | <SFDataRef> ( T_LPAREN <SectionSubscriptList> T_RPAREN )? T_PERCENT <Name>


# R613 chain rule deleted;

# R614
<StructureComponent> ::=
    <VariableName> <FieldSelector>
  | <StructureComponent> <FieldSelector>

<FieldSelector> ::=
    T_LPAREN <SectionSubscriptList> T_RPAREN T_PERCENT <Name>
  | T_PERCENT <Name>


# R615
<ArrayElement> ::=
    <VariableName> T_LPAREN <SectionSubscriptList> T_RPAREN
  | <StructureComponent> T_LPAREN <SectionSubscriptList> T_RPAREN


# R616 Recognized semantically?

# R617 Recognized semantically
<Subscript> ::= <Expr>


# R618 Recognized semantically?
<SectionSubscriptList> ::=
    <SectionSubscript>
  | @:<SectionSubscriptList> T_COMMA <SectionSubscript>

<SectionSubscript> ::=
    <Expr>
  | <SubscriptTriplet>


# R619
<SubscriptTriplet> ::=
    T_COLON
  | T_COLON <Expr>
  | <Expr> T_COLON
  | <Expr> T_COLON <Expr>
  | <Expr> T_COLON <Expr> T_COLON <Expr>
  | <Expr> T_COLON T_COLON <Expr>
  | T_COLON <Expr> T_COLON <Expr>
  | T_COLON T_COLON <Expr>


# R620 chain rule deleted

# R621 recognized semantically?

# R622
<AllocateStmt> ::=
    <LblDef> T_ALLOCATE T_LPAREN <AllocationList> T_COMMA T_STATEQ <Variable> T_RPAREN T_EOS
  | <LblDef> T_ALLOCATE T_LPAREN <AllocationList> T_RPAREN T_EOS


# R623 chain rule deleted

# R624
<AllocationList> ::=
    <Allocation>
  | @:<AllocationList> T_COMMA <Allocation>

<Allocation> ::=
    <AllocateObject>
  | <AllocateObject> <AllocatedShape>

<AllocatedShape> ::= T_LPAREN <SectionSubscriptList> T_RPAREN

# Need to use <SectionSubscriptList> here to solve an LALR(1) conflict with the
# <FieldSelector> in R625.  (Can't tell which we have until the character
# following the right paren, but we must reduce WITHIN the parens.)

# R625
<AllocateObjectList> ::=
    <AllocateObject>
  | @:<AllocateObjectList> T_COMMA <AllocateObject>

<AllocateObject> ::=
    <VariableName>
  | <AllocateObject> <FieldSelector>


# R626
# Omitted to solve LALR(1) conflict.  see R624
#
# <AllocateShapeSpec>: <Expr> | <Expr> T_COLON <Expr> ;

# R627 chain rule deleted

# R628 chain rule deleted

# R629
<NullifyStmt> ::=
  <LblDef> T_NULLIFY T_LPAREN <PointerObjectList> T_RPAREN T_EOS

<PointerObjectList> ::=
    <PointerObject>
  | @:<PointerObjectList> T_COMMA <PointerObject>


# R630
<PointerObject> ::=
    <Name>
  | <PointerField>

<PointerField> ::=
    <Name> T_LPAREN <SFExprList> T_RPAREN T_PERCENT <Name>
  | <Name> T_LPAREN <SFDummyArgNameList> T_RPAREN T_PERCENT <Name>
  | <Name> T_PERCENT <Name>
  | <PointerField> <FieldSelector>


# R631
<DeallocateStmt> ::=
    <LblDef> T_DEALLOCATE T_LPAREN <AllocateObjectList> T_COMMA T_STATEQ <Variable> T_RPAREN T_EOS
  | <LblDef> T_DEALLOCATE T_LPAREN <AllocateObjectList> T_RPAREN T_EOS


<< Section: More Section 7 Rules (Primary) >>

# It is not clear to me whether some of the subcategories of Primary
# are complete

# R701
<Primary> ::=
    <LogicalConstant>
  | T_SCON
  | <UnsignedArithmeticConstant>
  | <ArrayConstructor>
  | <Name>  ( T_LPAREN <SectionSubscriptList> T_RPAREN ( <SubstringRange> )? )?
  | <Name> T_PERCENT <DataRef> ( T_LPAREN <SectionSubscriptList> T_RPAREN ( <SubstringRange> )? )?
  | <Name> T_LPAREN <SectionSubscriptList> T_RPAREN T_PERCENT <DataRef> ( T_LPAREN <SectionSubscriptList> T_RPAREN ( <SubstringRange> )? )?
  | <FunctionReference> ( <SubstringRange> )?
  | <FunctionReference> T_PERCENT <DataRef> ( T_LPAREN <SectionSubscriptList> T_RPAREN ( <SubstringRange> )? )?
  | T_LPAREN <Expr> T_RPAREN
  | <SubstrConst>
# JO -- Added substring of constant strings

<CPrimary> ::=
    <COperand>
  | T_LPAREN <CExpr> T_RPAREN

<COperand> ::=
    T_SCON
  | <Name> ( T_LPAREN <SectionSubscriptList> T_RPAREN )?
  | <Name> ( T_LPAREN <SectionSubscriptList> T_RPAREN )? T_PERCENT <DataRef> ( T_LPAREN <SectionSubscriptList> T_RPAREN )?
  | <FunctionReference>


# dirk rossow: added <SubstringRange> to allow: write(text(1)(2:20),*) 'hello'
<UFPrimary> ::=
    T_ICON
  | T_SCON
  | <FunctionReference>
  | <Name> ( T_LPAREN <SectionSubscriptList> T_RPAREN ( <SubstringRange> )? )?
  | <Name> ( T_LPAREN <SectionSubscriptList> T_RPAREN )? T_PERCENT <DataRef> ( T_LPAREN <SectionSubscriptList> T_RPAREN ( <SubstringRange> )? )?
  | T_LPAREN <UFExpr> T_RPAREN


# R702 chain rule deleted

# R703
<Level1Expr> ::=
    <Primary>
  | <DefinedUnaryOp> <Primary>


# R704 defined in source form

# R705
<MultOperand> ::= <Level1Expr> ( <PowerOp> <MultOperand> )?

<UFFactor> ::= <UFPrimary> ( <PowerOp> <UFFactor> )?


# R706
<AddOperand> ::= ( <AddOperand> <MultOp> )? <MultOperand>

<UFTerm> ::=
    <UFFactor>
  | <UFTerm> <MultOp> <UFFactor>
  | <UFTerm> <ConcatOp> <UFPrimary>


# R707
<Level2Expr> ::=
    ( <Level2Expr> <AddOp> )? <AddOperand>
  | <Sign> <AddOperand>
# We need to distinguish unary operators
<UFExpr> ::=
    <UFTerm>
  | <Sign> <UFTerm>
  | <UFExpr> <AddOp> <UFTerm>


# R708-710 defined in source form

# R711 
<Level3Expr> ::= ( <Level3Expr> <ConcatOp> )? <Level2Expr>

<CExpr> ::= ( <CExpr> <ConcatOp> )? <CPrimary>


# R712 defined in source form

# R713
<Level4Expr> ::= (<Level3Expr> <RelOp>)? <Level3Expr>


# R714 defined in source form

# R715
<AndOperand> ::= (<NotOp>)? <Level4Expr>


# R716
<OrOperand> ::= (<OrOperand> <AndOp>)? <AndOperand>


# R717
<EquivOperand> ::= (<EquivOperand> <OrOp>)? <OrOperand>


# R718
<Level5Expr> ::= (<Level5Expr> <EquivOp>)? <EquivOperand>


# R719-722 defined in source form

# R723
<Expr> ::=
    <Level5Expr>
  | <Expr> <DefinedBinaryOp> <Level5Expr>

<SFExprList> ::=
    <SFExpr> T_COLON <Expr> T_COLON <Expr>
  | <SFExpr> T_COLON T_COLON <Expr>
  | T_COLON <Expr> T_COLON <Expr>
  | T_COLON T_COLON <Expr>


# R724 defined in source form

# R725-R734 chain rule deleted

# R735 - JO - Macro substituted
<AssignmentStmt> ::=
    <LblDef> <Name>                                                                                                                                  T_EQUALS <Expr> T_EOS
  | <LblDef> <Name> T_LPAREN <SFExprList>         T_RPAREN                                                                                          T_EQUALS <Expr> T_EOS
  | <LblDef> <Name> T_LPAREN <SFExprList>         T_RPAREN                                                                    <SubstringRange>     T_EQUALS <Expr> T_EOS
  | <LblDef> <Name> T_LPAREN <SFDummyArgNameList> T_RPAREN                                                                    <SubstringRange>     T_EQUALS <Expr> T_EOS
  | <LblDef> <Name>                                         T_PERCENT <DataRef> ( T_LPAREN <SectionSubscriptList> T_RPAREN ( <SubstringRange> )? )? T_EQUALS <Expr> T_EOS
  | <LblDef> <Name> T_LPAREN <SFExprList>         T_RPAREN T_PERCENT <DataRef> ( T_LPAREN <SectionSubscriptList> T_RPAREN ( <SubstringRange> )? )? T_EQUALS <Expr> T_EOS
  | <LblDef> <Name> T_LPAREN <SFDummyArgNameList> T_RPAREN T_PERCENT <DataRef> ( T_LPAREN <SectionSubscriptList> T_RPAREN ( <SubstringRange> )? )? T_EQUALS <Expr> T_EOS


<SFExprList> ::=
    T_COLON
  | T_COLON <Expr>
  | <SFExpr>
  | <SFExpr> T_COLON
  | <SFExpr> T_COLON <Expr>
  | <SFExprList> T_COMMA <SectionSubscript>
  | <SFDummyArgNameList> T_COMMA T_COLON
  | <SFDummyArgNameList> T_COMMA T_COLON <Expr>
  | <SFDummyArgNameList> T_COMMA <SFExpr>
  | <SFDummyArgNameList> T_COMMA <SFExpr> T_COLON
  | <SFDummyArgNameList> T_COMMA <SFExpr> T_COLON <Expr>

<SFExpr> ::=
    <SFTerm>
  | <Sign> <AddOperand>
  | <SFExpr> <AddOp> <AddOperand>

<SFTerm> ::=
    <SFFactor>
  | <SFTerm> <MultOp> <MultOperand>

<SFFactor> ::=
    <SFPrimary>
  | <SFPrimary> <PowerOp> <MultOperand>

<SFPrimary> ::=
    <ArrayConstructor>
  | T_ICON
  | <SFVarName>
  | <SFDataRef>
  | <FunctionReference>
  | T_LPAREN <Expr> T_RPAREN

#<AssignmentStmt> ::=
#  <LblDef> <Name> T_PERCENT <DataRef> 
#    ( T_LPAREN <SectionSubscriptList> T_RPAREN ( <SubstringRange> )? )? 
#    T_EQUALS <Expr> T_EOS |
#  <LblDef> <Name> T_LPAREN <SFExprList> T_RPAREN T_PERCENT <DataRef> 
#    ( T_LPAREN <SectionSubscriptList> T_RPAREN ( <SubstringRange> )? )? 
#    T_EQUALS <Expr> T_EOS |
#  <LblDef> <Name> T_LPAREN <SFDummyArgNameList> T_RPAREN T_PERCENT <DataRef> 
#    ( T_LPAREN <SectionSubscriptList> T_RPAREN ( <SubstringRange> )? )? T_EQUALS 
#        <Expr> T_EOS ;


# R736
<PointerAssignmentStmt> ::=
    <LblDef> <Name>                                                              T_EQGREATERTHAN <Target> T_EOS
  | <LblDef> <Name>                                         T_PERCENT <DataRef> T_EQGREATERTHAN <Target> T_EOS
  | <LblDef> <Name> T_LPAREN <SFExprList>         T_RPAREN T_PERCENT <DataRef> T_EQGREATERTHAN <Target> T_EOS
  | <LblDef> <Name> T_LPAREN <SFDummyArgNameList> T_RPAREN T_PERCENT <DataRef> T_EQGREATERTHAN <Target> T_EOS


# R737
<Target> ::= <Expr>


# R738
<WhereStmt> ::=
  <LblDef> T_WHERE T_LPAREN <MaskExpr> T_RPAREN <AssignmentStmt>


# R739 parallels if ... then ...elseif... else ... endif construct
<WhereConstruct> ::=
  <WhereConstructStmt> <WhereRange>

<WhereRange> ::=
    <EndWhereStmt>
  | <WhereBodyConstructBlock> <EndWhereStmt>
  | <MaskedElsewhereConstruct>
  | <WhereBodyConstructBlock> <MaskedElsewhereConstruct>
  | <ElsewhereConstruct>
  | <WhereBodyConstructBlock> <ElsewhereConstruct>


<MaskedElsewhereConstruct> ::=
  <MaskedElsewhereStmt> <WhereRange>


<ElsewhereConstruct> ::=
  <ElsewhereStmt> <ElsewherePart>


<ElsewherePart> ::=
    <EndWhereStmt>
  | <WhereBodyConstructBlock> <EndWhereStmt>


<WhereBodyConstructBlock> ::=
    <WhereBodyConstruct>
  | <WhereBodyConstructBlock> <WhereBodyConstruct>


# R740
<WhereConstructStmt> ::=
    <LblDef> <Name> T_COLON T_WHERE T_LPAREN <MaskExpr> T_RPAREN T_EOS
  | <LblDef> T_WHERE T_LPAREN <MaskExpr> T_RPAREN T_EOS


# R741
<WhereBodyConstruct> ::=
    <AssignmentStmt>
  | <WhereStmt>
  | <WhereConstruct>


# R742 chain rule deleted

# R743
<MaskExpr> ::= <Expr>


# R744
<MaskedElsewhereStmt> ::=
  <LblDef> T_ELSEWHERE T_LPAREN <MaskExpr> T_RPAREN ( <EndName> )? T_EOS


# R745
<ElsewhereStmt> ::=
  <LblDef> T_ELSEWHERE ( <EndName> )? T_EOS


# R746
<EndWhereStmt> ::=
    <LblDef> T_ENDWHERE ( <EndName> )? T_EOS
  | <LblDef> T_END T_WHERE ( <EndName> )? T_EOS


# R747
<ForallConstruct> ::=
    <ForallConstructStmt>               <EndForallStmt>
  | <ForallConstructStmt> <ForallBody> <EndForallStmt>

<ForallBody> ::=
                  <ForallBodyConstruct>
  | <ForallBody> <ForallBodyConstruct>


# R748
<ForallConstructStmt> ::=
    <LblDef> T_FORALL <ForallHeader> T_EOS
  | <LblDef> <Name> T_COLON T_FORALL <ForallHeader> T_EOS


# R749
<ForallHeader> ::=
    T_LPAREN <ForallTripletSpecList>                           T_RPAREN
  | T_LPAREN <ForallTripletSpecList> T_COMMA <ScalarMaskExpr> T_RPAREN

<ScalarMaskExpr> ::= <MaskExpr>


# R750
<ForallTripletSpecList> ::=
    <Name> T_EQUALS <Subscript> T_COLON <Subscript>
  | <Name> T_EQUALS <Subscript> T_COLON <Subscript> T_COLON <Expr>


# R751
<ForallBodyConstruct> ::=
    <AssignmentStmt>
  | <PointerAssignmentStmt>
  | <WhereStmt>
  | <WhereConstruct>
  | <ForallConstruct>
  | <ForallStmt>


# R752 chain rule eliminated

# R753
<EndForallStmt> ::=
    <LblDef> T_END T_FORALL ( <EndName> )? T_EOS
  | <LblDef> T_ENDFORALL ( <EndName> )? T_EOS


# R754
<ForallStmt> ::=
    <LblDef> T_FORALL <ForallHeader> <AssignmentStmt> T_EOS
  | <LblDef> T_FORALL <ForallHeader> <PointerAssignmentStmt> T_EOS


<< Section: Section 8 Rules >>

# R801 see the note on R818

# R802
<IfConstruct> ::=
  <IfThenStmt> <ThenPart>

<ThenPart> ::=
    <EndIfStmt>
  | <ConditionalBody> <EndIfStmt>
  | <ElseIfConstruct>
  | <ConditionalBody> <ElseIfConstruct>
  | <ElseConstruct>
  | <ConditionalBody> <ElseConstruct>


<ElseIfConstruct> ::=
  <ElseIfStmt> <ThenPart>


<ElseConstruct> ::=
  <ElseStmt> <ElsePart>

<ElsePart> ::=
                       <EndIfStmt>
  | <ConditionalBody> <EndIfStmt>


<ConditionalBody> ::=
                       <ExecutionPartConstruct>
  | <ConditionalBody> <ExecutionPartConstruct>


# R803
<IfThenStmt> ::=
    <LblDef> T_IF T_LPAREN <Expr> T_RPAREN T_THEN T_EOS
  | <LblDef> <Name> T_COLON T_IF T_LPAREN <Expr> T_RPAREN T_THEN T_EOS


# R804
<ElseIfStmt> ::=
    <LblDef> T_ELSEIF T_LPAREN <Expr> T_RPAREN T_THEN T_EOS
  | <LblDef> T_ELSEIF T_LPAREN <Expr> T_RPAREN T_THEN <EndName> T_EOS
  | <LblDef> T_ELSE T_IF T_LPAREN <Expr> T_RPAREN T_THEN T_EOS
  | <LblDef> T_ELSE T_IF T_LPAREN <Expr> T_RPAREN T_THEN <EndName> T_EOS


# R805
<ElseStmt> ::=
    <LblDef> T_ELSE T_EOS
  | <LblDef> T_ELSE <EndName> T_EOS


# R806
<EndIfStmt> ::=
    <LblDef> T_ENDIF ( <EndName> )? T_EOS
  | <LblDef> T_END T_IF ( <EndName> )? T_EOS


# R807
<IfStmt> ::=
  <LblDef> T_IF T_LPAREN <Expr> T_RPAREN <ActionStmt>


# R808
<CaseConstruct> ::=
  <SelectCaseStmt> <SelectCaseRange>

<SelectCaseRange> ::=
    <SelectCaseBody> <EndSelectStmt>
  | <EndSelectStmt>


<SelectCaseBody> ::=
    <CaseStmt>
  | <SelectCaseBody> <CaseBodyConstruct>

<CaseBodyConstruct> ::=
    <CaseStmt>
  | <ExecutionPartConstruct>


# R809 chain rule eliminated
<SelectCaseStmt> ::=
    <LblDef> <Name> T_COLON T_SELECTCASE T_LPAREN <Expr> T_RPAREN T_EOS
  | <LblDef> T_SELECTCASE T_LPAREN <Expr> T_RPAREN T_EOS
  | <LblDef> <Name> T_COLON T_SELECT T_CASE T_LPAREN <Expr> T_RPAREN T_EOS
  | <LblDef> T_SELECT T_CASE T_LPAREN <Expr> T_RPAREN T_EOS


# R810
<CaseStmt> ::=
    <LblDef> T_CASE <CaseSelector> T_EOS
  | <LblDef> T_CASE <CaseSelector> <Name> T_EOS


# R811
<EndSelectStmt> ::=
    <LblDef> T_ENDSELECT ( <EndName> )? T_EOS
  | <LblDef> T_END T_SELECT ( <EndName> )? T_EOS


# R812 chain rules deleted

# R813
<CaseSelector> ::=
    T_LPAREN <CaseValueRangeList> T_RPAREN
  | T_DEFAULT

<CaseValueRangeList> ::=
    <CaseValueRange>
  | @:<CaseValueRangeList> T_COMMA <CaseValueRange>


# R814
<CaseValueRange> ::=
   <Expr>
  | <Expr> T_COLON
  | T_COLON <Expr>
  | <Expr> T_COLON <Expr>


# R815 chain rules deleted

# R816
<DoConstruct> ::= <BlockDoConstruct>


# R817
# Block DO constructs cannot be recognized syntactically because there is
# no requirement that there be an end do statement;
#
# <BlockDoConstruct>:
#   <DoStmt> <Block> <EndDoStmt> |
#   <DoStmt> <Block> ;
<BlockDoConstruct> ::= <LabelDoStmt>


# R818
<LabelDoStmt> ::=
    <LblDef> T_DO <LblRef> <CommaLoopControl> T_EOS
  | <LblDef> T_DO <LblRef> T_EOS
  | <LblDef> T_DO <CommaLoopControl> T_EOS
  | <LblDef> T_DO T_EOS
  | <LblDef> <Name> T_COLON T_DO <LblRef> <CommaLoopControl> T_EOS
  | <LblDef> <Name> T_COLON T_DO <LblRef> T_EOS
  | <LblDef> <Name> T_COLON T_DO <CommaLoopControl> T_EOS
  | <LblDef> <Name> T_COLON T_DO T_EOS


# R819 chain rule deleted

# R820 chain rule deleted

# R821 see 40
<CommaLoopControl> ::=
    T_COMMA <LoopControl>
  | <LoopControl>

<LoopControl> ::=
    <VariableName> T_EQUALS <Expr> T_COMMA <Expr>
  | <VariableName> T_EQUALS <Expr> T_COMMA <Expr> T_COMMA <Expr>
  | T_WHILE T_LPAREN <Expr> T_RPAREN


# R822 chain rule deleted

# R823 chain rule deleted

# R824 see note on R817

# R825
<EndDoStmt> ::=
    <LblDef> T_ENDDO ( <EndName> )? T_EOS
  | <LblDef> T_END T_DO ( <EndName> )? T_EOS


# R826-R833 enforced semantically

# R834
<CycleStmt> ::=
  <LblDef> T_CYCLE ( <Name> )? T_EOS


# R835
<ExitStmt> ::=
  <LblDef> T_EXIT ( <Name> )? T_EOS


# R836
<GotoStmt> ::=
  <LblDef> <GoToKw> <LblRef> T_EOS


<GoToKw> ::=
    T_GOTO
  | T_GO T_TO


# R837
<ComputedGotoStmt> ::=
    <LblDef> <GoToKw> T_LPAREN <LblRefList> T_RPAREN <Expr> T_EOS
  | <LblDef> <GoToKw> T_LPAREN <LblRefList> T_RPAREN <CommaExp> T_EOS

<CommaExp> ::= T_COMMA <Expr>

<LblRefList> ::=
    <LblRef>
  | @:<LblRefList> T_COMMA <LblRef>

<LblRef> ::= <Label>


# R838
<ArithmeticIfStmt> ::=
  <LblDef> T_IF T_LPAREN <Expr> T_RPAREN <LblRef> T_COMMA <LblRef> T_COMMA <LblRef> T_EOS


# R839
<ContinueStmt> ::=
  <LblDef> T_CONTINUE T_EOS


# R840
<StopStmt> ::=
    <LblDef> T_STOP T_EOS
  | <LblDef> T_STOP T_ICON T_EOS
  | <LblDef> T_STOP T_SCON T_EOS


# R841 chain rule deleted

<< Section: Section 9 Rules >>

# R901
<UnitIdentifier> ::=
    <UFExpr>
  | T_ASTERISK


# R902 chain rule deleted

# R903 chain rule deleted

# R904
<OpenStmt> ::=
  <LblDef> T_OPEN T_LPAREN <ConnectSpecList> T_RPAREN T_EOS


# R905
<ConnectSpecList> ::=
    <UnitIdentifier>
  | <ConnectSpec>
  | @:<ConnectSpecList> T_COMMA <ConnectSpec>

<ConnectSpec> ::=
    T_UNITEQ <UnitIdentifier>
  | T_ERREQ <LblRef>
  | T_FILEEQ <CExpr>
  | T_STATUSEQ <CExpr>
  | T_ACCESSEQ <CExpr>
  | T_FORMEQ <CExpr>
  | T_RECLEQ <Expr>
  | T_BLANKEQ <CExpr>
  | T_IOSTATEQ <ScalarVariable>
  | T_POSITIONEQ <CExpr>
  | T_ACTIONEQ <CExpr>
  | T_DELIMEQ <CExpr>
  | T_PADEQ <CExpr>


# R906 chain rule deleted

# R907
<CloseStmt> ::=
  <LblDef> T_CLOSE T_LPAREN <CloseSpecList> T_RPAREN T_EOS


# R908
<CloseSpecList> ::=
    <UnitIdentifier>
  | <CloseSpec>
  | @:<CloseSpecList> T_COMMA <CloseSpec>

<CloseSpec> ::=
    T_UNITEQ <UnitIdentifier>
  | T_ERREQ <LblRef>
  | T_STATUSEQ <CExpr>
  | T_IOSTATEQ <ScalarVariable>


# R909
<ReadStmt> ::=
    <LblDef> T_READ <RdCtlSpec> <InputItemList> T_EOS
  | <LblDef> T_READ <RdCtlSpec> T_EOS
  | <LblDef> T_READ <RdFmtId> T_COMMA <InputItemList> T_EOS
  | <LblDef> T_READ <RdFmtId> T_EOS

<RdCtlSpec> ::=
    <RdUnitId>
  | T_LPAREN <RdIoCtlSpecList> T_RPAREN

<RdUnitId> ::=
    T_LPAREN <UFExpr> T_RPAREN
  | T_LPAREN T_ASTERISK T_RPAREN

<RdIoCtlSpecList> ::=
    <UnitIdentifier> T_COMMA <IoControlSpec>
  | <UnitIdentifier> T_COMMA <FormatIdentifier>
  | <IoControlSpec>
  | @:<RdIoCtlSpecList> T_COMMA <IoControlSpec>

<RdFmtId> ::=
    <LblRef>
  | T_ASTERISK
  | <COperand>
  | <COperand> <ConcatOp> <CPrimary>
  | <RdFmtIdExpr> <ConcatOp> <CPrimary>

<RdFmtIdExpr> ::= T_LPAREN <UFExpr> T_RPAREN


# R910
<WriteStmt> ::=
    <LblDef> T_WRITE T_LPAREN <IoControlSpecList> T_RPAREN <OutputItemList> T_EOS
  | <LblDef> T_WRITE T_LPAREN <IoControlSpecList> T_RPAREN T_EOS


# R911
<PrintStmt> ::=
    <LblDef> T_PRINT <FormatIdentifier> T_COMMA <OutputItemList> T_EOS
  | <LblDef> T_PRINT <FormatIdentifier> T_EOS


# R912
<IoControlSpecList> ::=
# JO - $
#  <UnitIdentifier> $T_COMMA |
    <UnitIdentifier>					:xIoControlSpecList
  | <UnitIdentifier> T_COMMA <FormatIdentifier>
  | <UnitIdentifier> T_COMMA <IoControlSpec>
  | <IoControlSpec>
  | @:<IoControlSpecList> T_COMMA <IoControlSpec>

<IoControlSpec> ::=
    T_FMTEQ <FormatIdentifier>
  | T_UNITEQ <UnitIdentifier>
  | T_RECEQ <Expr>
  | T_ENDEQ <LblRef>
  | T_ERREQ <LblRef>
  | T_IOSTATEQ <ScalarVariable>
  | T_NMLEQ <NamelistGroupName>
  | T_ADVANCEEQ <CExpr>
  | T_SIZEEQ <Variable>
  | T_EOREQ <LblRef>
# JO -- Was T_OR, which is incorrect


# R913
<FormatIdentifier> ::=
    <LblRef>
  | <CExpr>
  | T_ASTERISK


# R914
<InputItemList> ::=
    <InputItem>
  | @:<InputItemList> T_COMMA <InputItem>

<InputItem> ::=
    <Variable>
  | <InputImpliedDo>


# 915
<OutputItemList> ::=
    <Expr>
  | <OutputItemList1>

<OutputItemList1> ::=
    <Expr> T_COMMA <Expr>
  | <Expr> T_COMMA <OutputImpliedDo>
  | <OutputImpliedDo>
  | @:<OutputItemList1> T_COMMA <Expr>
  | @:<OutputItemList1> T_COMMA <OutputImpliedDo>


# R916
<InputImpliedDo> ::=
    T_LPAREN <InputItemList> T_COMMA <ImpliedDoVariable> T_EQUALS <Expr> T_COMMA <Expr> T_RPAREN
  | T_LPAREN <InputItemList> T_COMMA <ImpliedDoVariable> T_EQUALS <Expr> T_COMMA <Expr> T_COMMA <Expr> T_RPAREN


<OutputImpliedDo> ::=
    T_LPAREN <Expr> T_COMMA <ImpliedDoVariable> T_EQUALS <Expr> T_COMMA <Expr> T_RPAREN
  | T_LPAREN <Expr> T_COMMA <ImpliedDoVariable> T_EQUALS <Expr> T_COMMA <Expr> T_COMMA <Expr> T_RPAREN
  | T_LPAREN <OutputItemList1> T_COMMA <ImpliedDoVariable> T_EQUALS <Expr> T_COMMA <Expr> T_RPAREN
  | T_LPAREN <OutputItemList1> T_COMMA <ImpliedDoVariable> T_EQUALS <Expr> T_COMMA <Expr> T_COMMA <Expr> T_RPAREN


# R917 chain rule deleted

# R918 chain rule deleted

# R919
<BackspaceStmt> ::=
    <LblDef> T_BACKSPACE <UnitIdentifier> T_EOS
  | <LblDef> T_BACKSPACE T_LPAREN <PositionSpecList> T_RPAREN T_EOS


# R920
<EndfileStmt> ::=
    <LblDef> T_ENDFILE <UnitIdentifier> T_EOS
  | <LblDef> T_ENDFILE T_LPAREN <PositionSpecList> T_RPAREN T_EOS
  | <LblDef> T_END T_FILE <UnitIdentifier> T_EOS
  | <LblDef> T_END T_FILE T_LPAREN <PositionSpecList> T_RPAREN T_EOS


# R921
<RewindStmt> ::=
    <LblDef> T_REWIND <UnitIdentifier> T_EOS
  | <LblDef> T_REWIND T_LPAREN <PositionSpecList> T_RPAREN T_EOS


# R922
<PositionSpecList> ::=
    <UnitIdentifier> T_COMMA <PositionSpec>
  | <PositionSpec>
  | @:<PositionSpecList> T_COMMA <PositionSpec>

<PositionSpec> ::=
    T_UNITEQ <UnitIdentifier>
  | T_ERREQ <LblRef>
  | T_IOSTATEQ <ScalarVariable>


# R923
<InquireStmt> ::=
    <LblDef> T_INQUIRE T_LPAREN <InquireSpecList> T_RPAREN T_EOS
  | <LblDef> T_INQUIRE T_LPAREN T_IOLENGTHEQ <ScalarVariable> T_RPAREN <OutputItemList> T_EOS


# R924
<InquireSpecList> ::=
    <UnitIdentifier>
  | <InquireSpec>
  | @:<InquireSpecList> T_COMMA <InquireSpec>

<InquireSpec> ::=
    T_UNITEQ <UnitIdentifier>
  | T_FILEEQ <CExpr>
  | T_ERREQ <LblRef>
  | T_IOSTATEQ <ScalarVariable>
  | T_EXISTEQ <ScalarVariable>
  | T_OPENEDEQ <ScalarVariable>
  | T_NUMBEREQ <ScalarVariable>
  | T_NAMEDEQ <ScalarVariable>
  | T_NAMEEQ <ScalarVariable>
  | T_ACCESSEQ <ScalarVariable>
  | T_SEQUENTIALEQ <ScalarVariable>
  | T_DIRECTEQ <ScalarVariable>
  | T_FORMEQ <ScalarVariable>
  | T_FORMATTEDEQ <ScalarVariable>
  | T_UNFORMATTEDEQ <ScalarVariable>
  | T_RECLEQ <Expr>
  | T_NEXTRECEQ <ScalarVariable>
  | T_BLANKEQ <ScalarVariable>
  | T_POSITIONEQ <ScalarVariable>
  | T_ACTIONEQ <ScalarVariable>
  | T_READEQ <ScalarVariable>
  | T_WRITEEQ <ScalarVariable>
  | T_READWRITEEQ <ScalarVariable>
  | T_DELIMEQ <ScalarVariable>
  | T_PADEQ <ScalarVariable>


<< Section: Section 10 Rules >>

# I have trouble verifying this section because of its reliance on
#  lexical analysis */
# R1001
<FormatStmt> ::=
  <LblDef> T_FORMAT T_LPAREN ( <FmtSpec> )? T_RPAREN T_EOS
  | <LblDef> T_FORMAT /error/ T_EOS


# R1002
<FmtSpec> ::=
    <Formatedit>
  | <Formatsep>
  | <Formatsep> <Formatedit>
  | <FmtSpec> <Formatsep>
  | <FmtSpec> <Formatsep> <Formatedit>
  | <FmtSpec> T_COMMA <Formatedit>
  | <FmtSpec> T_COMMA <Formatsep>
  | <FmtSpec> T_COMMA <Formatsep> <Formatedit>


# R1003
<Formatedit> ::=
    <EditElement>
  | T_ICON <EditElement>
  | T_XCON
  | T_PCON
  | T_PCON <EditElement>
  | T_PCON T_ICON <EditElement>


#dirk rossow added T_HCON
<EditElement> ::=
    T_FCON
  | T_SCON
  | T_IDENT
  | T_LPAREN <FmtSpec> T_RPAREN
  | T_HCON


# R1004 chain rule deleted

# R1005 chain rule deleted as le<ically> recognized elements

# R1010
<Formatsep> ::=
    T_SLASH
  | T_COLON


<< Section: More Section 11 Rules >>

# R1101 see high level synta<>

# R1102
<ProgramStmt> ::=
  <LblDef> T_PROGRAM <ProgramName> T_EOS


# R1103
<EndProgramStmt> ::=
    <LblDef> T_END T_EOS
  | <LblDef> T_ENDPROGRAM ( <EndName> )? T_EOS
  | <LblDef> T_END T_PROGRAM ( <EndName> )? T_EOS


# R1104 see high level synta<>

# R1105
<ModuleStmt> ::=
  <LblDef> T_MODULE <ModuleName> T_EOS


# R1106
<EndModuleStmt> ::=
    <LblDef> T_END T_EOS
  | <LblDef> T_ENDMODULE ( <EndName> )? T_EOS
  | <LblDef> T_END T_MODULE ( <EndName> )? T_EOS


# R1107
<UseStmt> ::=
    <LblDef> T_USE <Name> T_EOS
  | <LblDef> T_USE <Name> T_COMMA <RenameList> T_EOS
  | <LblDef> T_USE <Name> T_COMMA T_ONLY T_COLON ( <OnlyList> )? T_EOS

<RenameList> ::=
    <Rename>
  | @:<RenameList> T_COMMA <Rename>

<OnlyList> ::=
                        <Only>
  | @:<OnlyList> T_COMMA <Only>


# R1108
<Rename> ::= T_IDENT T_EQGREATERTHAN <UseName>


# R1109
<Only> ::=
    <GenericSpec>
  | T_IDENT T_EQGREATERTHAN <UseName>
  | <UseName>


# R1110 chain rule deleted

# R111 chain rule deleted

# R1112 see high level synta<>

# R1113
<BlockDataStmt> ::=
    <LblDef> T_BLOCKDATA <BlockDataName> T_EOS
  | <LblDef> T_BLOCKDATA T_EOS


# R1114
<EndBlockDataStmt> ::=
    <LblDef> T_END T_EOS
  | <LblDef> T_ENDBLOCKDATA ( <EndName> )? T_EOS
  | <LblDef> T_END T_BLOCKDATA ( <EndName> )? T_EOS
  | <LblDef> T_ENDBLOCK T_DATA ( <EndName> )? T_EOS
  | <LblDef> T_END T_BLOCK T_DATA ( <EndName> )? T_EOS


<< Section: More Section 12 Rules >>

# R1201
<InterfaceBlock> ::=
  <InterfaceStmt> <InterfaceRange>

<InterfaceRange> ::=
  <InterfaceBlockBody> <EndInterfaceStmt>

<InterfaceBlockBody> ::=
    <InterfaceSpecification>
  | <InterfaceBlockBody> <InterfaceSpecification>


# R1202
<InterfaceSpecification> ::=
    <InterfaceBody>
  | <ModuleProcedureStmt>


# R1203
<InterfaceStmt> ::=
    <LblDef> T_INTERFACE <GenericName> T_EOS
  | <LblDef> T_INTERFACE <GenericSpec> T_EOS
  | <LblDef> T_INTERFACE T_EOS


# R1204
<EndInterfaceStmt> ::=
    <LblDef> T_ENDINTERFACE    (<EndName>)? T_EOS
  | <LblDef> T_END T_INTERFACE (<EndName>)? T_EOS


# R1205
<InterfaceBody> ::=
    <FunctionStmt> <FunctionInterfaceRange>
  | <SubroutineStmt> <SubroutineInterfaceRange>

<FunctionInterfaceRange> ::=
    <SubprogramInterfaceBody> <EndFunctionStmt>
  | <EndFunctionStmt>

<SubroutineInterfaceRange> ::=
    <SubprogramInterfaceBody> <EndSubroutineStmt>
  | <EndSubroutineStmt>

<SubprogramInterfaceBody> ::=
    <SpecificationPartConstruct>
  | <SubprogramInterfaceBody> <SpecificationPartConstruct>


# R1206
<ModuleProcedureStmt> ::=
  <LblDef> T_MODULE T_PROCEDURE <ProcedureNameList> T_EOS

<ProcedureNameList> ::=
    <ProcedureName>
  | @:<ProcedureNameList> T_COMMA <ProcedureName>

<ProcedureName> ::= T_IDENT


# R1207
<GenericSpec> ::=
    T_OPERATOR T_LPAREN <DefinedOperator> T_RPAREN
  | T_ASSIGNMENT T_LPAREN T_EQUALS T_RPAREN


# R1208
<ExternalStmt> ::=
    <LblDef> T_EXTERNAL <ExternalNameList> T_EOS
  | <LblDef> T_EXTERNAL T_COLON T_COLON <ExternalNameList> T_EOS

<ExternalNameList> ::=
    <ExternalName>
  | @:<ExternalNameList> T_COMMA <ExternalName>


# R1209
<IntrinsicStmt> ::=
    <LblDef> T_INTRINSIC <IntrinsicList> T_EOS
  | <LblDef> T_INTRINSIC T_COLON T_COLON <IntrinsicList> T_EOS

<IntrinsicList> ::=
    <IntrinsicProcedureName>
  | @:<IntrinsicList> T_COMMA <IntrinsicProcedureName>


# R1210
<FunctionReference> ::=
    <Name> T_LPAREN T_RPAREN
  | <Name> T_LPAREN <FunctionArgList> T_RPAREN


# R1211
<CallStmt> ::=
    <LblDef> T_CALL <SubroutineNameUse> T_EOS
  | <LblDef> T_CALL <SubroutineNameUse> T_LPAREN <SubroutineArgList> T_RPAREN T_EOS

<SubroutineArgList> ::=
    /empty/
  | <SubroutineArg>
  | @:<SubroutineArgList> T_COMMA <SubroutineArg>


# R1212
# Functions initially recognized as arrays resolved semantically
<FunctionArgList> ::=
    <FunctionArg>
  | @:<FunctionArgList> T_COMMA <FunctionArg>
  | <SectionSubscriptList> T_COMMA <FunctionArg>

<FunctionArg> ::= <Name> T_EQUALS <Expr>


#dirk rossow added T_HCON
<SubroutineArg> ::=
    <Expr>
  | T_ASTERISK <LblRef>
  | <Name> T_EQUALS <Expr>
  | <Name> T_EQUALS T_ASTERISK <LblRef>
  | T_HCON
  | <Name> T_EQUALS T_HCON


# R1213 chain rule deleted

# R1214 chain rule deleted

# R1215 chain rule deleted

# R1216 see high level synta<>

# R1217 chain rule deleted
<FunctionStmt> ::=
  <LblDef> <FunctionPrefix> <FunctionName> T_LPAREN <FunctionPars> T_RPAREN ( T_RESULT T_LPAREN <Name> T_RPAREN )? T_EOS
  | <LblDef> <FunctionPrefix> <FunctionName> /error/ T_EOS


<FunctionPars> ::=
    /empty/
  | <FunctionPar>
  | @:<FunctionPars> T_COMMA <FunctionPar>

<FunctionPar> ::= <DummyArgName>


# R1218
<FunctionPrefix> ::=
    T_FUNCTION
  | <PrefixSpecList> T_FUNCTION

<PrefixSpecList> ::=
    <PrefixSpec>
  | @:<PrefixSpecList> <PrefixSpec>


# R1219
<PrefixSpec> ::=
    <TypeSpec> 
  | T_RECURSIVE
  | T_PURE
  | T_ELEMENTAL


# R1220
<EndFunctionStmt> ::=
    <LblDef> T_END T_EOS
  | <LblDef> T_ENDFUNCTION ( <EndName> )? T_EOS
  | <LblDef> T_END T_FUNCTION ( <EndName> )? T_EOS


# R1221 see high level synta<>

# R1222
<SubroutineStmt> ::=
  <LblDef> <SubroutinePrefix> <SubroutineName> ( T_LPAREN <SubroutinePars> T_RPAREN )? T_EOS
  | <LblDef> <SubroutinePrefix> <SubroutineName> /error/ T_EOS

<SubroutinePrefix> ::=
    T_SUBROUTINE
  | <PrefixSpecList> T_SUBROUTINE

<SubroutinePars> ::=
    /empty/
  | <SubroutinePar>
  | @:<SubroutinePars> T_COMMA <SubroutinePar>


# R1223
<SubroutinePar> ::=
    <DummyArgName>
  | T_ASTERISK


# R1224
<EndSubroutineStmt> ::=
    <LblDef> T_END T_EOS
  | <LblDef> T_ENDSUBROUTINE ( <EndName> )? T_EOS
  | <LblDef> T_END T_SUBROUTINE ( <EndName> )? T_EOS


# R1225 - JO - Macro substituted
<EntryStmt> ::=
  <LblDef> T_ENTRY <EntryName> ( T_LPAREN <SubroutinePars> T_RPAREN )? T_EOS

#  <LblDef> T_ENTRY <EntryName> T_LPAREN <SubroutinePars> T_RPAREN 
#    T_RESULT T_LPAREN <Name> T_RPAREN T_EOS ;

# R1226
<ReturnStmt> ::=
    <LblDef> T_RETURN T_EOS
  | <LblDef> T_RETURN <Expr> T_EOS


# R1227
<ContainsStmt> ::=
  <LblDef> T_CONTAINS T_EOS


# R1228
# This may turn out to be an assignment statement, but the form given here
# allows for name analysis in the case that it actually IS a statement
# function definition;
<StmtFunctionStmt> ::= <LblDef> <Name> <StmtFunctionRange>

<StmtFunctionRange> ::= T_LPAREN T_RPAREN T_EQUALS <Expr> T_EOS

<StmtFunctionRange> ::= T_LPAREN <SFDummyArgNameList> T_RPAREN T_EQUALS <Expr> T_EOS

<SFDummyArgNameList> ::=
    <SFDummyArgName>
  | @:<SFDummyArgNameList> T_COMMA <SFDummyArgName>


<< Section: Additional Rules >>

# Nonterminal symbols that are not defined in the standard
<ArrayName> ::= T_IDENT

<BlockDataName> ::= T_IDENT

<CommonBlockName> ::= T_IDENT

<ComponentName> ::= T_IDENT

<DummyArgName> ::= T_IDENT

<EndName> ::= T_IDENT

<EntryName> ::= T_IDENT

<ExternalName> ::= T_IDENT

<FunctionName> ::= T_IDENT

<GenericName> ::= T_IDENT

<ImpliedDoVariable> ::= T_IDENT

<IntrinsicProcedureName> ::= T_IDENT

<ModuleName> ::= T_IDENT

<NamelistGroupName> ::= T_IDENT

<ObjectName> ::= T_IDENT

<ProgramName> ::= T_IDENT

<SFDummyArgName> ::= <Name>     :xSFDummyArgName
# JO - Was T_IDENT but caused r/r conflict
# JO - $
#<SFVarName> ::= T_IDENT $T_COMMA $T_RPAREN ;
<SFVarName> ::= <Name>          :xSFVarName
# JO - Was T_IDENT but caused r/r conflict
<SubroutineName> ::= T_IDENT

<SubroutineNameUse> ::= T_IDENT

<TypeName> ::= T_IDENT

<UseName> ::= T_IDENT


<LblDef> ::=
    /empty/
  | <Label>


<< Section: Deleted Features >>

#/***** DELETED FEATURES *****/
#
#/* Real and double precision do variables */
#
## R821
#/* Punt on this as it involves introducing more complicated
#* conditional compilation features in main standard
#*/
#
## R822
#/* Punt on this as it involves introducing more complicated
#* conditional compilation features in main standard
#*/
#
## R921
#/* Punt on this as it involves introducing more complicated
#* conditional compilation features in main standard
#*/
#
# R216
<ActionStmt> ::=
    <AssignStmt>
  | <AssignedGotoStmt>
  | <PauseStmt>


#/* Pause statement */
<PauseStmt> ::=
    <LblDef> T_PAUSE T_EOS
  | <LblDef> T_PAUSE T_ICON T_EOS
  | <LblDef> T_PAUSE T_SCON T_EOS


#/* Assign Statement */
<AssignStmt> ::=
  <LblDef> T_ASSIGN <LblRef> T_TO <VariableName> T_EOS


#/* Assigned GOTO Statement */
<AssignedGotoStmt> ::=
    <LblDef> <GoToKw> <VariableName> T_EOS
  | <LblDef> <GoToKw> <VariableName> T_LPAREN <LblRefList> T_RPAREN T_EOS
  | <LblDef> <GoToKw> <VariableComma> T_LPAREN <LblRefList> T_RPAREN T_EOS

<VariableComma> ::= <VariableName> T_COMMA


#/* H edit descriptor */
#
## R305
#<Constant> ::=
#  <Hcon> ;
#
## R1003
#<EditElement> ::=
#  <Hcon> ;
#
## R1212
#<SubroutineArg> ::=
#  <Hcon> |
#  <Name> T_EQUALS <Hcon> ;
