// Generated by Ludwig version 1.0 alpha 6

package org.eclipse.photran.internal.core.parser;

import org.eclipse.photran.internal.core.lexer.Token;


/**
 * <DefinedOperator> ::= txdop:T_XDOP 
 * <DefinedOperator> ::= ConcatOp:<ConcatOp> 
 * <DefinedOperator> ::= PowerOp:<PowerOp> 
 * <DefinedOperator> ::= MultOp:<MultOp> 
 * <DefinedOperator> ::= AddOp:<AddOp> 
 * <DefinedOperator> ::= RelOp:<RelOp> 
 * <DefinedOperator> ::= NotOp:<NotOp> 
 * <DefinedOperator> ::= AndOp:<AndOp> 
 * <DefinedOperator> ::= OrOp:<OrOp> 
 * <DefinedOperator> ::= EquivOp:<EquivOp> 
 */
public class ASTDefinedOperatorNode extends ParseTreeNode
{
    public ASTDefinedOperatorNode(Nonterminal nonterminal, Production production)
    {
        super(nonterminal, production);
    }

    public Token getASTTxdop()
    {
        return this.getChildToken("txdop");
    }

    public ASTConcatOpNode getASTConcatOp()
    {
        return (ASTConcatOpNode)this.getChild("ConcatOp");
    }

    public ASTPowerOpNode getASTPowerOp()
    {
        return (ASTPowerOpNode)this.getChild("PowerOp");
    }

    public ASTMultOpNode getASTMultOp()
    {
        return (ASTMultOpNode)this.getChild("MultOp");
    }

    public ASTAddOpNode getASTAddOp()
    {
        return (ASTAddOpNode)this.getChild("AddOp");
    }

    public ASTRelOpNode getASTRelOp()
    {
        return (ASTRelOpNode)this.getChild("RelOp");
    }

    public ASTNotOpNode getASTNotOp()
    {
        return (ASTNotOpNode)this.getChild("NotOp");
    }

    public ASTAndOpNode getASTAndOp()
    {
        return (ASTAndOpNode)this.getChild("AndOp");
    }

    public ASTOrOpNode getASTOrOp()
    {
        return (ASTOrOpNode)this.getChild("OrOp");
    }

    public ASTEquivOpNode getASTEquivOp()
    {
        return (ASTEquivOpNode)this.getChild("EquivOp");
    }

    protected void visitThisNodeUsing(ASTVisitor visitor) { visitor.visitASTDefinedOperatorNode(this); }
}
