// Generated by Ludwig version 1.0 alpha 6

package org.eclipse.photran.internal.core.parser;

import org.eclipse.photran.internal.core.lexer.Token;


/**
 * <DerivedTypeStmt> ::= LblDef:<LblDef> ttype:T_TYPE TypeName:<TypeName> teos:T_EOS 
 * <DerivedTypeStmt> ::= LblDef:<LblDef> ttype:T_TYPE tcolon:T_COLON tcolon2:T_COLON TypeName:<TypeName> teos:T_EOS 
 * <DerivedTypeStmt> ::= LblDef:<LblDef> ttype:T_TYPE tcomma:T_COMMA AccessSpec:<AccessSpec> tcolon:T_COLON tcolon2:T_COLON TypeName:<TypeName> teos:T_EOS 
 */
public class ASTDerivedTypeStmtNode extends ParseTreeNode
{
    public ASTDerivedTypeStmtNode(Nonterminal nonterminal, Production production)
    {
        super(nonterminal, production);
    }

    public ASTLblDefNode getASTLblDef()
    {
        return (ASTLblDefNode)this.getChild("LblDef");
    }

    public Token getASTTtype()
    {
        return this.getChildToken("ttype");
    }

    public ASTTypeNameNode getASTTypeName()
    {
        return (ASTTypeNameNode)this.getChild("TypeName");
    }

    public Token getASTTeos()
    {
        return this.getChildToken("teos");
    }

    public Token getASTTcolon()
    {
        return this.getChildToken("tcolon");
    }

    public Token getASTTcolon2()
    {
        return this.getChildToken("tcolon2");
    }

    public Token getASTTcomma()
    {
        return this.getChildToken("tcomma");
    }

    public ASTAccessSpecNode getASTAccessSpec()
    {
        return (ASTAccessSpecNode)this.getChild("AccessSpec");
    }

    protected void visitThisNodeUsing(ASTVisitor visitor) { visitor.visitASTDerivedTypeStmtNode(this); }
}
