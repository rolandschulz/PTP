// Generated by Ludwig version 1.0 alpha 6

package org.eclipse.photran.internal.core.parser;

import java.util.ArrayList;
import java.util.LinkedList;

import org.eclipse.photran.internal.core.lexer.Token;

/**
 * Enumerates the productions in the grammar being parsed
 */
public class Productions extends AbstractProductions
{
    private Productions() {;} // Singleton
    private static Productions singletonInstance = null;
    public static final Productions getInstance() { if (singletonInstance == null) singletonInstance = new Productions(); return singletonInstance; }

    /**
     * This method is called before parsing begins
     */
    void initialize()
    {
    }

    /**
     * This method is called after parsing completes
     */
    void deinitialize()
    {
    }

    /**
     * This method is called when a syntax error is found and could not be recovered from
     */
    void syntaxError() throws Exception
    {
    }

    public static class Production2Production extends Production
    {
        private Production2Production() {;} // Singleton
        private static Production2Production singletonInstance = null;
        public static final Production2Production getInstance() { if (singletonInstance == null) singletonInstance = new Production2Production(); return singletonInstance; }

        public String getDescription() { return "<ExecutableProgram> ::= ProgramUnit:<ProgramUnit>  :production2"; }

        /**
         * Reduce by <ExecutableProgram> ::= ProgramUnit:<ProgramUnit>  :production2
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ExecutableProgram> ::= ProgramUnit:<ProgramUnit>  :production2
            ASTProgramUnitNode v1 = (ASTProgramUnitNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTExecutableProgramNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ExecutableProgramNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ProgramUnit"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ExecutableProgram> ::= ProgramUnit:<ProgramUnit>  :production2
         */
        protected ASTExecutableProgramNode userAction(ASTProgramUnitNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production2Production PRODUCTION2 = Production2Production.getInstance();

    public static class Production3Production extends Production
    {
        private Production3Production() {;} // Singleton
        private static Production3Production singletonInstance = null;
        public static final Production3Production getInstance() { if (singletonInstance == null) singletonInstance = new Production3Production(); return singletonInstance; }

        public String getDescription() { return "<ExecutableProgram> ::= @:<ExecutableProgram> ProgramUnit:<ProgramUnit>  :production3"; }

        /**
         * Reduce by <ExecutableProgram> ::= @:<ExecutableProgram> ProgramUnit:<ProgramUnit>  :production3
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ExecutableProgram> ::= @:<ExecutableProgram> ProgramUnit:<ProgramUnit>  :production3
            ASTProgramUnitNode v2 = (ASTProgramUnitNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExecutableProgramNode v1 = (ASTExecutableProgramNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTExecutableProgramNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.ExecutableProgramNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("ProgramUnit"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ExecutableProgram> ::= @:<ExecutableProgram> ProgramUnit:<ProgramUnit>  :production3
         */
        protected ASTExecutableProgramNode userAction(ASTExecutableProgramNode v1, ASTProgramUnitNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production3Production PRODUCTION3 = Production3Production.getInstance();

    public static class Production4Production extends Production
    {
        private Production4Production() {;} // Singleton
        private static Production4Production singletonInstance = null;
        public static final Production4Production getInstance() { if (singletonInstance == null) singletonInstance = new Production4Production(); return singletonInstance; }

        public String getDescription() { return "<ProgramUnit> ::= MainProgram:<MainProgram>  :production4"; }

        /**
         * Reduce by <ProgramUnit> ::= MainProgram:<MainProgram>  :production4
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ProgramUnit> ::= MainProgram:<MainProgram>  :production4
            ASTMainProgramNode v1 = (ASTMainProgramNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTProgramUnitNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ProgramUnitNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("MainProgram"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ProgramUnit> ::= MainProgram:<MainProgram>  :production4
         */
        protected ASTProgramUnitNode userAction(ASTMainProgramNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production4Production PRODUCTION4 = Production4Production.getInstance();

    public static class Production5Production extends Production
    {
        private Production5Production() {;} // Singleton
        private static Production5Production singletonInstance = null;
        public static final Production5Production getInstance() { if (singletonInstance == null) singletonInstance = new Production5Production(); return singletonInstance; }

        public String getDescription() { return "<ProgramUnit> ::= FunctionSubprogram:<FunctionSubprogram>  :production5"; }

        /**
         * Reduce by <ProgramUnit> ::= FunctionSubprogram:<FunctionSubprogram>  :production5
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ProgramUnit> ::= FunctionSubprogram:<FunctionSubprogram>  :production5
            ASTFunctionSubprogramNode v1 = (ASTFunctionSubprogramNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTProgramUnitNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ProgramUnitNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("FunctionSubprogram"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ProgramUnit> ::= FunctionSubprogram:<FunctionSubprogram>  :production5
         */
        protected ASTProgramUnitNode userAction(ASTFunctionSubprogramNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production5Production PRODUCTION5 = Production5Production.getInstance();

    public static class Production6Production extends Production
    {
        private Production6Production() {;} // Singleton
        private static Production6Production singletonInstance = null;
        public static final Production6Production getInstance() { if (singletonInstance == null) singletonInstance = new Production6Production(); return singletonInstance; }

        public String getDescription() { return "<ProgramUnit> ::= SubroutineSubprogram:<SubroutineSubprogram>  :production6"; }

        /**
         * Reduce by <ProgramUnit> ::= SubroutineSubprogram:<SubroutineSubprogram>  :production6
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ProgramUnit> ::= SubroutineSubprogram:<SubroutineSubprogram>  :production6
            ASTSubroutineSubprogramNode v1 = (ASTSubroutineSubprogramNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTProgramUnitNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ProgramUnitNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SubroutineSubprogram"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ProgramUnit> ::= SubroutineSubprogram:<SubroutineSubprogram>  :production6
         */
        protected ASTProgramUnitNode userAction(ASTSubroutineSubprogramNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production6Production PRODUCTION6 = Production6Production.getInstance();

    public static class Production7Production extends Production
    {
        private Production7Production() {;} // Singleton
        private static Production7Production singletonInstance = null;
        public static final Production7Production getInstance() { if (singletonInstance == null) singletonInstance = new Production7Production(); return singletonInstance; }

        public String getDescription() { return "<ProgramUnit> ::= Module:<Module>  :production7"; }

        /**
         * Reduce by <ProgramUnit> ::= Module:<Module>  :production7
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ProgramUnit> ::= Module:<Module>  :production7
            ASTModuleNode v1 = (ASTModuleNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTProgramUnitNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ProgramUnitNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Module"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ProgramUnit> ::= Module:<Module>  :production7
         */
        protected ASTProgramUnitNode userAction(ASTModuleNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production7Production PRODUCTION7 = Production7Production.getInstance();

    public static class Production8Production extends Production
    {
        private Production8Production() {;} // Singleton
        private static Production8Production singletonInstance = null;
        public static final Production8Production getInstance() { if (singletonInstance == null) singletonInstance = new Production8Production(); return singletonInstance; }

        public String getDescription() { return "<ProgramUnit> ::= BlockDataSubprogram:<BlockDataSubprogram>  :production8"; }

        /**
         * Reduce by <ProgramUnit> ::= BlockDataSubprogram:<BlockDataSubprogram>  :production8
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ProgramUnit> ::= BlockDataSubprogram:<BlockDataSubprogram>  :production8
            ASTBlockDataSubprogramNode v1 = (ASTBlockDataSubprogramNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTProgramUnitNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ProgramUnitNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("BlockDataSubprogram"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ProgramUnit> ::= BlockDataSubprogram:<BlockDataSubprogram>  :production8
         */
        protected ASTProgramUnitNode userAction(ASTBlockDataSubprogramNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production8Production PRODUCTION8 = Production8Production.getInstance();

    public static class Production9Production extends Production
    {
        private Production9Production() {;} // Singleton
        private static Production9Production singletonInstance = null;
        public static final Production9Production getInstance() { if (singletonInstance == null) singletonInstance = new Production9Production(); return singletonInstance; }

        public String getDescription() { return "<MainProgram> ::= MainRange:<MainRange>  :production9"; }

        /**
         * Reduce by <MainProgram> ::= MainRange:<MainRange>  :production9
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <MainProgram> ::= MainRange:<MainRange>  :production9
            ASTMainRangeNode v1 = (ASTMainRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTMainProgramNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.MainProgramNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("MainRange"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <MainProgram> ::= MainRange:<MainRange>  :production9
         */
        protected ASTMainProgramNode userAction(ASTMainRangeNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production9Production PRODUCTION9 = Production9Production.getInstance();

    public static class Production10Production extends Production
    {
        private Production10Production() {;} // Singleton
        private static Production10Production singletonInstance = null;
        public static final Production10Production getInstance() { if (singletonInstance == null) singletonInstance = new Production10Production(); return singletonInstance; }

        public String getDescription() { return "<MainProgram> ::= ProgramStmt:<ProgramStmt> MainRange:<MainRange>  :production10"; }

        /**
         * Reduce by <MainProgram> ::= ProgramStmt:<ProgramStmt> MainRange:<MainRange>  :production10
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <MainProgram> ::= ProgramStmt:<ProgramStmt> MainRange:<MainRange>  :production10
            ASTMainRangeNode v2 = (ASTMainRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTProgramStmtNode v1 = (ASTProgramStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTMainProgramNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.MainProgramNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ProgramStmt"))
                return 0;
            else
                if (name.equals("MainRange"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <MainProgram> ::= ProgramStmt:<ProgramStmt> MainRange:<MainRange>  :production10
         */
        protected ASTMainProgramNode userAction(ASTProgramStmtNode v1, ASTMainRangeNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production10Production PRODUCTION10 = Production10Production.getInstance();

    public static class Production11Production extends Production
    {
        private Production11Production() {;} // Singleton
        private static Production11Production singletonInstance = null;
        public static final Production11Production getInstance() { if (singletonInstance == null) singletonInstance = new Production11Production(); return singletonInstance; }

        public String getDescription() { return "<MainRange> ::= Body:<Body> EndProgramStmt:<EndProgramStmt>  :production11"; }

        /**
         * Reduce by <MainRange> ::= Body:<Body> EndProgramStmt:<EndProgramStmt>  :production11
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <MainRange> ::= Body:<Body> EndProgramStmt:<EndProgramStmt>  :production11
            ASTEndProgramStmtNode v2 = (ASTEndProgramStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTBodyNode v1 = (ASTBodyNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTMainRangeNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.MainRangeNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Body"))
                return 0;
            else
                if (name.equals("EndProgramStmt"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <MainRange> ::= Body:<Body> EndProgramStmt:<EndProgramStmt>  :production11
         */
        protected ASTMainRangeNode userAction(ASTBodyNode v1, ASTEndProgramStmtNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production11Production PRODUCTION11 = Production11Production.getInstance();

    public static class Production12Production extends Production
    {
        private Production12Production() {;} // Singleton
        private static Production12Production singletonInstance = null;
        public static final Production12Production getInstance() { if (singletonInstance == null) singletonInstance = new Production12Production(); return singletonInstance; }

        public String getDescription() { return "<MainRange> ::= BodyPlusInternals:<BodyPlusInternals> EndProgramStmt:<EndProgramStmt>  :production12"; }

        /**
         * Reduce by <MainRange> ::= BodyPlusInternals:<BodyPlusInternals> EndProgramStmt:<EndProgramStmt>  :production12
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <MainRange> ::= BodyPlusInternals:<BodyPlusInternals> EndProgramStmt:<EndProgramStmt>  :production12
            ASTEndProgramStmtNode v2 = (ASTEndProgramStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTBodyPlusInternalsNode v1 = (ASTBodyPlusInternalsNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTMainRangeNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.MainRangeNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("BodyPlusInternals"))
                return 0;
            else
                if (name.equals("EndProgramStmt"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <MainRange> ::= BodyPlusInternals:<BodyPlusInternals> EndProgramStmt:<EndProgramStmt>  :production12
         */
        protected ASTMainRangeNode userAction(ASTBodyPlusInternalsNode v1, ASTEndProgramStmtNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production12Production PRODUCTION12 = Production12Production.getInstance();

    public static class Production13Production extends Production
    {
        private Production13Production() {;} // Singleton
        private static Production13Production singletonInstance = null;
        public static final Production13Production getInstance() { if (singletonInstance == null) singletonInstance = new Production13Production(); return singletonInstance; }

        public String getDescription() { return "<MainRange> ::= EndProgramStmt:<EndProgramStmt>  :production13"; }

        /**
         * Reduce by <MainRange> ::= EndProgramStmt:<EndProgramStmt>  :production13
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <MainRange> ::= EndProgramStmt:<EndProgramStmt>  :production13
            ASTEndProgramStmtNode v1 = (ASTEndProgramStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTMainRangeNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.MainRangeNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EndProgramStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <MainRange> ::= EndProgramStmt:<EndProgramStmt>  :production13
         */
        protected ASTMainRangeNode userAction(ASTEndProgramStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production13Production PRODUCTION13 = Production13Production.getInstance();

    public static class Production14Production extends Production
    {
        private Production14Production() {;} // Singleton
        private static Production14Production singletonInstance = null;
        public static final Production14Production getInstance() { if (singletonInstance == null) singletonInstance = new Production14Production(); return singletonInstance; }

        public String getDescription() { return "<Body> ::= BodyConstruct:<BodyConstruct>  :production14"; }

        /**
         * Reduce by <Body> ::= BodyConstruct:<BodyConstruct>  :production14
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Body> ::= BodyConstruct:<BodyConstruct>  :production14
            ASTBodyConstructNode v1 = (ASTBodyConstructNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTBodyNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.BodyNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("BodyConstruct"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Body> ::= BodyConstruct:<BodyConstruct>  :production14
         */
        protected ASTBodyNode userAction(ASTBodyConstructNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production14Production PRODUCTION14 = Production14Production.getInstance();

    public static class Production15Production extends Production
    {
        private Production15Production() {;} // Singleton
        private static Production15Production singletonInstance = null;
        public static final Production15Production getInstance() { if (singletonInstance == null) singletonInstance = new Production15Production(); return singletonInstance; }

        public String getDescription() { return "<Body> ::= @:<Body> BodyConstruct:<BodyConstruct>  :production15"; }

        /**
         * Reduce by <Body> ::= @:<Body> BodyConstruct:<BodyConstruct>  :production15
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Body> ::= @:<Body> BodyConstruct:<BodyConstruct>  :production15
            ASTBodyConstructNode v2 = (ASTBodyConstructNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTBodyNode v1 = (ASTBodyNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTBodyNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.BodyNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("BodyConstruct"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Body> ::= @:<Body> BodyConstruct:<BodyConstruct>  :production15
         */
        protected ASTBodyNode userAction(ASTBodyNode v1, ASTBodyConstructNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production15Production PRODUCTION15 = Production15Production.getInstance();

    public static class Production16Production extends Production
    {
        private Production16Production() {;} // Singleton
        private static Production16Production singletonInstance = null;
        public static final Production16Production getInstance() { if (singletonInstance == null) singletonInstance = new Production16Production(); return singletonInstance; }

        public String getDescription() { return "<BodyConstruct> ::= SpecificationPartConstruct:<SpecificationPartConstruct>  :production16"; }

        /**
         * Reduce by <BodyConstruct> ::= SpecificationPartConstruct:<SpecificationPartConstruct>  :production16
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <BodyConstruct> ::= SpecificationPartConstruct:<SpecificationPartConstruct>  :production16
            ASTSpecificationPartConstructNode v1 = (ASTSpecificationPartConstructNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTBodyConstructNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.BodyConstructNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SpecificationPartConstruct"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <BodyConstruct> ::= SpecificationPartConstruct:<SpecificationPartConstruct>  :production16
         */
        protected ASTBodyConstructNode userAction(ASTSpecificationPartConstructNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production16Production PRODUCTION16 = Production16Production.getInstance();

    public static class Production17Production extends Production
    {
        private Production17Production() {;} // Singleton
        private static Production17Production singletonInstance = null;
        public static final Production17Production getInstance() { if (singletonInstance == null) singletonInstance = new Production17Production(); return singletonInstance; }

        public String getDescription() { return "<BodyConstruct> ::= ExecutableConstruct:<ExecutableConstruct>  :production17"; }

        /**
         * Reduce by <BodyConstruct> ::= ExecutableConstruct:<ExecutableConstruct>  :production17
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <BodyConstruct> ::= ExecutableConstruct:<ExecutableConstruct>  :production17
            ASTExecutableConstructNode v1 = (ASTExecutableConstructNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTBodyConstructNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.BodyConstructNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ExecutableConstruct"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <BodyConstruct> ::= ExecutableConstruct:<ExecutableConstruct>  :production17
         */
        protected ASTBodyConstructNode userAction(ASTExecutableConstructNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production17Production PRODUCTION17 = Production17Production.getInstance();

    public static class Production18Production extends Production
    {
        private Production18Production() {;} // Singleton
        private static Production18Production singletonInstance = null;
        public static final Production18Production getInstance() { if (singletonInstance == null) singletonInstance = new Production18Production(); return singletonInstance; }

        public String getDescription() { return "<FunctionSubprogram> ::= FunctionStmt:<FunctionStmt> FunctionRange:<FunctionRange>  :production18"; }

        /**
         * Reduce by <FunctionSubprogram> ::= FunctionStmt:<FunctionStmt> FunctionRange:<FunctionRange>  :production18
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FunctionSubprogram> ::= FunctionStmt:<FunctionStmt> FunctionRange:<FunctionRange>  :production18
            ASTFunctionRangeNode v2 = (ASTFunctionRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFunctionStmtNode v1 = (ASTFunctionStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFunctionSubprogramNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.FunctionSubprogramNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("FunctionStmt"))
                return 0;
            else
                if (name.equals("FunctionRange"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FunctionSubprogram> ::= FunctionStmt:<FunctionStmt> FunctionRange:<FunctionRange>  :production18
         */
        protected ASTFunctionSubprogramNode userAction(ASTFunctionStmtNode v1, ASTFunctionRangeNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production18Production PRODUCTION18 = Production18Production.getInstance();

    public static class Production19Production extends Production
    {
        private Production19Production() {;} // Singleton
        private static Production19Production singletonInstance = null;
        public static final Production19Production getInstance() { if (singletonInstance == null) singletonInstance = new Production19Production(); return singletonInstance; }

        public String getDescription() { return "<FunctionRange> ::= Body:<Body> EndFunctionStmt:<EndFunctionStmt>  :production19"; }

        /**
         * Reduce by <FunctionRange> ::= Body:<Body> EndFunctionStmt:<EndFunctionStmt>  :production19
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FunctionRange> ::= Body:<Body> EndFunctionStmt:<EndFunctionStmt>  :production19
            ASTEndFunctionStmtNode v2 = (ASTEndFunctionStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTBodyNode v1 = (ASTBodyNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFunctionRangeNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.FunctionRangeNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Body"))
                return 0;
            else
                if (name.equals("EndFunctionStmt"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FunctionRange> ::= Body:<Body> EndFunctionStmt:<EndFunctionStmt>  :production19
         */
        protected ASTFunctionRangeNode userAction(ASTBodyNode v1, ASTEndFunctionStmtNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production19Production PRODUCTION19 = Production19Production.getInstance();

    public static class Production20Production extends Production
    {
        private Production20Production() {;} // Singleton
        private static Production20Production singletonInstance = null;
        public static final Production20Production getInstance() { if (singletonInstance == null) singletonInstance = new Production20Production(); return singletonInstance; }

        public String getDescription() { return "<FunctionRange> ::= EndFunctionStmt:<EndFunctionStmt>  :production20"; }

        /**
         * Reduce by <FunctionRange> ::= EndFunctionStmt:<EndFunctionStmt>  :production20
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FunctionRange> ::= EndFunctionStmt:<EndFunctionStmt>  :production20
            ASTEndFunctionStmtNode v1 = (ASTEndFunctionStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFunctionRangeNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.FunctionRangeNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EndFunctionStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FunctionRange> ::= EndFunctionStmt:<EndFunctionStmt>  :production20
         */
        protected ASTFunctionRangeNode userAction(ASTEndFunctionStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production20Production PRODUCTION20 = Production20Production.getInstance();

    public static class Production21Production extends Production
    {
        private Production21Production() {;} // Singleton
        private static Production21Production singletonInstance = null;
        public static final Production21Production getInstance() { if (singletonInstance == null) singletonInstance = new Production21Production(); return singletonInstance; }

        public String getDescription() { return "<FunctionRange> ::= BodyPlusInternals:<BodyPlusInternals> EndFunctionStmt:<EndFunctionStmt>  :production21"; }

        /**
         * Reduce by <FunctionRange> ::= BodyPlusInternals:<BodyPlusInternals> EndFunctionStmt:<EndFunctionStmt>  :production21
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FunctionRange> ::= BodyPlusInternals:<BodyPlusInternals> EndFunctionStmt:<EndFunctionStmt>  :production21
            ASTEndFunctionStmtNode v2 = (ASTEndFunctionStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTBodyPlusInternalsNode v1 = (ASTBodyPlusInternalsNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFunctionRangeNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.FunctionRangeNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("BodyPlusInternals"))
                return 0;
            else
                if (name.equals("EndFunctionStmt"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FunctionRange> ::= BodyPlusInternals:<BodyPlusInternals> EndFunctionStmt:<EndFunctionStmt>  :production21
         */
        protected ASTFunctionRangeNode userAction(ASTBodyPlusInternalsNode v1, ASTEndFunctionStmtNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production21Production PRODUCTION21 = Production21Production.getInstance();

    public static class Production22Production extends Production
    {
        private Production22Production() {;} // Singleton
        private static Production22Production singletonInstance = null;
        public static final Production22Production getInstance() { if (singletonInstance == null) singletonInstance = new Production22Production(); return singletonInstance; }

        public String getDescription() { return "<SubroutineSubprogram> ::= SubroutineStmt:<SubroutineStmt> SubroutineRange:<SubroutineRange>  :production22"; }

        /**
         * Reduce by <SubroutineSubprogram> ::= SubroutineStmt:<SubroutineStmt> SubroutineRange:<SubroutineRange>  :production22
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SubroutineSubprogram> ::= SubroutineStmt:<SubroutineStmt> SubroutineRange:<SubroutineRange>  :production22
            ASTSubroutineRangeNode v2 = (ASTSubroutineRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubroutineStmtNode v1 = (ASTSubroutineStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSubroutineSubprogramNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.SubroutineSubprogramNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SubroutineStmt"))
                return 0;
            else
                if (name.equals("SubroutineRange"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SubroutineSubprogram> ::= SubroutineStmt:<SubroutineStmt> SubroutineRange:<SubroutineRange>  :production22
         */
        protected ASTSubroutineSubprogramNode userAction(ASTSubroutineStmtNode v1, ASTSubroutineRangeNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production22Production PRODUCTION22 = Production22Production.getInstance();

    public static class Production23Production extends Production
    {
        private Production23Production() {;} // Singleton
        private static Production23Production singletonInstance = null;
        public static final Production23Production getInstance() { if (singletonInstance == null) singletonInstance = new Production23Production(); return singletonInstance; }

        public String getDescription() { return "<SubroutineRange> ::= Body:<Body> EndSubroutineStmt:<EndSubroutineStmt>  :production23"; }

        /**
         * Reduce by <SubroutineRange> ::= Body:<Body> EndSubroutineStmt:<EndSubroutineStmt>  :production23
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SubroutineRange> ::= Body:<Body> EndSubroutineStmt:<EndSubroutineStmt>  :production23
            ASTEndSubroutineStmtNode v2 = (ASTEndSubroutineStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTBodyNode v1 = (ASTBodyNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSubroutineRangeNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.SubroutineRangeNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Body"))
                return 0;
            else
                if (name.equals("EndSubroutineStmt"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SubroutineRange> ::= Body:<Body> EndSubroutineStmt:<EndSubroutineStmt>  :production23
         */
        protected ASTSubroutineRangeNode userAction(ASTBodyNode v1, ASTEndSubroutineStmtNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production23Production PRODUCTION23 = Production23Production.getInstance();

    public static class Production24Production extends Production
    {
        private Production24Production() {;} // Singleton
        private static Production24Production singletonInstance = null;
        public static final Production24Production getInstance() { if (singletonInstance == null) singletonInstance = new Production24Production(); return singletonInstance; }

        public String getDescription() { return "<SubroutineRange> ::= EndSubroutineStmt:<EndSubroutineStmt>  :production24"; }

        /**
         * Reduce by <SubroutineRange> ::= EndSubroutineStmt:<EndSubroutineStmt>  :production24
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SubroutineRange> ::= EndSubroutineStmt:<EndSubroutineStmt>  :production24
            ASTEndSubroutineStmtNode v1 = (ASTEndSubroutineStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSubroutineRangeNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SubroutineRangeNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EndSubroutineStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SubroutineRange> ::= EndSubroutineStmt:<EndSubroutineStmt>  :production24
         */
        protected ASTSubroutineRangeNode userAction(ASTEndSubroutineStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production24Production PRODUCTION24 = Production24Production.getInstance();

    public static class Production25Production extends Production
    {
        private Production25Production() {;} // Singleton
        private static Production25Production singletonInstance = null;
        public static final Production25Production getInstance() { if (singletonInstance == null) singletonInstance = new Production25Production(); return singletonInstance; }

        public String getDescription() { return "<SubroutineRange> ::= BodyPlusInternals:<BodyPlusInternals> EndSubroutineStmt:<EndSubroutineStmt>  :production25"; }

        /**
         * Reduce by <SubroutineRange> ::= BodyPlusInternals:<BodyPlusInternals> EndSubroutineStmt:<EndSubroutineStmt>  :production25
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SubroutineRange> ::= BodyPlusInternals:<BodyPlusInternals> EndSubroutineStmt:<EndSubroutineStmt>  :production25
            ASTEndSubroutineStmtNode v2 = (ASTEndSubroutineStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTBodyPlusInternalsNode v1 = (ASTBodyPlusInternalsNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSubroutineRangeNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.SubroutineRangeNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("BodyPlusInternals"))
                return 0;
            else
                if (name.equals("EndSubroutineStmt"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SubroutineRange> ::= BodyPlusInternals:<BodyPlusInternals> EndSubroutineStmt:<EndSubroutineStmt>  :production25
         */
        protected ASTSubroutineRangeNode userAction(ASTBodyPlusInternalsNode v1, ASTEndSubroutineStmtNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production25Production PRODUCTION25 = Production25Production.getInstance();

    public static class Production26Production extends Production
    {
        private Production26Production() {;} // Singleton
        private static Production26Production singletonInstance = null;
        public static final Production26Production getInstance() { if (singletonInstance == null) singletonInstance = new Production26Production(); return singletonInstance; }

        public String getDescription() { return "<Module> ::= ModuleStmt:<ModuleStmt> ModuleBlock:<ModuleBlock>  :production26"; }

        /**
         * Reduce by <Module> ::= ModuleStmt:<ModuleStmt> ModuleBlock:<ModuleBlock>  :production26
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Module> ::= ModuleStmt:<ModuleStmt> ModuleBlock:<ModuleBlock>  :production26
            ASTModuleBlockNode v2 = (ASTModuleBlockNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTModuleStmtNode v1 = (ASTModuleStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTModuleNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.ModuleNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ModuleStmt"))
                return 0;
            else
                if (name.equals("ModuleBlock"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Module> ::= ModuleStmt:<ModuleStmt> ModuleBlock:<ModuleBlock>  :production26
         */
        protected ASTModuleNode userAction(ASTModuleStmtNode v1, ASTModuleBlockNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production26Production PRODUCTION26 = Production26Production.getInstance();

    public static class Production27Production extends Production
    {
        private Production27Production() {;} // Singleton
        private static Production27Production singletonInstance = null;
        public static final Production27Production getInstance() { if (singletonInstance == null) singletonInstance = new Production27Production(); return singletonInstance; }

        public String getDescription() { return "<ModuleBlock> ::= ModuleBody:<ModuleBody> EndModuleStmt:<EndModuleStmt>  :production27"; }

        /**
         * Reduce by <ModuleBlock> ::= ModuleBody:<ModuleBody> EndModuleStmt:<EndModuleStmt>  :production27
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ModuleBlock> ::= ModuleBody:<ModuleBody> EndModuleStmt:<EndModuleStmt>  :production27
            ASTEndModuleStmtNode v2 = (ASTEndModuleStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTModuleBodyNode v1 = (ASTModuleBodyNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTModuleBlockNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.ModuleBlockNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ModuleBody"))
                return 0;
            else
                if (name.equals("EndModuleStmt"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ModuleBlock> ::= ModuleBody:<ModuleBody> EndModuleStmt:<EndModuleStmt>  :production27
         */
        protected ASTModuleBlockNode userAction(ASTModuleBodyNode v1, ASTEndModuleStmtNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production27Production PRODUCTION27 = Production27Production.getInstance();

    public static class Production28Production extends Production
    {
        private Production28Production() {;} // Singleton
        private static Production28Production singletonInstance = null;
        public static final Production28Production getInstance() { if (singletonInstance == null) singletonInstance = new Production28Production(); return singletonInstance; }

        public String getDescription() { return "<ModuleBlock> ::= EndModuleStmt:<EndModuleStmt>  :production28"; }

        /**
         * Reduce by <ModuleBlock> ::= EndModuleStmt:<EndModuleStmt>  :production28
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ModuleBlock> ::= EndModuleStmt:<EndModuleStmt>  :production28
            ASTEndModuleStmtNode v1 = (ASTEndModuleStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTModuleBlockNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ModuleBlockNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EndModuleStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ModuleBlock> ::= EndModuleStmt:<EndModuleStmt>  :production28
         */
        protected ASTModuleBlockNode userAction(ASTEndModuleStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production28Production PRODUCTION28 = Production28Production.getInstance();

    public static class Production29Production extends Production
    {
        private Production29Production() {;} // Singleton
        private static Production29Production singletonInstance = null;
        public static final Production29Production getInstance() { if (singletonInstance == null) singletonInstance = new Production29Production(); return singletonInstance; }

        public String getDescription() { return "<ModuleBody> ::= SpecificationPartConstruct:<SpecificationPartConstruct>  :production29"; }

        /**
         * Reduce by <ModuleBody> ::= SpecificationPartConstruct:<SpecificationPartConstruct>  :production29
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ModuleBody> ::= SpecificationPartConstruct:<SpecificationPartConstruct>  :production29
            ASTSpecificationPartConstructNode v1 = (ASTSpecificationPartConstructNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTModuleBodyNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ModuleBodyNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SpecificationPartConstruct"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ModuleBody> ::= SpecificationPartConstruct:<SpecificationPartConstruct>  :production29
         */
        protected ASTModuleBodyNode userAction(ASTSpecificationPartConstructNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production29Production PRODUCTION29 = Production29Production.getInstance();

    public static class Production30Production extends Production
    {
        private Production30Production() {;} // Singleton
        private static Production30Production singletonInstance = null;
        public static final Production30Production getInstance() { if (singletonInstance == null) singletonInstance = new Production30Production(); return singletonInstance; }

        public String getDescription() { return "<ModuleBody> ::= ModuleSubprogramPartConstruct:<ModuleSubprogramPartConstruct>  :production30"; }

        /**
         * Reduce by <ModuleBody> ::= ModuleSubprogramPartConstruct:<ModuleSubprogramPartConstruct>  :production30
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ModuleBody> ::= ModuleSubprogramPartConstruct:<ModuleSubprogramPartConstruct>  :production30
            ASTModuleSubprogramPartConstructNode v1 = (ASTModuleSubprogramPartConstructNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTModuleBodyNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ModuleBodyNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ModuleSubprogramPartConstruct"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ModuleBody> ::= ModuleSubprogramPartConstruct:<ModuleSubprogramPartConstruct>  :production30
         */
        protected ASTModuleBodyNode userAction(ASTModuleSubprogramPartConstructNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production30Production PRODUCTION30 = Production30Production.getInstance();

    public static class Production31Production extends Production
    {
        private Production31Production() {;} // Singleton
        private static Production31Production singletonInstance = null;
        public static final Production31Production getInstance() { if (singletonInstance == null) singletonInstance = new Production31Production(); return singletonInstance; }

        public String getDescription() { return "<ModuleBody> ::= @:<ModuleBody> SpecificationPartConstruct:<SpecificationPartConstruct>  :production31"; }

        /**
         * Reduce by <ModuleBody> ::= @:<ModuleBody> SpecificationPartConstruct:<SpecificationPartConstruct>  :production31
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ModuleBody> ::= @:<ModuleBody> SpecificationPartConstruct:<SpecificationPartConstruct>  :production31
            ASTSpecificationPartConstructNode v2 = (ASTSpecificationPartConstructNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTModuleBodyNode v1 = (ASTModuleBodyNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTModuleBodyNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.ModuleBodyNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("SpecificationPartConstruct"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ModuleBody> ::= @:<ModuleBody> SpecificationPartConstruct:<SpecificationPartConstruct>  :production31
         */
        protected ASTModuleBodyNode userAction(ASTModuleBodyNode v1, ASTSpecificationPartConstructNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production31Production PRODUCTION31 = Production31Production.getInstance();

    public static class Production32Production extends Production
    {
        private Production32Production() {;} // Singleton
        private static Production32Production singletonInstance = null;
        public static final Production32Production getInstance() { if (singletonInstance == null) singletonInstance = new Production32Production(); return singletonInstance; }

        public String getDescription() { return "<ModuleBody> ::= @:<ModuleBody> ModuleSubprogramPartConstruct:<ModuleSubprogramPartConstruct>  :production32"; }

        /**
         * Reduce by <ModuleBody> ::= @:<ModuleBody> ModuleSubprogramPartConstruct:<ModuleSubprogramPartConstruct>  :production32
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ModuleBody> ::= @:<ModuleBody> ModuleSubprogramPartConstruct:<ModuleSubprogramPartConstruct>  :production32
            ASTModuleSubprogramPartConstructNode v2 = (ASTModuleSubprogramPartConstructNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTModuleBodyNode v1 = (ASTModuleBodyNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTModuleBodyNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.ModuleBodyNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("ModuleSubprogramPartConstruct"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ModuleBody> ::= @:<ModuleBody> ModuleSubprogramPartConstruct:<ModuleSubprogramPartConstruct>  :production32
         */
        protected ASTModuleBodyNode userAction(ASTModuleBodyNode v1, ASTModuleSubprogramPartConstructNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production32Production PRODUCTION32 = Production32Production.getInstance();

    public static class Production33Production extends Production
    {
        private Production33Production() {;} // Singleton
        private static Production33Production singletonInstance = null;
        public static final Production33Production getInstance() { if (singletonInstance == null) singletonInstance = new Production33Production(); return singletonInstance; }

        public String getDescription() { return "<BlockDataSubprogram> ::= BlockDataStmt:<BlockDataStmt> BlockDataBody:<BlockDataBody> EndBlockDataStmt:<EndBlockDataStmt>  :production33"; }

        /**
         * Reduce by <BlockDataSubprogram> ::= BlockDataStmt:<BlockDataStmt> BlockDataBody:<BlockDataBody> EndBlockDataStmt:<EndBlockDataStmt>  :production33
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <BlockDataSubprogram> ::= BlockDataStmt:<BlockDataStmt> BlockDataBody:<BlockDataBody> EndBlockDataStmt:<EndBlockDataStmt>  :production33
            ASTEndBlockDataStmtNode v3 = (ASTEndBlockDataStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTBlockDataBodyNode v2 = (ASTBlockDataBodyNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTBlockDataStmtNode v1 = (ASTBlockDataStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTBlockDataSubprogramNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.BlockDataSubprogramNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("BlockDataStmt"))
                return 0;
            else
                if (name.equals("BlockDataBody"))
                    return 1;
                else
                    if (name.equals("EndBlockDataStmt"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <BlockDataSubprogram> ::= BlockDataStmt:<BlockDataStmt> BlockDataBody:<BlockDataBody> EndBlockDataStmt:<EndBlockDataStmt>  :production33
         */
        protected ASTBlockDataSubprogramNode userAction(ASTBlockDataStmtNode v1, ASTBlockDataBodyNode v2, ASTEndBlockDataStmtNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production33Production PRODUCTION33 = Production33Production.getInstance();

    public static class Production34Production extends Production
    {
        private Production34Production() {;} // Singleton
        private static Production34Production singletonInstance = null;
        public static final Production34Production getInstance() { if (singletonInstance == null) singletonInstance = new Production34Production(); return singletonInstance; }

        public String getDescription() { return "<BlockDataSubprogram> ::= BlockDataStmt:<BlockDataStmt> EndBlockDataStmt:<EndBlockDataStmt>  :production34"; }

        /**
         * Reduce by <BlockDataSubprogram> ::= BlockDataStmt:<BlockDataStmt> EndBlockDataStmt:<EndBlockDataStmt>  :production34
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <BlockDataSubprogram> ::= BlockDataStmt:<BlockDataStmt> EndBlockDataStmt:<EndBlockDataStmt>  :production34
            ASTEndBlockDataStmtNode v2 = (ASTEndBlockDataStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTBlockDataStmtNode v1 = (ASTBlockDataStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTBlockDataSubprogramNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.BlockDataSubprogramNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("BlockDataStmt"))
                return 0;
            else
                if (name.equals("EndBlockDataStmt"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <BlockDataSubprogram> ::= BlockDataStmt:<BlockDataStmt> EndBlockDataStmt:<EndBlockDataStmt>  :production34
         */
        protected ASTBlockDataSubprogramNode userAction(ASTBlockDataStmtNode v1, ASTEndBlockDataStmtNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production34Production PRODUCTION34 = Production34Production.getInstance();

    public static class Production35Production extends Production
    {
        private Production35Production() {;} // Singleton
        private static Production35Production singletonInstance = null;
        public static final Production35Production getInstance() { if (singletonInstance == null) singletonInstance = new Production35Production(); return singletonInstance; }

        public String getDescription() { return "<BlockDataBody> ::= BlockDataBodyConstruct:<BlockDataBodyConstruct>  :production35"; }

        /**
         * Reduce by <BlockDataBody> ::= BlockDataBodyConstruct:<BlockDataBodyConstruct>  :production35
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <BlockDataBody> ::= BlockDataBodyConstruct:<BlockDataBodyConstruct>  :production35
            ASTBlockDataBodyConstructNode v1 = (ASTBlockDataBodyConstructNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTBlockDataBodyNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.BlockDataBodyNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("BlockDataBodyConstruct"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <BlockDataBody> ::= BlockDataBodyConstruct:<BlockDataBodyConstruct>  :production35
         */
        protected ASTBlockDataBodyNode userAction(ASTBlockDataBodyConstructNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production35Production PRODUCTION35 = Production35Production.getInstance();

    public static class Production36Production extends Production
    {
        private Production36Production() {;} // Singleton
        private static Production36Production singletonInstance = null;
        public static final Production36Production getInstance() { if (singletonInstance == null) singletonInstance = new Production36Production(); return singletonInstance; }

        public String getDescription() { return "<BlockDataBody> ::= @:<BlockDataBody> BlockDataBodyConstruct:<BlockDataBodyConstruct>  :production36"; }

        /**
         * Reduce by <BlockDataBody> ::= @:<BlockDataBody> BlockDataBodyConstruct:<BlockDataBodyConstruct>  :production36
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <BlockDataBody> ::= @:<BlockDataBody> BlockDataBodyConstruct:<BlockDataBodyConstruct>  :production36
            ASTBlockDataBodyConstructNode v2 = (ASTBlockDataBodyConstructNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTBlockDataBodyNode v1 = (ASTBlockDataBodyNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTBlockDataBodyNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.BlockDataBodyNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("BlockDataBodyConstruct"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <BlockDataBody> ::= @:<BlockDataBody> BlockDataBodyConstruct:<BlockDataBodyConstruct>  :production36
         */
        protected ASTBlockDataBodyNode userAction(ASTBlockDataBodyNode v1, ASTBlockDataBodyConstructNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production36Production PRODUCTION36 = Production36Production.getInstance();

    public static class Production37Production extends Production
    {
        private Production37Production() {;} // Singleton
        private static Production37Production singletonInstance = null;
        public static final Production37Production getInstance() { if (singletonInstance == null) singletonInstance = new Production37Production(); return singletonInstance; }

        public String getDescription() { return "<BlockDataBodyConstruct> ::= SpecificationPartConstruct:<SpecificationPartConstruct>  :production37"; }

        /**
         * Reduce by <BlockDataBodyConstruct> ::= SpecificationPartConstruct:<SpecificationPartConstruct>  :production37
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <BlockDataBodyConstruct> ::= SpecificationPartConstruct:<SpecificationPartConstruct>  :production37
            ASTSpecificationPartConstructNode v1 = (ASTSpecificationPartConstructNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTBlockDataBodyConstructNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.BlockDataBodyConstructNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SpecificationPartConstruct"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <BlockDataBodyConstruct> ::= SpecificationPartConstruct:<SpecificationPartConstruct>  :production37
         */
        protected ASTBlockDataBodyConstructNode userAction(ASTSpecificationPartConstructNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production37Production PRODUCTION37 = Production37Production.getInstance();

    public static class Production38Production extends Production
    {
        private Production38Production() {;} // Singleton
        private static Production38Production singletonInstance = null;
        public static final Production38Production getInstance() { if (singletonInstance == null) singletonInstance = new Production38Production(); return singletonInstance; }

        public String getDescription() { return "<SpecificationPartConstruct> ::= UseStmt:<UseStmt>  :production38"; }

        /**
         * Reduce by <SpecificationPartConstruct> ::= UseStmt:<UseStmt>  :production38
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SpecificationPartConstruct> ::= UseStmt:<UseStmt>  :production38
            ASTUseStmtNode v1 = (ASTUseStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSpecificationPartConstructNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SpecificationPartConstructNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("UseStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SpecificationPartConstruct> ::= UseStmt:<UseStmt>  :production38
         */
        protected ASTSpecificationPartConstructNode userAction(ASTUseStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production38Production PRODUCTION38 = Production38Production.getInstance();

    public static class Production39Production extends Production
    {
        private Production39Production() {;} // Singleton
        private static Production39Production singletonInstance = null;
        public static final Production39Production getInstance() { if (singletonInstance == null) singletonInstance = new Production39Production(); return singletonInstance; }

        public String getDescription() { return "<SpecificationPartConstruct> ::= ImplicitStmt:<ImplicitStmt>  :production39"; }

        /**
         * Reduce by <SpecificationPartConstruct> ::= ImplicitStmt:<ImplicitStmt>  :production39
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SpecificationPartConstruct> ::= ImplicitStmt:<ImplicitStmt>  :production39
            ASTImplicitStmtNode v1 = (ASTImplicitStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSpecificationPartConstructNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SpecificationPartConstructNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ImplicitStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SpecificationPartConstruct> ::= ImplicitStmt:<ImplicitStmt>  :production39
         */
        protected ASTSpecificationPartConstructNode userAction(ASTImplicitStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production39Production PRODUCTION39 = Production39Production.getInstance();

    public static class Production40Production extends Production
    {
        private Production40Production() {;} // Singleton
        private static Production40Production singletonInstance = null;
        public static final Production40Production getInstance() { if (singletonInstance == null) singletonInstance = new Production40Production(); return singletonInstance; }

        public String getDescription() { return "<SpecificationPartConstruct> ::= ParameterStmt:<ParameterStmt>  :production40"; }

        /**
         * Reduce by <SpecificationPartConstruct> ::= ParameterStmt:<ParameterStmt>  :production40
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SpecificationPartConstruct> ::= ParameterStmt:<ParameterStmt>  :production40
            ASTParameterStmtNode v1 = (ASTParameterStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSpecificationPartConstructNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SpecificationPartConstructNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ParameterStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SpecificationPartConstruct> ::= ParameterStmt:<ParameterStmt>  :production40
         */
        protected ASTSpecificationPartConstructNode userAction(ASTParameterStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production40Production PRODUCTION40 = Production40Production.getInstance();

    public static class Production41Production extends Production
    {
        private Production41Production() {;} // Singleton
        private static Production41Production singletonInstance = null;
        public static final Production41Production getInstance() { if (singletonInstance == null) singletonInstance = new Production41Production(); return singletonInstance; }

        public String getDescription() { return "<SpecificationPartConstruct> ::= FormatStmt:<FormatStmt>  :production41"; }

        /**
         * Reduce by <SpecificationPartConstruct> ::= FormatStmt:<FormatStmt>  :production41
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SpecificationPartConstruct> ::= FormatStmt:<FormatStmt>  :production41
            ASTFormatStmtNode v1 = (ASTFormatStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSpecificationPartConstructNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SpecificationPartConstructNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("FormatStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SpecificationPartConstruct> ::= FormatStmt:<FormatStmt>  :production41
         */
        protected ASTSpecificationPartConstructNode userAction(ASTFormatStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production41Production PRODUCTION41 = Production41Production.getInstance();

    public static class Production42Production extends Production
    {
        private Production42Production() {;} // Singleton
        private static Production42Production singletonInstance = null;
        public static final Production42Production getInstance() { if (singletonInstance == null) singletonInstance = new Production42Production(); return singletonInstance; }

        public String getDescription() { return "<SpecificationPartConstruct> ::= EntryStmt:<EntryStmt>  :production42"; }

        /**
         * Reduce by <SpecificationPartConstruct> ::= EntryStmt:<EntryStmt>  :production42
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SpecificationPartConstruct> ::= EntryStmt:<EntryStmt>  :production42
            ASTEntryStmtNode v1 = (ASTEntryStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSpecificationPartConstructNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SpecificationPartConstructNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EntryStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SpecificationPartConstruct> ::= EntryStmt:<EntryStmt>  :production42
         */
        protected ASTSpecificationPartConstructNode userAction(ASTEntryStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production42Production PRODUCTION42 = Production42Production.getInstance();

    public static class Production43Production extends Production
    {
        private Production43Production() {;} // Singleton
        private static Production43Production singletonInstance = null;
        public static final Production43Production getInstance() { if (singletonInstance == null) singletonInstance = new Production43Production(); return singletonInstance; }

        public String getDescription() { return "<SpecificationPartConstruct> ::= DeclarationConstruct:<DeclarationConstruct>  :production43"; }

        /**
         * Reduce by <SpecificationPartConstruct> ::= DeclarationConstruct:<DeclarationConstruct>  :production43
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SpecificationPartConstruct> ::= DeclarationConstruct:<DeclarationConstruct>  :production43
            ASTDeclarationConstructNode v1 = (ASTDeclarationConstructNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSpecificationPartConstructNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SpecificationPartConstructNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("DeclarationConstruct"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SpecificationPartConstruct> ::= DeclarationConstruct:<DeclarationConstruct>  :production43
         */
        protected ASTSpecificationPartConstructNode userAction(ASTDeclarationConstructNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production43Production PRODUCTION43 = Production43Production.getInstance();

    public static class Production44Production extends Production
    {
        private Production44Production() {;} // Singleton
        private static Production44Production singletonInstance = null;
        public static final Production44Production getInstance() { if (singletonInstance == null) singletonInstance = new Production44Production(); return singletonInstance; }

        public String getDescription() { return "<DeclarationConstruct> ::= DerivedTypeDef:<DerivedTypeDef>  :production44"; }

        /**
         * Reduce by <DeclarationConstruct> ::= DerivedTypeDef:<DerivedTypeDef>  :production44
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DeclarationConstruct> ::= DerivedTypeDef:<DerivedTypeDef>  :production44
            ASTDerivedTypeDefNode v1 = (ASTDerivedTypeDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDeclarationConstructNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.DeclarationConstructNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("DerivedTypeDef"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DeclarationConstruct> ::= DerivedTypeDef:<DerivedTypeDef>  :production44
         */
        protected ASTDeclarationConstructNode userAction(ASTDerivedTypeDefNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production44Production PRODUCTION44 = Production44Production.getInstance();

    public static class Production45Production extends Production
    {
        private Production45Production() {;} // Singleton
        private static Production45Production singletonInstance = null;
        public static final Production45Production getInstance() { if (singletonInstance == null) singletonInstance = new Production45Production(); return singletonInstance; }

        public String getDescription() { return "<DeclarationConstruct> ::= InterfaceBlock:<InterfaceBlock>  :production45"; }

        /**
         * Reduce by <DeclarationConstruct> ::= InterfaceBlock:<InterfaceBlock>  :production45
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DeclarationConstruct> ::= InterfaceBlock:<InterfaceBlock>  :production45
            ASTInterfaceBlockNode v1 = (ASTInterfaceBlockNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDeclarationConstructNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.DeclarationConstructNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("InterfaceBlock"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DeclarationConstruct> ::= InterfaceBlock:<InterfaceBlock>  :production45
         */
        protected ASTDeclarationConstructNode userAction(ASTInterfaceBlockNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production45Production PRODUCTION45 = Production45Production.getInstance();

    public static class Production46Production extends Production
    {
        private Production46Production() {;} // Singleton
        private static Production46Production singletonInstance = null;
        public static final Production46Production getInstance() { if (singletonInstance == null) singletonInstance = new Production46Production(); return singletonInstance; }

        public String getDescription() { return "<DeclarationConstruct> ::= TypeDeclarationStmt:<TypeDeclarationStmt>  :production46"; }

        /**
         * Reduce by <DeclarationConstruct> ::= TypeDeclarationStmt:<TypeDeclarationStmt>  :production46
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DeclarationConstruct> ::= TypeDeclarationStmt:<TypeDeclarationStmt>  :production46
            ASTTypeDeclarationStmtNode v1 = (ASTTypeDeclarationStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDeclarationConstructNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.DeclarationConstructNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("TypeDeclarationStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DeclarationConstruct> ::= TypeDeclarationStmt:<TypeDeclarationStmt>  :production46
         */
        protected ASTDeclarationConstructNode userAction(ASTTypeDeclarationStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production46Production PRODUCTION46 = Production46Production.getInstance();

    public static class Production47Production extends Production
    {
        private Production47Production() {;} // Singleton
        private static Production47Production singletonInstance = null;
        public static final Production47Production getInstance() { if (singletonInstance == null) singletonInstance = new Production47Production(); return singletonInstance; }

        public String getDescription() { return "<DeclarationConstruct> ::= SpecificationStmt:<SpecificationStmt>  :production47"; }

        /**
         * Reduce by <DeclarationConstruct> ::= SpecificationStmt:<SpecificationStmt>  :production47
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DeclarationConstruct> ::= SpecificationStmt:<SpecificationStmt>  :production47
            ASTSpecificationStmtNode v1 = (ASTSpecificationStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDeclarationConstructNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.DeclarationConstructNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SpecificationStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DeclarationConstruct> ::= SpecificationStmt:<SpecificationStmt>  :production47
         */
        protected ASTDeclarationConstructNode userAction(ASTSpecificationStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production47Production PRODUCTION47 = Production47Production.getInstance();

    public static class Production48Production extends Production
    {
        private Production48Production() {;} // Singleton
        private static Production48Production singletonInstance = null;
        public static final Production48Production getInstance() { if (singletonInstance == null) singletonInstance = new Production48Production(); return singletonInstance; }

        public String getDescription() { return "<ExecutionPartConstruct> ::= ObsoleteExecutionPartConstruct:<ObsoleteExecutionPartConstruct>  :production48"; }

        /**
         * Reduce by <ExecutionPartConstruct> ::= ObsoleteExecutionPartConstruct:<ObsoleteExecutionPartConstruct>  :production48
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ExecutionPartConstruct> ::= ObsoleteExecutionPartConstruct:<ObsoleteExecutionPartConstruct>  :production48
            ASTObsoleteExecutionPartConstructNode v1 = (ASTObsoleteExecutionPartConstructNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTExecutionPartConstructNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ExecutionPartConstructNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ObsoleteExecutionPartConstruct"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ExecutionPartConstruct> ::= ObsoleteExecutionPartConstruct:<ObsoleteExecutionPartConstruct>  :production48
         */
        protected ASTExecutionPartConstructNode userAction(ASTObsoleteExecutionPartConstructNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production48Production PRODUCTION48 = Production48Production.getInstance();

    public static class Production49Production extends Production
    {
        private Production49Production() {;} // Singleton
        private static Production49Production singletonInstance = null;
        public static final Production49Production getInstance() { if (singletonInstance == null) singletonInstance = new Production49Production(); return singletonInstance; }

        public String getDescription() { return "<ExecutionPartConstruct> ::= ExecutableConstruct:<ExecutableConstruct>  :production49"; }

        /**
         * Reduce by <ExecutionPartConstruct> ::= ExecutableConstruct:<ExecutableConstruct>  :production49
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ExecutionPartConstruct> ::= ExecutableConstruct:<ExecutableConstruct>  :production49
            ASTExecutableConstructNode v1 = (ASTExecutableConstructNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTExecutionPartConstructNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ExecutionPartConstructNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ExecutableConstruct"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ExecutionPartConstruct> ::= ExecutableConstruct:<ExecutableConstruct>  :production49
         */
        protected ASTExecutionPartConstructNode userAction(ASTExecutableConstructNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production49Production PRODUCTION49 = Production49Production.getInstance();

    public static class Production50Production extends Production
    {
        private Production50Production() {;} // Singleton
        private static Production50Production singletonInstance = null;
        public static final Production50Production getInstance() { if (singletonInstance == null) singletonInstance = new Production50Production(); return singletonInstance; }

        public String getDescription() { return "<ExecutionPartConstruct> ::= FormatStmt:<FormatStmt>  :production50"; }

        /**
         * Reduce by <ExecutionPartConstruct> ::= FormatStmt:<FormatStmt>  :production50
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ExecutionPartConstruct> ::= FormatStmt:<FormatStmt>  :production50
            ASTFormatStmtNode v1 = (ASTFormatStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTExecutionPartConstructNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ExecutionPartConstructNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("FormatStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ExecutionPartConstruct> ::= FormatStmt:<FormatStmt>  :production50
         */
        protected ASTExecutionPartConstructNode userAction(ASTFormatStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production50Production PRODUCTION50 = Production50Production.getInstance();

    public static class Production51Production extends Production
    {
        private Production51Production() {;} // Singleton
        private static Production51Production singletonInstance = null;
        public static final Production51Production getInstance() { if (singletonInstance == null) singletonInstance = new Production51Production(); return singletonInstance; }

        public String getDescription() { return "<ExecutionPartConstruct> ::= EntryStmt:<EntryStmt>  :production51"; }

        /**
         * Reduce by <ExecutionPartConstruct> ::= EntryStmt:<EntryStmt>  :production51
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ExecutionPartConstruct> ::= EntryStmt:<EntryStmt>  :production51
            ASTEntryStmtNode v1 = (ASTEntryStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTExecutionPartConstructNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ExecutionPartConstructNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EntryStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ExecutionPartConstruct> ::= EntryStmt:<EntryStmt>  :production51
         */
        protected ASTExecutionPartConstructNode userAction(ASTEntryStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production51Production PRODUCTION51 = Production51Production.getInstance();

    public static class Production52Production extends Production
    {
        private Production52Production() {;} // Singleton
        private static Production52Production singletonInstance = null;
        public static final Production52Production getInstance() { if (singletonInstance == null) singletonInstance = new Production52Production(); return singletonInstance; }

        public String getDescription() { return "<ObsoleteExecutionPartConstruct> ::= DataStmt:<DataStmt>  :production52"; }

        /**
         * Reduce by <ObsoleteExecutionPartConstruct> ::= DataStmt:<DataStmt>  :production52
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ObsoleteExecutionPartConstruct> ::= DataStmt:<DataStmt>  :production52
            ASTDataStmtNode v1 = (ASTDataStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTObsoleteExecutionPartConstructNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ObsoleteExecutionPartConstructNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("DataStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ObsoleteExecutionPartConstruct> ::= DataStmt:<DataStmt>  :production52
         */
        protected ASTObsoleteExecutionPartConstructNode userAction(ASTDataStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production52Production PRODUCTION52 = Production52Production.getInstance();

    public static class Production53Production extends Production
    {
        private Production53Production() {;} // Singleton
        private static Production53Production singletonInstance = null;
        public static final Production53Production getInstance() { if (singletonInstance == null) singletonInstance = new Production53Production(); return singletonInstance; }

        public String getDescription() { return "<BodyPlusInternals> ::= Body:<Body> ContainsStmt:<ContainsStmt> InternalSubprogram:<InternalSubprogram>  :production53"; }

        /**
         * Reduce by <BodyPlusInternals> ::= Body:<Body> ContainsStmt:<ContainsStmt> InternalSubprogram:<InternalSubprogram>  :production53
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <BodyPlusInternals> ::= Body:<Body> ContainsStmt:<ContainsStmt> InternalSubprogram:<InternalSubprogram>  :production53
            ASTInternalSubprogramNode v3 = (ASTInternalSubprogramNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTContainsStmtNode v2 = (ASTContainsStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTBodyNode v1 = (ASTBodyNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTBodyPlusInternalsNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.BodyPlusInternalsNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Body"))
                return 0;
            else
                if (name.equals("ContainsStmt"))
                    return 1;
                else
                    if (name.equals("InternalSubprogram"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <BodyPlusInternals> ::= Body:<Body> ContainsStmt:<ContainsStmt> InternalSubprogram:<InternalSubprogram>  :production53
         */
        protected ASTBodyPlusInternalsNode userAction(ASTBodyNode v1, ASTContainsStmtNode v2, ASTInternalSubprogramNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production53Production PRODUCTION53 = Production53Production.getInstance();

    public static class Production54Production extends Production
    {
        private Production54Production() {;} // Singleton
        private static Production54Production singletonInstance = null;
        public static final Production54Production getInstance() { if (singletonInstance == null) singletonInstance = new Production54Production(); return singletonInstance; }

        public String getDescription() { return "<BodyPlusInternals> ::= ContainsStmt:<ContainsStmt> InternalSubprogram:<InternalSubprogram>  :production54"; }

        /**
         * Reduce by <BodyPlusInternals> ::= ContainsStmt:<ContainsStmt> InternalSubprogram:<InternalSubprogram>  :production54
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <BodyPlusInternals> ::= ContainsStmt:<ContainsStmt> InternalSubprogram:<InternalSubprogram>  :production54
            ASTInternalSubprogramNode v2 = (ASTInternalSubprogramNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTContainsStmtNode v1 = (ASTContainsStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTBodyPlusInternalsNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.BodyPlusInternalsNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ContainsStmt"))
                return 0;
            else
                if (name.equals("InternalSubprogram"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <BodyPlusInternals> ::= ContainsStmt:<ContainsStmt> InternalSubprogram:<InternalSubprogram>  :production54
         */
        protected ASTBodyPlusInternalsNode userAction(ASTContainsStmtNode v1, ASTInternalSubprogramNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production54Production PRODUCTION54 = Production54Production.getInstance();

    public static class Production55Production extends Production
    {
        private Production55Production() {;} // Singleton
        private static Production55Production singletonInstance = null;
        public static final Production55Production getInstance() { if (singletonInstance == null) singletonInstance = new Production55Production(); return singletonInstance; }

        public String getDescription() { return "<BodyPlusInternals> ::= @:<BodyPlusInternals> InternalSubprogram:<InternalSubprogram>  :production55"; }

        /**
         * Reduce by <BodyPlusInternals> ::= @:<BodyPlusInternals> InternalSubprogram:<InternalSubprogram>  :production55
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <BodyPlusInternals> ::= @:<BodyPlusInternals> InternalSubprogram:<InternalSubprogram>  :production55
            ASTInternalSubprogramNode v2 = (ASTInternalSubprogramNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTBodyPlusInternalsNode v1 = (ASTBodyPlusInternalsNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTBodyPlusInternalsNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.BodyPlusInternalsNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("InternalSubprogram"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <BodyPlusInternals> ::= @:<BodyPlusInternals> InternalSubprogram:<InternalSubprogram>  :production55
         */
        protected ASTBodyPlusInternalsNode userAction(ASTBodyPlusInternalsNode v1, ASTInternalSubprogramNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production55Production PRODUCTION55 = Production55Production.getInstance();

    public static class Production56Production extends Production
    {
        private Production56Production() {;} // Singleton
        private static Production56Production singletonInstance = null;
        public static final Production56Production getInstance() { if (singletonInstance == null) singletonInstance = new Production56Production(); return singletonInstance; }

        public String getDescription() { return "<InternalSubprogram> ::= FunctionSubprogram:<FunctionSubprogram>  :production56"; }

        /**
         * Reduce by <InternalSubprogram> ::= FunctionSubprogram:<FunctionSubprogram>  :production56
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InternalSubprogram> ::= FunctionSubprogram:<FunctionSubprogram>  :production56
            ASTFunctionSubprogramNode v1 = (ASTFunctionSubprogramNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInternalSubprogramNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.InternalSubprogramNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("FunctionSubprogram"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InternalSubprogram> ::= FunctionSubprogram:<FunctionSubprogram>  :production56
         */
        protected ASTInternalSubprogramNode userAction(ASTFunctionSubprogramNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production56Production PRODUCTION56 = Production56Production.getInstance();

    public static class Production57Production extends Production
    {
        private Production57Production() {;} // Singleton
        private static Production57Production singletonInstance = null;
        public static final Production57Production getInstance() { if (singletonInstance == null) singletonInstance = new Production57Production(); return singletonInstance; }

        public String getDescription() { return "<InternalSubprogram> ::= SubroutineSubprogram:<SubroutineSubprogram>  :production57"; }

        /**
         * Reduce by <InternalSubprogram> ::= SubroutineSubprogram:<SubroutineSubprogram>  :production57
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InternalSubprogram> ::= SubroutineSubprogram:<SubroutineSubprogram>  :production57
            ASTSubroutineSubprogramNode v1 = (ASTSubroutineSubprogramNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInternalSubprogramNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.InternalSubprogramNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SubroutineSubprogram"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InternalSubprogram> ::= SubroutineSubprogram:<SubroutineSubprogram>  :production57
         */
        protected ASTInternalSubprogramNode userAction(ASTSubroutineSubprogramNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production57Production PRODUCTION57 = Production57Production.getInstance();

    public static class Production58Production extends Production
    {
        private Production58Production() {;} // Singleton
        private static Production58Production singletonInstance = null;
        public static final Production58Production getInstance() { if (singletonInstance == null) singletonInstance = new Production58Production(); return singletonInstance; }

        public String getDescription() { return "<ModuleSubprogramPartConstruct> ::= ContainsStmt:<ContainsStmt>  :production58"; }

        /**
         * Reduce by <ModuleSubprogramPartConstruct> ::= ContainsStmt:<ContainsStmt>  :production58
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ModuleSubprogramPartConstruct> ::= ContainsStmt:<ContainsStmt>  :production58
            ASTContainsStmtNode v1 = (ASTContainsStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTModuleSubprogramPartConstructNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ModuleSubprogramPartConstructNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ContainsStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ModuleSubprogramPartConstruct> ::= ContainsStmt:<ContainsStmt>  :production58
         */
        protected ASTModuleSubprogramPartConstructNode userAction(ASTContainsStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production58Production PRODUCTION58 = Production58Production.getInstance();

    public static class Production59Production extends Production
    {
        private Production59Production() {;} // Singleton
        private static Production59Production singletonInstance = null;
        public static final Production59Production getInstance() { if (singletonInstance == null) singletonInstance = new Production59Production(); return singletonInstance; }

        public String getDescription() { return "<ModuleSubprogramPartConstruct> ::= ModuleSubprogram:<ModuleSubprogram>  :production59"; }

        /**
         * Reduce by <ModuleSubprogramPartConstruct> ::= ModuleSubprogram:<ModuleSubprogram>  :production59
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ModuleSubprogramPartConstruct> ::= ModuleSubprogram:<ModuleSubprogram>  :production59
            ASTModuleSubprogramNode v1 = (ASTModuleSubprogramNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTModuleSubprogramPartConstructNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ModuleSubprogramPartConstructNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ModuleSubprogram"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ModuleSubprogramPartConstruct> ::= ModuleSubprogram:<ModuleSubprogram>  :production59
         */
        protected ASTModuleSubprogramPartConstructNode userAction(ASTModuleSubprogramNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production59Production PRODUCTION59 = Production59Production.getInstance();

    public static class Production60Production extends Production
    {
        private Production60Production() {;} // Singleton
        private static Production60Production singletonInstance = null;
        public static final Production60Production getInstance() { if (singletonInstance == null) singletonInstance = new Production60Production(); return singletonInstance; }

        public String getDescription() { return "<ModuleSubprogram> ::= FunctionSubprogram:<FunctionSubprogram>  :production60"; }

        /**
         * Reduce by <ModuleSubprogram> ::= FunctionSubprogram:<FunctionSubprogram>  :production60
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ModuleSubprogram> ::= FunctionSubprogram:<FunctionSubprogram>  :production60
            ASTFunctionSubprogramNode v1 = (ASTFunctionSubprogramNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTModuleSubprogramNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ModuleSubprogramNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("FunctionSubprogram"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ModuleSubprogram> ::= FunctionSubprogram:<FunctionSubprogram>  :production60
         */
        protected ASTModuleSubprogramNode userAction(ASTFunctionSubprogramNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production60Production PRODUCTION60 = Production60Production.getInstance();

    public static class Production61Production extends Production
    {
        private Production61Production() {;} // Singleton
        private static Production61Production singletonInstance = null;
        public static final Production61Production getInstance() { if (singletonInstance == null) singletonInstance = new Production61Production(); return singletonInstance; }

        public String getDescription() { return "<ModuleSubprogram> ::= SubroutineSubprogram:<SubroutineSubprogram>  :production61"; }

        /**
         * Reduce by <ModuleSubprogram> ::= SubroutineSubprogram:<SubroutineSubprogram>  :production61
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ModuleSubprogram> ::= SubroutineSubprogram:<SubroutineSubprogram>  :production61
            ASTSubroutineSubprogramNode v1 = (ASTSubroutineSubprogramNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTModuleSubprogramNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ModuleSubprogramNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SubroutineSubprogram"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ModuleSubprogram> ::= SubroutineSubprogram:<SubroutineSubprogram>  :production61
         */
        protected ASTModuleSubprogramNode userAction(ASTSubroutineSubprogramNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production61Production PRODUCTION61 = Production61Production.getInstance();

    public static class Production62Production extends Production
    {
        private Production62Production() {;} // Singleton
        private static Production62Production singletonInstance = null;
        public static final Production62Production getInstance() { if (singletonInstance == null) singletonInstance = new Production62Production(); return singletonInstance; }

        public String getDescription() { return "<SpecificationStmt> ::= AccessStmt:<AccessStmt>  :production62"; }

        /**
         * Reduce by <SpecificationStmt> ::= AccessStmt:<AccessStmt>  :production62
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SpecificationStmt> ::= AccessStmt:<AccessStmt>  :production62
            ASTAccessStmtNode v1 = (ASTAccessStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSpecificationStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SpecificationStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("AccessStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SpecificationStmt> ::= AccessStmt:<AccessStmt>  :production62
         */
        protected ASTSpecificationStmtNode userAction(ASTAccessStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production62Production PRODUCTION62 = Production62Production.getInstance();

    public static class Production63Production extends Production
    {
        private Production63Production() {;} // Singleton
        private static Production63Production singletonInstance = null;
        public static final Production63Production getInstance() { if (singletonInstance == null) singletonInstance = new Production63Production(); return singletonInstance; }

        public String getDescription() { return "<SpecificationStmt> ::= AllocatableStmt:<AllocatableStmt>  :production63"; }

        /**
         * Reduce by <SpecificationStmt> ::= AllocatableStmt:<AllocatableStmt>  :production63
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SpecificationStmt> ::= AllocatableStmt:<AllocatableStmt>  :production63
            ASTAllocatableStmtNode v1 = (ASTAllocatableStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSpecificationStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SpecificationStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("AllocatableStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SpecificationStmt> ::= AllocatableStmt:<AllocatableStmt>  :production63
         */
        protected ASTSpecificationStmtNode userAction(ASTAllocatableStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production63Production PRODUCTION63 = Production63Production.getInstance();

    public static class Production64Production extends Production
    {
        private Production64Production() {;} // Singleton
        private static Production64Production singletonInstance = null;
        public static final Production64Production getInstance() { if (singletonInstance == null) singletonInstance = new Production64Production(); return singletonInstance; }

        public String getDescription() { return "<SpecificationStmt> ::= CommonStmt:<CommonStmt>  :production64"; }

        /**
         * Reduce by <SpecificationStmt> ::= CommonStmt:<CommonStmt>  :production64
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SpecificationStmt> ::= CommonStmt:<CommonStmt>  :production64
            ASTCommonStmtNode v1 = (ASTCommonStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSpecificationStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SpecificationStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("CommonStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SpecificationStmt> ::= CommonStmt:<CommonStmt>  :production64
         */
        protected ASTSpecificationStmtNode userAction(ASTCommonStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production64Production PRODUCTION64 = Production64Production.getInstance();

    public static class Production65Production extends Production
    {
        private Production65Production() {;} // Singleton
        private static Production65Production singletonInstance = null;
        public static final Production65Production getInstance() { if (singletonInstance == null) singletonInstance = new Production65Production(); return singletonInstance; }

        public String getDescription() { return "<SpecificationStmt> ::= DataStmt:<DataStmt>  :production65"; }

        /**
         * Reduce by <SpecificationStmt> ::= DataStmt:<DataStmt>  :production65
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SpecificationStmt> ::= DataStmt:<DataStmt>  :production65
            ASTDataStmtNode v1 = (ASTDataStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSpecificationStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SpecificationStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("DataStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SpecificationStmt> ::= DataStmt:<DataStmt>  :production65
         */
        protected ASTSpecificationStmtNode userAction(ASTDataStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production65Production PRODUCTION65 = Production65Production.getInstance();

    public static class Production66Production extends Production
    {
        private Production66Production() {;} // Singleton
        private static Production66Production singletonInstance = null;
        public static final Production66Production getInstance() { if (singletonInstance == null) singletonInstance = new Production66Production(); return singletonInstance; }

        public String getDescription() { return "<SpecificationStmt> ::= DimensionStmt:<DimensionStmt>  :production66"; }

        /**
         * Reduce by <SpecificationStmt> ::= DimensionStmt:<DimensionStmt>  :production66
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SpecificationStmt> ::= DimensionStmt:<DimensionStmt>  :production66
            ASTDimensionStmtNode v1 = (ASTDimensionStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSpecificationStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SpecificationStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("DimensionStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SpecificationStmt> ::= DimensionStmt:<DimensionStmt>  :production66
         */
        protected ASTSpecificationStmtNode userAction(ASTDimensionStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production66Production PRODUCTION66 = Production66Production.getInstance();

    public static class Production67Production extends Production
    {
        private Production67Production() {;} // Singleton
        private static Production67Production singletonInstance = null;
        public static final Production67Production getInstance() { if (singletonInstance == null) singletonInstance = new Production67Production(); return singletonInstance; }

        public String getDescription() { return "<SpecificationStmt> ::= EquivalenceStmt:<EquivalenceStmt>  :production67"; }

        /**
         * Reduce by <SpecificationStmt> ::= EquivalenceStmt:<EquivalenceStmt>  :production67
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SpecificationStmt> ::= EquivalenceStmt:<EquivalenceStmt>  :production67
            ASTEquivalenceStmtNode v1 = (ASTEquivalenceStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSpecificationStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SpecificationStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EquivalenceStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SpecificationStmt> ::= EquivalenceStmt:<EquivalenceStmt>  :production67
         */
        protected ASTSpecificationStmtNode userAction(ASTEquivalenceStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production67Production PRODUCTION67 = Production67Production.getInstance();

    public static class Production68Production extends Production
    {
        private Production68Production() {;} // Singleton
        private static Production68Production singletonInstance = null;
        public static final Production68Production getInstance() { if (singletonInstance == null) singletonInstance = new Production68Production(); return singletonInstance; }

        public String getDescription() { return "<SpecificationStmt> ::= ExternalStmt:<ExternalStmt>  :production68"; }

        /**
         * Reduce by <SpecificationStmt> ::= ExternalStmt:<ExternalStmt>  :production68
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SpecificationStmt> ::= ExternalStmt:<ExternalStmt>  :production68
            ASTExternalStmtNode v1 = (ASTExternalStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSpecificationStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SpecificationStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ExternalStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SpecificationStmt> ::= ExternalStmt:<ExternalStmt>  :production68
         */
        protected ASTSpecificationStmtNode userAction(ASTExternalStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production68Production PRODUCTION68 = Production68Production.getInstance();

    public static class Production69Production extends Production
    {
        private Production69Production() {;} // Singleton
        private static Production69Production singletonInstance = null;
        public static final Production69Production getInstance() { if (singletonInstance == null) singletonInstance = new Production69Production(); return singletonInstance; }

        public String getDescription() { return "<SpecificationStmt> ::= IntentStmt:<IntentStmt>  :production69"; }

        /**
         * Reduce by <SpecificationStmt> ::= IntentStmt:<IntentStmt>  :production69
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SpecificationStmt> ::= IntentStmt:<IntentStmt>  :production69
            ASTIntentStmtNode v1 = (ASTIntentStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSpecificationStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SpecificationStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("IntentStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SpecificationStmt> ::= IntentStmt:<IntentStmt>  :production69
         */
        protected ASTSpecificationStmtNode userAction(ASTIntentStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production69Production PRODUCTION69 = Production69Production.getInstance();

    public static class Production70Production extends Production
    {
        private Production70Production() {;} // Singleton
        private static Production70Production singletonInstance = null;
        public static final Production70Production getInstance() { if (singletonInstance == null) singletonInstance = new Production70Production(); return singletonInstance; }

        public String getDescription() { return "<SpecificationStmt> ::= IntrinsicStmt:<IntrinsicStmt>  :production70"; }

        /**
         * Reduce by <SpecificationStmt> ::= IntrinsicStmt:<IntrinsicStmt>  :production70
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SpecificationStmt> ::= IntrinsicStmt:<IntrinsicStmt>  :production70
            ASTIntrinsicStmtNode v1 = (ASTIntrinsicStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSpecificationStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SpecificationStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("IntrinsicStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SpecificationStmt> ::= IntrinsicStmt:<IntrinsicStmt>  :production70
         */
        protected ASTSpecificationStmtNode userAction(ASTIntrinsicStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production70Production PRODUCTION70 = Production70Production.getInstance();

    public static class Production71Production extends Production
    {
        private Production71Production() {;} // Singleton
        private static Production71Production singletonInstance = null;
        public static final Production71Production getInstance() { if (singletonInstance == null) singletonInstance = new Production71Production(); return singletonInstance; }

        public String getDescription() { return "<SpecificationStmt> ::= NamelistStmt:<NamelistStmt>  :production71"; }

        /**
         * Reduce by <SpecificationStmt> ::= NamelistStmt:<NamelistStmt>  :production71
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SpecificationStmt> ::= NamelistStmt:<NamelistStmt>  :production71
            ASTNamelistStmtNode v1 = (ASTNamelistStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSpecificationStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SpecificationStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("NamelistStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SpecificationStmt> ::= NamelistStmt:<NamelistStmt>  :production71
         */
        protected ASTSpecificationStmtNode userAction(ASTNamelistStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production71Production PRODUCTION71 = Production71Production.getInstance();

    public static class Production72Production extends Production
    {
        private Production72Production() {;} // Singleton
        private static Production72Production singletonInstance = null;
        public static final Production72Production getInstance() { if (singletonInstance == null) singletonInstance = new Production72Production(); return singletonInstance; }

        public String getDescription() { return "<SpecificationStmt> ::= OptionalStmt:<OptionalStmt>  :production72"; }

        /**
         * Reduce by <SpecificationStmt> ::= OptionalStmt:<OptionalStmt>  :production72
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SpecificationStmt> ::= OptionalStmt:<OptionalStmt>  :production72
            ASTOptionalStmtNode v1 = (ASTOptionalStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSpecificationStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SpecificationStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("OptionalStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SpecificationStmt> ::= OptionalStmt:<OptionalStmt>  :production72
         */
        protected ASTSpecificationStmtNode userAction(ASTOptionalStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production72Production PRODUCTION72 = Production72Production.getInstance();

    public static class Production73Production extends Production
    {
        private Production73Production() {;} // Singleton
        private static Production73Production singletonInstance = null;
        public static final Production73Production getInstance() { if (singletonInstance == null) singletonInstance = new Production73Production(); return singletonInstance; }

        public String getDescription() { return "<SpecificationStmt> ::= PointerStmt:<PointerStmt>  :production73"; }

        /**
         * Reduce by <SpecificationStmt> ::= PointerStmt:<PointerStmt>  :production73
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SpecificationStmt> ::= PointerStmt:<PointerStmt>  :production73
            ASTPointerStmtNode v1 = (ASTPointerStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSpecificationStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SpecificationStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("PointerStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SpecificationStmt> ::= PointerStmt:<PointerStmt>  :production73
         */
        protected ASTSpecificationStmtNode userAction(ASTPointerStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production73Production PRODUCTION73 = Production73Production.getInstance();

    public static class Production74Production extends Production
    {
        private Production74Production() {;} // Singleton
        private static Production74Production singletonInstance = null;
        public static final Production74Production getInstance() { if (singletonInstance == null) singletonInstance = new Production74Production(); return singletonInstance; }

        public String getDescription() { return "<SpecificationStmt> ::= SaveStmt:<SaveStmt>  :production74"; }

        /**
         * Reduce by <SpecificationStmt> ::= SaveStmt:<SaveStmt>  :production74
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SpecificationStmt> ::= SaveStmt:<SaveStmt>  :production74
            ASTSaveStmtNode v1 = (ASTSaveStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSpecificationStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SpecificationStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SaveStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SpecificationStmt> ::= SaveStmt:<SaveStmt>  :production74
         */
        protected ASTSpecificationStmtNode userAction(ASTSaveStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production74Production PRODUCTION74 = Production74Production.getInstance();

    public static class Production75Production extends Production
    {
        private Production75Production() {;} // Singleton
        private static Production75Production singletonInstance = null;
        public static final Production75Production getInstance() { if (singletonInstance == null) singletonInstance = new Production75Production(); return singletonInstance; }

        public String getDescription() { return "<SpecificationStmt> ::= TargetStmt:<TargetStmt>  :production75"; }

        /**
         * Reduce by <SpecificationStmt> ::= TargetStmt:<TargetStmt>  :production75
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SpecificationStmt> ::= TargetStmt:<TargetStmt>  :production75
            ASTTargetStmtNode v1 = (ASTTargetStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSpecificationStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SpecificationStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("TargetStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SpecificationStmt> ::= TargetStmt:<TargetStmt>  :production75
         */
        protected ASTSpecificationStmtNode userAction(ASTTargetStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production75Production PRODUCTION75 = Production75Production.getInstance();

    public static class Production76Production extends Production
    {
        private Production76Production() {;} // Singleton
        private static Production76Production singletonInstance = null;
        public static final Production76Production getInstance() { if (singletonInstance == null) singletonInstance = new Production76Production(); return singletonInstance; }

        public String getDescription() { return "<ExecutableConstruct> ::= ActionStmt:<ActionStmt>  :production76"; }

        /**
         * Reduce by <ExecutableConstruct> ::= ActionStmt:<ActionStmt>  :production76
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ExecutableConstruct> ::= ActionStmt:<ActionStmt>  :production76
            ASTActionStmtNode v1 = (ASTActionStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTExecutableConstructNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ExecutableConstructNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ActionStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ExecutableConstruct> ::= ActionStmt:<ActionStmt>  :production76
         */
        protected ASTExecutableConstructNode userAction(ASTActionStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production76Production PRODUCTION76 = Production76Production.getInstance();

    public static class Production77Production extends Production
    {
        private Production77Production() {;} // Singleton
        private static Production77Production singletonInstance = null;
        public static final Production77Production getInstance() { if (singletonInstance == null) singletonInstance = new Production77Production(); return singletonInstance; }

        public String getDescription() { return "<ExecutableConstruct> ::= CaseConstruct:<CaseConstruct>  :production77"; }

        /**
         * Reduce by <ExecutableConstruct> ::= CaseConstruct:<CaseConstruct>  :production77
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ExecutableConstruct> ::= CaseConstruct:<CaseConstruct>  :production77
            ASTCaseConstructNode v1 = (ASTCaseConstructNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTExecutableConstructNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ExecutableConstructNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("CaseConstruct"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ExecutableConstruct> ::= CaseConstruct:<CaseConstruct>  :production77
         */
        protected ASTExecutableConstructNode userAction(ASTCaseConstructNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production77Production PRODUCTION77 = Production77Production.getInstance();

    public static class Production78Production extends Production
    {
        private Production78Production() {;} // Singleton
        private static Production78Production singletonInstance = null;
        public static final Production78Production getInstance() { if (singletonInstance == null) singletonInstance = new Production78Production(); return singletonInstance; }

        public String getDescription() { return "<ExecutableConstruct> ::= DoConstruct:<DoConstruct>  :production78"; }

        /**
         * Reduce by <ExecutableConstruct> ::= DoConstruct:<DoConstruct>  :production78
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ExecutableConstruct> ::= DoConstruct:<DoConstruct>  :production78
            ASTDoConstructNode v1 = (ASTDoConstructNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTExecutableConstructNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ExecutableConstructNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("DoConstruct"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ExecutableConstruct> ::= DoConstruct:<DoConstruct>  :production78
         */
        protected ASTExecutableConstructNode userAction(ASTDoConstructNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production78Production PRODUCTION78 = Production78Production.getInstance();

    public static class Production79Production extends Production
    {
        private Production79Production() {;} // Singleton
        private static Production79Production singletonInstance = null;
        public static final Production79Production getInstance() { if (singletonInstance == null) singletonInstance = new Production79Production(); return singletonInstance; }

        public String getDescription() { return "<ExecutableConstruct> ::= ForallConstruct:<ForallConstruct>  :production79"; }

        /**
         * Reduce by <ExecutableConstruct> ::= ForallConstruct:<ForallConstruct>  :production79
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ExecutableConstruct> ::= ForallConstruct:<ForallConstruct>  :production79
            ASTForallConstructNode v1 = (ASTForallConstructNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTExecutableConstructNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ExecutableConstructNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ForallConstruct"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ExecutableConstruct> ::= ForallConstruct:<ForallConstruct>  :production79
         */
        protected ASTExecutableConstructNode userAction(ASTForallConstructNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production79Production PRODUCTION79 = Production79Production.getInstance();

    public static class Production80Production extends Production
    {
        private Production80Production() {;} // Singleton
        private static Production80Production singletonInstance = null;
        public static final Production80Production getInstance() { if (singletonInstance == null) singletonInstance = new Production80Production(); return singletonInstance; }

        public String getDescription() { return "<ExecutableConstruct> ::= IfConstruct:<IfConstruct>  :production80"; }

        /**
         * Reduce by <ExecutableConstruct> ::= IfConstruct:<IfConstruct>  :production80
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ExecutableConstruct> ::= IfConstruct:<IfConstruct>  :production80
            ASTIfConstructNode v1 = (ASTIfConstructNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTExecutableConstructNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ExecutableConstructNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("IfConstruct"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ExecutableConstruct> ::= IfConstruct:<IfConstruct>  :production80
         */
        protected ASTExecutableConstructNode userAction(ASTIfConstructNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production80Production PRODUCTION80 = Production80Production.getInstance();

    public static class Production81Production extends Production
    {
        private Production81Production() {;} // Singleton
        private static Production81Production singletonInstance = null;
        public static final Production81Production getInstance() { if (singletonInstance == null) singletonInstance = new Production81Production(); return singletonInstance; }

        public String getDescription() { return "<ExecutableConstruct> ::= WhereConstruct:<WhereConstruct>  :production81"; }

        /**
         * Reduce by <ExecutableConstruct> ::= WhereConstruct:<WhereConstruct>  :production81
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ExecutableConstruct> ::= WhereConstruct:<WhereConstruct>  :production81
            ASTWhereConstructNode v1 = (ASTWhereConstructNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTExecutableConstructNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ExecutableConstructNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("WhereConstruct"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ExecutableConstruct> ::= WhereConstruct:<WhereConstruct>  :production81
         */
        protected ASTExecutableConstructNode userAction(ASTWhereConstructNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production81Production PRODUCTION81 = Production81Production.getInstance();

    public static class Production82Production extends Production
    {
        private Production82Production() {;} // Singleton
        private static Production82Production singletonInstance = null;
        public static final Production82Production getInstance() { if (singletonInstance == null) singletonInstance = new Production82Production(); return singletonInstance; }

        public String getDescription() { return "<ExecutableConstruct> ::= EndDoStmt:<EndDoStmt>  :production82"; }

        /**
         * Reduce by <ExecutableConstruct> ::= EndDoStmt:<EndDoStmt>  :production82
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ExecutableConstruct> ::= EndDoStmt:<EndDoStmt>  :production82
            ASTEndDoStmtNode v1 = (ASTEndDoStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTExecutableConstructNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ExecutableConstructNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EndDoStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ExecutableConstruct> ::= EndDoStmt:<EndDoStmt>  :production82
         */
        protected ASTExecutableConstructNode userAction(ASTEndDoStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production82Production PRODUCTION82 = Production82Production.getInstance();

    public static class Production83Production extends Production
    {
        private Production83Production() {;} // Singleton
        private static Production83Production singletonInstance = null;
        public static final Production83Production getInstance() { if (singletonInstance == null) singletonInstance = new Production83Production(); return singletonInstance; }

        public String getDescription() { return "<ActionStmt> ::= ObsoleteActionStmt:<ObsoleteActionStmt>  :production83"; }

        /**
         * Reduce by <ActionStmt> ::= ObsoleteActionStmt:<ObsoleteActionStmt>  :production83
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ActionStmt> ::= ObsoleteActionStmt:<ObsoleteActionStmt>  :production83
            ASTObsoleteActionStmtNode v1 = (ASTObsoleteActionStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTActionStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ActionStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ObsoleteActionStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ActionStmt> ::= ObsoleteActionStmt:<ObsoleteActionStmt>  :production83
         */
        protected ASTActionStmtNode userAction(ASTObsoleteActionStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production83Production PRODUCTION83 = Production83Production.getInstance();

    public static class Production84Production extends Production
    {
        private Production84Production() {;} // Singleton
        private static Production84Production singletonInstance = null;
        public static final Production84Production getInstance() { if (singletonInstance == null) singletonInstance = new Production84Production(); return singletonInstance; }

        public String getDescription() { return "<ActionStmt> ::= AllocateStmt:<AllocateStmt>  :production84"; }

        /**
         * Reduce by <ActionStmt> ::= AllocateStmt:<AllocateStmt>  :production84
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ActionStmt> ::= AllocateStmt:<AllocateStmt>  :production84
            ASTAllocateStmtNode v1 = (ASTAllocateStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTActionStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ActionStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("AllocateStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ActionStmt> ::= AllocateStmt:<AllocateStmt>  :production84
         */
        protected ASTActionStmtNode userAction(ASTAllocateStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production84Production PRODUCTION84 = Production84Production.getInstance();

    public static class Production85Production extends Production
    {
        private Production85Production() {;} // Singleton
        private static Production85Production singletonInstance = null;
        public static final Production85Production getInstance() { if (singletonInstance == null) singletonInstance = new Production85Production(); return singletonInstance; }

        public String getDescription() { return "<ActionStmt> ::= AssignmentStmt:<AssignmentStmt>  :production85"; }

        /**
         * Reduce by <ActionStmt> ::= AssignmentStmt:<AssignmentStmt>  :production85
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ActionStmt> ::= AssignmentStmt:<AssignmentStmt>  :production85
            ASTAssignmentStmtNode v1 = (ASTAssignmentStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTActionStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ActionStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("AssignmentStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ActionStmt> ::= AssignmentStmt:<AssignmentStmt>  :production85
         */
        protected ASTActionStmtNode userAction(ASTAssignmentStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production85Production PRODUCTION85 = Production85Production.getInstance();

    public static class Production86Production extends Production
    {
        private Production86Production() {;} // Singleton
        private static Production86Production singletonInstance = null;
        public static final Production86Production getInstance() { if (singletonInstance == null) singletonInstance = new Production86Production(); return singletonInstance; }

        public String getDescription() { return "<ActionStmt> ::= BackspaceStmt:<BackspaceStmt>  :production86"; }

        /**
         * Reduce by <ActionStmt> ::= BackspaceStmt:<BackspaceStmt>  :production86
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ActionStmt> ::= BackspaceStmt:<BackspaceStmt>  :production86
            ASTBackspaceStmtNode v1 = (ASTBackspaceStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTActionStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ActionStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("BackspaceStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ActionStmt> ::= BackspaceStmt:<BackspaceStmt>  :production86
         */
        protected ASTActionStmtNode userAction(ASTBackspaceStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production86Production PRODUCTION86 = Production86Production.getInstance();

    public static class Production87Production extends Production
    {
        private Production87Production() {;} // Singleton
        private static Production87Production singletonInstance = null;
        public static final Production87Production getInstance() { if (singletonInstance == null) singletonInstance = new Production87Production(); return singletonInstance; }

        public String getDescription() { return "<ActionStmt> ::= CallStmt:<CallStmt>  :production87"; }

        /**
         * Reduce by <ActionStmt> ::= CallStmt:<CallStmt>  :production87
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ActionStmt> ::= CallStmt:<CallStmt>  :production87
            ASTCallStmtNode v1 = (ASTCallStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTActionStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ActionStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("CallStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ActionStmt> ::= CallStmt:<CallStmt>  :production87
         */
        protected ASTActionStmtNode userAction(ASTCallStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production87Production PRODUCTION87 = Production87Production.getInstance();

    public static class Production88Production extends Production
    {
        private Production88Production() {;} // Singleton
        private static Production88Production singletonInstance = null;
        public static final Production88Production getInstance() { if (singletonInstance == null) singletonInstance = new Production88Production(); return singletonInstance; }

        public String getDescription() { return "<ActionStmt> ::= CloseStmt:<CloseStmt>  :production88"; }

        /**
         * Reduce by <ActionStmt> ::= CloseStmt:<CloseStmt>  :production88
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ActionStmt> ::= CloseStmt:<CloseStmt>  :production88
            ASTCloseStmtNode v1 = (ASTCloseStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTActionStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ActionStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("CloseStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ActionStmt> ::= CloseStmt:<CloseStmt>  :production88
         */
        protected ASTActionStmtNode userAction(ASTCloseStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production88Production PRODUCTION88 = Production88Production.getInstance();

    public static class Production89Production extends Production
    {
        private Production89Production() {;} // Singleton
        private static Production89Production singletonInstance = null;
        public static final Production89Production getInstance() { if (singletonInstance == null) singletonInstance = new Production89Production(); return singletonInstance; }

        public String getDescription() { return "<ActionStmt> ::= ContinueStmt:<ContinueStmt>  :production89"; }

        /**
         * Reduce by <ActionStmt> ::= ContinueStmt:<ContinueStmt>  :production89
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ActionStmt> ::= ContinueStmt:<ContinueStmt>  :production89
            ASTContinueStmtNode v1 = (ASTContinueStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTActionStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ActionStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ContinueStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ActionStmt> ::= ContinueStmt:<ContinueStmt>  :production89
         */
        protected ASTActionStmtNode userAction(ASTContinueStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production89Production PRODUCTION89 = Production89Production.getInstance();

    public static class Production90Production extends Production
    {
        private Production90Production() {;} // Singleton
        private static Production90Production singletonInstance = null;
        public static final Production90Production getInstance() { if (singletonInstance == null) singletonInstance = new Production90Production(); return singletonInstance; }

        public String getDescription() { return "<ActionStmt> ::= CycleStmt:<CycleStmt>  :production90"; }

        /**
         * Reduce by <ActionStmt> ::= CycleStmt:<CycleStmt>  :production90
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ActionStmt> ::= CycleStmt:<CycleStmt>  :production90
            ASTCycleStmtNode v1 = (ASTCycleStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTActionStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ActionStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("CycleStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ActionStmt> ::= CycleStmt:<CycleStmt>  :production90
         */
        protected ASTActionStmtNode userAction(ASTCycleStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production90Production PRODUCTION90 = Production90Production.getInstance();

    public static class Production91Production extends Production
    {
        private Production91Production() {;} // Singleton
        private static Production91Production singletonInstance = null;
        public static final Production91Production getInstance() { if (singletonInstance == null) singletonInstance = new Production91Production(); return singletonInstance; }

        public String getDescription() { return "<ActionStmt> ::= DeallocateStmt:<DeallocateStmt>  :production91"; }

        /**
         * Reduce by <ActionStmt> ::= DeallocateStmt:<DeallocateStmt>  :production91
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ActionStmt> ::= DeallocateStmt:<DeallocateStmt>  :production91
            ASTDeallocateStmtNode v1 = (ASTDeallocateStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTActionStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ActionStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("DeallocateStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ActionStmt> ::= DeallocateStmt:<DeallocateStmt>  :production91
         */
        protected ASTActionStmtNode userAction(ASTDeallocateStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production91Production PRODUCTION91 = Production91Production.getInstance();

    public static class Production92Production extends Production
    {
        private Production92Production() {;} // Singleton
        private static Production92Production singletonInstance = null;
        public static final Production92Production getInstance() { if (singletonInstance == null) singletonInstance = new Production92Production(); return singletonInstance; }

        public String getDescription() { return "<ActionStmt> ::= EndfileStmt:<EndfileStmt>  :production92"; }

        /**
         * Reduce by <ActionStmt> ::= EndfileStmt:<EndfileStmt>  :production92
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ActionStmt> ::= EndfileStmt:<EndfileStmt>  :production92
            ASTEndfileStmtNode v1 = (ASTEndfileStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTActionStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ActionStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EndfileStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ActionStmt> ::= EndfileStmt:<EndfileStmt>  :production92
         */
        protected ASTActionStmtNode userAction(ASTEndfileStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production92Production PRODUCTION92 = Production92Production.getInstance();

    public static class Production93Production extends Production
    {
        private Production93Production() {;} // Singleton
        private static Production93Production singletonInstance = null;
        public static final Production93Production getInstance() { if (singletonInstance == null) singletonInstance = new Production93Production(); return singletonInstance; }

        public String getDescription() { return "<ActionStmt> ::= ExitStmt:<ExitStmt>  :production93"; }

        /**
         * Reduce by <ActionStmt> ::= ExitStmt:<ExitStmt>  :production93
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ActionStmt> ::= ExitStmt:<ExitStmt>  :production93
            ASTExitStmtNode v1 = (ASTExitStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTActionStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ActionStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ExitStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ActionStmt> ::= ExitStmt:<ExitStmt>  :production93
         */
        protected ASTActionStmtNode userAction(ASTExitStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production93Production PRODUCTION93 = Production93Production.getInstance();

    public static class Production94Production extends Production
    {
        private Production94Production() {;} // Singleton
        private static Production94Production singletonInstance = null;
        public static final Production94Production getInstance() { if (singletonInstance == null) singletonInstance = new Production94Production(); return singletonInstance; }

        public String getDescription() { return "<ActionStmt> ::= ForallStmt:<ForallStmt>  :production94"; }

        /**
         * Reduce by <ActionStmt> ::= ForallStmt:<ForallStmt>  :production94
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ActionStmt> ::= ForallStmt:<ForallStmt>  :production94
            ASTForallStmtNode v1 = (ASTForallStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTActionStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ActionStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ForallStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ActionStmt> ::= ForallStmt:<ForallStmt>  :production94
         */
        protected ASTActionStmtNode userAction(ASTForallStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production94Production PRODUCTION94 = Production94Production.getInstance();

    public static class Production95Production extends Production
    {
        private Production95Production() {;} // Singleton
        private static Production95Production singletonInstance = null;
        public static final Production95Production getInstance() { if (singletonInstance == null) singletonInstance = new Production95Production(); return singletonInstance; }

        public String getDescription() { return "<ActionStmt> ::= GotoStmt:<GotoStmt>  :production95"; }

        /**
         * Reduce by <ActionStmt> ::= GotoStmt:<GotoStmt>  :production95
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ActionStmt> ::= GotoStmt:<GotoStmt>  :production95
            ASTGotoStmtNode v1 = (ASTGotoStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTActionStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ActionStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("GotoStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ActionStmt> ::= GotoStmt:<GotoStmt>  :production95
         */
        protected ASTActionStmtNode userAction(ASTGotoStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production95Production PRODUCTION95 = Production95Production.getInstance();

    public static class Production96Production extends Production
    {
        private Production96Production() {;} // Singleton
        private static Production96Production singletonInstance = null;
        public static final Production96Production getInstance() { if (singletonInstance == null) singletonInstance = new Production96Production(); return singletonInstance; }

        public String getDescription() { return "<ActionStmt> ::= IfStmt:<IfStmt>  :production96"; }

        /**
         * Reduce by <ActionStmt> ::= IfStmt:<IfStmt>  :production96
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ActionStmt> ::= IfStmt:<IfStmt>  :production96
            ASTIfStmtNode v1 = (ASTIfStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTActionStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ActionStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("IfStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ActionStmt> ::= IfStmt:<IfStmt>  :production96
         */
        protected ASTActionStmtNode userAction(ASTIfStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production96Production PRODUCTION96 = Production96Production.getInstance();

    public static class Production97Production extends Production
    {
        private Production97Production() {;} // Singleton
        private static Production97Production singletonInstance = null;
        public static final Production97Production getInstance() { if (singletonInstance == null) singletonInstance = new Production97Production(); return singletonInstance; }

        public String getDescription() { return "<ActionStmt> ::= InquireStmt:<InquireStmt>  :production97"; }

        /**
         * Reduce by <ActionStmt> ::= InquireStmt:<InquireStmt>  :production97
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ActionStmt> ::= InquireStmt:<InquireStmt>  :production97
            ASTInquireStmtNode v1 = (ASTInquireStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTActionStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ActionStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("InquireStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ActionStmt> ::= InquireStmt:<InquireStmt>  :production97
         */
        protected ASTActionStmtNode userAction(ASTInquireStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production97Production PRODUCTION97 = Production97Production.getInstance();

    public static class Production98Production extends Production
    {
        private Production98Production() {;} // Singleton
        private static Production98Production singletonInstance = null;
        public static final Production98Production getInstance() { if (singletonInstance == null) singletonInstance = new Production98Production(); return singletonInstance; }

        public String getDescription() { return "<ActionStmt> ::= NullifyStmt:<NullifyStmt>  :production98"; }

        /**
         * Reduce by <ActionStmt> ::= NullifyStmt:<NullifyStmt>  :production98
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ActionStmt> ::= NullifyStmt:<NullifyStmt>  :production98
            ASTNullifyStmtNode v1 = (ASTNullifyStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTActionStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ActionStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("NullifyStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ActionStmt> ::= NullifyStmt:<NullifyStmt>  :production98
         */
        protected ASTActionStmtNode userAction(ASTNullifyStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production98Production PRODUCTION98 = Production98Production.getInstance();

    public static class Production99Production extends Production
    {
        private Production99Production() {;} // Singleton
        private static Production99Production singletonInstance = null;
        public static final Production99Production getInstance() { if (singletonInstance == null) singletonInstance = new Production99Production(); return singletonInstance; }

        public String getDescription() { return "<ActionStmt> ::= OpenStmt:<OpenStmt>  :production99"; }

        /**
         * Reduce by <ActionStmt> ::= OpenStmt:<OpenStmt>  :production99
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ActionStmt> ::= OpenStmt:<OpenStmt>  :production99
            ASTOpenStmtNode v1 = (ASTOpenStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTActionStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ActionStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("OpenStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ActionStmt> ::= OpenStmt:<OpenStmt>  :production99
         */
        protected ASTActionStmtNode userAction(ASTOpenStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production99Production PRODUCTION99 = Production99Production.getInstance();

    public static class Production100Production extends Production
    {
        private Production100Production() {;} // Singleton
        private static Production100Production singletonInstance = null;
        public static final Production100Production getInstance() { if (singletonInstance == null) singletonInstance = new Production100Production(); return singletonInstance; }

        public String getDescription() { return "<ActionStmt> ::= PointerAssignmentStmt:<PointerAssignmentStmt>  :production100"; }

        /**
         * Reduce by <ActionStmt> ::= PointerAssignmentStmt:<PointerAssignmentStmt>  :production100
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ActionStmt> ::= PointerAssignmentStmt:<PointerAssignmentStmt>  :production100
            ASTPointerAssignmentStmtNode v1 = (ASTPointerAssignmentStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTActionStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ActionStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("PointerAssignmentStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ActionStmt> ::= PointerAssignmentStmt:<PointerAssignmentStmt>  :production100
         */
        protected ASTActionStmtNode userAction(ASTPointerAssignmentStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production100Production PRODUCTION100 = Production100Production.getInstance();

    public static class Production101Production extends Production
    {
        private Production101Production() {;} // Singleton
        private static Production101Production singletonInstance = null;
        public static final Production101Production getInstance() { if (singletonInstance == null) singletonInstance = new Production101Production(); return singletonInstance; }

        public String getDescription() { return "<ActionStmt> ::= PrintStmt:<PrintStmt>  :production101"; }

        /**
         * Reduce by <ActionStmt> ::= PrintStmt:<PrintStmt>  :production101
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ActionStmt> ::= PrintStmt:<PrintStmt>  :production101
            ASTPrintStmtNode v1 = (ASTPrintStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTActionStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ActionStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("PrintStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ActionStmt> ::= PrintStmt:<PrintStmt>  :production101
         */
        protected ASTActionStmtNode userAction(ASTPrintStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production101Production PRODUCTION101 = Production101Production.getInstance();

    public static class Production102Production extends Production
    {
        private Production102Production() {;} // Singleton
        private static Production102Production singletonInstance = null;
        public static final Production102Production getInstance() { if (singletonInstance == null) singletonInstance = new Production102Production(); return singletonInstance; }

        public String getDescription() { return "<ActionStmt> ::= ReadStmt:<ReadStmt>  :production102"; }

        /**
         * Reduce by <ActionStmt> ::= ReadStmt:<ReadStmt>  :production102
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ActionStmt> ::= ReadStmt:<ReadStmt>  :production102
            ASTReadStmtNode v1 = (ASTReadStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTActionStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ActionStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ReadStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ActionStmt> ::= ReadStmt:<ReadStmt>  :production102
         */
        protected ASTActionStmtNode userAction(ASTReadStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production102Production PRODUCTION102 = Production102Production.getInstance();

    public static class Production103Production extends Production
    {
        private Production103Production() {;} // Singleton
        private static Production103Production singletonInstance = null;
        public static final Production103Production getInstance() { if (singletonInstance == null) singletonInstance = new Production103Production(); return singletonInstance; }

        public String getDescription() { return "<ActionStmt> ::= ReturnStmt:<ReturnStmt>  :production103"; }

        /**
         * Reduce by <ActionStmt> ::= ReturnStmt:<ReturnStmt>  :production103
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ActionStmt> ::= ReturnStmt:<ReturnStmt>  :production103
            ASTReturnStmtNode v1 = (ASTReturnStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTActionStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ActionStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ReturnStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ActionStmt> ::= ReturnStmt:<ReturnStmt>  :production103
         */
        protected ASTActionStmtNode userAction(ASTReturnStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production103Production PRODUCTION103 = Production103Production.getInstance();

    public static class Production104Production extends Production
    {
        private Production104Production() {;} // Singleton
        private static Production104Production singletonInstance = null;
        public static final Production104Production getInstance() { if (singletonInstance == null) singletonInstance = new Production104Production(); return singletonInstance; }

        public String getDescription() { return "<ActionStmt> ::= RewindStmt:<RewindStmt>  :production104"; }

        /**
         * Reduce by <ActionStmt> ::= RewindStmt:<RewindStmt>  :production104
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ActionStmt> ::= RewindStmt:<RewindStmt>  :production104
            ASTRewindStmtNode v1 = (ASTRewindStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTActionStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ActionStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("RewindStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ActionStmt> ::= RewindStmt:<RewindStmt>  :production104
         */
        protected ASTActionStmtNode userAction(ASTRewindStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production104Production PRODUCTION104 = Production104Production.getInstance();

    public static class Production105Production extends Production
    {
        private Production105Production() {;} // Singleton
        private static Production105Production singletonInstance = null;
        public static final Production105Production getInstance() { if (singletonInstance == null) singletonInstance = new Production105Production(); return singletonInstance; }

        public String getDescription() { return "<ActionStmt> ::= StopStmt:<StopStmt>  :production105"; }

        /**
         * Reduce by <ActionStmt> ::= StopStmt:<StopStmt>  :production105
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ActionStmt> ::= StopStmt:<StopStmt>  :production105
            ASTStopStmtNode v1 = (ASTStopStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTActionStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ActionStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("StopStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ActionStmt> ::= StopStmt:<StopStmt>  :production105
         */
        protected ASTActionStmtNode userAction(ASTStopStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production105Production PRODUCTION105 = Production105Production.getInstance();

    public static class Production106Production extends Production
    {
        private Production106Production() {;} // Singleton
        private static Production106Production singletonInstance = null;
        public static final Production106Production getInstance() { if (singletonInstance == null) singletonInstance = new Production106Production(); return singletonInstance; }

        public String getDescription() { return "<ActionStmt> ::= WhereStmt:<WhereStmt>  :production106"; }

        /**
         * Reduce by <ActionStmt> ::= WhereStmt:<WhereStmt>  :production106
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ActionStmt> ::= WhereStmt:<WhereStmt>  :production106
            ASTWhereStmtNode v1 = (ASTWhereStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTActionStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ActionStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("WhereStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ActionStmt> ::= WhereStmt:<WhereStmt>  :production106
         */
        protected ASTActionStmtNode userAction(ASTWhereStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production106Production PRODUCTION106 = Production106Production.getInstance();

    public static class Production107Production extends Production
    {
        private Production107Production() {;} // Singleton
        private static Production107Production singletonInstance = null;
        public static final Production107Production getInstance() { if (singletonInstance == null) singletonInstance = new Production107Production(); return singletonInstance; }

        public String getDescription() { return "<ActionStmt> ::= WriteStmt:<WriteStmt>  :production107"; }

        /**
         * Reduce by <ActionStmt> ::= WriteStmt:<WriteStmt>  :production107
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ActionStmt> ::= WriteStmt:<WriteStmt>  :production107
            ASTWriteStmtNode v1 = (ASTWriteStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTActionStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ActionStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("WriteStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ActionStmt> ::= WriteStmt:<WriteStmt>  :production107
         */
        protected ASTActionStmtNode userAction(ASTWriteStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production107Production PRODUCTION107 = Production107Production.getInstance();

    public static class Production108Production extends Production
    {
        private Production108Production() {;} // Singleton
        private static Production108Production singletonInstance = null;
        public static final Production108Production getInstance() { if (singletonInstance == null) singletonInstance = new Production108Production(); return singletonInstance; }

        public String getDescription() { return "<ObsoleteActionStmt> ::= StmtFunctionStmt:<StmtFunctionStmt>  :production108"; }

        /**
         * Reduce by <ObsoleteActionStmt> ::= StmtFunctionStmt:<StmtFunctionStmt>  :production108
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ObsoleteActionStmt> ::= StmtFunctionStmt:<StmtFunctionStmt>  :production108
            ASTStmtFunctionStmtNode v1 = (ASTStmtFunctionStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTObsoleteActionStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ObsoleteActionStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("StmtFunctionStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ObsoleteActionStmt> ::= StmtFunctionStmt:<StmtFunctionStmt>  :production108
         */
        protected ASTObsoleteActionStmtNode userAction(ASTStmtFunctionStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production108Production PRODUCTION108 = Production108Production.getInstance();

    public static class Production109Production extends Production
    {
        private Production109Production() {;} // Singleton
        private static Production109Production singletonInstance = null;
        public static final Production109Production getInstance() { if (singletonInstance == null) singletonInstance = new Production109Production(); return singletonInstance; }

        public String getDescription() { return "<ObsoleteActionStmt> ::= ArithmeticIfStmt:<ArithmeticIfStmt>  :production109"; }

        /**
         * Reduce by <ObsoleteActionStmt> ::= ArithmeticIfStmt:<ArithmeticIfStmt>  :production109
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ObsoleteActionStmt> ::= ArithmeticIfStmt:<ArithmeticIfStmt>  :production109
            ASTArithmeticIfStmtNode v1 = (ASTArithmeticIfStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTObsoleteActionStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ObsoleteActionStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ArithmeticIfStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ObsoleteActionStmt> ::= ArithmeticIfStmt:<ArithmeticIfStmt>  :production109
         */
        protected ASTObsoleteActionStmtNode userAction(ASTArithmeticIfStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production109Production PRODUCTION109 = Production109Production.getInstance();

    public static class Production110Production extends Production
    {
        private Production110Production() {;} // Singleton
        private static Production110Production singletonInstance = null;
        public static final Production110Production getInstance() { if (singletonInstance == null) singletonInstance = new Production110Production(); return singletonInstance; }

        public String getDescription() { return "<ObsoleteActionStmt> ::= ComputedGotoStmt:<ComputedGotoStmt>  :production110"; }

        /**
         * Reduce by <ObsoleteActionStmt> ::= ComputedGotoStmt:<ComputedGotoStmt>  :production110
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ObsoleteActionStmt> ::= ComputedGotoStmt:<ComputedGotoStmt>  :production110
            ASTComputedGotoStmtNode v1 = (ASTComputedGotoStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTObsoleteActionStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ObsoleteActionStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ComputedGotoStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ObsoleteActionStmt> ::= ComputedGotoStmt:<ComputedGotoStmt>  :production110
         */
        protected ASTObsoleteActionStmtNode userAction(ASTComputedGotoStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production110Production PRODUCTION110 = Production110Production.getInstance();

    public static class Production111Production extends Production
    {
        private Production111Production() {;} // Singleton
        private static Production111Production singletonInstance = null;
        public static final Production111Production getInstance() { if (singletonInstance == null) singletonInstance = new Production111Production(); return singletonInstance; }

        public String getDescription() { return "<Name> ::= tident:T_IDENT  :production111"; }

        /**
         * Reduce by <Name> ::= tident:T_IDENT  :production111
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Name> ::= tident:T_IDENT  :production111
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTNameNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.NameNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tident"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Name> ::= tident:T_IDENT  :production111
         */
        protected ASTNameNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production111Production PRODUCTION111 = Production111Production.getInstance();

    public static class Production112Production extends Production
    {
        private Production112Production() {;} // Singleton
        private static Production112Production singletonInstance = null;
        public static final Production112Production getInstance() { if (singletonInstance == null) singletonInstance = new Production112Production(); return singletonInstance; }

        public String getDescription() { return "<Constant> ::= NamedConstantUse:<NamedConstantUse>  :production112"; }

        /**
         * Reduce by <Constant> ::= NamedConstantUse:<NamedConstantUse>  :production112
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Constant> ::= NamedConstantUse:<NamedConstantUse>  :production112
            ASTNamedConstantUseNode v1 = (ASTNamedConstantUseNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTConstantNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ConstantNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("NamedConstantUse"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Constant> ::= NamedConstantUse:<NamedConstantUse>  :production112
         */
        protected ASTConstantNode userAction(ASTNamedConstantUseNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production112Production PRODUCTION112 = Production112Production.getInstance();

    public static class Production113Production extends Production
    {
        private Production113Production() {;} // Singleton
        private static Production113Production singletonInstance = null;
        public static final Production113Production getInstance() { if (singletonInstance == null) singletonInstance = new Production113Production(); return singletonInstance; }

        public String getDescription() { return "<Constant> ::= UnsignedArithmeticConstant:<UnsignedArithmeticConstant>  :production113"; }

        /**
         * Reduce by <Constant> ::= UnsignedArithmeticConstant:<UnsignedArithmeticConstant>  :production113
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Constant> ::= UnsignedArithmeticConstant:<UnsignedArithmeticConstant>  :production113
            ASTUnsignedArithmeticConstantNode v1 = (ASTUnsignedArithmeticConstantNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTConstantNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ConstantNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("UnsignedArithmeticConstant"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Constant> ::= UnsignedArithmeticConstant:<UnsignedArithmeticConstant>  :production113
         */
        protected ASTConstantNode userAction(ASTUnsignedArithmeticConstantNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production113Production PRODUCTION113 = Production113Production.getInstance();

    public static class Production114Production extends Production
    {
        private Production114Production() {;} // Singleton
        private static Production114Production singletonInstance = null;
        public static final Production114Production getInstance() { if (singletonInstance == null) singletonInstance = new Production114Production(); return singletonInstance; }

        public String getDescription() { return "<Constant> ::= tplus:T_PLUS UnsignedArithmeticConstant:<UnsignedArithmeticConstant>  :production114"; }

        /**
         * Reduce by <Constant> ::= tplus:T_PLUS UnsignedArithmeticConstant:<UnsignedArithmeticConstant>  :production114
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Constant> ::= tplus:T_PLUS UnsignedArithmeticConstant:<UnsignedArithmeticConstant>  :production114
            ASTUnsignedArithmeticConstantNode v2 = (ASTUnsignedArithmeticConstantNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTConstantNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.ConstantNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tplus"))
                return 0;
            else
                if (name.equals("UnsignedArithmeticConstant"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Constant> ::= tplus:T_PLUS UnsignedArithmeticConstant:<UnsignedArithmeticConstant>  :production114
         */
        protected ASTConstantNode userAction(Token v1, ASTUnsignedArithmeticConstantNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production114Production PRODUCTION114 = Production114Production.getInstance();

    public static class Production115Production extends Production
    {
        private Production115Production() {;} // Singleton
        private static Production115Production singletonInstance = null;
        public static final Production115Production getInstance() { if (singletonInstance == null) singletonInstance = new Production115Production(); return singletonInstance; }

        public String getDescription() { return "<Constant> ::= tminus:T_MINUS UnsignedArithmeticConstant:<UnsignedArithmeticConstant>  :production115"; }

        /**
         * Reduce by <Constant> ::= tminus:T_MINUS UnsignedArithmeticConstant:<UnsignedArithmeticConstant>  :production115
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Constant> ::= tminus:T_MINUS UnsignedArithmeticConstant:<UnsignedArithmeticConstant>  :production115
            ASTUnsignedArithmeticConstantNode v2 = (ASTUnsignedArithmeticConstantNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTConstantNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.ConstantNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tminus"))
                return 0;
            else
                if (name.equals("UnsignedArithmeticConstant"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Constant> ::= tminus:T_MINUS UnsignedArithmeticConstant:<UnsignedArithmeticConstant>  :production115
         */
        protected ASTConstantNode userAction(Token v1, ASTUnsignedArithmeticConstantNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production115Production PRODUCTION115 = Production115Production.getInstance();

    public static class Production116Production extends Production
    {
        private Production116Production() {;} // Singleton
        private static Production116Production singletonInstance = null;
        public static final Production116Production getInstance() { if (singletonInstance == null) singletonInstance = new Production116Production(); return singletonInstance; }

        public String getDescription() { return "<Constant> ::= tscon:T_SCON  :production116"; }

        /**
         * Reduce by <Constant> ::= tscon:T_SCON  :production116
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Constant> ::= tscon:T_SCON  :production116
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTConstantNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ConstantNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tscon"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Constant> ::= tscon:T_SCON  :production116
         */
        protected ASTConstantNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production116Production PRODUCTION116 = Production116Production.getInstance();

    public static class Production117Production extends Production
    {
        private Production117Production() {;} // Singleton
        private static Production117Production singletonInstance = null;
        public static final Production117Production getInstance() { if (singletonInstance == null) singletonInstance = new Production117Production(); return singletonInstance; }

        public String getDescription() { return "<Constant> ::= ticon:T_ICON tunderscore:T_UNDERSCORE tscon:T_SCON  :production117"; }

        /**
         * Reduce by <Constant> ::= ticon:T_ICON tunderscore:T_UNDERSCORE tscon:T_SCON  :production117
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Constant> ::= ticon:T_ICON tunderscore:T_UNDERSCORE tscon:T_SCON  :production117
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTConstantNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.ConstantNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ticon"))
                return 0;
            else
                if (name.equals("tunderscore"))
                    return 1;
                else
                    if (name.equals("tscon"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Constant> ::= ticon:T_ICON tunderscore:T_UNDERSCORE tscon:T_SCON  :production117
         */
        protected ASTConstantNode userAction(Token v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production117Production PRODUCTION117 = Production117Production.getInstance();

    public static class Production118Production extends Production
    {
        private Production118Production() {;} // Singleton
        private static Production118Production singletonInstance = null;
        public static final Production118Production getInstance() { if (singletonInstance == null) singletonInstance = new Production118Production(); return singletonInstance; }

        public String getDescription() { return "<Constant> ::= NamedConstantUse:<NamedConstantUse> tunderscore:T_UNDERSCORE tscon:T_SCON  :production118"; }

        /**
         * Reduce by <Constant> ::= NamedConstantUse:<NamedConstantUse> tunderscore:T_UNDERSCORE tscon:T_SCON  :production118
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Constant> ::= NamedConstantUse:<NamedConstantUse> tunderscore:T_UNDERSCORE tscon:T_SCON  :production118
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNamedConstantUseNode v1 = (ASTNamedConstantUseNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTConstantNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.ConstantNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("NamedConstantUse"))
                return 0;
            else
                if (name.equals("tunderscore"))
                    return 1;
                else
                    if (name.equals("tscon"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Constant> ::= NamedConstantUse:<NamedConstantUse> tunderscore:T_UNDERSCORE tscon:T_SCON  :production118
         */
        protected ASTConstantNode userAction(ASTNamedConstantUseNode v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production118Production PRODUCTION118 = Production118Production.getInstance();

    public static class Production119Production extends Production
    {
        private Production119Production() {;} // Singleton
        private static Production119Production singletonInstance = null;
        public static final Production119Production getInstance() { if (singletonInstance == null) singletonInstance = new Production119Production(); return singletonInstance; }

        public String getDescription() { return "<Constant> ::= LogicalConstant:<LogicalConstant>  :production119"; }

        /**
         * Reduce by <Constant> ::= LogicalConstant:<LogicalConstant>  :production119
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Constant> ::= LogicalConstant:<LogicalConstant>  :production119
            ASTLogicalConstantNode v1 = (ASTLogicalConstantNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTConstantNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ConstantNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LogicalConstant"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Constant> ::= LogicalConstant:<LogicalConstant>  :production119
         */
        protected ASTConstantNode userAction(ASTLogicalConstantNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production119Production PRODUCTION119 = Production119Production.getInstance();

    public static class Production120Production extends Production
    {
        private Production120Production() {;} // Singleton
        private static Production120Production singletonInstance = null;
        public static final Production120Production getInstance() { if (singletonInstance == null) singletonInstance = new Production120Production(); return singletonInstance; }

        public String getDescription() { return "<Constant> ::= StructureConstructor:<StructureConstructor>  :production120"; }

        /**
         * Reduce by <Constant> ::= StructureConstructor:<StructureConstructor>  :production120
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Constant> ::= StructureConstructor:<StructureConstructor>  :production120
            ASTStructureConstructorNode v1 = (ASTStructureConstructorNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTConstantNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ConstantNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("StructureConstructor"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Constant> ::= StructureConstructor:<StructureConstructor>  :production120
         */
        protected ASTConstantNode userAction(ASTStructureConstructorNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production120Production PRODUCTION120 = Production120Production.getInstance();

    public static class Production121Production extends Production
    {
        private Production121Production() {;} // Singleton
        private static Production121Production singletonInstance = null;
        public static final Production121Production getInstance() { if (singletonInstance == null) singletonInstance = new Production121Production(); return singletonInstance; }

        public String getDescription() { return "<Constant> ::= BozLiteralConstant:<BozLiteralConstant>  :production121"; }

        /**
         * Reduce by <Constant> ::= BozLiteralConstant:<BozLiteralConstant>  :production121
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Constant> ::= BozLiteralConstant:<BozLiteralConstant>  :production121
            ASTBozLiteralConstantNode v1 = (ASTBozLiteralConstantNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTConstantNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ConstantNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("BozLiteralConstant"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Constant> ::= BozLiteralConstant:<BozLiteralConstant>  :production121
         */
        protected ASTConstantNode userAction(ASTBozLiteralConstantNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production121Production PRODUCTION121 = Production121Production.getInstance();

    public static class Production122Production extends Production
    {
        private Production122Production() {;} // Singleton
        private static Production122Production singletonInstance = null;
        public static final Production122Production getInstance() { if (singletonInstance == null) singletonInstance = new Production122Production(); return singletonInstance; }

        public String getDescription() { return "<Constant> ::= thcon:T_HCON  :production122"; }

        /**
         * Reduce by <Constant> ::= thcon:T_HCON  :production122
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Constant> ::= thcon:T_HCON  :production122
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTConstantNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ConstantNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("thcon"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Constant> ::= thcon:T_HCON  :production122
         */
        protected ASTConstantNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production122Production PRODUCTION122 = Production122Production.getInstance();

    public static class Production123Production extends Production
    {
        private Production123Production() {;} // Singleton
        private static Production123Production singletonInstance = null;
        public static final Production123Production getInstance() { if (singletonInstance == null) singletonInstance = new Production123Production(); return singletonInstance; }

        public String getDescription() { return "<NamedConstant> ::= tident:T_IDENT  :production123"; }

        /**
         * Reduce by <NamedConstant> ::= tident:T_IDENT  :production123
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <NamedConstant> ::= tident:T_IDENT  :production123
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTNamedConstantNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.NamedConstantNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tident"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <NamedConstant> ::= tident:T_IDENT  :production123
         */
        protected ASTNamedConstantNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production123Production PRODUCTION123 = Production123Production.getInstance();

    public static class Production124Production extends Production
    {
        private Production124Production() {;} // Singleton
        private static Production124Production singletonInstance = null;
        public static final Production124Production getInstance() { if (singletonInstance == null) singletonInstance = new Production124Production(); return singletonInstance; }

        public String getDescription() { return "<NamedConstantUse> ::= tident:T_IDENT  :production124"; }

        /**
         * Reduce by <NamedConstantUse> ::= tident:T_IDENT  :production124
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <NamedConstantUse> ::= tident:T_IDENT  :production124
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTNamedConstantUseNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.NamedConstantUseNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tident"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <NamedConstantUse> ::= tident:T_IDENT  :production124
         */
        protected ASTNamedConstantUseNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production124Production PRODUCTION124 = Production124Production.getInstance();

    public static class Production125Production extends Production
    {
        private Production125Production() {;} // Singleton
        private static Production125Production singletonInstance = null;
        public static final Production125Production getInstance() { if (singletonInstance == null) singletonInstance = new Production125Production(); return singletonInstance; }

        public String getDescription() { return "<PowerOp> ::= tpow:T_POW  :production125"; }

        /**
         * Reduce by <PowerOp> ::= tpow:T_POW  :production125
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PowerOp> ::= tpow:T_POW  :production125
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPowerOpNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.PowerOpNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tpow"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PowerOp> ::= tpow:T_POW  :production125
         */
        protected ASTPowerOpNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production125Production PRODUCTION125 = Production125Production.getInstance();

    public static class Production126Production extends Production
    {
        private Production126Production() {;} // Singleton
        private static Production126Production singletonInstance = null;
        public static final Production126Production getInstance() { if (singletonInstance == null) singletonInstance = new Production126Production(); return singletonInstance; }

        public String getDescription() { return "<MultOp> ::= tasterisk:T_ASTERISK  :production126"; }

        /**
         * Reduce by <MultOp> ::= tasterisk:T_ASTERISK  :production126
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <MultOp> ::= tasterisk:T_ASTERISK  :production126
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTMultOpNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.MultOpNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tasterisk"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <MultOp> ::= tasterisk:T_ASTERISK  :production126
         */
        protected ASTMultOpNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production126Production PRODUCTION126 = Production126Production.getInstance();

    public static class Production127Production extends Production
    {
        private Production127Production() {;} // Singleton
        private static Production127Production singletonInstance = null;
        public static final Production127Production getInstance() { if (singletonInstance == null) singletonInstance = new Production127Production(); return singletonInstance; }

        public String getDescription() { return "<MultOp> ::= tslash:T_SLASH  :production127"; }

        /**
         * Reduce by <MultOp> ::= tslash:T_SLASH  :production127
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <MultOp> ::= tslash:T_SLASH  :production127
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTMultOpNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.MultOpNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tslash"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <MultOp> ::= tslash:T_SLASH  :production127
         */
        protected ASTMultOpNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production127Production PRODUCTION127 = Production127Production.getInstance();

    public static class Production128Production extends Production
    {
        private Production128Production() {;} // Singleton
        private static Production128Production singletonInstance = null;
        public static final Production128Production getInstance() { if (singletonInstance == null) singletonInstance = new Production128Production(); return singletonInstance; }

        public String getDescription() { return "<AddOp> ::= tplus:T_PLUS  :production128"; }

        /**
         * Reduce by <AddOp> ::= tplus:T_PLUS  :production128
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AddOp> ::= tplus:T_PLUS  :production128
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAddOpNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.AddOpNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tplus"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AddOp> ::= tplus:T_PLUS  :production128
         */
        protected ASTAddOpNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production128Production PRODUCTION128 = Production128Production.getInstance();

    public static class Production129Production extends Production
    {
        private Production129Production() {;} // Singleton
        private static Production129Production singletonInstance = null;
        public static final Production129Production getInstance() { if (singletonInstance == null) singletonInstance = new Production129Production(); return singletonInstance; }

        public String getDescription() { return "<AddOp> ::= tminus:T_MINUS  :production129"; }

        /**
         * Reduce by <AddOp> ::= tminus:T_MINUS  :production129
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AddOp> ::= tminus:T_MINUS  :production129
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAddOpNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.AddOpNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tminus"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AddOp> ::= tminus:T_MINUS  :production129
         */
        protected ASTAddOpNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production129Production PRODUCTION129 = Production129Production.getInstance();

    public static class Production130Production extends Production
    {
        private Production130Production() {;} // Singleton
        private static Production130Production singletonInstance = null;
        public static final Production130Production getInstance() { if (singletonInstance == null) singletonInstance = new Production130Production(); return singletonInstance; }

        public String getDescription() { return "<Sign> ::= tplus:T_PLUS  :production130"; }

        /**
         * Reduce by <Sign> ::= tplus:T_PLUS  :production130
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Sign> ::= tplus:T_PLUS  :production130
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSignNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SignNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tplus"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Sign> ::= tplus:T_PLUS  :production130
         */
        protected ASTSignNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production130Production PRODUCTION130 = Production130Production.getInstance();

    public static class Production131Production extends Production
    {
        private Production131Production() {;} // Singleton
        private static Production131Production singletonInstance = null;
        public static final Production131Production getInstance() { if (singletonInstance == null) singletonInstance = new Production131Production(); return singletonInstance; }

        public String getDescription() { return "<Sign> ::= tminus:T_MINUS  :production131"; }

        /**
         * Reduce by <Sign> ::= tminus:T_MINUS  :production131
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Sign> ::= tminus:T_MINUS  :production131
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSignNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SignNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tminus"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Sign> ::= tminus:T_MINUS  :production131
         */
        protected ASTSignNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production131Production PRODUCTION131 = Production131Production.getInstance();

    public static class Production132Production extends Production
    {
        private Production132Production() {;} // Singleton
        private static Production132Production singletonInstance = null;
        public static final Production132Production getInstance() { if (singletonInstance == null) singletonInstance = new Production132Production(); return singletonInstance; }

        public String getDescription() { return "<ConcatOp> ::= tslashslash:T_SLASHSLASH  :production132"; }

        /**
         * Reduce by <ConcatOp> ::= tslashslash:T_SLASHSLASH  :production132
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ConcatOp> ::= tslashslash:T_SLASHSLASH  :production132
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTConcatOpNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ConcatOpNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tslashslash"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ConcatOp> ::= tslashslash:T_SLASHSLASH  :production132
         */
        protected ASTConcatOpNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production132Production PRODUCTION132 = Production132Production.getInstance();

    public static class Production133Production extends Production
    {
        private Production133Production() {;} // Singleton
        private static Production133Production singletonInstance = null;
        public static final Production133Production getInstance() { if (singletonInstance == null) singletonInstance = new Production133Production(); return singletonInstance; }

        public String getDescription() { return "<RelOp> ::= teq:T_EQ  :production133"; }

        /**
         * Reduce by <RelOp> ::= teq:T_EQ  :production133
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <RelOp> ::= teq:T_EQ  :production133
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTRelOpNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.RelOpNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("teq"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <RelOp> ::= teq:T_EQ  :production133
         */
        protected ASTRelOpNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production133Production PRODUCTION133 = Production133Production.getInstance();

    public static class Production134Production extends Production
    {
        private Production134Production() {;} // Singleton
        private static Production134Production singletonInstance = null;
        public static final Production134Production getInstance() { if (singletonInstance == null) singletonInstance = new Production134Production(); return singletonInstance; }

        public String getDescription() { return "<RelOp> ::= tne:T_NE  :production134"; }

        /**
         * Reduce by <RelOp> ::= tne:T_NE  :production134
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <RelOp> ::= tne:T_NE  :production134
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTRelOpNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.RelOpNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tne"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <RelOp> ::= tne:T_NE  :production134
         */
        protected ASTRelOpNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production134Production PRODUCTION134 = Production134Production.getInstance();

    public static class Production135Production extends Production
    {
        private Production135Production() {;} // Singleton
        private static Production135Production singletonInstance = null;
        public static final Production135Production getInstance() { if (singletonInstance == null) singletonInstance = new Production135Production(); return singletonInstance; }

        public String getDescription() { return "<RelOp> ::= tlt:T_LT  :production135"; }

        /**
         * Reduce by <RelOp> ::= tlt:T_LT  :production135
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <RelOp> ::= tlt:T_LT  :production135
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTRelOpNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.RelOpNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <RelOp> ::= tlt:T_LT  :production135
         */
        protected ASTRelOpNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production135Production PRODUCTION135 = Production135Production.getInstance();

    public static class Production136Production extends Production
    {
        private Production136Production() {;} // Singleton
        private static Production136Production singletonInstance = null;
        public static final Production136Production getInstance() { if (singletonInstance == null) singletonInstance = new Production136Production(); return singletonInstance; }

        public String getDescription() { return "<RelOp> ::= tle:T_LE  :production136"; }

        /**
         * Reduce by <RelOp> ::= tle:T_LE  :production136
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <RelOp> ::= tle:T_LE  :production136
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTRelOpNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.RelOpNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tle"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <RelOp> ::= tle:T_LE  :production136
         */
        protected ASTRelOpNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production136Production PRODUCTION136 = Production136Production.getInstance();

    public static class Production137Production extends Production
    {
        private Production137Production() {;} // Singleton
        private static Production137Production singletonInstance = null;
        public static final Production137Production getInstance() { if (singletonInstance == null) singletonInstance = new Production137Production(); return singletonInstance; }

        public String getDescription() { return "<RelOp> ::= tgt:T_GT  :production137"; }

        /**
         * Reduce by <RelOp> ::= tgt:T_GT  :production137
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <RelOp> ::= tgt:T_GT  :production137
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTRelOpNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.RelOpNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tgt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <RelOp> ::= tgt:T_GT  :production137
         */
        protected ASTRelOpNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production137Production PRODUCTION137 = Production137Production.getInstance();

    public static class Production138Production extends Production
    {
        private Production138Production() {;} // Singleton
        private static Production138Production singletonInstance = null;
        public static final Production138Production getInstance() { if (singletonInstance == null) singletonInstance = new Production138Production(); return singletonInstance; }

        public String getDescription() { return "<RelOp> ::= tge:T_GE  :production138"; }

        /**
         * Reduce by <RelOp> ::= tge:T_GE  :production138
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <RelOp> ::= tge:T_GE  :production138
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTRelOpNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.RelOpNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tge"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <RelOp> ::= tge:T_GE  :production138
         */
        protected ASTRelOpNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production138Production PRODUCTION138 = Production138Production.getInstance();

    public static class Production139Production extends Production
    {
        private Production139Production() {;} // Singleton
        private static Production139Production singletonInstance = null;
        public static final Production139Production getInstance() { if (singletonInstance == null) singletonInstance = new Production139Production(); return singletonInstance; }

        public String getDescription() { return "<RelOp> ::= teqeq:T_EQEQ  :production139"; }

        /**
         * Reduce by <RelOp> ::= teqeq:T_EQEQ  :production139
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <RelOp> ::= teqeq:T_EQEQ  :production139
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTRelOpNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.RelOpNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("teqeq"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <RelOp> ::= teqeq:T_EQEQ  :production139
         */
        protected ASTRelOpNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production139Production PRODUCTION139 = Production139Production.getInstance();

    public static class Production140Production extends Production
    {
        private Production140Production() {;} // Singleton
        private static Production140Production singletonInstance = null;
        public static final Production140Production getInstance() { if (singletonInstance == null) singletonInstance = new Production140Production(); return singletonInstance; }

        public String getDescription() { return "<RelOp> ::= tslasheq:T_SLASHEQ  :production140"; }

        /**
         * Reduce by <RelOp> ::= tslasheq:T_SLASHEQ  :production140
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <RelOp> ::= tslasheq:T_SLASHEQ  :production140
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTRelOpNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.RelOpNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tslasheq"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <RelOp> ::= tslasheq:T_SLASHEQ  :production140
         */
        protected ASTRelOpNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production140Production PRODUCTION140 = Production140Production.getInstance();

    public static class Production141Production extends Production
    {
        private Production141Production() {;} // Singleton
        private static Production141Production singletonInstance = null;
        public static final Production141Production getInstance() { if (singletonInstance == null) singletonInstance = new Production141Production(); return singletonInstance; }

        public String getDescription() { return "<RelOp> ::= tlessthan:T_LESSTHAN  :production141"; }

        /**
         * Reduce by <RelOp> ::= tlessthan:T_LESSTHAN  :production141
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <RelOp> ::= tlessthan:T_LESSTHAN  :production141
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTRelOpNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.RelOpNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlessthan"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <RelOp> ::= tlessthan:T_LESSTHAN  :production141
         */
        protected ASTRelOpNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production141Production PRODUCTION141 = Production141Production.getInstance();

    public static class Production142Production extends Production
    {
        private Production142Production() {;} // Singleton
        private static Production142Production singletonInstance = null;
        public static final Production142Production getInstance() { if (singletonInstance == null) singletonInstance = new Production142Production(); return singletonInstance; }

        public String getDescription() { return "<RelOp> ::= tlessthaneq:T_LESSTHANEQ  :production142"; }

        /**
         * Reduce by <RelOp> ::= tlessthaneq:T_LESSTHANEQ  :production142
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <RelOp> ::= tlessthaneq:T_LESSTHANEQ  :production142
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTRelOpNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.RelOpNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlessthaneq"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <RelOp> ::= tlessthaneq:T_LESSTHANEQ  :production142
         */
        protected ASTRelOpNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production142Production PRODUCTION142 = Production142Production.getInstance();

    public static class Production143Production extends Production
    {
        private Production143Production() {;} // Singleton
        private static Production143Production singletonInstance = null;
        public static final Production143Production getInstance() { if (singletonInstance == null) singletonInstance = new Production143Production(); return singletonInstance; }

        public String getDescription() { return "<RelOp> ::= tgreaterthan:T_GREATERTHAN  :production143"; }

        /**
         * Reduce by <RelOp> ::= tgreaterthan:T_GREATERTHAN  :production143
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <RelOp> ::= tgreaterthan:T_GREATERTHAN  :production143
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTRelOpNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.RelOpNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tgreaterthan"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <RelOp> ::= tgreaterthan:T_GREATERTHAN  :production143
         */
        protected ASTRelOpNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production143Production PRODUCTION143 = Production143Production.getInstance();

    public static class Production144Production extends Production
    {
        private Production144Production() {;} // Singleton
        private static Production144Production singletonInstance = null;
        public static final Production144Production getInstance() { if (singletonInstance == null) singletonInstance = new Production144Production(); return singletonInstance; }

        public String getDescription() { return "<RelOp> ::= tgreaterthaneq:T_GREATERTHANEQ  :production144"; }

        /**
         * Reduce by <RelOp> ::= tgreaterthaneq:T_GREATERTHANEQ  :production144
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <RelOp> ::= tgreaterthaneq:T_GREATERTHANEQ  :production144
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTRelOpNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.RelOpNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tgreaterthaneq"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <RelOp> ::= tgreaterthaneq:T_GREATERTHANEQ  :production144
         */
        protected ASTRelOpNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production144Production PRODUCTION144 = Production144Production.getInstance();

    public static class Production145Production extends Production
    {
        private Production145Production() {;} // Singleton
        private static Production145Production singletonInstance = null;
        public static final Production145Production getInstance() { if (singletonInstance == null) singletonInstance = new Production145Production(); return singletonInstance; }

        public String getDescription() { return "<NotOp> ::= tnot:T_NOT  :production145"; }

        /**
         * Reduce by <NotOp> ::= tnot:T_NOT  :production145
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <NotOp> ::= tnot:T_NOT  :production145
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTNotOpNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.NotOpNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tnot"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <NotOp> ::= tnot:T_NOT  :production145
         */
        protected ASTNotOpNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production145Production PRODUCTION145 = Production145Production.getInstance();

    public static class Production146Production extends Production
    {
        private Production146Production() {;} // Singleton
        private static Production146Production singletonInstance = null;
        public static final Production146Production getInstance() { if (singletonInstance == null) singletonInstance = new Production146Production(); return singletonInstance; }

        public String getDescription() { return "<AndOp> ::= tand:T_AND  :production146"; }

        /**
         * Reduce by <AndOp> ::= tand:T_AND  :production146
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AndOp> ::= tand:T_AND  :production146
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAndOpNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.AndOpNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tand"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AndOp> ::= tand:T_AND  :production146
         */
        protected ASTAndOpNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production146Production PRODUCTION146 = Production146Production.getInstance();

    public static class Production147Production extends Production
    {
        private Production147Production() {;} // Singleton
        private static Production147Production singletonInstance = null;
        public static final Production147Production getInstance() { if (singletonInstance == null) singletonInstance = new Production147Production(); return singletonInstance; }

        public String getDescription() { return "<OrOp> ::= tor:T_OR  :production147"; }

        /**
         * Reduce by <OrOp> ::= tor:T_OR  :production147
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <OrOp> ::= tor:T_OR  :production147
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTOrOpNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.OrOpNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tor"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <OrOp> ::= tor:T_OR  :production147
         */
        protected ASTOrOpNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production147Production PRODUCTION147 = Production147Production.getInstance();

    public static class Production148Production extends Production
    {
        private Production148Production() {;} // Singleton
        private static Production148Production singletonInstance = null;
        public static final Production148Production getInstance() { if (singletonInstance == null) singletonInstance = new Production148Production(); return singletonInstance; }

        public String getDescription() { return "<EquivOp> ::= teqv:T_EQV  :production148"; }

        /**
         * Reduce by <EquivOp> ::= teqv:T_EQV  :production148
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EquivOp> ::= teqv:T_EQV  :production148
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEquivOpNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.EquivOpNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("teqv"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EquivOp> ::= teqv:T_EQV  :production148
         */
        protected ASTEquivOpNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production148Production PRODUCTION148 = Production148Production.getInstance();

    public static class Production149Production extends Production
    {
        private Production149Production() {;} // Singleton
        private static Production149Production singletonInstance = null;
        public static final Production149Production getInstance() { if (singletonInstance == null) singletonInstance = new Production149Production(); return singletonInstance; }

        public String getDescription() { return "<EquivOp> ::= tneqv:T_NEQV  :production149"; }

        /**
         * Reduce by <EquivOp> ::= tneqv:T_NEQV  :production149
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EquivOp> ::= tneqv:T_NEQV  :production149
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEquivOpNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.EquivOpNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tneqv"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EquivOp> ::= tneqv:T_NEQV  :production149
         */
        protected ASTEquivOpNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production149Production PRODUCTION149 = Production149Production.getInstance();

    public static class Production150Production extends Production
    {
        private Production150Production() {;} // Singleton
        private static Production150Production singletonInstance = null;
        public static final Production150Production getInstance() { if (singletonInstance == null) singletonInstance = new Production150Production(); return singletonInstance; }

        public String getDescription() { return "<DefinedOperator> ::= txdop:T_XDOP  :production150"; }

        /**
         * Reduce by <DefinedOperator> ::= txdop:T_XDOP  :production150
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DefinedOperator> ::= txdop:T_XDOP  :production150
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDefinedOperatorNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.DefinedOperatorNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("txdop"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DefinedOperator> ::= txdop:T_XDOP  :production150
         */
        protected ASTDefinedOperatorNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production150Production PRODUCTION150 = Production150Production.getInstance();

    public static class Production151Production extends Production
    {
        private Production151Production() {;} // Singleton
        private static Production151Production singletonInstance = null;
        public static final Production151Production getInstance() { if (singletonInstance == null) singletonInstance = new Production151Production(); return singletonInstance; }

        public String getDescription() { return "<DefinedOperator> ::= ConcatOp:<ConcatOp>  :production151"; }

        /**
         * Reduce by <DefinedOperator> ::= ConcatOp:<ConcatOp>  :production151
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DefinedOperator> ::= ConcatOp:<ConcatOp>  :production151
            ASTConcatOpNode v1 = (ASTConcatOpNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDefinedOperatorNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.DefinedOperatorNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ConcatOp"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DefinedOperator> ::= ConcatOp:<ConcatOp>  :production151
         */
        protected ASTDefinedOperatorNode userAction(ASTConcatOpNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production151Production PRODUCTION151 = Production151Production.getInstance();

    public static class Production152Production extends Production
    {
        private Production152Production() {;} // Singleton
        private static Production152Production singletonInstance = null;
        public static final Production152Production getInstance() { if (singletonInstance == null) singletonInstance = new Production152Production(); return singletonInstance; }

        public String getDescription() { return "<DefinedOperator> ::= PowerOp:<PowerOp>  :production152"; }

        /**
         * Reduce by <DefinedOperator> ::= PowerOp:<PowerOp>  :production152
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DefinedOperator> ::= PowerOp:<PowerOp>  :production152
            ASTPowerOpNode v1 = (ASTPowerOpNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDefinedOperatorNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.DefinedOperatorNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("PowerOp"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DefinedOperator> ::= PowerOp:<PowerOp>  :production152
         */
        protected ASTDefinedOperatorNode userAction(ASTPowerOpNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production152Production PRODUCTION152 = Production152Production.getInstance();

    public static class Production153Production extends Production
    {
        private Production153Production() {;} // Singleton
        private static Production153Production singletonInstance = null;
        public static final Production153Production getInstance() { if (singletonInstance == null) singletonInstance = new Production153Production(); return singletonInstance; }

        public String getDescription() { return "<DefinedOperator> ::= MultOp:<MultOp>  :production153"; }

        /**
         * Reduce by <DefinedOperator> ::= MultOp:<MultOp>  :production153
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DefinedOperator> ::= MultOp:<MultOp>  :production153
            ASTMultOpNode v1 = (ASTMultOpNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDefinedOperatorNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.DefinedOperatorNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("MultOp"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DefinedOperator> ::= MultOp:<MultOp>  :production153
         */
        protected ASTDefinedOperatorNode userAction(ASTMultOpNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production153Production PRODUCTION153 = Production153Production.getInstance();

    public static class Production154Production extends Production
    {
        private Production154Production() {;} // Singleton
        private static Production154Production singletonInstance = null;
        public static final Production154Production getInstance() { if (singletonInstance == null) singletonInstance = new Production154Production(); return singletonInstance; }

        public String getDescription() { return "<DefinedOperator> ::= AddOp:<AddOp>  :production154"; }

        /**
         * Reduce by <DefinedOperator> ::= AddOp:<AddOp>  :production154
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DefinedOperator> ::= AddOp:<AddOp>  :production154
            ASTAddOpNode v1 = (ASTAddOpNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDefinedOperatorNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.DefinedOperatorNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("AddOp"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DefinedOperator> ::= AddOp:<AddOp>  :production154
         */
        protected ASTDefinedOperatorNode userAction(ASTAddOpNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production154Production PRODUCTION154 = Production154Production.getInstance();

    public static class Production155Production extends Production
    {
        private Production155Production() {;} // Singleton
        private static Production155Production singletonInstance = null;
        public static final Production155Production getInstance() { if (singletonInstance == null) singletonInstance = new Production155Production(); return singletonInstance; }

        public String getDescription() { return "<DefinedOperator> ::= RelOp:<RelOp>  :production155"; }

        /**
         * Reduce by <DefinedOperator> ::= RelOp:<RelOp>  :production155
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DefinedOperator> ::= RelOp:<RelOp>  :production155
            ASTRelOpNode v1 = (ASTRelOpNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDefinedOperatorNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.DefinedOperatorNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("RelOp"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DefinedOperator> ::= RelOp:<RelOp>  :production155
         */
        protected ASTDefinedOperatorNode userAction(ASTRelOpNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production155Production PRODUCTION155 = Production155Production.getInstance();

    public static class Production156Production extends Production
    {
        private Production156Production() {;} // Singleton
        private static Production156Production singletonInstance = null;
        public static final Production156Production getInstance() { if (singletonInstance == null) singletonInstance = new Production156Production(); return singletonInstance; }

        public String getDescription() { return "<DefinedOperator> ::= NotOp:<NotOp>  :production156"; }

        /**
         * Reduce by <DefinedOperator> ::= NotOp:<NotOp>  :production156
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DefinedOperator> ::= NotOp:<NotOp>  :production156
            ASTNotOpNode v1 = (ASTNotOpNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDefinedOperatorNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.DefinedOperatorNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("NotOp"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DefinedOperator> ::= NotOp:<NotOp>  :production156
         */
        protected ASTDefinedOperatorNode userAction(ASTNotOpNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production156Production PRODUCTION156 = Production156Production.getInstance();

    public static class Production157Production extends Production
    {
        private Production157Production() {;} // Singleton
        private static Production157Production singletonInstance = null;
        public static final Production157Production getInstance() { if (singletonInstance == null) singletonInstance = new Production157Production(); return singletonInstance; }

        public String getDescription() { return "<DefinedOperator> ::= AndOp:<AndOp>  :production157"; }

        /**
         * Reduce by <DefinedOperator> ::= AndOp:<AndOp>  :production157
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DefinedOperator> ::= AndOp:<AndOp>  :production157
            ASTAndOpNode v1 = (ASTAndOpNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDefinedOperatorNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.DefinedOperatorNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("AndOp"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DefinedOperator> ::= AndOp:<AndOp>  :production157
         */
        protected ASTDefinedOperatorNode userAction(ASTAndOpNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production157Production PRODUCTION157 = Production157Production.getInstance();

    public static class Production158Production extends Production
    {
        private Production158Production() {;} // Singleton
        private static Production158Production singletonInstance = null;
        public static final Production158Production getInstance() { if (singletonInstance == null) singletonInstance = new Production158Production(); return singletonInstance; }

        public String getDescription() { return "<DefinedOperator> ::= OrOp:<OrOp>  :production158"; }

        /**
         * Reduce by <DefinedOperator> ::= OrOp:<OrOp>  :production158
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DefinedOperator> ::= OrOp:<OrOp>  :production158
            ASTOrOpNode v1 = (ASTOrOpNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDefinedOperatorNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.DefinedOperatorNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("OrOp"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DefinedOperator> ::= OrOp:<OrOp>  :production158
         */
        protected ASTDefinedOperatorNode userAction(ASTOrOpNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production158Production PRODUCTION158 = Production158Production.getInstance();

    public static class Production159Production extends Production
    {
        private Production159Production() {;} // Singleton
        private static Production159Production singletonInstance = null;
        public static final Production159Production getInstance() { if (singletonInstance == null) singletonInstance = new Production159Production(); return singletonInstance; }

        public String getDescription() { return "<DefinedOperator> ::= EquivOp:<EquivOp>  :production159"; }

        /**
         * Reduce by <DefinedOperator> ::= EquivOp:<EquivOp>  :production159
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DefinedOperator> ::= EquivOp:<EquivOp>  :production159
            ASTEquivOpNode v1 = (ASTEquivOpNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDefinedOperatorNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.DefinedOperatorNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EquivOp"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DefinedOperator> ::= EquivOp:<EquivOp>  :production159
         */
        protected ASTDefinedOperatorNode userAction(ASTEquivOpNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production159Production PRODUCTION159 = Production159Production.getInstance();

    public static class Production160Production extends Production
    {
        private Production160Production() {;} // Singleton
        private static Production160Production singletonInstance = null;
        public static final Production160Production getInstance() { if (singletonInstance == null) singletonInstance = new Production160Production(); return singletonInstance; }

        public String getDescription() { return "<DefinedUnaryOp> ::= txdop:T_XDOP  :production160"; }

        /**
         * Reduce by <DefinedUnaryOp> ::= txdop:T_XDOP  :production160
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DefinedUnaryOp> ::= txdop:T_XDOP  :production160
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDefinedUnaryOpNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.DefinedUnaryOpNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("txdop"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DefinedUnaryOp> ::= txdop:T_XDOP  :production160
         */
        protected ASTDefinedUnaryOpNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production160Production PRODUCTION160 = Production160Production.getInstance();

    public static class Production161Production extends Production
    {
        private Production161Production() {;} // Singleton
        private static Production161Production singletonInstance = null;
        public static final Production161Production getInstance() { if (singletonInstance == null) singletonInstance = new Production161Production(); return singletonInstance; }

        public String getDescription() { return "<DefinedBinaryOp> ::= txdop:T_XDOP  :production161"; }

        /**
         * Reduce by <DefinedBinaryOp> ::= txdop:T_XDOP  :production161
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DefinedBinaryOp> ::= txdop:T_XDOP  :production161
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDefinedBinaryOpNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.DefinedBinaryOpNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("txdop"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DefinedBinaryOp> ::= txdop:T_XDOP  :production161
         */
        protected ASTDefinedBinaryOpNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production161Production PRODUCTION161 = Production161Production.getInstance();

    public static class Production162Production extends Production
    {
        private Production162Production() {;} // Singleton
        private static Production162Production singletonInstance = null;
        public static final Production162Production getInstance() { if (singletonInstance == null) singletonInstance = new Production162Production(); return singletonInstance; }

        public String getDescription() { return "<Label> ::= ticon:T_ICON  :production162"; }

        /**
         * Reduce by <Label> ::= ticon:T_ICON  :production162
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Label> ::= ticon:T_ICON  :production162
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTLabelNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.LabelNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ticon"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Label> ::= ticon:T_ICON  :production162
         */
        protected ASTLabelNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production162Production PRODUCTION162 = Production162Production.getInstance();

    public static class Production163Production extends Production
    {
        private Production163Production() {;} // Singleton
        private static Production163Production singletonInstance = null;
        public static final Production163Production getInstance() { if (singletonInstance == null) singletonInstance = new Production163Production(); return singletonInstance; }

        public String getDescription() { return "<UnsignedArithmeticConstant> ::= ticon:T_ICON  :production163"; }

        /**
         * Reduce by <UnsignedArithmeticConstant> ::= ticon:T_ICON  :production163
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UnsignedArithmeticConstant> ::= ticon:T_ICON  :production163
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTUnsignedArithmeticConstantNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.UnsignedArithmeticConstantNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ticon"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <UnsignedArithmeticConstant> ::= ticon:T_ICON  :production163
         */
        protected ASTUnsignedArithmeticConstantNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production163Production PRODUCTION163 = Production163Production.getInstance();

    public static class Production164Production extends Production
    {
        private Production164Production() {;} // Singleton
        private static Production164Production singletonInstance = null;
        public static final Production164Production getInstance() { if (singletonInstance == null) singletonInstance = new Production164Production(); return singletonInstance; }

        public String getDescription() { return "<UnsignedArithmeticConstant> ::= trcon:T_RCON  :production164"; }

        /**
         * Reduce by <UnsignedArithmeticConstant> ::= trcon:T_RCON  :production164
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UnsignedArithmeticConstant> ::= trcon:T_RCON  :production164
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTUnsignedArithmeticConstantNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.UnsignedArithmeticConstantNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("trcon"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <UnsignedArithmeticConstant> ::= trcon:T_RCON  :production164
         */
        protected ASTUnsignedArithmeticConstantNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production164Production PRODUCTION164 = Production164Production.getInstance();

    public static class Production165Production extends Production
    {
        private Production165Production() {;} // Singleton
        private static Production165Production singletonInstance = null;
        public static final Production165Production getInstance() { if (singletonInstance == null) singletonInstance = new Production165Production(); return singletonInstance; }

        public String getDescription() { return "<UnsignedArithmeticConstant> ::= tdcon:T_DCON  :production165"; }

        /**
         * Reduce by <UnsignedArithmeticConstant> ::= tdcon:T_DCON  :production165
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UnsignedArithmeticConstant> ::= tdcon:T_DCON  :production165
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTUnsignedArithmeticConstantNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.UnsignedArithmeticConstantNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tdcon"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <UnsignedArithmeticConstant> ::= tdcon:T_DCON  :production165
         */
        protected ASTUnsignedArithmeticConstantNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production165Production PRODUCTION165 = Production165Production.getInstance();

    public static class Production166Production extends Production
    {
        private Production166Production() {;} // Singleton
        private static Production166Production singletonInstance = null;
        public static final Production166Production getInstance() { if (singletonInstance == null) singletonInstance = new Production166Production(); return singletonInstance; }

        public String getDescription() { return "<UnsignedArithmeticConstant> ::= ComplexConst:<ComplexConst>  :production166"; }

        /**
         * Reduce by <UnsignedArithmeticConstant> ::= ComplexConst:<ComplexConst>  :production166
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UnsignedArithmeticConstant> ::= ComplexConst:<ComplexConst>  :production166
            ASTComplexConstNode v1 = (ASTComplexConstNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTUnsignedArithmeticConstantNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.UnsignedArithmeticConstantNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ComplexConst"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <UnsignedArithmeticConstant> ::= ComplexConst:<ComplexConst>  :production166
         */
        protected ASTUnsignedArithmeticConstantNode userAction(ASTComplexConstNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production166Production PRODUCTION166 = Production166Production.getInstance();

    public static class Production167Production extends Production
    {
        private Production167Production() {;} // Singleton
        private static Production167Production singletonInstance = null;
        public static final Production167Production getInstance() { if (singletonInstance == null) singletonInstance = new Production167Production(); return singletonInstance; }

        public String getDescription() { return "<UnsignedArithmeticConstant> ::= ticon:T_ICON tunderscore:T_UNDERSCORE KindParam:<KindParam>  :production167"; }

        /**
         * Reduce by <UnsignedArithmeticConstant> ::= ticon:T_ICON tunderscore:T_UNDERSCORE KindParam:<KindParam>  :production167
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UnsignedArithmeticConstant> ::= ticon:T_ICON tunderscore:T_UNDERSCORE KindParam:<KindParam>  :production167
            ASTKindParamNode v3 = (ASTKindParamNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTUnsignedArithmeticConstantNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.UnsignedArithmeticConstantNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ticon"))
                return 0;
            else
                if (name.equals("tunderscore"))
                    return 1;
                else
                    if (name.equals("KindParam"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <UnsignedArithmeticConstant> ::= ticon:T_ICON tunderscore:T_UNDERSCORE KindParam:<KindParam>  :production167
         */
        protected ASTUnsignedArithmeticConstantNode userAction(Token v1, Token v2, ASTKindParamNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production167Production PRODUCTION167 = Production167Production.getInstance();

    public static class Production168Production extends Production
    {
        private Production168Production() {;} // Singleton
        private static Production168Production singletonInstance = null;
        public static final Production168Production getInstance() { if (singletonInstance == null) singletonInstance = new Production168Production(); return singletonInstance; }

        public String getDescription() { return "<UnsignedArithmeticConstant> ::= trcon:T_RCON tunderscore:T_UNDERSCORE KindParam:<KindParam>  :production168"; }

        /**
         * Reduce by <UnsignedArithmeticConstant> ::= trcon:T_RCON tunderscore:T_UNDERSCORE KindParam:<KindParam>  :production168
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UnsignedArithmeticConstant> ::= trcon:T_RCON tunderscore:T_UNDERSCORE KindParam:<KindParam>  :production168
            ASTKindParamNode v3 = (ASTKindParamNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTUnsignedArithmeticConstantNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.UnsignedArithmeticConstantNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("trcon"))
                return 0;
            else
                if (name.equals("tunderscore"))
                    return 1;
                else
                    if (name.equals("KindParam"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <UnsignedArithmeticConstant> ::= trcon:T_RCON tunderscore:T_UNDERSCORE KindParam:<KindParam>  :production168
         */
        protected ASTUnsignedArithmeticConstantNode userAction(Token v1, Token v2, ASTKindParamNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production168Production PRODUCTION168 = Production168Production.getInstance();

    public static class Production169Production extends Production
    {
        private Production169Production() {;} // Singleton
        private static Production169Production singletonInstance = null;
        public static final Production169Production getInstance() { if (singletonInstance == null) singletonInstance = new Production169Production(); return singletonInstance; }

        public String getDescription() { return "<UnsignedArithmeticConstant> ::= tdcon:T_DCON tunderscore:T_UNDERSCORE KindParam:<KindParam>  :production169"; }

        /**
         * Reduce by <UnsignedArithmeticConstant> ::= tdcon:T_DCON tunderscore:T_UNDERSCORE KindParam:<KindParam>  :production169
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UnsignedArithmeticConstant> ::= tdcon:T_DCON tunderscore:T_UNDERSCORE KindParam:<KindParam>  :production169
            ASTKindParamNode v3 = (ASTKindParamNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTUnsignedArithmeticConstantNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.UnsignedArithmeticConstantNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tdcon"))
                return 0;
            else
                if (name.equals("tunderscore"))
                    return 1;
                else
                    if (name.equals("KindParam"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <UnsignedArithmeticConstant> ::= tdcon:T_DCON tunderscore:T_UNDERSCORE KindParam:<KindParam>  :production169
         */
        protected ASTUnsignedArithmeticConstantNode userAction(Token v1, Token v2, ASTKindParamNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production169Production PRODUCTION169 = Production169Production.getInstance();

    public static class Production170Production extends Production
    {
        private Production170Production() {;} // Singleton
        private static Production170Production singletonInstance = null;
        public static final Production170Production getInstance() { if (singletonInstance == null) singletonInstance = new Production170Production(); return singletonInstance; }

        public String getDescription() { return "<KindParam> ::= ticon:T_ICON  :production170"; }

        /**
         * Reduce by <KindParam> ::= ticon:T_ICON  :production170
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <KindParam> ::= ticon:T_ICON  :production170
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTKindParamNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.KindParamNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ticon"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <KindParam> ::= ticon:T_ICON  :production170
         */
        protected ASTKindParamNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production170Production PRODUCTION170 = Production170Production.getInstance();

    public static class Production171Production extends Production
    {
        private Production171Production() {;} // Singleton
        private static Production171Production singletonInstance = null;
        public static final Production171Production getInstance() { if (singletonInstance == null) singletonInstance = new Production171Production(); return singletonInstance; }

        public String getDescription() { return "<KindParam> ::= NamedConstantUse:<NamedConstantUse>  :production171"; }

        /**
         * Reduce by <KindParam> ::= NamedConstantUse:<NamedConstantUse>  :production171
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <KindParam> ::= NamedConstantUse:<NamedConstantUse>  :production171
            ASTNamedConstantUseNode v1 = (ASTNamedConstantUseNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTKindParamNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.KindParamNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("NamedConstantUse"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <KindParam> ::= NamedConstantUse:<NamedConstantUse>  :production171
         */
        protected ASTKindParamNode userAction(ASTNamedConstantUseNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production171Production PRODUCTION171 = Production171Production.getInstance();

    public static class Production172Production extends Production
    {
        private Production172Production() {;} // Singleton
        private static Production172Production singletonInstance = null;
        public static final Production172Production getInstance() { if (singletonInstance == null) singletonInstance = new Production172Production(); return singletonInstance; }

        public String getDescription() { return "<BozLiteralConstant> ::= tbcon:T_BCON  :production172"; }

        /**
         * Reduce by <BozLiteralConstant> ::= tbcon:T_BCON  :production172
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <BozLiteralConstant> ::= tbcon:T_BCON  :production172
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTBozLiteralConstantNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.BozLiteralConstantNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tbcon"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <BozLiteralConstant> ::= tbcon:T_BCON  :production172
         */
        protected ASTBozLiteralConstantNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production172Production PRODUCTION172 = Production172Production.getInstance();

    public static class Production173Production extends Production
    {
        private Production173Production() {;} // Singleton
        private static Production173Production singletonInstance = null;
        public static final Production173Production getInstance() { if (singletonInstance == null) singletonInstance = new Production173Production(); return singletonInstance; }

        public String getDescription() { return "<BozLiteralConstant> ::= tocon:T_OCON  :production173"; }

        /**
         * Reduce by <BozLiteralConstant> ::= tocon:T_OCON  :production173
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <BozLiteralConstant> ::= tocon:T_OCON  :production173
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTBozLiteralConstantNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.BozLiteralConstantNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tocon"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <BozLiteralConstant> ::= tocon:T_OCON  :production173
         */
        protected ASTBozLiteralConstantNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production173Production PRODUCTION173 = Production173Production.getInstance();

    public static class Production174Production extends Production
    {
        private Production174Production() {;} // Singleton
        private static Production174Production singletonInstance = null;
        public static final Production174Production getInstance() { if (singletonInstance == null) singletonInstance = new Production174Production(); return singletonInstance; }

        public String getDescription() { return "<BozLiteralConstant> ::= tzcon:T_ZCON  :production174"; }

        /**
         * Reduce by <BozLiteralConstant> ::= tzcon:T_ZCON  :production174
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <BozLiteralConstant> ::= tzcon:T_ZCON  :production174
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTBozLiteralConstantNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.BozLiteralConstantNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tzcon"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <BozLiteralConstant> ::= tzcon:T_ZCON  :production174
         */
        protected ASTBozLiteralConstantNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production174Production PRODUCTION174 = Production174Production.getInstance();

    public static class Production175Production extends Production
    {
        private Production175Production() {;} // Singleton
        private static Production175Production singletonInstance = null;
        public static final Production175Production getInstance() { if (singletonInstance == null) singletonInstance = new Production175Production(); return singletonInstance; }

        public String getDescription() { return "<ComplexConst> ::= tlparen:T_LPAREN Expr:<Expr> tcomma:T_COMMA Expr2:<Expr> trparen:T_RPAREN  :production175"; }

        /**
         * Reduce by <ComplexConst> ::= tlparen:T_LPAREN Expr:<Expr> tcomma:T_COMMA Expr2:<Expr> trparen:T_RPAREN  :production175
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ComplexConst> ::= tlparen:T_LPAREN Expr:<Expr> tcomma:T_COMMA Expr2:<Expr> trparen:T_RPAREN  :production175
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v4 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v2 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTComplexConstNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.ComplexConstNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("Expr"))
                    return 1;
                else
                    if (name.equals("tcomma"))
                        return 2;
                    else
                        if (name.equals("Expr2"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ComplexConst> ::= tlparen:T_LPAREN Expr:<Expr> tcomma:T_COMMA Expr2:<Expr> trparen:T_RPAREN  :production175
         */
        protected ASTComplexConstNode userAction(Token v1, ASTExprNode v2, Token v3, ASTExprNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production175Production PRODUCTION175 = Production175Production.getInstance();

    public static class Production176Production extends Production
    {
        private Production176Production() {;} // Singleton
        private static Production176Production singletonInstance = null;
        public static final Production176Production getInstance() { if (singletonInstance == null) singletonInstance = new Production176Production(); return singletonInstance; }

        public String getDescription() { return "<LogicalConstant> ::= ttrue:T_TRUE  :production176"; }

        /**
         * Reduce by <LogicalConstant> ::= ttrue:T_TRUE  :production176
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <LogicalConstant> ::= ttrue:T_TRUE  :production176
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTLogicalConstantNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.LogicalConstantNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ttrue"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <LogicalConstant> ::= ttrue:T_TRUE  :production176
         */
        protected ASTLogicalConstantNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production176Production PRODUCTION176 = Production176Production.getInstance();

    public static class Production177Production extends Production
    {
        private Production177Production() {;} // Singleton
        private static Production177Production singletonInstance = null;
        public static final Production177Production getInstance() { if (singletonInstance == null) singletonInstance = new Production177Production(); return singletonInstance; }

        public String getDescription() { return "<LogicalConstant> ::= tfalse:T_FALSE  :production177"; }

        /**
         * Reduce by <LogicalConstant> ::= tfalse:T_FALSE  :production177
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <LogicalConstant> ::= tfalse:T_FALSE  :production177
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTLogicalConstantNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.LogicalConstantNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tfalse"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <LogicalConstant> ::= tfalse:T_FALSE  :production177
         */
        protected ASTLogicalConstantNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production177Production PRODUCTION177 = Production177Production.getInstance();

    public static class Production178Production extends Production
    {
        private Production178Production() {;} // Singleton
        private static Production178Production singletonInstance = null;
        public static final Production178Production getInstance() { if (singletonInstance == null) singletonInstance = new Production178Production(); return singletonInstance; }

        public String getDescription() { return "<LogicalConstant> ::= ttrue:T_TRUE tunderscore:T_UNDERSCORE KindParam:<KindParam>  :production178"; }

        /**
         * Reduce by <LogicalConstant> ::= ttrue:T_TRUE tunderscore:T_UNDERSCORE KindParam:<KindParam>  :production178
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <LogicalConstant> ::= ttrue:T_TRUE tunderscore:T_UNDERSCORE KindParam:<KindParam>  :production178
            ASTKindParamNode v3 = (ASTKindParamNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTLogicalConstantNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.LogicalConstantNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ttrue"))
                return 0;
            else
                if (name.equals("tunderscore"))
                    return 1;
                else
                    if (name.equals("KindParam"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <LogicalConstant> ::= ttrue:T_TRUE tunderscore:T_UNDERSCORE KindParam:<KindParam>  :production178
         */
        protected ASTLogicalConstantNode userAction(Token v1, Token v2, ASTKindParamNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production178Production PRODUCTION178 = Production178Production.getInstance();

    public static class Production179Production extends Production
    {
        private Production179Production() {;} // Singleton
        private static Production179Production singletonInstance = null;
        public static final Production179Production getInstance() { if (singletonInstance == null) singletonInstance = new Production179Production(); return singletonInstance; }

        public String getDescription() { return "<LogicalConstant> ::= tfalse:T_FALSE tunderscore:T_UNDERSCORE KindParam:<KindParam>  :production179"; }

        /**
         * Reduce by <LogicalConstant> ::= tfalse:T_FALSE tunderscore:T_UNDERSCORE KindParam:<KindParam>  :production179
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <LogicalConstant> ::= tfalse:T_FALSE tunderscore:T_UNDERSCORE KindParam:<KindParam>  :production179
            ASTKindParamNode v3 = (ASTKindParamNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTLogicalConstantNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.LogicalConstantNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tfalse"))
                return 0;
            else
                if (name.equals("tunderscore"))
                    return 1;
                else
                    if (name.equals("KindParam"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <LogicalConstant> ::= tfalse:T_FALSE tunderscore:T_UNDERSCORE KindParam:<KindParam>  :production179
         */
        protected ASTLogicalConstantNode userAction(Token v1, Token v2, ASTKindParamNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production179Production PRODUCTION179 = Production179Production.getInstance();

    public static class Production180Production extends Production
    {
        private Production180Production() {;} // Singleton
        private static Production180Production singletonInstance = null;
        public static final Production180Production getInstance() { if (singletonInstance == null) singletonInstance = new Production180Production(); return singletonInstance; }

        public String getDescription() { return "<DerivedTypeDef> ::= DerivedTypeStmt:<DerivedTypeStmt> DerivedTypeBody:<DerivedTypeBody> EndTypeStmt:<EndTypeStmt>  :production180"; }

        /**
         * Reduce by <DerivedTypeDef> ::= DerivedTypeStmt:<DerivedTypeStmt> DerivedTypeBody:<DerivedTypeBody> EndTypeStmt:<EndTypeStmt>  :production180
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DerivedTypeDef> ::= DerivedTypeStmt:<DerivedTypeStmt> DerivedTypeBody:<DerivedTypeBody> EndTypeStmt:<EndTypeStmt>  :production180
            ASTEndTypeStmtNode v3 = (ASTEndTypeStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDerivedTypeBodyNode v2 = (ASTDerivedTypeBodyNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDerivedTypeStmtNode v1 = (ASTDerivedTypeStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDerivedTypeDefNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.DerivedTypeDefNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("DerivedTypeStmt"))
                return 0;
            else
                if (name.equals("DerivedTypeBody"))
                    return 1;
                else
                    if (name.equals("EndTypeStmt"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DerivedTypeDef> ::= DerivedTypeStmt:<DerivedTypeStmt> DerivedTypeBody:<DerivedTypeBody> EndTypeStmt:<EndTypeStmt>  :production180
         */
        protected ASTDerivedTypeDefNode userAction(ASTDerivedTypeStmtNode v1, ASTDerivedTypeBodyNode v2, ASTEndTypeStmtNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production180Production PRODUCTION180 = Production180Production.getInstance();

    public static class Production181Production extends Production
    {
        private Production181Production() {;} // Singleton
        private static Production181Production singletonInstance = null;
        public static final Production181Production getInstance() { if (singletonInstance == null) singletonInstance = new Production181Production(); return singletonInstance; }

        public String getDescription() { return "<DerivedTypeBody> ::= DerivedTypeBodyConstruct:<DerivedTypeBodyConstruct>  :production181"; }

        /**
         * Reduce by <DerivedTypeBody> ::= DerivedTypeBodyConstruct:<DerivedTypeBodyConstruct>  :production181
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DerivedTypeBody> ::= DerivedTypeBodyConstruct:<DerivedTypeBodyConstruct>  :production181
            ASTDerivedTypeBodyConstructNode v1 = (ASTDerivedTypeBodyConstructNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDerivedTypeBodyNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.DerivedTypeBodyNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("DerivedTypeBodyConstruct"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DerivedTypeBody> ::= DerivedTypeBodyConstruct:<DerivedTypeBodyConstruct>  :production181
         */
        protected ASTDerivedTypeBodyNode userAction(ASTDerivedTypeBodyConstructNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production181Production PRODUCTION181 = Production181Production.getInstance();

    public static class Production182Production extends Production
    {
        private Production182Production() {;} // Singleton
        private static Production182Production singletonInstance = null;
        public static final Production182Production getInstance() { if (singletonInstance == null) singletonInstance = new Production182Production(); return singletonInstance; }

        public String getDescription() { return "<DerivedTypeBody> ::= @:<DerivedTypeBody> DerivedTypeBodyConstruct:<DerivedTypeBodyConstruct>  :production182"; }

        /**
         * Reduce by <DerivedTypeBody> ::= @:<DerivedTypeBody> DerivedTypeBodyConstruct:<DerivedTypeBodyConstruct>  :production182
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DerivedTypeBody> ::= @:<DerivedTypeBody> DerivedTypeBodyConstruct:<DerivedTypeBodyConstruct>  :production182
            ASTDerivedTypeBodyConstructNode v2 = (ASTDerivedTypeBodyConstructNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDerivedTypeBodyNode v1 = (ASTDerivedTypeBodyNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDerivedTypeBodyNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.DerivedTypeBodyNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("DerivedTypeBodyConstruct"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DerivedTypeBody> ::= @:<DerivedTypeBody> DerivedTypeBodyConstruct:<DerivedTypeBodyConstruct>  :production182
         */
        protected ASTDerivedTypeBodyNode userAction(ASTDerivedTypeBodyNode v1, ASTDerivedTypeBodyConstructNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production182Production PRODUCTION182 = Production182Production.getInstance();

    public static class Production183Production extends Production
    {
        private Production183Production() {;} // Singleton
        private static Production183Production singletonInstance = null;
        public static final Production183Production getInstance() { if (singletonInstance == null) singletonInstance = new Production183Production(); return singletonInstance; }

        public String getDescription() { return "<DerivedTypeBodyConstruct> ::= PrivateSequenceStmt:<PrivateSequenceStmt>  :production183"; }

        /**
         * Reduce by <DerivedTypeBodyConstruct> ::= PrivateSequenceStmt:<PrivateSequenceStmt>  :production183
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DerivedTypeBodyConstruct> ::= PrivateSequenceStmt:<PrivateSequenceStmt>  :production183
            ASTPrivateSequenceStmtNode v1 = (ASTPrivateSequenceStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDerivedTypeBodyConstructNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.DerivedTypeBodyConstructNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("PrivateSequenceStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DerivedTypeBodyConstruct> ::= PrivateSequenceStmt:<PrivateSequenceStmt>  :production183
         */
        protected ASTDerivedTypeBodyConstructNode userAction(ASTPrivateSequenceStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production183Production PRODUCTION183 = Production183Production.getInstance();

    public static class Production184Production extends Production
    {
        private Production184Production() {;} // Singleton
        private static Production184Production singletonInstance = null;
        public static final Production184Production getInstance() { if (singletonInstance == null) singletonInstance = new Production184Production(); return singletonInstance; }

        public String getDescription() { return "<DerivedTypeBodyConstruct> ::= ComponentDefStmt:<ComponentDefStmt>  :production184"; }

        /**
         * Reduce by <DerivedTypeBodyConstruct> ::= ComponentDefStmt:<ComponentDefStmt>  :production184
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DerivedTypeBodyConstruct> ::= ComponentDefStmt:<ComponentDefStmt>  :production184
            ASTComponentDefStmtNode v1 = (ASTComponentDefStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDerivedTypeBodyConstructNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.DerivedTypeBodyConstructNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ComponentDefStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DerivedTypeBodyConstruct> ::= ComponentDefStmt:<ComponentDefStmt>  :production184
         */
        protected ASTDerivedTypeBodyConstructNode userAction(ASTComponentDefStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production184Production PRODUCTION184 = Production184Production.getInstance();

    public static class Production185Production extends Production
    {
        private Production185Production() {;} // Singleton
        private static Production185Production singletonInstance = null;
        public static final Production185Production getInstance() { if (singletonInstance == null) singletonInstance = new Production185Production(); return singletonInstance; }

        public String getDescription() { return "<DerivedTypeStmt> ::= ttype:T_TYPE TypeName:<TypeName> teos:T_EOS  :production185"; }

        /**
         * Reduce by <DerivedTypeStmt> ::= ttype:T_TYPE TypeName:<TypeName> teos:T_EOS  :production185
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DerivedTypeStmt> ::= ttype:T_TYPE TypeName:<TypeName> teos:T_EOS  :production185
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTTypeNameNode v2 = (ASTTypeNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDerivedTypeStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.DerivedTypeStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ttype"))
                return 0;
            else
                if (name.equals("TypeName"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DerivedTypeStmt> ::= ttype:T_TYPE TypeName:<TypeName> teos:T_EOS  :production185
         */
        protected ASTDerivedTypeStmtNode userAction(Token v1, ASTTypeNameNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production185Production PRODUCTION185 = Production185Production.getInstance();

    public static class Production186Production extends Production
    {
        private Production186Production() {;} // Singleton
        private static Production186Production singletonInstance = null;
        public static final Production186Production getInstance() { if (singletonInstance == null) singletonInstance = new Production186Production(); return singletonInstance; }

        public String getDescription() { return "<DerivedTypeStmt> ::= LblDef:<LblDef> ttype:T_TYPE TypeName:<TypeName> teos:T_EOS  :production186"; }

        /**
         * Reduce by <DerivedTypeStmt> ::= LblDef:<LblDef> ttype:T_TYPE TypeName:<TypeName> teos:T_EOS  :production186
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DerivedTypeStmt> ::= LblDef:<LblDef> ttype:T_TYPE TypeName:<TypeName> teos:T_EOS  :production186
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTTypeNameNode v3 = (ASTTypeNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDerivedTypeStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.DerivedTypeStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("ttype"))
                    return 1;
                else
                    if (name.equals("TypeName"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DerivedTypeStmt> ::= LblDef:<LblDef> ttype:T_TYPE TypeName:<TypeName> teos:T_EOS  :production186
         */
        protected ASTDerivedTypeStmtNode userAction(ASTLblDefNode v1, Token v2, ASTTypeNameNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production186Production PRODUCTION186 = Production186Production.getInstance();

    public static class Production187Production extends Production
    {
        private Production187Production() {;} // Singleton
        private static Production187Production singletonInstance = null;
        public static final Production187Production getInstance() { if (singletonInstance == null) singletonInstance = new Production187Production(); return singletonInstance; }

        public String getDescription() { return "<DerivedTypeStmt> ::= ttype:T_TYPE tcolon:T_COLON tcolon2:T_COLON TypeName:<TypeName> teos:T_EOS  :production187"; }

        /**
         * Reduce by <DerivedTypeStmt> ::= ttype:T_TYPE tcolon:T_COLON tcolon2:T_COLON TypeName:<TypeName> teos:T_EOS  :production187
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DerivedTypeStmt> ::= ttype:T_TYPE tcolon:T_COLON tcolon2:T_COLON TypeName:<TypeName> teos:T_EOS  :production187
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTTypeNameNode v4 = (ASTTypeNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDerivedTypeStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.DerivedTypeStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ttype"))
                return 0;
            else
                if (name.equals("tcolon"))
                    return 1;
                else
                    if (name.equals("tcolon2"))
                        return 2;
                    else
                        if (name.equals("TypeName"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DerivedTypeStmt> ::= ttype:T_TYPE tcolon:T_COLON tcolon2:T_COLON TypeName:<TypeName> teos:T_EOS  :production187
         */
        protected ASTDerivedTypeStmtNode userAction(Token v1, Token v2, Token v3, ASTTypeNameNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production187Production PRODUCTION187 = Production187Production.getInstance();

    public static class Production188Production extends Production
    {
        private Production188Production() {;} // Singleton
        private static Production188Production singletonInstance = null;
        public static final Production188Production getInstance() { if (singletonInstance == null) singletonInstance = new Production188Production(); return singletonInstance; }

        public String getDescription() { return "<DerivedTypeStmt> ::= LblDef:<LblDef> ttype:T_TYPE tcolon:T_COLON tcolon2:T_COLON TypeName:<TypeName> teos:T_EOS  :production188"; }

        /**
         * Reduce by <DerivedTypeStmt> ::= LblDef:<LblDef> ttype:T_TYPE tcolon:T_COLON tcolon2:T_COLON TypeName:<TypeName> teos:T_EOS  :production188
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DerivedTypeStmt> ::= LblDef:<LblDef> ttype:T_TYPE tcolon:T_COLON tcolon2:T_COLON TypeName:<TypeName> teos:T_EOS  :production188
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTTypeNameNode v5 = (ASTTypeNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDerivedTypeStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.DerivedTypeStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("ttype"))
                    return 1;
                else
                    if (name.equals("tcolon"))
                        return 2;
                    else
                        if (name.equals("tcolon2"))
                            return 3;
                        else
                            if (name.equals("TypeName"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DerivedTypeStmt> ::= LblDef:<LblDef> ttype:T_TYPE tcolon:T_COLON tcolon2:T_COLON TypeName:<TypeName> teos:T_EOS  :production188
         */
        protected ASTDerivedTypeStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, Token v4, ASTTypeNameNode v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production188Production PRODUCTION188 = Production188Production.getInstance();

    public static class Production189Production extends Production
    {
        private Production189Production() {;} // Singleton
        private static Production189Production singletonInstance = null;
        public static final Production189Production getInstance() { if (singletonInstance == null) singletonInstance = new Production189Production(); return singletonInstance; }

        public String getDescription() { return "<DerivedTypeStmt> ::= ttype:T_TYPE tcomma:T_COMMA AccessSpec:<AccessSpec> tcolon:T_COLON tcolon2:T_COLON TypeName:<TypeName> teos:T_EOS  :production189"; }

        /**
         * Reduce by <DerivedTypeStmt> ::= ttype:T_TYPE tcomma:T_COMMA AccessSpec:<AccessSpec> tcolon:T_COLON tcolon2:T_COLON TypeName:<TypeName> teos:T_EOS  :production189
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DerivedTypeStmt> ::= ttype:T_TYPE tcomma:T_COMMA AccessSpec:<AccessSpec> tcolon:T_COLON tcolon2:T_COLON TypeName:<TypeName> teos:T_EOS  :production189
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTTypeNameNode v6 = (ASTTypeNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTAccessSpecNode v3 = (ASTAccessSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDerivedTypeStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7);

            // The production has 7 symbols on its RHS
            parser.reduce(Nonterminal.DerivedTypeStmtNonterminal.getInstance(), 7, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ttype"))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("AccessSpec"))
                        return 2;
                    else
                        if (name.equals("tcolon"))
                            return 3;
                        else
                            if (name.equals("tcolon2"))
                                return 4;
                            else
                                if (name.equals("TypeName"))
                                    return 5;
                                else
                                    if (name.equals("teos"))
                                        return 6;
                                    else
                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DerivedTypeStmt> ::= ttype:T_TYPE tcomma:T_COMMA AccessSpec:<AccessSpec> tcolon:T_COLON tcolon2:T_COLON TypeName:<TypeName> teos:T_EOS  :production189
         */
        protected ASTDerivedTypeStmtNode userAction(Token v1, Token v2, ASTAccessSpecNode v3, Token v4, Token v5, ASTTypeNameNode v6, Token v7)
        {
            return null;
        }
    }
    public static final Productions.Production189Production PRODUCTION189 = Production189Production.getInstance();

    public static class Production190Production extends Production
    {
        private Production190Production() {;} // Singleton
        private static Production190Production singletonInstance = null;
        public static final Production190Production getInstance() { if (singletonInstance == null) singletonInstance = new Production190Production(); return singletonInstance; }

        public String getDescription() { return "<DerivedTypeStmt> ::= LblDef:<LblDef> ttype:T_TYPE tcomma:T_COMMA AccessSpec:<AccessSpec> tcolon:T_COLON tcolon2:T_COLON TypeName:<TypeName> teos:T_EOS  :production190"; }

        /**
         * Reduce by <DerivedTypeStmt> ::= LblDef:<LblDef> ttype:T_TYPE tcomma:T_COMMA AccessSpec:<AccessSpec> tcolon:T_COLON tcolon2:T_COLON TypeName:<TypeName> teos:T_EOS  :production190
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DerivedTypeStmt> ::= LblDef:<LblDef> ttype:T_TYPE tcomma:T_COMMA AccessSpec:<AccessSpec> tcolon:T_COLON tcolon2:T_COLON TypeName:<TypeName> teos:T_EOS  :production190
            Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTTypeNameNode v7 = (ASTTypeNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTAccessSpecNode v4 = (ASTAccessSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDerivedTypeStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8);

            // The production has 8 symbols on its RHS
            parser.reduce(Nonterminal.DerivedTypeStmtNonterminal.getInstance(), 8, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("ttype"))
                    return 1;
                else
                    if (name.equals("tcomma"))
                        return 2;
                    else
                        if (name.equals("AccessSpec"))
                            return 3;
                        else
                            if (name.equals("tcolon"))
                                return 4;
                            else
                                if (name.equals("tcolon2"))
                                    return 5;
                                else
                                    if (name.equals("TypeName"))
                                        return 6;
                                    else
                                        if (name.equals("teos"))
                                            return 7;
                                        else
                                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DerivedTypeStmt> ::= LblDef:<LblDef> ttype:T_TYPE tcomma:T_COMMA AccessSpec:<AccessSpec> tcolon:T_COLON tcolon2:T_COLON TypeName:<TypeName> teos:T_EOS  :production190
         */
        protected ASTDerivedTypeStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, ASTAccessSpecNode v4, Token v5, Token v6, ASTTypeNameNode v7, Token v8)
        {
            return null;
        }
    }
    public static final Productions.Production190Production PRODUCTION190 = Production190Production.getInstance();

    public static class Production191Production extends Production
    {
        private Production191Production() {;} // Singleton
        private static Production191Production singletonInstance = null;
        public static final Production191Production getInstance() { if (singletonInstance == null) singletonInstance = new Production191Production(); return singletonInstance; }

        public String getDescription() { return "<PrivateSequenceStmt> ::= tprivate:T_PRIVATE teos:T_EOS  :production191"; }

        /**
         * Reduce by <PrivateSequenceStmt> ::= tprivate:T_PRIVATE teos:T_EOS  :production191
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PrivateSequenceStmt> ::= tprivate:T_PRIVATE teos:T_EOS  :production191
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPrivateSequenceStmtNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.PrivateSequenceStmtNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tprivate"))
                return 0;
            else
                if (name.equals("teos"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PrivateSequenceStmt> ::= tprivate:T_PRIVATE teos:T_EOS  :production191
         */
        protected ASTPrivateSequenceStmtNode userAction(Token v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production191Production PRODUCTION191 = Production191Production.getInstance();

    public static class Production192Production extends Production
    {
        private Production192Production() {;} // Singleton
        private static Production192Production singletonInstance = null;
        public static final Production192Production getInstance() { if (singletonInstance == null) singletonInstance = new Production192Production(); return singletonInstance; }

        public String getDescription() { return "<PrivateSequenceStmt> ::= LblDef:<LblDef> tprivate:T_PRIVATE teos:T_EOS  :production192"; }

        /**
         * Reduce by <PrivateSequenceStmt> ::= LblDef:<LblDef> tprivate:T_PRIVATE teos:T_EOS  :production192
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PrivateSequenceStmt> ::= LblDef:<LblDef> tprivate:T_PRIVATE teos:T_EOS  :production192
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPrivateSequenceStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.PrivateSequenceStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tprivate"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PrivateSequenceStmt> ::= LblDef:<LblDef> tprivate:T_PRIVATE teos:T_EOS  :production192
         */
        protected ASTPrivateSequenceStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production192Production PRODUCTION192 = Production192Production.getInstance();

    public static class Production193Production extends Production
    {
        private Production193Production() {;} // Singleton
        private static Production193Production singletonInstance = null;
        public static final Production193Production getInstance() { if (singletonInstance == null) singletonInstance = new Production193Production(); return singletonInstance; }

        public String getDescription() { return "<PrivateSequenceStmt> ::= tsequence:T_SEQUENCE teos:T_EOS  :production193"; }

        /**
         * Reduce by <PrivateSequenceStmt> ::= tsequence:T_SEQUENCE teos:T_EOS  :production193
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PrivateSequenceStmt> ::= tsequence:T_SEQUENCE teos:T_EOS  :production193
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPrivateSequenceStmtNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.PrivateSequenceStmtNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tsequence"))
                return 0;
            else
                if (name.equals("teos"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PrivateSequenceStmt> ::= tsequence:T_SEQUENCE teos:T_EOS  :production193
         */
        protected ASTPrivateSequenceStmtNode userAction(Token v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production193Production PRODUCTION193 = Production193Production.getInstance();

    public static class Production194Production extends Production
    {
        private Production194Production() {;} // Singleton
        private static Production194Production singletonInstance = null;
        public static final Production194Production getInstance() { if (singletonInstance == null) singletonInstance = new Production194Production(); return singletonInstance; }

        public String getDescription() { return "<PrivateSequenceStmt> ::= LblDef:<LblDef> tsequence:T_SEQUENCE teos:T_EOS  :production194"; }

        /**
         * Reduce by <PrivateSequenceStmt> ::= LblDef:<LblDef> tsequence:T_SEQUENCE teos:T_EOS  :production194
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PrivateSequenceStmt> ::= LblDef:<LblDef> tsequence:T_SEQUENCE teos:T_EOS  :production194
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPrivateSequenceStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.PrivateSequenceStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tsequence"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PrivateSequenceStmt> ::= LblDef:<LblDef> tsequence:T_SEQUENCE teos:T_EOS  :production194
         */
        protected ASTPrivateSequenceStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production194Production PRODUCTION194 = Production194Production.getInstance();

    public static class Production195Production extends Production
    {
        private Production195Production() {;} // Singleton
        private static Production195Production singletonInstance = null;
        public static final Production195Production getInstance() { if (singletonInstance == null) singletonInstance = new Production195Production(); return singletonInstance; }

        public String getDescription() { return "<ComponentDefStmt> ::= TypeSpec:<TypeSpec> tcomma:T_COMMA ComponentAttrSpecList:<ComponentAttrSpecList> tcolon:T_COLON tcolon2:T_COLON ComponentDeclList:<ComponentDeclList> teos:T_EOS  :production195"; }

        /**
         * Reduce by <ComponentDefStmt> ::= TypeSpec:<TypeSpec> tcomma:T_COMMA ComponentAttrSpecList:<ComponentAttrSpecList> tcolon:T_COLON tcolon2:T_COLON ComponentDeclList:<ComponentDeclList> teos:T_EOS  :production195
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ComponentDefStmt> ::= TypeSpec:<TypeSpec> tcomma:T_COMMA ComponentAttrSpecList:<ComponentAttrSpecList> tcolon:T_COLON tcolon2:T_COLON ComponentDeclList:<ComponentDeclList> teos:T_EOS  :production195
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTComponentDeclListNode v6 = (ASTComponentDeclListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTComponentAttrSpecListNode v3 = (ASTComponentAttrSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTTypeSpecNode v1 = (ASTTypeSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTComponentDefStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7);

            // The production has 7 symbols on its RHS
            parser.reduce(Nonterminal.ComponentDefStmtNonterminal.getInstance(), 7, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("TypeSpec"))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("ComponentAttrSpecList"))
                        return 2;
                    else
                        if (name.equals("tcolon"))
                            return 3;
                        else
                            if (name.equals("tcolon2"))
                                return 4;
                            else
                                if (name.equals("ComponentDeclList"))
                                    return 5;
                                else
                                    if (name.equals("teos"))
                                        return 6;
                                    else
                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ComponentDefStmt> ::= TypeSpec:<TypeSpec> tcomma:T_COMMA ComponentAttrSpecList:<ComponentAttrSpecList> tcolon:T_COLON tcolon2:T_COLON ComponentDeclList:<ComponentDeclList> teos:T_EOS  :production195
         */
        protected ASTComponentDefStmtNode userAction(ASTTypeSpecNode v1, Token v2, ASTComponentAttrSpecListNode v3, Token v4, Token v5, ASTComponentDeclListNode v6, Token v7)
        {
            return null;
        }
    }
    public static final Productions.Production195Production PRODUCTION195 = Production195Production.getInstance();

    public static class Production196Production extends Production
    {
        private Production196Production() {;} // Singleton
        private static Production196Production singletonInstance = null;
        public static final Production196Production getInstance() { if (singletonInstance == null) singletonInstance = new Production196Production(); return singletonInstance; }

        public String getDescription() { return "<ComponentDefStmt> ::= LblDef:<LblDef> TypeSpec:<TypeSpec> tcomma:T_COMMA ComponentAttrSpecList:<ComponentAttrSpecList> tcolon:T_COLON tcolon2:T_COLON ComponentDeclList:<ComponentDeclList> teos:T_EOS  :production196"; }

        /**
         * Reduce by <ComponentDefStmt> ::= LblDef:<LblDef> TypeSpec:<TypeSpec> tcomma:T_COMMA ComponentAttrSpecList:<ComponentAttrSpecList> tcolon:T_COLON tcolon2:T_COLON ComponentDeclList:<ComponentDeclList> teos:T_EOS  :production196
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ComponentDefStmt> ::= LblDef:<LblDef> TypeSpec:<TypeSpec> tcomma:T_COMMA ComponentAttrSpecList:<ComponentAttrSpecList> tcolon:T_COLON tcolon2:T_COLON ComponentDeclList:<ComponentDeclList> teos:T_EOS  :production196
            Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTComponentDeclListNode v7 = (ASTComponentDeclListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTComponentAttrSpecListNode v4 = (ASTComponentAttrSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTTypeSpecNode v2 = (ASTTypeSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTComponentDefStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8);

            // The production has 8 symbols on its RHS
            parser.reduce(Nonterminal.ComponentDefStmtNonterminal.getInstance(), 8, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("TypeSpec"))
                    return 1;
                else
                    if (name.equals("tcomma"))
                        return 2;
                    else
                        if (name.equals("ComponentAttrSpecList"))
                            return 3;
                        else
                            if (name.equals("tcolon"))
                                return 4;
                            else
                                if (name.equals("tcolon2"))
                                    return 5;
                                else
                                    if (name.equals("ComponentDeclList"))
                                        return 6;
                                    else
                                        if (name.equals("teos"))
                                            return 7;
                                        else
                                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ComponentDefStmt> ::= LblDef:<LblDef> TypeSpec:<TypeSpec> tcomma:T_COMMA ComponentAttrSpecList:<ComponentAttrSpecList> tcolon:T_COLON tcolon2:T_COLON ComponentDeclList:<ComponentDeclList> teos:T_EOS  :production196
         */
        protected ASTComponentDefStmtNode userAction(ASTLblDefNode v1, ASTTypeSpecNode v2, Token v3, ASTComponentAttrSpecListNode v4, Token v5, Token v6, ASTComponentDeclListNode v7, Token v8)
        {
            return null;
        }
    }
    public static final Productions.Production196Production PRODUCTION196 = Production196Production.getInstance();

    public static class Production197Production extends Production
    {
        private Production197Production() {;} // Singleton
        private static Production197Production singletonInstance = null;
        public static final Production197Production getInstance() { if (singletonInstance == null) singletonInstance = new Production197Production(); return singletonInstance; }

        public String getDescription() { return "<ComponentDefStmt> ::= TypeSpec:<TypeSpec> tcolon:T_COLON tcolon2:T_COLON ComponentDeclList:<ComponentDeclList> teos:T_EOS  :production197"; }

        /**
         * Reduce by <ComponentDefStmt> ::= TypeSpec:<TypeSpec> tcolon:T_COLON tcolon2:T_COLON ComponentDeclList:<ComponentDeclList> teos:T_EOS  :production197
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ComponentDefStmt> ::= TypeSpec:<TypeSpec> tcolon:T_COLON tcolon2:T_COLON ComponentDeclList:<ComponentDeclList> teos:T_EOS  :production197
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTComponentDeclListNode v4 = (ASTComponentDeclListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTTypeSpecNode v1 = (ASTTypeSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTComponentDefStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.ComponentDefStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("TypeSpec"))
                return 0;
            else
                if (name.equals("tcolon"))
                    return 1;
                else
                    if (name.equals("tcolon2"))
                        return 2;
                    else
                        if (name.equals("ComponentDeclList"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ComponentDefStmt> ::= TypeSpec:<TypeSpec> tcolon:T_COLON tcolon2:T_COLON ComponentDeclList:<ComponentDeclList> teos:T_EOS  :production197
         */
        protected ASTComponentDefStmtNode userAction(ASTTypeSpecNode v1, Token v2, Token v3, ASTComponentDeclListNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production197Production PRODUCTION197 = Production197Production.getInstance();

    public static class Production198Production extends Production
    {
        private Production198Production() {;} // Singleton
        private static Production198Production singletonInstance = null;
        public static final Production198Production getInstance() { if (singletonInstance == null) singletonInstance = new Production198Production(); return singletonInstance; }

        public String getDescription() { return "<ComponentDefStmt> ::= LblDef:<LblDef> TypeSpec:<TypeSpec> tcolon:T_COLON tcolon2:T_COLON ComponentDeclList:<ComponentDeclList> teos:T_EOS  :production198"; }

        /**
         * Reduce by <ComponentDefStmt> ::= LblDef:<LblDef> TypeSpec:<TypeSpec> tcolon:T_COLON tcolon2:T_COLON ComponentDeclList:<ComponentDeclList> teos:T_EOS  :production198
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ComponentDefStmt> ::= LblDef:<LblDef> TypeSpec:<TypeSpec> tcolon:T_COLON tcolon2:T_COLON ComponentDeclList:<ComponentDeclList> teos:T_EOS  :production198
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTComponentDeclListNode v5 = (ASTComponentDeclListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTTypeSpecNode v2 = (ASTTypeSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTComponentDefStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.ComponentDefStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("TypeSpec"))
                    return 1;
                else
                    if (name.equals("tcolon"))
                        return 2;
                    else
                        if (name.equals("tcolon2"))
                            return 3;
                        else
                            if (name.equals("ComponentDeclList"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ComponentDefStmt> ::= LblDef:<LblDef> TypeSpec:<TypeSpec> tcolon:T_COLON tcolon2:T_COLON ComponentDeclList:<ComponentDeclList> teos:T_EOS  :production198
         */
        protected ASTComponentDefStmtNode userAction(ASTLblDefNode v1, ASTTypeSpecNode v2, Token v3, Token v4, ASTComponentDeclListNode v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production198Production PRODUCTION198 = Production198Production.getInstance();

    public static class Production199Production extends Production
    {
        private Production199Production() {;} // Singleton
        private static Production199Production singletonInstance = null;
        public static final Production199Production getInstance() { if (singletonInstance == null) singletonInstance = new Production199Production(); return singletonInstance; }

        public String getDescription() { return "<ComponentDefStmt> ::= TypeSpec:<TypeSpec> ComponentDeclList:<ComponentDeclList> teos:T_EOS  :production199"; }

        /**
         * Reduce by <ComponentDefStmt> ::= TypeSpec:<TypeSpec> ComponentDeclList:<ComponentDeclList> teos:T_EOS  :production199
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ComponentDefStmt> ::= TypeSpec:<TypeSpec> ComponentDeclList:<ComponentDeclList> teos:T_EOS  :production199
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTComponentDeclListNode v2 = (ASTComponentDeclListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTTypeSpecNode v1 = (ASTTypeSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTComponentDefStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.ComponentDefStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("TypeSpec"))
                return 0;
            else
                if (name.equals("ComponentDeclList"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ComponentDefStmt> ::= TypeSpec:<TypeSpec> ComponentDeclList:<ComponentDeclList> teos:T_EOS  :production199
         */
        protected ASTComponentDefStmtNode userAction(ASTTypeSpecNode v1, ASTComponentDeclListNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production199Production PRODUCTION199 = Production199Production.getInstance();

    public static class Production200Production extends Production
    {
        private Production200Production() {;} // Singleton
        private static Production200Production singletonInstance = null;
        public static final Production200Production getInstance() { if (singletonInstance == null) singletonInstance = new Production200Production(); return singletonInstance; }

        public String getDescription() { return "<ComponentDefStmt> ::= LblDef:<LblDef> TypeSpec:<TypeSpec> ComponentDeclList:<ComponentDeclList> teos:T_EOS  :production200"; }

        /**
         * Reduce by <ComponentDefStmt> ::= LblDef:<LblDef> TypeSpec:<TypeSpec> ComponentDeclList:<ComponentDeclList> teos:T_EOS  :production200
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ComponentDefStmt> ::= LblDef:<LblDef> TypeSpec:<TypeSpec> ComponentDeclList:<ComponentDeclList> teos:T_EOS  :production200
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTComponentDeclListNode v3 = (ASTComponentDeclListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTTypeSpecNode v2 = (ASTTypeSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTComponentDefStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.ComponentDefStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("TypeSpec"))
                    return 1;
                else
                    if (name.equals("ComponentDeclList"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ComponentDefStmt> ::= LblDef:<LblDef> TypeSpec:<TypeSpec> ComponentDeclList:<ComponentDeclList> teos:T_EOS  :production200
         */
        protected ASTComponentDefStmtNode userAction(ASTLblDefNode v1, ASTTypeSpecNode v2, ASTComponentDeclListNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production200Production PRODUCTION200 = Production200Production.getInstance();

    public static class Production201Production extends Production
    {
        private Production201Production() {;} // Singleton
        private static Production201Production singletonInstance = null;
        public static final Production201Production getInstance() { if (singletonInstance == null) singletonInstance = new Production201Production(); return singletonInstance; }

        public String getDescription() { return "<ComponentAttrSpecList> ::= ComponentAttrSpec:<ComponentAttrSpec>  :production201"; }

        /**
         * Reduce by <ComponentAttrSpecList> ::= ComponentAttrSpec:<ComponentAttrSpec>  :production201
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ComponentAttrSpecList> ::= ComponentAttrSpec:<ComponentAttrSpec>  :production201
            ASTComponentAttrSpecNode v1 = (ASTComponentAttrSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTComponentAttrSpecListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ComponentAttrSpecListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ComponentAttrSpec"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ComponentAttrSpecList> ::= ComponentAttrSpec:<ComponentAttrSpec>  :production201
         */
        protected ASTComponentAttrSpecListNode userAction(ASTComponentAttrSpecNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production201Production PRODUCTION201 = Production201Production.getInstance();

    public static class Production202Production extends Production
    {
        private Production202Production() {;} // Singleton
        private static Production202Production singletonInstance = null;
        public static final Production202Production getInstance() { if (singletonInstance == null) singletonInstance = new Production202Production(); return singletonInstance; }

        public String getDescription() { return "<ComponentAttrSpecList> ::= @:<ComponentAttrSpecList> tcomma:T_COMMA ComponentAttrSpec:<ComponentAttrSpec>  :production202"; }

        /**
         * Reduce by <ComponentAttrSpecList> ::= @:<ComponentAttrSpecList> tcomma:T_COMMA ComponentAttrSpec:<ComponentAttrSpec>  :production202
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ComponentAttrSpecList> ::= @:<ComponentAttrSpecList> tcomma:T_COMMA ComponentAttrSpec:<ComponentAttrSpec>  :production202
            ASTComponentAttrSpecNode v3 = (ASTComponentAttrSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTComponentAttrSpecListNode v1 = (ASTComponentAttrSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTComponentAttrSpecListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.ComponentAttrSpecListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("ComponentAttrSpec"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ComponentAttrSpecList> ::= @:<ComponentAttrSpecList> tcomma:T_COMMA ComponentAttrSpec:<ComponentAttrSpec>  :production202
         */
        protected ASTComponentAttrSpecListNode userAction(ASTComponentAttrSpecListNode v1, Token v2, ASTComponentAttrSpecNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production202Production PRODUCTION202 = Production202Production.getInstance();

    public static class Production203Production extends Production
    {
        private Production203Production() {;} // Singleton
        private static Production203Production singletonInstance = null;
        public static final Production203Production getInstance() { if (singletonInstance == null) singletonInstance = new Production203Production(); return singletonInstance; }

        public String getDescription() { return "<ComponentAttrSpec> ::= tpointer:T_POINTER  :production203"; }

        /**
         * Reduce by <ComponentAttrSpec> ::= tpointer:T_POINTER  :production203
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ComponentAttrSpec> ::= tpointer:T_POINTER  :production203
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTComponentAttrSpecNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ComponentAttrSpecNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tpointer"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ComponentAttrSpec> ::= tpointer:T_POINTER  :production203
         */
        protected ASTComponentAttrSpecNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production203Production PRODUCTION203 = Production203Production.getInstance();

    public static class Production204Production extends Production
    {
        private Production204Production() {;} // Singleton
        private static Production204Production singletonInstance = null;
        public static final Production204Production getInstance() { if (singletonInstance == null) singletonInstance = new Production204Production(); return singletonInstance; }

        public String getDescription() { return "<ComponentAttrSpec> ::= tdimension:T_DIMENSION tlparen:T_LPAREN ComponentArraySpec:<ComponentArraySpec> trparen:T_RPAREN  :production204"; }

        /**
         * Reduce by <ComponentAttrSpec> ::= tdimension:T_DIMENSION tlparen:T_LPAREN ComponentArraySpec:<ComponentArraySpec> trparen:T_RPAREN  :production204
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ComponentAttrSpec> ::= tdimension:T_DIMENSION tlparen:T_LPAREN ComponentArraySpec:<ComponentArraySpec> trparen:T_RPAREN  :production204
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTComponentArraySpecNode v3 = (ASTComponentArraySpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTComponentAttrSpecNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.ComponentAttrSpecNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tdimension"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("ComponentArraySpec"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ComponentAttrSpec> ::= tdimension:T_DIMENSION tlparen:T_LPAREN ComponentArraySpec:<ComponentArraySpec> trparen:T_RPAREN  :production204
         */
        protected ASTComponentAttrSpecNode userAction(Token v1, Token v2, ASTComponentArraySpecNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production204Production PRODUCTION204 = Production204Production.getInstance();

    public static class Production205Production extends Production
    {
        private Production205Production() {;} // Singleton
        private static Production205Production singletonInstance = null;
        public static final Production205Production getInstance() { if (singletonInstance == null) singletonInstance = new Production205Production(); return singletonInstance; }

        public String getDescription() { return "<ComponentArraySpec> ::= ExplicitShapeSpecList:<ExplicitShapeSpecList>  :production205"; }

        /**
         * Reduce by <ComponentArraySpec> ::= ExplicitShapeSpecList:<ExplicitShapeSpecList>  :production205
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ComponentArraySpec> ::= ExplicitShapeSpecList:<ExplicitShapeSpecList>  :production205
            ASTExplicitShapeSpecListNode v1 = (ASTExplicitShapeSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTComponentArraySpecNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ComponentArraySpecNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ExplicitShapeSpecList"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ComponentArraySpec> ::= ExplicitShapeSpecList:<ExplicitShapeSpecList>  :production205
         */
        protected ASTComponentArraySpecNode userAction(ASTExplicitShapeSpecListNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production205Production PRODUCTION205 = Production205Production.getInstance();

    public static class Production206Production extends Production
    {
        private Production206Production() {;} // Singleton
        private static Production206Production singletonInstance = null;
        public static final Production206Production getInstance() { if (singletonInstance == null) singletonInstance = new Production206Production(); return singletonInstance; }

        public String getDescription() { return "<ComponentArraySpec> ::= DeferredShapeSpecList:<DeferredShapeSpecList>  :production206"; }

        /**
         * Reduce by <ComponentArraySpec> ::= DeferredShapeSpecList:<DeferredShapeSpecList>  :production206
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ComponentArraySpec> ::= DeferredShapeSpecList:<DeferredShapeSpecList>  :production206
            ASTDeferredShapeSpecListNode v1 = (ASTDeferredShapeSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTComponentArraySpecNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ComponentArraySpecNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("DeferredShapeSpecList"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ComponentArraySpec> ::= DeferredShapeSpecList:<DeferredShapeSpecList>  :production206
         */
        protected ASTComponentArraySpecNode userAction(ASTDeferredShapeSpecListNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production206Production PRODUCTION206 = Production206Production.getInstance();

    public static class Production207Production extends Production
    {
        private Production207Production() {;} // Singleton
        private static Production207Production singletonInstance = null;
        public static final Production207Production getInstance() { if (singletonInstance == null) singletonInstance = new Production207Production(); return singletonInstance; }

        public String getDescription() { return "<ComponentDeclList> ::= ComponentDecl:<ComponentDecl>  :production207"; }

        /**
         * Reduce by <ComponentDeclList> ::= ComponentDecl:<ComponentDecl>  :production207
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ComponentDeclList> ::= ComponentDecl:<ComponentDecl>  :production207
            ASTComponentDeclNode v1 = (ASTComponentDeclNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTComponentDeclListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ComponentDeclListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ComponentDecl"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ComponentDeclList> ::= ComponentDecl:<ComponentDecl>  :production207
         */
        protected ASTComponentDeclListNode userAction(ASTComponentDeclNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production207Production PRODUCTION207 = Production207Production.getInstance();

    public static class Production208Production extends Production
    {
        private Production208Production() {;} // Singleton
        private static Production208Production singletonInstance = null;
        public static final Production208Production getInstance() { if (singletonInstance == null) singletonInstance = new Production208Production(); return singletonInstance; }

        public String getDescription() { return "<ComponentDeclList> ::= @:<ComponentDeclList> tcomma:T_COMMA ComponentDecl:<ComponentDecl>  :production208"; }

        /**
         * Reduce by <ComponentDeclList> ::= @:<ComponentDeclList> tcomma:T_COMMA ComponentDecl:<ComponentDecl>  :production208
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ComponentDeclList> ::= @:<ComponentDeclList> tcomma:T_COMMA ComponentDecl:<ComponentDecl>  :production208
            ASTComponentDeclNode v3 = (ASTComponentDeclNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTComponentDeclListNode v1 = (ASTComponentDeclListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTComponentDeclListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.ComponentDeclListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("ComponentDecl"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ComponentDeclList> ::= @:<ComponentDeclList> tcomma:T_COMMA ComponentDecl:<ComponentDecl>  :production208
         */
        protected ASTComponentDeclListNode userAction(ASTComponentDeclListNode v1, Token v2, ASTComponentDeclNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production208Production PRODUCTION208 = Production208Production.getInstance();

    public static class Production209Production extends Production
    {
        private Production209Production() {;} // Singleton
        private static Production209Production singletonInstance = null;
        public static final Production209Production getInstance() { if (singletonInstance == null) singletonInstance = new Production209Production(); return singletonInstance; }

        public String getDescription() { return "<ComponentDecl> ::= ComponentName:<ComponentName> tlparen:T_LPAREN ComponentArraySpec:<ComponentArraySpec> trparen:T_RPAREN tasterisk:T_ASTERISK CharLength:<CharLength> ComponentInitialization:<ComponentInitialization>  :production209"; }

        /**
         * Reduce by <ComponentDecl> ::= ComponentName:<ComponentName> tlparen:T_LPAREN ComponentArraySpec:<ComponentArraySpec> trparen:T_RPAREN tasterisk:T_ASTERISK CharLength:<CharLength> ComponentInitialization:<ComponentInitialization>  :production209
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ComponentDecl> ::= ComponentName:<ComponentName> tlparen:T_LPAREN ComponentArraySpec:<ComponentArraySpec> trparen:T_RPAREN tasterisk:T_ASTERISK CharLength:<CharLength> ComponentInitialization:<ComponentInitialization>  :production209
            ASTComponentInitializationNode v7 = (ASTComponentInitializationNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTCharLengthNode v6 = (ASTCharLengthNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTComponentArraySpecNode v3 = (ASTComponentArraySpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTComponentNameNode v1 = (ASTComponentNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTComponentDeclNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7);

            // The production has 7 symbols on its RHS
            parser.reduce(Nonterminal.ComponentDeclNonterminal.getInstance(), 7, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ComponentName"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("ComponentArraySpec"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("tasterisk"))
                                return 4;
                            else
                                if (name.equals("CharLength"))
                                    return 5;
                                else
                                    if (name.equals("ComponentInitialization"))
                                        return 6;
                                    else
                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ComponentDecl> ::= ComponentName:<ComponentName> tlparen:T_LPAREN ComponentArraySpec:<ComponentArraySpec> trparen:T_RPAREN tasterisk:T_ASTERISK CharLength:<CharLength> ComponentInitialization:<ComponentInitialization>  :production209
         */
        protected ASTComponentDeclNode userAction(ASTComponentNameNode v1, Token v2, ASTComponentArraySpecNode v3, Token v4, Token v5, ASTCharLengthNode v6, ASTComponentInitializationNode v7)
        {
            return null;
        }
    }
    public static final Productions.Production209Production PRODUCTION209 = Production209Production.getInstance();

    public static class Production210Production extends Production
    {
        private Production210Production() {;} // Singleton
        private static Production210Production singletonInstance = null;
        public static final Production210Production getInstance() { if (singletonInstance == null) singletonInstance = new Production210Production(); return singletonInstance; }

        public String getDescription() { return "<ComponentDecl> ::= ComponentName:<ComponentName> tlparen:T_LPAREN ComponentArraySpec:<ComponentArraySpec> trparen:T_RPAREN ComponentInitialization:<ComponentInitialization>  :production210"; }

        /**
         * Reduce by <ComponentDecl> ::= ComponentName:<ComponentName> tlparen:T_LPAREN ComponentArraySpec:<ComponentArraySpec> trparen:T_RPAREN ComponentInitialization:<ComponentInitialization>  :production210
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ComponentDecl> ::= ComponentName:<ComponentName> tlparen:T_LPAREN ComponentArraySpec:<ComponentArraySpec> trparen:T_RPAREN ComponentInitialization:<ComponentInitialization>  :production210
            ASTComponentInitializationNode v5 = (ASTComponentInitializationNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTComponentArraySpecNode v3 = (ASTComponentArraySpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTComponentNameNode v1 = (ASTComponentNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTComponentDeclNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.ComponentDeclNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ComponentName"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("ComponentArraySpec"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("ComponentInitialization"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ComponentDecl> ::= ComponentName:<ComponentName> tlparen:T_LPAREN ComponentArraySpec:<ComponentArraySpec> trparen:T_RPAREN ComponentInitialization:<ComponentInitialization>  :production210
         */
        protected ASTComponentDeclNode userAction(ASTComponentNameNode v1, Token v2, ASTComponentArraySpecNode v3, Token v4, ASTComponentInitializationNode v5)
        {
            return null;
        }
    }
    public static final Productions.Production210Production PRODUCTION210 = Production210Production.getInstance();

    public static class Production211Production extends Production
    {
        private Production211Production() {;} // Singleton
        private static Production211Production singletonInstance = null;
        public static final Production211Production getInstance() { if (singletonInstance == null) singletonInstance = new Production211Production(); return singletonInstance; }

        public String getDescription() { return "<ComponentDecl> ::= ComponentName:<ComponentName> tasterisk:T_ASTERISK CharLength:<CharLength> ComponentInitialization:<ComponentInitialization>  :production211"; }

        /**
         * Reduce by <ComponentDecl> ::= ComponentName:<ComponentName> tasterisk:T_ASTERISK CharLength:<CharLength> ComponentInitialization:<ComponentInitialization>  :production211
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ComponentDecl> ::= ComponentName:<ComponentName> tasterisk:T_ASTERISK CharLength:<CharLength> ComponentInitialization:<ComponentInitialization>  :production211
            ASTComponentInitializationNode v4 = (ASTComponentInitializationNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTCharLengthNode v3 = (ASTCharLengthNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTComponentNameNode v1 = (ASTComponentNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTComponentDeclNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.ComponentDeclNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ComponentName"))
                return 0;
            else
                if (name.equals("tasterisk"))
                    return 1;
                else
                    if (name.equals("CharLength"))
                        return 2;
                    else
                        if (name.equals("ComponentInitialization"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ComponentDecl> ::= ComponentName:<ComponentName> tasterisk:T_ASTERISK CharLength:<CharLength> ComponentInitialization:<ComponentInitialization>  :production211
         */
        protected ASTComponentDeclNode userAction(ASTComponentNameNode v1, Token v2, ASTCharLengthNode v3, ASTComponentInitializationNode v4)
        {
            return null;
        }
    }
    public static final Productions.Production211Production PRODUCTION211 = Production211Production.getInstance();

    public static class Production212Production extends Production
    {
        private Production212Production() {;} // Singleton
        private static Production212Production singletonInstance = null;
        public static final Production212Production getInstance() { if (singletonInstance == null) singletonInstance = new Production212Production(); return singletonInstance; }

        public String getDescription() { return "<ComponentDecl> ::= ComponentName:<ComponentName> ComponentInitialization:<ComponentInitialization>  :production212"; }

        /**
         * Reduce by <ComponentDecl> ::= ComponentName:<ComponentName> ComponentInitialization:<ComponentInitialization>  :production212
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ComponentDecl> ::= ComponentName:<ComponentName> ComponentInitialization:<ComponentInitialization>  :production212
            ASTComponentInitializationNode v2 = (ASTComponentInitializationNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTComponentNameNode v1 = (ASTComponentNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTComponentDeclNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.ComponentDeclNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ComponentName"))
                return 0;
            else
                if (name.equals("ComponentInitialization"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ComponentDecl> ::= ComponentName:<ComponentName> ComponentInitialization:<ComponentInitialization>  :production212
         */
        protected ASTComponentDeclNode userAction(ASTComponentNameNode v1, ASTComponentInitializationNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production212Production PRODUCTION212 = Production212Production.getInstance();

    public static class Production213Production extends Production
    {
        private Production213Production() {;} // Singleton
        private static Production213Production singletonInstance = null;
        public static final Production213Production getInstance() { if (singletonInstance == null) singletonInstance = new Production213Production(); return singletonInstance; }

        public String getDescription() { return "<ComponentDecl> ::= ComponentName:<ComponentName> tlparen:T_LPAREN ComponentArraySpec:<ComponentArraySpec> trparen:T_RPAREN tasterisk:T_ASTERISK CharLength:<CharLength>  :production213"; }

        /**
         * Reduce by <ComponentDecl> ::= ComponentName:<ComponentName> tlparen:T_LPAREN ComponentArraySpec:<ComponentArraySpec> trparen:T_RPAREN tasterisk:T_ASTERISK CharLength:<CharLength>  :production213
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ComponentDecl> ::= ComponentName:<ComponentName> tlparen:T_LPAREN ComponentArraySpec:<ComponentArraySpec> trparen:T_RPAREN tasterisk:T_ASTERISK CharLength:<CharLength>  :production213
            ASTCharLengthNode v6 = (ASTCharLengthNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTComponentArraySpecNode v3 = (ASTComponentArraySpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTComponentNameNode v1 = (ASTComponentNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTComponentDeclNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.ComponentDeclNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ComponentName"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("ComponentArraySpec"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("tasterisk"))
                                return 4;
                            else
                                if (name.equals("CharLength"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ComponentDecl> ::= ComponentName:<ComponentName> tlparen:T_LPAREN ComponentArraySpec:<ComponentArraySpec> trparen:T_RPAREN tasterisk:T_ASTERISK CharLength:<CharLength>  :production213
         */
        protected ASTComponentDeclNode userAction(ASTComponentNameNode v1, Token v2, ASTComponentArraySpecNode v3, Token v4, Token v5, ASTCharLengthNode v6)
        {
            return null;
        }
    }
    public static final Productions.Production213Production PRODUCTION213 = Production213Production.getInstance();

    public static class Production214Production extends Production
    {
        private Production214Production() {;} // Singleton
        private static Production214Production singletonInstance = null;
        public static final Production214Production getInstance() { if (singletonInstance == null) singletonInstance = new Production214Production(); return singletonInstance; }

        public String getDescription() { return "<ComponentDecl> ::= ComponentName:<ComponentName> tlparen:T_LPAREN ComponentArraySpec:<ComponentArraySpec> trparen:T_RPAREN  :production214"; }

        /**
         * Reduce by <ComponentDecl> ::= ComponentName:<ComponentName> tlparen:T_LPAREN ComponentArraySpec:<ComponentArraySpec> trparen:T_RPAREN  :production214
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ComponentDecl> ::= ComponentName:<ComponentName> tlparen:T_LPAREN ComponentArraySpec:<ComponentArraySpec> trparen:T_RPAREN  :production214
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTComponentArraySpecNode v3 = (ASTComponentArraySpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTComponentNameNode v1 = (ASTComponentNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTComponentDeclNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.ComponentDeclNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ComponentName"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("ComponentArraySpec"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ComponentDecl> ::= ComponentName:<ComponentName> tlparen:T_LPAREN ComponentArraySpec:<ComponentArraySpec> trparen:T_RPAREN  :production214
         */
        protected ASTComponentDeclNode userAction(ASTComponentNameNode v1, Token v2, ASTComponentArraySpecNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production214Production PRODUCTION214 = Production214Production.getInstance();

    public static class Production215Production extends Production
    {
        private Production215Production() {;} // Singleton
        private static Production215Production singletonInstance = null;
        public static final Production215Production getInstance() { if (singletonInstance == null) singletonInstance = new Production215Production(); return singletonInstance; }

        public String getDescription() { return "<ComponentDecl> ::= ComponentName:<ComponentName> tasterisk:T_ASTERISK CharLength:<CharLength>  :production215"; }

        /**
         * Reduce by <ComponentDecl> ::= ComponentName:<ComponentName> tasterisk:T_ASTERISK CharLength:<CharLength>  :production215
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ComponentDecl> ::= ComponentName:<ComponentName> tasterisk:T_ASTERISK CharLength:<CharLength>  :production215
            ASTCharLengthNode v3 = (ASTCharLengthNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTComponentNameNode v1 = (ASTComponentNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTComponentDeclNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.ComponentDeclNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ComponentName"))
                return 0;
            else
                if (name.equals("tasterisk"))
                    return 1;
                else
                    if (name.equals("CharLength"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ComponentDecl> ::= ComponentName:<ComponentName> tasterisk:T_ASTERISK CharLength:<CharLength>  :production215
         */
        protected ASTComponentDeclNode userAction(ASTComponentNameNode v1, Token v2, ASTCharLengthNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production215Production PRODUCTION215 = Production215Production.getInstance();

    public static class Production216Production extends Production
    {
        private Production216Production() {;} // Singleton
        private static Production216Production singletonInstance = null;
        public static final Production216Production getInstance() { if (singletonInstance == null) singletonInstance = new Production216Production(); return singletonInstance; }

        public String getDescription() { return "<ComponentDecl> ::= ComponentName:<ComponentName>  :production216"; }

        /**
         * Reduce by <ComponentDecl> ::= ComponentName:<ComponentName>  :production216
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ComponentDecl> ::= ComponentName:<ComponentName>  :production216
            ASTComponentNameNode v1 = (ASTComponentNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTComponentDeclNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ComponentDeclNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ComponentName"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ComponentDecl> ::= ComponentName:<ComponentName>  :production216
         */
        protected ASTComponentDeclNode userAction(ASTComponentNameNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production216Production PRODUCTION216 = Production216Production.getInstance();

    public static class Production217Production extends Production
    {
        private Production217Production() {;} // Singleton
        private static Production217Production singletonInstance = null;
        public static final Production217Production getInstance() { if (singletonInstance == null) singletonInstance = new Production217Production(); return singletonInstance; }

        public String getDescription() { return "<ComponentInitialization> ::= tequals:T_EQUALS Expr:<Expr>  :production217"; }

        /**
         * Reduce by <ComponentInitialization> ::= tequals:T_EQUALS Expr:<Expr>  :production217
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ComponentInitialization> ::= tequals:T_EQUALS Expr:<Expr>  :production217
            ASTExprNode v2 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTComponentInitializationNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.ComponentInitializationNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tequals"))
                return 0;
            else
                if (name.equals("Expr"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ComponentInitialization> ::= tequals:T_EQUALS Expr:<Expr>  :production217
         */
        protected ASTComponentInitializationNode userAction(Token v1, ASTExprNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production217Production PRODUCTION217 = Production217Production.getInstance();

    public static class Production218Production extends Production
    {
        private Production218Production() {;} // Singleton
        private static Production218Production singletonInstance = null;
        public static final Production218Production getInstance() { if (singletonInstance == null) singletonInstance = new Production218Production(); return singletonInstance; }

        public String getDescription() { return "<ComponentInitialization> ::= teqgreaterthan:T_EQGREATERTHAN tnull:T_NULL tlparen:T_LPAREN trparen:T_RPAREN  :production218"; }

        /**
         * Reduce by <ComponentInitialization> ::= teqgreaterthan:T_EQGREATERTHAN tnull:T_NULL tlparen:T_LPAREN trparen:T_RPAREN  :production218
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ComponentInitialization> ::= teqgreaterthan:T_EQGREATERTHAN tnull:T_NULL tlparen:T_LPAREN trparen:T_RPAREN  :production218
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTComponentInitializationNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.ComponentInitializationNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("teqgreaterthan"))
                return 0;
            else
                if (name.equals("tnull"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ComponentInitialization> ::= teqgreaterthan:T_EQGREATERTHAN tnull:T_NULL tlparen:T_LPAREN trparen:T_RPAREN  :production218
         */
        protected ASTComponentInitializationNode userAction(Token v1, Token v2, Token v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production218Production PRODUCTION218 = Production218Production.getInstance();

    public static class Production219Production extends Production
    {
        private Production219Production() {;} // Singleton
        private static Production219Production singletonInstance = null;
        public static final Production219Production getInstance() { if (singletonInstance == null) singletonInstance = new Production219Production(); return singletonInstance; }

        public String getDescription() { return "<EndTypeStmt> ::= tendtype:T_ENDTYPE teos:T_EOS  :production219"; }

        /**
         * Reduce by <EndTypeStmt> ::= tendtype:T_ENDTYPE teos:T_EOS  :production219
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndTypeStmt> ::= tendtype:T_ENDTYPE teos:T_EOS  :production219
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndTypeStmtNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.EndTypeStmtNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tendtype"))
                return 0;
            else
                if (name.equals("teos"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndTypeStmt> ::= tendtype:T_ENDTYPE teos:T_EOS  :production219
         */
        protected ASTEndTypeStmtNode userAction(Token v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production219Production PRODUCTION219 = Production219Production.getInstance();

    public static class Production220Production extends Production
    {
        private Production220Production() {;} // Singleton
        private static Production220Production singletonInstance = null;
        public static final Production220Production getInstance() { if (singletonInstance == null) singletonInstance = new Production220Production(); return singletonInstance; }

        public String getDescription() { return "<EndTypeStmt> ::= tendtype:T_ENDTYPE <EndTypeStmt@1> teos:T_EOS  :production220"; }

        /**
         * Reduce by <EndTypeStmt> ::= tendtype:T_ENDTYPE <EndTypeStmt@1> teos:T_EOS  :production220
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndTypeStmt> ::= tendtype:T_ENDTYPE <EndTypeStmt@1> teos:T_EOS  :production220
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTTypeNameNode v2 = (ASTTypeNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndTypeStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EndTypeStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tendtype"))
                return 0;
            else
                if (name.equals("TypeName"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndTypeStmt> ::= tendtype:T_ENDTYPE <EndTypeStmt@1> teos:T_EOS  :production220
         */
        protected ASTEndTypeStmtNode userAction(Token v1, ASTTypeNameNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production220Production PRODUCTION220 = Production220Production.getInstance();

    public static class Production221Production extends Production
    {
        private Production221Production() {;} // Singleton
        private static Production221Production singletonInstance = null;
        public static final Production221Production getInstance() { if (singletonInstance == null) singletonInstance = new Production221Production(); return singletonInstance; }

        public String getDescription() { return "<EndTypeStmt> ::= LblDef:<LblDef> tendtype:T_ENDTYPE teos:T_EOS  :production221"; }

        /**
         * Reduce by <EndTypeStmt> ::= LblDef:<LblDef> tendtype:T_ENDTYPE teos:T_EOS  :production221
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndTypeStmt> ::= LblDef:<LblDef> tendtype:T_ENDTYPE teos:T_EOS  :production221
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndTypeStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EndTypeStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tendtype"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndTypeStmt> ::= LblDef:<LblDef> tendtype:T_ENDTYPE teos:T_EOS  :production221
         */
        protected ASTEndTypeStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production221Production PRODUCTION221 = Production221Production.getInstance();

    public static class Production222Production extends Production
    {
        private Production222Production() {;} // Singleton
        private static Production222Production singletonInstance = null;
        public static final Production222Production getInstance() { if (singletonInstance == null) singletonInstance = new Production222Production(); return singletonInstance; }

        public String getDescription() { return "<EndTypeStmt> ::= LblDef:<LblDef> tendtype:T_ENDTYPE <EndTypeStmt@1> teos:T_EOS  :production222"; }

        /**
         * Reduce by <EndTypeStmt> ::= LblDef:<LblDef> tendtype:T_ENDTYPE <EndTypeStmt@1> teos:T_EOS  :production222
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndTypeStmt> ::= LblDef:<LblDef> tendtype:T_ENDTYPE <EndTypeStmt@1> teos:T_EOS  :production222
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTTypeNameNode v3 = (ASTTypeNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndTypeStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EndTypeStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tendtype"))
                    return 1;
                else
                    if (name.equals("TypeName"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndTypeStmt> ::= LblDef:<LblDef> tendtype:T_ENDTYPE <EndTypeStmt@1> teos:T_EOS  :production222
         */
        protected ASTEndTypeStmtNode userAction(ASTLblDefNode v1, Token v2, ASTTypeNameNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production222Production PRODUCTION222 = Production222Production.getInstance();

    public static class Production223Production extends Production
    {
        private Production223Production() {;} // Singleton
        private static Production223Production singletonInstance = null;
        public static final Production223Production getInstance() { if (singletonInstance == null) singletonInstance = new Production223Production(); return singletonInstance; }

        public String getDescription() { return "<EndTypeStmt> ::= tend:T_END ttype:T_TYPE teos:T_EOS  :production223"; }

        /**
         * Reduce by <EndTypeStmt> ::= tend:T_END ttype:T_TYPE teos:T_EOS  :production223
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndTypeStmt> ::= tend:T_END ttype:T_TYPE teos:T_EOS  :production223
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndTypeStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EndTypeStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tend"))
                return 0;
            else
                if (name.equals("ttype"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndTypeStmt> ::= tend:T_END ttype:T_TYPE teos:T_EOS  :production223
         */
        protected ASTEndTypeStmtNode userAction(Token v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production223Production PRODUCTION223 = Production223Production.getInstance();

    public static class Production224Production extends Production
    {
        private Production224Production() {;} // Singleton
        private static Production224Production singletonInstance = null;
        public static final Production224Production getInstance() { if (singletonInstance == null) singletonInstance = new Production224Production(); return singletonInstance; }

        public String getDescription() { return "<EndTypeStmt> ::= tend:T_END ttype:T_TYPE <EndTypeStmt@2> teos:T_EOS  :production224"; }

        /**
         * Reduce by <EndTypeStmt> ::= tend:T_END ttype:T_TYPE <EndTypeStmt@2> teos:T_EOS  :production224
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndTypeStmt> ::= tend:T_END ttype:T_TYPE <EndTypeStmt@2> teos:T_EOS  :production224
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTTypeNameNode v3 = (ASTTypeNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndTypeStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EndTypeStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tend"))
                return 0;
            else
                if (name.equals("ttype"))
                    return 1;
                else
                    if (name.equals("TypeName"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndTypeStmt> ::= tend:T_END ttype:T_TYPE <EndTypeStmt@2> teos:T_EOS  :production224
         */
        protected ASTEndTypeStmtNode userAction(Token v1, Token v2, ASTTypeNameNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production224Production PRODUCTION224 = Production224Production.getInstance();

    public static class Production225Production extends Production
    {
        private Production225Production() {;} // Singleton
        private static Production225Production singletonInstance = null;
        public static final Production225Production getInstance() { if (singletonInstance == null) singletonInstance = new Production225Production(); return singletonInstance; }

        public String getDescription() { return "<EndTypeStmt> ::= LblDef:<LblDef> tend:T_END ttype:T_TYPE teos:T_EOS  :production225"; }

        /**
         * Reduce by <EndTypeStmt> ::= LblDef:<LblDef> tend:T_END ttype:T_TYPE teos:T_EOS  :production225
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndTypeStmt> ::= LblDef:<LblDef> tend:T_END ttype:T_TYPE teos:T_EOS  :production225
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndTypeStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EndTypeStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tend"))
                    return 1;
                else
                    if (name.equals("ttype"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndTypeStmt> ::= LblDef:<LblDef> tend:T_END ttype:T_TYPE teos:T_EOS  :production225
         */
        protected ASTEndTypeStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production225Production PRODUCTION225 = Production225Production.getInstance();

    public static class Production226Production extends Production
    {
        private Production226Production() {;} // Singleton
        private static Production226Production singletonInstance = null;
        public static final Production226Production getInstance() { if (singletonInstance == null) singletonInstance = new Production226Production(); return singletonInstance; }

        public String getDescription() { return "<EndTypeStmt> ::= LblDef:<LblDef> tend:T_END ttype:T_TYPE <EndTypeStmt@2> teos:T_EOS  :production226"; }

        /**
         * Reduce by <EndTypeStmt> ::= LblDef:<LblDef> tend:T_END ttype:T_TYPE <EndTypeStmt@2> teos:T_EOS  :production226
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndTypeStmt> ::= LblDef:<LblDef> tend:T_END ttype:T_TYPE <EndTypeStmt@2> teos:T_EOS  :production226
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTTypeNameNode v4 = (ASTTypeNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndTypeStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.EndTypeStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tend"))
                    return 1;
                else
                    if (name.equals("ttype"))
                        return 2;
                    else
                        if (name.equals("TypeName"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndTypeStmt> ::= LblDef:<LblDef> tend:T_END ttype:T_TYPE <EndTypeStmt@2> teos:T_EOS  :production226
         */
        protected ASTEndTypeStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, ASTTypeNameNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production226Production PRODUCTION226 = Production226Production.getInstance();

    public static class Production227Production extends Production
    {
        private Production227Production() {;} // Singleton
        private static Production227Production singletonInstance = null;
        public static final Production227Production getInstance() { if (singletonInstance == null) singletonInstance = new Production227Production(); return singletonInstance; }

        public String getDescription() { return "<StructureConstructor> ::= TypeName:<TypeName> tlparen:T_LPAREN ExprList:<ExprList> trparen:T_RPAREN  :production227"; }

        /**
         * Reduce by <StructureConstructor> ::= TypeName:<TypeName> tlparen:T_LPAREN ExprList:<ExprList> trparen:T_RPAREN  :production227
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <StructureConstructor> ::= TypeName:<TypeName> tlparen:T_LPAREN ExprList:<ExprList> trparen:T_RPAREN  :production227
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprListNode v3 = (ASTExprListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTTypeNameNode v1 = (ASTTypeNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTStructureConstructorNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.StructureConstructorNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("TypeName"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("ExprList"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <StructureConstructor> ::= TypeName:<TypeName> tlparen:T_LPAREN ExprList:<ExprList> trparen:T_RPAREN  :production227
         */
        protected ASTStructureConstructorNode userAction(ASTTypeNameNode v1, Token v2, ASTExprListNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production227Production PRODUCTION227 = Production227Production.getInstance();

    public static class Production228Production extends Production
    {
        private Production228Production() {;} // Singleton
        private static Production228Production singletonInstance = null;
        public static final Production228Production getInstance() { if (singletonInstance == null) singletonInstance = new Production228Production(); return singletonInstance; }

        public String getDescription() { return "<ExprList> ::= Expr:<Expr>  :production228"; }

        /**
         * Reduce by <ExprList> ::= Expr:<Expr>  :production228
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ExprList> ::= Expr:<Expr>  :production228
            ASTExprNode v1 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTExprListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ExprListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Expr"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ExprList> ::= Expr:<Expr>  :production228
         */
        protected ASTExprListNode userAction(ASTExprNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production228Production PRODUCTION228 = Production228Production.getInstance();

    public static class Production229Production extends Production
    {
        private Production229Production() {;} // Singleton
        private static Production229Production singletonInstance = null;
        public static final Production229Production getInstance() { if (singletonInstance == null) singletonInstance = new Production229Production(); return singletonInstance; }

        public String getDescription() { return "<ExprList> ::= @:<ExprList> tcomma:T_COMMA Expr:<Expr>  :production229"; }

        /**
         * Reduce by <ExprList> ::= @:<ExprList> tcomma:T_COMMA Expr:<Expr>  :production229
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ExprList> ::= @:<ExprList> tcomma:T_COMMA Expr:<Expr>  :production229
            ASTExprNode v3 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprListNode v1 = (ASTExprListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTExprListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.ExprListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("Expr"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ExprList> ::= @:<ExprList> tcomma:T_COMMA Expr:<Expr>  :production229
         */
        protected ASTExprListNode userAction(ASTExprListNode v1, Token v2, ASTExprNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production229Production PRODUCTION229 = Production229Production.getInstance();

    public static class Production230Production extends Production
    {
        private Production230Production() {;} // Singleton
        private static Production230Production singletonInstance = null;
        public static final Production230Production getInstance() { if (singletonInstance == null) singletonInstance = new Production230Production(); return singletonInstance; }

        public String getDescription() { return "<ArrayConstructor> ::= tlparenslash:T_LPARENSLASH AcValueList:<AcValueList> tslashrparen:T_SLASHRPAREN  :production230"; }

        /**
         * Reduce by <ArrayConstructor> ::= tlparenslash:T_LPARENSLASH AcValueList:<AcValueList> tslashrparen:T_SLASHRPAREN  :production230
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ArrayConstructor> ::= tlparenslash:T_LPARENSLASH AcValueList:<AcValueList> tslashrparen:T_SLASHRPAREN  :production230
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTAcValueListNode v2 = (ASTAcValueListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTArrayConstructorNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.ArrayConstructorNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparenslash"))
                return 0;
            else
                if (name.equals("AcValueList"))
                    return 1;
                else
                    if (name.equals("tslashrparen"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ArrayConstructor> ::= tlparenslash:T_LPARENSLASH AcValueList:<AcValueList> tslashrparen:T_SLASHRPAREN  :production230
         */
        protected ASTArrayConstructorNode userAction(Token v1, ASTAcValueListNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production230Production PRODUCTION230 = Production230Production.getInstance();

    public static class Production231Production extends Production
    {
        private Production231Production() {;} // Singleton
        private static Production231Production singletonInstance = null;
        public static final Production231Production getInstance() { if (singletonInstance == null) singletonInstance = new Production231Production(); return singletonInstance; }

        public String getDescription() { return "<AcValueList> ::= Expr:<Expr>  :production231"; }

        /**
         * Reduce by <AcValueList> ::= Expr:<Expr>  :production231
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AcValueList> ::= Expr:<Expr>  :production231
            ASTExprNode v1 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAcValueListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.AcValueListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Expr"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AcValueList> ::= Expr:<Expr>  :production231
         */
        protected ASTAcValueListNode userAction(ASTExprNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production231Production PRODUCTION231 = Production231Production.getInstance();

    public static class Production232Production extends Production
    {
        private Production232Production() {;} // Singleton
        private static Production232Production singletonInstance = null;
        public static final Production232Production getInstance() { if (singletonInstance == null) singletonInstance = new Production232Production(); return singletonInstance; }

        public String getDescription() { return "<AcValueList> ::= AcValueList1:<AcValueList1>  :production232"; }

        /**
         * Reduce by <AcValueList> ::= AcValueList1:<AcValueList1>  :production232
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AcValueList> ::= AcValueList1:<AcValueList1>  :production232
            ASTAcValueList1Node v1 = (ASTAcValueList1Node)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAcValueListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.AcValueListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("AcValueList1"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AcValueList> ::= AcValueList1:<AcValueList1>  :production232
         */
        protected ASTAcValueListNode userAction(ASTAcValueList1Node v1)
        {
            return null;
        }
    }
    public static final Productions.Production232Production PRODUCTION232 = Production232Production.getInstance();

    public static class Production233Production extends Production
    {
        private Production233Production() {;} // Singleton
        private static Production233Production singletonInstance = null;
        public static final Production233Production getInstance() { if (singletonInstance == null) singletonInstance = new Production233Production(); return singletonInstance; }

        public String getDescription() { return "<AcValueList1> ::= Expr:<Expr> tcomma:T_COMMA Expr2:<Expr>  :production233"; }

        /**
         * Reduce by <AcValueList1> ::= Expr:<Expr> tcomma:T_COMMA Expr2:<Expr>  :production233
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AcValueList1> ::= Expr:<Expr> tcomma:T_COMMA Expr2:<Expr>  :production233
            ASTExprNode v3 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v1 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAcValueList1Node userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.AcValueList1Nonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Expr"))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("Expr2"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AcValueList1> ::= Expr:<Expr> tcomma:T_COMMA Expr2:<Expr>  :production233
         */
        protected ASTAcValueList1Node userAction(ASTExprNode v1, Token v2, ASTExprNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production233Production PRODUCTION233 = Production233Production.getInstance();

    public static class Production234Production extends Production
    {
        private Production234Production() {;} // Singleton
        private static Production234Production singletonInstance = null;
        public static final Production234Production getInstance() { if (singletonInstance == null) singletonInstance = new Production234Production(); return singletonInstance; }

        public String getDescription() { return "<AcValueList1> ::= Expr:<Expr> tcomma:T_COMMA AcImpliedDo:<AcImpliedDo>  :production234"; }

        /**
         * Reduce by <AcValueList1> ::= Expr:<Expr> tcomma:T_COMMA AcImpliedDo:<AcImpliedDo>  :production234
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AcValueList1> ::= Expr:<Expr> tcomma:T_COMMA AcImpliedDo:<AcImpliedDo>  :production234
            ASTAcImpliedDoNode v3 = (ASTAcImpliedDoNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v1 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAcValueList1Node userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.AcValueList1Nonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Expr"))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("AcImpliedDo"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AcValueList1> ::= Expr:<Expr> tcomma:T_COMMA AcImpliedDo:<AcImpliedDo>  :production234
         */
        protected ASTAcValueList1Node userAction(ASTExprNode v1, Token v2, ASTAcImpliedDoNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production234Production PRODUCTION234 = Production234Production.getInstance();

    public static class Production235Production extends Production
    {
        private Production235Production() {;} // Singleton
        private static Production235Production singletonInstance = null;
        public static final Production235Production getInstance() { if (singletonInstance == null) singletonInstance = new Production235Production(); return singletonInstance; }

        public String getDescription() { return "<AcValueList1> ::= AcImpliedDo:<AcImpliedDo>  :production235"; }

        /**
         * Reduce by <AcValueList1> ::= AcImpliedDo:<AcImpliedDo>  :production235
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AcValueList1> ::= AcImpliedDo:<AcImpliedDo>  :production235
            ASTAcImpliedDoNode v1 = (ASTAcImpliedDoNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAcValueList1Node userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.AcValueList1Nonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("AcImpliedDo"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AcValueList1> ::= AcImpliedDo:<AcImpliedDo>  :production235
         */
        protected ASTAcValueList1Node userAction(ASTAcImpliedDoNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production235Production PRODUCTION235 = Production235Production.getInstance();

    public static class Production236Production extends Production
    {
        private Production236Production() {;} // Singleton
        private static Production236Production singletonInstance = null;
        public static final Production236Production getInstance() { if (singletonInstance == null) singletonInstance = new Production236Production(); return singletonInstance; }

        public String getDescription() { return "<AcValueList1> ::= @:<AcValueList1> tcomma:T_COMMA Expr:<Expr>  :production236"; }

        /**
         * Reduce by <AcValueList1> ::= @:<AcValueList1> tcomma:T_COMMA Expr:<Expr>  :production236
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AcValueList1> ::= @:<AcValueList1> tcomma:T_COMMA Expr:<Expr>  :production236
            ASTExprNode v3 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTAcValueList1Node v1 = (ASTAcValueList1Node)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAcValueList1Node userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.AcValueList1Nonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("Expr"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AcValueList1> ::= @:<AcValueList1> tcomma:T_COMMA Expr:<Expr>  :production236
         */
        protected ASTAcValueList1Node userAction(ASTAcValueList1Node v1, Token v2, ASTExprNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production236Production PRODUCTION236 = Production236Production.getInstance();

    public static class Production237Production extends Production
    {
        private Production237Production() {;} // Singleton
        private static Production237Production singletonInstance = null;
        public static final Production237Production getInstance() { if (singletonInstance == null) singletonInstance = new Production237Production(); return singletonInstance; }

        public String getDescription() { return "<AcValueList1> ::= @:<AcValueList1> tcomma:T_COMMA AcImpliedDo:<AcImpliedDo>  :production237"; }

        /**
         * Reduce by <AcValueList1> ::= @:<AcValueList1> tcomma:T_COMMA AcImpliedDo:<AcImpliedDo>  :production237
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AcValueList1> ::= @:<AcValueList1> tcomma:T_COMMA AcImpliedDo:<AcImpliedDo>  :production237
            ASTAcImpliedDoNode v3 = (ASTAcImpliedDoNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTAcValueList1Node v1 = (ASTAcValueList1Node)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAcValueList1Node userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.AcValueList1Nonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("AcImpliedDo"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AcValueList1> ::= @:<AcValueList1> tcomma:T_COMMA AcImpliedDo:<AcImpliedDo>  :production237
         */
        protected ASTAcValueList1Node userAction(ASTAcValueList1Node v1, Token v2, ASTAcImpliedDoNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production237Production PRODUCTION237 = Production237Production.getInstance();

    public static class Production238Production extends Production
    {
        private Production238Production() {;} // Singleton
        private static Production238Production singletonInstance = null;
        public static final Production238Production getInstance() { if (singletonInstance == null) singletonInstance = new Production238Production(); return singletonInstance; }

        public String getDescription() { return "<AcImpliedDo> ::= tlparen:T_LPAREN Expr:<Expr> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr2:<Expr> tcomma2:T_COMMA Expr3:<Expr> trparen:T_RPAREN  :production238"; }

        /**
         * Reduce by <AcImpliedDo> ::= tlparen:T_LPAREN Expr:<Expr> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr2:<Expr> tcomma2:T_COMMA Expr3:<Expr> trparen:T_RPAREN  :production238
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AcImpliedDo> ::= tlparen:T_LPAREN Expr:<Expr> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr2:<Expr> tcomma2:T_COMMA Expr3:<Expr> trparen:T_RPAREN  :production238
            Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v8 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v6 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTImpliedDoVariableNode v4 = (ASTImpliedDoVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v2 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAcImpliedDoNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8, v9);

            // The production has 9 symbols on its RHS
            parser.reduce(Nonterminal.AcImpliedDoNonterminal.getInstance(), 9, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("Expr"))
                    return 1;
                else
                    if (name.equals("tcomma"))
                        return 2;
                    else
                        if (name.equals("ImpliedDoVariable"))
                            return 3;
                        else
                            if (name.equals("tequals"))
                                return 4;
                            else
                                if (name.equals("Expr2"))
                                    return 5;
                                else
                                    if (name.equals("tcomma2"))
                                        return 6;
                                    else
                                        if (name.equals("Expr3"))
                                            return 7;
                                        else
                                            if (name.equals("trparen"))
                                                return 8;
                                            else
                                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AcImpliedDo> ::= tlparen:T_LPAREN Expr:<Expr> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr2:<Expr> tcomma2:T_COMMA Expr3:<Expr> trparen:T_RPAREN  :production238
         */
        protected ASTAcImpliedDoNode userAction(Token v1, ASTExprNode v2, Token v3, ASTImpliedDoVariableNode v4, Token v5, ASTExprNode v6, Token v7, ASTExprNode v8, Token v9)
        {
            return null;
        }
    }
    public static final Productions.Production238Production PRODUCTION238 = Production238Production.getInstance();

    public static class Production239Production extends Production
    {
        private Production239Production() {;} // Singleton
        private static Production239Production singletonInstance = null;
        public static final Production239Production getInstance() { if (singletonInstance == null) singletonInstance = new Production239Production(); return singletonInstance; }

        public String getDescription() { return "<AcImpliedDo> ::= tlparen:T_LPAREN Expr:<Expr> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr2:<Expr> tcomma2:T_COMMA Expr3:<Expr> tcomma3:T_COMMA Expr4:<Expr> trparen:T_RPAREN  :production239"; }

        /**
         * Reduce by <AcImpliedDo> ::= tlparen:T_LPAREN Expr:<Expr> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr2:<Expr> tcomma2:T_COMMA Expr3:<Expr> tcomma3:T_COMMA Expr4:<Expr> trparen:T_RPAREN  :production239
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AcImpliedDo> ::= tlparen:T_LPAREN Expr:<Expr> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr2:<Expr> tcomma2:T_COMMA Expr3:<Expr> tcomma3:T_COMMA Expr4:<Expr> trparen:T_RPAREN  :production239
            Token v11 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v10 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v8 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v6 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTImpliedDoVariableNode v4 = (ASTImpliedDoVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v2 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAcImpliedDoNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);

            // The production has 11 symbols on its RHS
            parser.reduce(Nonterminal.AcImpliedDoNonterminal.getInstance(), 11, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("Expr"))
                    return 1;
                else
                    if (name.equals("tcomma"))
                        return 2;
                    else
                        if (name.equals("ImpliedDoVariable"))
                            return 3;
                        else
                            if (name.equals("tequals"))
                                return 4;
                            else
                                if (name.equals("Expr2"))
                                    return 5;
                                else
                                    if (name.equals("tcomma2"))
                                        return 6;
                                    else
                                        if (name.equals("Expr3"))
                                            return 7;
                                        else
                                            if (name.equals("tcomma3"))
                                                return 8;
                                            else
                                                if (name.equals("Expr4"))
                                                    return 9;
                                                else
                                                    if (name.equals("trparen"))
                                                        return 10;
                                                    else
                                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AcImpliedDo> ::= tlparen:T_LPAREN Expr:<Expr> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr2:<Expr> tcomma2:T_COMMA Expr3:<Expr> tcomma3:T_COMMA Expr4:<Expr> trparen:T_RPAREN  :production239
         */
        protected ASTAcImpliedDoNode userAction(Token v1, ASTExprNode v2, Token v3, ASTImpliedDoVariableNode v4, Token v5, ASTExprNode v6, Token v7, ASTExprNode v8, Token v9, ASTExprNode v10, Token v11)
        {
            return null;
        }
    }
    public static final Productions.Production239Production PRODUCTION239 = Production239Production.getInstance();

    public static class Production240Production extends Production
    {
        private Production240Production() {;} // Singleton
        private static Production240Production singletonInstance = null;
        public static final Production240Production getInstance() { if (singletonInstance == null) singletonInstance = new Production240Production(); return singletonInstance; }

        public String getDescription() { return "<AcImpliedDo> ::= tlparen:T_LPAREN AcImpliedDo:<AcImpliedDo> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr:<Expr> tcomma2:T_COMMA Expr2:<Expr> trparen:T_RPAREN  :production240"; }

        /**
         * Reduce by <AcImpliedDo> ::= tlparen:T_LPAREN AcImpliedDo:<AcImpliedDo> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr:<Expr> tcomma2:T_COMMA Expr2:<Expr> trparen:T_RPAREN  :production240
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AcImpliedDo> ::= tlparen:T_LPAREN AcImpliedDo:<AcImpliedDo> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr:<Expr> tcomma2:T_COMMA Expr2:<Expr> trparen:T_RPAREN  :production240
            Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v8 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v6 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTImpliedDoVariableNode v4 = (ASTImpliedDoVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTAcImpliedDoNode v2 = (ASTAcImpliedDoNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAcImpliedDoNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8, v9);

            // The production has 9 symbols on its RHS
            parser.reduce(Nonterminal.AcImpliedDoNonterminal.getInstance(), 9, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("AcImpliedDo"))
                    return 1;
                else
                    if (name.equals("tcomma"))
                        return 2;
                    else
                        if (name.equals("ImpliedDoVariable"))
                            return 3;
                        else
                            if (name.equals("tequals"))
                                return 4;
                            else
                                if (name.equals("Expr"))
                                    return 5;
                                else
                                    if (name.equals("tcomma2"))
                                        return 6;
                                    else
                                        if (name.equals("Expr2"))
                                            return 7;
                                        else
                                            if (name.equals("trparen"))
                                                return 8;
                                            else
                                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AcImpliedDo> ::= tlparen:T_LPAREN AcImpliedDo:<AcImpliedDo> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr:<Expr> tcomma2:T_COMMA Expr2:<Expr> trparen:T_RPAREN  :production240
         */
        protected ASTAcImpliedDoNode userAction(Token v1, ASTAcImpliedDoNode v2, Token v3, ASTImpliedDoVariableNode v4, Token v5, ASTExprNode v6, Token v7, ASTExprNode v8, Token v9)
        {
            return null;
        }
    }
    public static final Productions.Production240Production PRODUCTION240 = Production240Production.getInstance();

    public static class Production241Production extends Production
    {
        private Production241Production() {;} // Singleton
        private static Production241Production singletonInstance = null;
        public static final Production241Production getInstance() { if (singletonInstance == null) singletonInstance = new Production241Production(); return singletonInstance; }

        public String getDescription() { return "<AcImpliedDo> ::= tlparen:T_LPAREN AcImpliedDo:<AcImpliedDo> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr:<Expr> tcomma2:T_COMMA Expr2:<Expr> tcomma3:T_COMMA Expr3:<Expr> trparen:T_RPAREN  :production241"; }

        /**
         * Reduce by <AcImpliedDo> ::= tlparen:T_LPAREN AcImpliedDo:<AcImpliedDo> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr:<Expr> tcomma2:T_COMMA Expr2:<Expr> tcomma3:T_COMMA Expr3:<Expr> trparen:T_RPAREN  :production241
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AcImpliedDo> ::= tlparen:T_LPAREN AcImpliedDo:<AcImpliedDo> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr:<Expr> tcomma2:T_COMMA Expr2:<Expr> tcomma3:T_COMMA Expr3:<Expr> trparen:T_RPAREN  :production241
            Token v11 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v10 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v8 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v6 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTImpliedDoVariableNode v4 = (ASTImpliedDoVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTAcImpliedDoNode v2 = (ASTAcImpliedDoNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAcImpliedDoNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);

            // The production has 11 symbols on its RHS
            parser.reduce(Nonterminal.AcImpliedDoNonterminal.getInstance(), 11, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("AcImpliedDo"))
                    return 1;
                else
                    if (name.equals("tcomma"))
                        return 2;
                    else
                        if (name.equals("ImpliedDoVariable"))
                            return 3;
                        else
                            if (name.equals("tequals"))
                                return 4;
                            else
                                if (name.equals("Expr"))
                                    return 5;
                                else
                                    if (name.equals("tcomma2"))
                                        return 6;
                                    else
                                        if (name.equals("Expr2"))
                                            return 7;
                                        else
                                            if (name.equals("tcomma3"))
                                                return 8;
                                            else
                                                if (name.equals("Expr3"))
                                                    return 9;
                                                else
                                                    if (name.equals("trparen"))
                                                        return 10;
                                                    else
                                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AcImpliedDo> ::= tlparen:T_LPAREN AcImpliedDo:<AcImpliedDo> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr:<Expr> tcomma2:T_COMMA Expr2:<Expr> tcomma3:T_COMMA Expr3:<Expr> trparen:T_RPAREN  :production241
         */
        protected ASTAcImpliedDoNode userAction(Token v1, ASTAcImpliedDoNode v2, Token v3, ASTImpliedDoVariableNode v4, Token v5, ASTExprNode v6, Token v7, ASTExprNode v8, Token v9, ASTExprNode v10, Token v11)
        {
            return null;
        }
    }
    public static final Productions.Production241Production PRODUCTION241 = Production241Production.getInstance();

    public static class Production242Production extends Production
    {
        private Production242Production() {;} // Singleton
        private static Production242Production singletonInstance = null;
        public static final Production242Production getInstance() { if (singletonInstance == null) singletonInstance = new Production242Production(); return singletonInstance; }

        public String getDescription() { return "<TypeDeclarationStmt> ::= TypeSpec:<TypeSpec> AttrSpecSeq:<AttrSpecSeq> tcolon:T_COLON tcolon2:T_COLON EntityDeclList:<EntityDeclList> teos:T_EOS  :production242"; }

        /**
         * Reduce by <TypeDeclarationStmt> ::= TypeSpec:<TypeSpec> AttrSpecSeq:<AttrSpecSeq> tcolon:T_COLON tcolon2:T_COLON EntityDeclList:<EntityDeclList> teos:T_EOS  :production242
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <TypeDeclarationStmt> ::= TypeSpec:<TypeSpec> AttrSpecSeq:<AttrSpecSeq> tcolon:T_COLON tcolon2:T_COLON EntityDeclList:<EntityDeclList> teos:T_EOS  :production242
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEntityDeclListNode v5 = (ASTEntityDeclListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTAttrSpecSeqNode v2 = (ASTAttrSpecSeqNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTTypeSpecNode v1 = (ASTTypeSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTTypeDeclarationStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.TypeDeclarationStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("TypeSpec"))
                return 0;
            else
                if (name.equals("AttrSpecSeq"))
                    return 1;
                else
                    if (name.equals("tcolon"))
                        return 2;
                    else
                        if (name.equals("tcolon2"))
                            return 3;
                        else
                            if (name.equals("EntityDeclList"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <TypeDeclarationStmt> ::= TypeSpec:<TypeSpec> AttrSpecSeq:<AttrSpecSeq> tcolon:T_COLON tcolon2:T_COLON EntityDeclList:<EntityDeclList> teos:T_EOS  :production242
         */
        protected ASTTypeDeclarationStmtNode userAction(ASTTypeSpecNode v1, ASTAttrSpecSeqNode v2, Token v3, Token v4, ASTEntityDeclListNode v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production242Production PRODUCTION242 = Production242Production.getInstance();

    public static class Production243Production extends Production
    {
        private Production243Production() {;} // Singleton
        private static Production243Production singletonInstance = null;
        public static final Production243Production getInstance() { if (singletonInstance == null) singletonInstance = new Production243Production(); return singletonInstance; }

        public String getDescription() { return "<TypeDeclarationStmt> ::= LblDef:<LblDef> TypeSpec:<TypeSpec> AttrSpecSeq:<AttrSpecSeq> tcolon:T_COLON tcolon2:T_COLON EntityDeclList:<EntityDeclList> teos:T_EOS  :production243"; }

        /**
         * Reduce by <TypeDeclarationStmt> ::= LblDef:<LblDef> TypeSpec:<TypeSpec> AttrSpecSeq:<AttrSpecSeq> tcolon:T_COLON tcolon2:T_COLON EntityDeclList:<EntityDeclList> teos:T_EOS  :production243
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <TypeDeclarationStmt> ::= LblDef:<LblDef> TypeSpec:<TypeSpec> AttrSpecSeq:<AttrSpecSeq> tcolon:T_COLON tcolon2:T_COLON EntityDeclList:<EntityDeclList> teos:T_EOS  :production243
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEntityDeclListNode v6 = (ASTEntityDeclListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTAttrSpecSeqNode v3 = (ASTAttrSpecSeqNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTTypeSpecNode v2 = (ASTTypeSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTTypeDeclarationStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7);

            // The production has 7 symbols on its RHS
            parser.reduce(Nonterminal.TypeDeclarationStmtNonterminal.getInstance(), 7, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("TypeSpec"))
                    return 1;
                else
                    if (name.equals("AttrSpecSeq"))
                        return 2;
                    else
                        if (name.equals("tcolon"))
                            return 3;
                        else
                            if (name.equals("tcolon2"))
                                return 4;
                            else
                                if (name.equals("EntityDeclList"))
                                    return 5;
                                else
                                    if (name.equals("teos"))
                                        return 6;
                                    else
                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <TypeDeclarationStmt> ::= LblDef:<LblDef> TypeSpec:<TypeSpec> AttrSpecSeq:<AttrSpecSeq> tcolon:T_COLON tcolon2:T_COLON EntityDeclList:<EntityDeclList> teos:T_EOS  :production243
         */
        protected ASTTypeDeclarationStmtNode userAction(ASTLblDefNode v1, ASTTypeSpecNode v2, ASTAttrSpecSeqNode v3, Token v4, Token v5, ASTEntityDeclListNode v6, Token v7)
        {
            return null;
        }
    }
    public static final Productions.Production243Production PRODUCTION243 = Production243Production.getInstance();

    public static class Production244Production extends Production
    {
        private Production244Production() {;} // Singleton
        private static Production244Production singletonInstance = null;
        public static final Production244Production getInstance() { if (singletonInstance == null) singletonInstance = new Production244Production(); return singletonInstance; }

        public String getDescription() { return "<TypeDeclarationStmt> ::= TypeSpec:<TypeSpec> tcolon:T_COLON tcolon2:T_COLON EntityDeclList:<EntityDeclList> teos:T_EOS  :production244"; }

        /**
         * Reduce by <TypeDeclarationStmt> ::= TypeSpec:<TypeSpec> tcolon:T_COLON tcolon2:T_COLON EntityDeclList:<EntityDeclList> teos:T_EOS  :production244
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <TypeDeclarationStmt> ::= TypeSpec:<TypeSpec> tcolon:T_COLON tcolon2:T_COLON EntityDeclList:<EntityDeclList> teos:T_EOS  :production244
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEntityDeclListNode v4 = (ASTEntityDeclListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTTypeSpecNode v1 = (ASTTypeSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTTypeDeclarationStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.TypeDeclarationStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("TypeSpec"))
                return 0;
            else
                if (name.equals("tcolon"))
                    return 1;
                else
                    if (name.equals("tcolon2"))
                        return 2;
                    else
                        if (name.equals("EntityDeclList"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <TypeDeclarationStmt> ::= TypeSpec:<TypeSpec> tcolon:T_COLON tcolon2:T_COLON EntityDeclList:<EntityDeclList> teos:T_EOS  :production244
         */
        protected ASTTypeDeclarationStmtNode userAction(ASTTypeSpecNode v1, Token v2, Token v3, ASTEntityDeclListNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production244Production PRODUCTION244 = Production244Production.getInstance();

    public static class Production245Production extends Production
    {
        private Production245Production() {;} // Singleton
        private static Production245Production singletonInstance = null;
        public static final Production245Production getInstance() { if (singletonInstance == null) singletonInstance = new Production245Production(); return singletonInstance; }

        public String getDescription() { return "<TypeDeclarationStmt> ::= LblDef:<LblDef> TypeSpec:<TypeSpec> tcolon:T_COLON tcolon2:T_COLON EntityDeclList:<EntityDeclList> teos:T_EOS  :production245"; }

        /**
         * Reduce by <TypeDeclarationStmt> ::= LblDef:<LblDef> TypeSpec:<TypeSpec> tcolon:T_COLON tcolon2:T_COLON EntityDeclList:<EntityDeclList> teos:T_EOS  :production245
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <TypeDeclarationStmt> ::= LblDef:<LblDef> TypeSpec:<TypeSpec> tcolon:T_COLON tcolon2:T_COLON EntityDeclList:<EntityDeclList> teos:T_EOS  :production245
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEntityDeclListNode v5 = (ASTEntityDeclListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTTypeSpecNode v2 = (ASTTypeSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTTypeDeclarationStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.TypeDeclarationStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("TypeSpec"))
                    return 1;
                else
                    if (name.equals("tcolon"))
                        return 2;
                    else
                        if (name.equals("tcolon2"))
                            return 3;
                        else
                            if (name.equals("EntityDeclList"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <TypeDeclarationStmt> ::= LblDef:<LblDef> TypeSpec:<TypeSpec> tcolon:T_COLON tcolon2:T_COLON EntityDeclList:<EntityDeclList> teos:T_EOS  :production245
         */
        protected ASTTypeDeclarationStmtNode userAction(ASTLblDefNode v1, ASTTypeSpecNode v2, Token v3, Token v4, ASTEntityDeclListNode v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production245Production PRODUCTION245 = Production245Production.getInstance();

    public static class Production246Production extends Production
    {
        private Production246Production() {;} // Singleton
        private static Production246Production singletonInstance = null;
        public static final Production246Production getInstance() { if (singletonInstance == null) singletonInstance = new Production246Production(); return singletonInstance; }

        public String getDescription() { return "<TypeDeclarationStmt> ::= TypeSpec:<TypeSpec> EntityDeclList:<EntityDeclList> teos:T_EOS  :production246"; }

        /**
         * Reduce by <TypeDeclarationStmt> ::= TypeSpec:<TypeSpec> EntityDeclList:<EntityDeclList> teos:T_EOS  :production246
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <TypeDeclarationStmt> ::= TypeSpec:<TypeSpec> EntityDeclList:<EntityDeclList> teos:T_EOS  :production246
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEntityDeclListNode v2 = (ASTEntityDeclListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTTypeSpecNode v1 = (ASTTypeSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTTypeDeclarationStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.TypeDeclarationStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("TypeSpec"))
                return 0;
            else
                if (name.equals("EntityDeclList"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <TypeDeclarationStmt> ::= TypeSpec:<TypeSpec> EntityDeclList:<EntityDeclList> teos:T_EOS  :production246
         */
        protected ASTTypeDeclarationStmtNode userAction(ASTTypeSpecNode v1, ASTEntityDeclListNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production246Production PRODUCTION246 = Production246Production.getInstance();

    public static class Production247Production extends Production
    {
        private Production247Production() {;} // Singleton
        private static Production247Production singletonInstance = null;
        public static final Production247Production getInstance() { if (singletonInstance == null) singletonInstance = new Production247Production(); return singletonInstance; }

        public String getDescription() { return "<TypeDeclarationStmt> ::= LblDef:<LblDef> TypeSpec:<TypeSpec> EntityDeclList:<EntityDeclList> teos:T_EOS  :production247"; }

        /**
         * Reduce by <TypeDeclarationStmt> ::= LblDef:<LblDef> TypeSpec:<TypeSpec> EntityDeclList:<EntityDeclList> teos:T_EOS  :production247
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <TypeDeclarationStmt> ::= LblDef:<LblDef> TypeSpec:<TypeSpec> EntityDeclList:<EntityDeclList> teos:T_EOS  :production247
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEntityDeclListNode v3 = (ASTEntityDeclListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTTypeSpecNode v2 = (ASTTypeSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTTypeDeclarationStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.TypeDeclarationStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("TypeSpec"))
                    return 1;
                else
                    if (name.equals("EntityDeclList"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <TypeDeclarationStmt> ::= LblDef:<LblDef> TypeSpec:<TypeSpec> EntityDeclList:<EntityDeclList> teos:T_EOS  :production247
         */
        protected ASTTypeDeclarationStmtNode userAction(ASTLblDefNode v1, ASTTypeSpecNode v2, ASTEntityDeclListNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production247Production PRODUCTION247 = Production247Production.getInstance();

    public static class Production248Production extends Production
    {
        private Production248Production() {;} // Singleton
        private static Production248Production singletonInstance = null;
        public static final Production248Production getInstance() { if (singletonInstance == null) singletonInstance = new Production248Production(); return singletonInstance; }

        public String getDescription() { return "<AttrSpecSeq> ::= tcomma:T_COMMA AttrSpec:<AttrSpec>  :production248"; }

        /**
         * Reduce by <AttrSpecSeq> ::= tcomma:T_COMMA AttrSpec:<AttrSpec>  :production248
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AttrSpecSeq> ::= tcomma:T_COMMA AttrSpec:<AttrSpec>  :production248
            ASTAttrSpecNode v2 = (ASTAttrSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAttrSpecSeqNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.AttrSpecSeqNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tcomma"))
                return 0;
            else
                if (name.equals("AttrSpec"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AttrSpecSeq> ::= tcomma:T_COMMA AttrSpec:<AttrSpec>  :production248
         */
        protected ASTAttrSpecSeqNode userAction(Token v1, ASTAttrSpecNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production248Production PRODUCTION248 = Production248Production.getInstance();

    public static class Production249Production extends Production
    {
        private Production249Production() {;} // Singleton
        private static Production249Production singletonInstance = null;
        public static final Production249Production getInstance() { if (singletonInstance == null) singletonInstance = new Production249Production(); return singletonInstance; }

        public String getDescription() { return "<AttrSpecSeq> ::= @:<AttrSpecSeq> tcomma:T_COMMA AttrSpec:<AttrSpec>  :production249"; }

        /**
         * Reduce by <AttrSpecSeq> ::= @:<AttrSpecSeq> tcomma:T_COMMA AttrSpec:<AttrSpec>  :production249
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AttrSpecSeq> ::= @:<AttrSpecSeq> tcomma:T_COMMA AttrSpec:<AttrSpec>  :production249
            ASTAttrSpecNode v3 = (ASTAttrSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTAttrSpecSeqNode v1 = (ASTAttrSpecSeqNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAttrSpecSeqNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.AttrSpecSeqNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("AttrSpec"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AttrSpecSeq> ::= @:<AttrSpecSeq> tcomma:T_COMMA AttrSpec:<AttrSpec>  :production249
         */
        protected ASTAttrSpecSeqNode userAction(ASTAttrSpecSeqNode v1, Token v2, ASTAttrSpecNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production249Production PRODUCTION249 = Production249Production.getInstance();

    public static class Production250Production extends Production
    {
        private Production250Production() {;} // Singleton
        private static Production250Production singletonInstance = null;
        public static final Production250Production getInstance() { if (singletonInstance == null) singletonInstance = new Production250Production(); return singletonInstance; }

        public String getDescription() { return "<TypeSpec> ::= tinteger:T_INTEGER  :production250"; }

        /**
         * Reduce by <TypeSpec> ::= tinteger:T_INTEGER  :production250
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <TypeSpec> ::= tinteger:T_INTEGER  :production250
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTTypeSpecNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.TypeSpecNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tinteger"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <TypeSpec> ::= tinteger:T_INTEGER  :production250
         */
        protected ASTTypeSpecNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production250Production PRODUCTION250 = Production250Production.getInstance();

    public static class Production251Production extends Production
    {
        private Production251Production() {;} // Singleton
        private static Production251Production singletonInstance = null;
        public static final Production251Production getInstance() { if (singletonInstance == null) singletonInstance = new Production251Production(); return singletonInstance; }

        public String getDescription() { return "<TypeSpec> ::= treal:T_REAL  :production251"; }

        /**
         * Reduce by <TypeSpec> ::= treal:T_REAL  :production251
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <TypeSpec> ::= treal:T_REAL  :production251
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTTypeSpecNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.TypeSpecNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("treal"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <TypeSpec> ::= treal:T_REAL  :production251
         */
        protected ASTTypeSpecNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production251Production PRODUCTION251 = Production251Production.getInstance();

    public static class Production252Production extends Production
    {
        private Production252Production() {;} // Singleton
        private static Production252Production singletonInstance = null;
        public static final Production252Production getInstance() { if (singletonInstance == null) singletonInstance = new Production252Production(); return singletonInstance; }

        public String getDescription() { return "<TypeSpec> ::= tdoubleprecision:T_DOUBLEPRECISION  :production252"; }

        /**
         * Reduce by <TypeSpec> ::= tdoubleprecision:T_DOUBLEPRECISION  :production252
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <TypeSpec> ::= tdoubleprecision:T_DOUBLEPRECISION  :production252
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTTypeSpecNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.TypeSpecNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tdoubleprecision"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <TypeSpec> ::= tdoubleprecision:T_DOUBLEPRECISION  :production252
         */
        protected ASTTypeSpecNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production252Production PRODUCTION252 = Production252Production.getInstance();

    public static class Production253Production extends Production
    {
        private Production253Production() {;} // Singleton
        private static Production253Production singletonInstance = null;
        public static final Production253Production getInstance() { if (singletonInstance == null) singletonInstance = new Production253Production(); return singletonInstance; }

        public String getDescription() { return "<TypeSpec> ::= tcomplex:T_COMPLEX  :production253"; }

        /**
         * Reduce by <TypeSpec> ::= tcomplex:T_COMPLEX  :production253
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <TypeSpec> ::= tcomplex:T_COMPLEX  :production253
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTTypeSpecNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.TypeSpecNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tcomplex"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <TypeSpec> ::= tcomplex:T_COMPLEX  :production253
         */
        protected ASTTypeSpecNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production253Production PRODUCTION253 = Production253Production.getInstance();

    public static class Production254Production extends Production
    {
        private Production254Production() {;} // Singleton
        private static Production254Production singletonInstance = null;
        public static final Production254Production getInstance() { if (singletonInstance == null) singletonInstance = new Production254Production(); return singletonInstance; }

        public String getDescription() { return "<TypeSpec> ::= tlogical:T_LOGICAL  :production254"; }

        /**
         * Reduce by <TypeSpec> ::= tlogical:T_LOGICAL  :production254
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <TypeSpec> ::= tlogical:T_LOGICAL  :production254
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTTypeSpecNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.TypeSpecNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlogical"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <TypeSpec> ::= tlogical:T_LOGICAL  :production254
         */
        protected ASTTypeSpecNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production254Production PRODUCTION254 = Production254Production.getInstance();

    public static class Production255Production extends Production
    {
        private Production255Production() {;} // Singleton
        private static Production255Production singletonInstance = null;
        public static final Production255Production getInstance() { if (singletonInstance == null) singletonInstance = new Production255Production(); return singletonInstance; }

        public String getDescription() { return "<TypeSpec> ::= tcharacter:T_CHARACTER  :production255"; }

        /**
         * Reduce by <TypeSpec> ::= tcharacter:T_CHARACTER  :production255
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <TypeSpec> ::= tcharacter:T_CHARACTER  :production255
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTTypeSpecNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.TypeSpecNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tcharacter"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <TypeSpec> ::= tcharacter:T_CHARACTER  :production255
         */
        protected ASTTypeSpecNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production255Production PRODUCTION255 = Production255Production.getInstance();

    public static class Production256Production extends Production
    {
        private Production256Production() {;} // Singleton
        private static Production256Production singletonInstance = null;
        public static final Production256Production getInstance() { if (singletonInstance == null) singletonInstance = new Production256Production(); return singletonInstance; }

        public String getDescription() { return "<TypeSpec> ::= tinteger:T_INTEGER KindSelector:<KindSelector>  :production256"; }

        /**
         * Reduce by <TypeSpec> ::= tinteger:T_INTEGER KindSelector:<KindSelector>  :production256
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <TypeSpec> ::= tinteger:T_INTEGER KindSelector:<KindSelector>  :production256
            ASTKindSelectorNode v2 = (ASTKindSelectorNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTTypeSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.TypeSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tinteger"))
                return 0;
            else
                if (name.equals("KindSelector"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <TypeSpec> ::= tinteger:T_INTEGER KindSelector:<KindSelector>  :production256
         */
        protected ASTTypeSpecNode userAction(Token v1, ASTKindSelectorNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production256Production PRODUCTION256 = Production256Production.getInstance();

    public static class Production257Production extends Production
    {
        private Production257Production() {;} // Singleton
        private static Production257Production singletonInstance = null;
        public static final Production257Production getInstance() { if (singletonInstance == null) singletonInstance = new Production257Production(); return singletonInstance; }

        public String getDescription() { return "<TypeSpec> ::= treal:T_REAL KindSelector:<KindSelector>  :production257"; }

        /**
         * Reduce by <TypeSpec> ::= treal:T_REAL KindSelector:<KindSelector>  :production257
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <TypeSpec> ::= treal:T_REAL KindSelector:<KindSelector>  :production257
            ASTKindSelectorNode v2 = (ASTKindSelectorNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTTypeSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.TypeSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("treal"))
                return 0;
            else
                if (name.equals("KindSelector"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <TypeSpec> ::= treal:T_REAL KindSelector:<KindSelector>  :production257
         */
        protected ASTTypeSpecNode userAction(Token v1, ASTKindSelectorNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production257Production PRODUCTION257 = Production257Production.getInstance();

    public static class Production258Production extends Production
    {
        private Production258Production() {;} // Singleton
        private static Production258Production singletonInstance = null;
        public static final Production258Production getInstance() { if (singletonInstance == null) singletonInstance = new Production258Production(); return singletonInstance; }

        public String getDescription() { return "<TypeSpec> ::= tdouble:T_DOUBLE tprecision:T_PRECISION  :production258"; }

        /**
         * Reduce by <TypeSpec> ::= tdouble:T_DOUBLE tprecision:T_PRECISION  :production258
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <TypeSpec> ::= tdouble:T_DOUBLE tprecision:T_PRECISION  :production258
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTTypeSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.TypeSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tdouble"))
                return 0;
            else
                if (name.equals("tprecision"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <TypeSpec> ::= tdouble:T_DOUBLE tprecision:T_PRECISION  :production258
         */
        protected ASTTypeSpecNode userAction(Token v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production258Production PRODUCTION258 = Production258Production.getInstance();

    public static class Production259Production extends Production
    {
        private Production259Production() {;} // Singleton
        private static Production259Production singletonInstance = null;
        public static final Production259Production getInstance() { if (singletonInstance == null) singletonInstance = new Production259Production(); return singletonInstance; }

        public String getDescription() { return "<TypeSpec> ::= tcomplex:T_COMPLEX KindSelector:<KindSelector>  :production259"; }

        /**
         * Reduce by <TypeSpec> ::= tcomplex:T_COMPLEX KindSelector:<KindSelector>  :production259
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <TypeSpec> ::= tcomplex:T_COMPLEX KindSelector:<KindSelector>  :production259
            ASTKindSelectorNode v2 = (ASTKindSelectorNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTTypeSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.TypeSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tcomplex"))
                return 0;
            else
                if (name.equals("KindSelector"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <TypeSpec> ::= tcomplex:T_COMPLEX KindSelector:<KindSelector>  :production259
         */
        protected ASTTypeSpecNode userAction(Token v1, ASTKindSelectorNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production259Production PRODUCTION259 = Production259Production.getInstance();

    public static class Production260Production extends Production
    {
        private Production260Production() {;} // Singleton
        private static Production260Production singletonInstance = null;
        public static final Production260Production getInstance() { if (singletonInstance == null) singletonInstance = new Production260Production(); return singletonInstance; }

        public String getDescription() { return "<TypeSpec> ::= tcharacter:T_CHARACTER CharSelector:<CharSelector>  :production260"; }

        /**
         * Reduce by <TypeSpec> ::= tcharacter:T_CHARACTER CharSelector:<CharSelector>  :production260
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <TypeSpec> ::= tcharacter:T_CHARACTER CharSelector:<CharSelector>  :production260
            ASTCharSelectorNode v2 = (ASTCharSelectorNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTTypeSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.TypeSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tcharacter"))
                return 0;
            else
                if (name.equals("CharSelector"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <TypeSpec> ::= tcharacter:T_CHARACTER CharSelector:<CharSelector>  :production260
         */
        protected ASTTypeSpecNode userAction(Token v1, ASTCharSelectorNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production260Production PRODUCTION260 = Production260Production.getInstance();

    public static class Production261Production extends Production
    {
        private Production261Production() {;} // Singleton
        private static Production261Production singletonInstance = null;
        public static final Production261Production getInstance() { if (singletonInstance == null) singletonInstance = new Production261Production(); return singletonInstance; }

        public String getDescription() { return "<TypeSpec> ::= tlogical:T_LOGICAL KindSelector:<KindSelector>  :production261"; }

        /**
         * Reduce by <TypeSpec> ::= tlogical:T_LOGICAL KindSelector:<KindSelector>  :production261
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <TypeSpec> ::= tlogical:T_LOGICAL KindSelector:<KindSelector>  :production261
            ASTKindSelectorNode v2 = (ASTKindSelectorNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTTypeSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.TypeSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlogical"))
                return 0;
            else
                if (name.equals("KindSelector"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <TypeSpec> ::= tlogical:T_LOGICAL KindSelector:<KindSelector>  :production261
         */
        protected ASTTypeSpecNode userAction(Token v1, ASTKindSelectorNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production261Production PRODUCTION261 = Production261Production.getInstance();

    public static class Production262Production extends Production
    {
        private Production262Production() {;} // Singleton
        private static Production262Production singletonInstance = null;
        public static final Production262Production getInstance() { if (singletonInstance == null) singletonInstance = new Production262Production(); return singletonInstance; }

        public String getDescription() { return "<TypeSpec> ::= ttype:T_TYPE tlparen:T_LPAREN TypeName:<TypeName> trparen:T_RPAREN  :production262"; }

        /**
         * Reduce by <TypeSpec> ::= ttype:T_TYPE tlparen:T_LPAREN TypeName:<TypeName> trparen:T_RPAREN  :production262
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <TypeSpec> ::= ttype:T_TYPE tlparen:T_LPAREN TypeName:<TypeName> trparen:T_RPAREN  :production262
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTTypeNameNode v3 = (ASTTypeNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTTypeSpecNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.TypeSpecNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ttype"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("TypeName"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <TypeSpec> ::= ttype:T_TYPE tlparen:T_LPAREN TypeName:<TypeName> trparen:T_RPAREN  :production262
         */
        protected ASTTypeSpecNode userAction(Token v1, Token v2, ASTTypeNameNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production262Production PRODUCTION262 = Production262Production.getInstance();

    public static class Production263Production extends Production
    {
        private Production263Production() {;} // Singleton
        private static Production263Production singletonInstance = null;
        public static final Production263Production getInstance() { if (singletonInstance == null) singletonInstance = new Production263Production(); return singletonInstance; }

        public String getDescription() { return "<AttrSpec> ::= tparameter:T_PARAMETER  :production263"; }

        /**
         * Reduce by <AttrSpec> ::= tparameter:T_PARAMETER  :production263
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AttrSpec> ::= tparameter:T_PARAMETER  :production263
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAttrSpecNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.AttrSpecNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tparameter"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AttrSpec> ::= tparameter:T_PARAMETER  :production263
         */
        protected ASTAttrSpecNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production263Production PRODUCTION263 = Production263Production.getInstance();

    public static class Production264Production extends Production
    {
        private Production264Production() {;} // Singleton
        private static Production264Production singletonInstance = null;
        public static final Production264Production getInstance() { if (singletonInstance == null) singletonInstance = new Production264Production(); return singletonInstance; }

        public String getDescription() { return "<AttrSpec> ::= AccessSpec:<AccessSpec>  :production264"; }

        /**
         * Reduce by <AttrSpec> ::= AccessSpec:<AccessSpec>  :production264
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AttrSpec> ::= AccessSpec:<AccessSpec>  :production264
            ASTAccessSpecNode v1 = (ASTAccessSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAttrSpecNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.AttrSpecNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("AccessSpec"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AttrSpec> ::= AccessSpec:<AccessSpec>  :production264
         */
        protected ASTAttrSpecNode userAction(ASTAccessSpecNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production264Production PRODUCTION264 = Production264Production.getInstance();

    public static class Production265Production extends Production
    {
        private Production265Production() {;} // Singleton
        private static Production265Production singletonInstance = null;
        public static final Production265Production getInstance() { if (singletonInstance == null) singletonInstance = new Production265Production(); return singletonInstance; }

        public String getDescription() { return "<AttrSpec> ::= tallocatable:T_ALLOCATABLE  :production265"; }

        /**
         * Reduce by <AttrSpec> ::= tallocatable:T_ALLOCATABLE  :production265
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AttrSpec> ::= tallocatable:T_ALLOCATABLE  :production265
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAttrSpecNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.AttrSpecNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tallocatable"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AttrSpec> ::= tallocatable:T_ALLOCATABLE  :production265
         */
        protected ASTAttrSpecNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production265Production PRODUCTION265 = Production265Production.getInstance();

    public static class Production266Production extends Production
    {
        private Production266Production() {;} // Singleton
        private static Production266Production singletonInstance = null;
        public static final Production266Production getInstance() { if (singletonInstance == null) singletonInstance = new Production266Production(); return singletonInstance; }

        public String getDescription() { return "<AttrSpec> ::= tdimension:T_DIMENSION tlparen:T_LPAREN ArraySpec:<ArraySpec> trparen:T_RPAREN  :production266"; }

        /**
         * Reduce by <AttrSpec> ::= tdimension:T_DIMENSION tlparen:T_LPAREN ArraySpec:<ArraySpec> trparen:T_RPAREN  :production266
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AttrSpec> ::= tdimension:T_DIMENSION tlparen:T_LPAREN ArraySpec:<ArraySpec> trparen:T_RPAREN  :production266
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTArraySpecNode v3 = (ASTArraySpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAttrSpecNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.AttrSpecNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tdimension"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("ArraySpec"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AttrSpec> ::= tdimension:T_DIMENSION tlparen:T_LPAREN ArraySpec:<ArraySpec> trparen:T_RPAREN  :production266
         */
        protected ASTAttrSpecNode userAction(Token v1, Token v2, ASTArraySpecNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production266Production PRODUCTION266 = Production266Production.getInstance();

    public static class Production267Production extends Production
    {
        private Production267Production() {;} // Singleton
        private static Production267Production singletonInstance = null;
        public static final Production267Production getInstance() { if (singletonInstance == null) singletonInstance = new Production267Production(); return singletonInstance; }

        public String getDescription() { return "<AttrSpec> ::= texternal:T_EXTERNAL  :production267"; }

        /**
         * Reduce by <AttrSpec> ::= texternal:T_EXTERNAL  :production267
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AttrSpec> ::= texternal:T_EXTERNAL  :production267
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAttrSpecNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.AttrSpecNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("texternal"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AttrSpec> ::= texternal:T_EXTERNAL  :production267
         */
        protected ASTAttrSpecNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production267Production PRODUCTION267 = Production267Production.getInstance();

    public static class Production268Production extends Production
    {
        private Production268Production() {;} // Singleton
        private static Production268Production singletonInstance = null;
        public static final Production268Production getInstance() { if (singletonInstance == null) singletonInstance = new Production268Production(); return singletonInstance; }

        public String getDescription() { return "<AttrSpec> ::= tintent:T_INTENT tlparen:T_LPAREN IntentSpec:<IntentSpec> trparen:T_RPAREN  :production268"; }

        /**
         * Reduce by <AttrSpec> ::= tintent:T_INTENT tlparen:T_LPAREN IntentSpec:<IntentSpec> trparen:T_RPAREN  :production268
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AttrSpec> ::= tintent:T_INTENT tlparen:T_LPAREN IntentSpec:<IntentSpec> trparen:T_RPAREN  :production268
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTIntentSpecNode v3 = (ASTIntentSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAttrSpecNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.AttrSpecNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tintent"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("IntentSpec"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AttrSpec> ::= tintent:T_INTENT tlparen:T_LPAREN IntentSpec:<IntentSpec> trparen:T_RPAREN  :production268
         */
        protected ASTAttrSpecNode userAction(Token v1, Token v2, ASTIntentSpecNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production268Production PRODUCTION268 = Production268Production.getInstance();

    public static class Production269Production extends Production
    {
        private Production269Production() {;} // Singleton
        private static Production269Production singletonInstance = null;
        public static final Production269Production getInstance() { if (singletonInstance == null) singletonInstance = new Production269Production(); return singletonInstance; }

        public String getDescription() { return "<AttrSpec> ::= tintrinsic:T_INTRINSIC  :production269"; }

        /**
         * Reduce by <AttrSpec> ::= tintrinsic:T_INTRINSIC  :production269
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AttrSpec> ::= tintrinsic:T_INTRINSIC  :production269
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAttrSpecNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.AttrSpecNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tintrinsic"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AttrSpec> ::= tintrinsic:T_INTRINSIC  :production269
         */
        protected ASTAttrSpecNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production269Production PRODUCTION269 = Production269Production.getInstance();

    public static class Production270Production extends Production
    {
        private Production270Production() {;} // Singleton
        private static Production270Production singletonInstance = null;
        public static final Production270Production getInstance() { if (singletonInstance == null) singletonInstance = new Production270Production(); return singletonInstance; }

        public String getDescription() { return "<AttrSpec> ::= toptional:T_OPTIONAL  :production270"; }

        /**
         * Reduce by <AttrSpec> ::= toptional:T_OPTIONAL  :production270
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AttrSpec> ::= toptional:T_OPTIONAL  :production270
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAttrSpecNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.AttrSpecNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("toptional"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AttrSpec> ::= toptional:T_OPTIONAL  :production270
         */
        protected ASTAttrSpecNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production270Production PRODUCTION270 = Production270Production.getInstance();

    public static class Production271Production extends Production
    {
        private Production271Production() {;} // Singleton
        private static Production271Production singletonInstance = null;
        public static final Production271Production getInstance() { if (singletonInstance == null) singletonInstance = new Production271Production(); return singletonInstance; }

        public String getDescription() { return "<AttrSpec> ::= tpointer:T_POINTER  :production271"; }

        /**
         * Reduce by <AttrSpec> ::= tpointer:T_POINTER  :production271
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AttrSpec> ::= tpointer:T_POINTER  :production271
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAttrSpecNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.AttrSpecNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tpointer"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AttrSpec> ::= tpointer:T_POINTER  :production271
         */
        protected ASTAttrSpecNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production271Production PRODUCTION271 = Production271Production.getInstance();

    public static class Production272Production extends Production
    {
        private Production272Production() {;} // Singleton
        private static Production272Production singletonInstance = null;
        public static final Production272Production getInstance() { if (singletonInstance == null) singletonInstance = new Production272Production(); return singletonInstance; }

        public String getDescription() { return "<AttrSpec> ::= tsave:T_SAVE  :production272"; }

        /**
         * Reduce by <AttrSpec> ::= tsave:T_SAVE  :production272
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AttrSpec> ::= tsave:T_SAVE  :production272
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAttrSpecNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.AttrSpecNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tsave"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AttrSpec> ::= tsave:T_SAVE  :production272
         */
        protected ASTAttrSpecNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production272Production PRODUCTION272 = Production272Production.getInstance();

    public static class Production273Production extends Production
    {
        private Production273Production() {;} // Singleton
        private static Production273Production singletonInstance = null;
        public static final Production273Production getInstance() { if (singletonInstance == null) singletonInstance = new Production273Production(); return singletonInstance; }

        public String getDescription() { return "<AttrSpec> ::= ttarget:T_TARGET  :production273"; }

        /**
         * Reduce by <AttrSpec> ::= ttarget:T_TARGET  :production273
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AttrSpec> ::= ttarget:T_TARGET  :production273
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAttrSpecNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.AttrSpecNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ttarget"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AttrSpec> ::= ttarget:T_TARGET  :production273
         */
        protected ASTAttrSpecNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production273Production PRODUCTION273 = Production273Production.getInstance();

    public static class Production274Production extends Production
    {
        private Production274Production() {;} // Singleton
        private static Production274Production singletonInstance = null;
        public static final Production274Production getInstance() { if (singletonInstance == null) singletonInstance = new Production274Production(); return singletonInstance; }

        public String getDescription() { return "<EntityDeclList> ::= EntityDecl:<EntityDecl>  :production274"; }

        /**
         * Reduce by <EntityDeclList> ::= EntityDecl:<EntityDecl>  :production274
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EntityDeclList> ::= EntityDecl:<EntityDecl>  :production274
            ASTEntityDeclNode v1 = (ASTEntityDeclNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEntityDeclListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.EntityDeclListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EntityDecl"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EntityDeclList> ::= EntityDecl:<EntityDecl>  :production274
         */
        protected ASTEntityDeclListNode userAction(ASTEntityDeclNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production274Production PRODUCTION274 = Production274Production.getInstance();

    public static class Production275Production extends Production
    {
        private Production275Production() {;} // Singleton
        private static Production275Production singletonInstance = null;
        public static final Production275Production getInstance() { if (singletonInstance == null) singletonInstance = new Production275Production(); return singletonInstance; }

        public String getDescription() { return "<EntityDeclList> ::= @:<EntityDeclList> tcomma:T_COMMA EntityDecl:<EntityDecl>  :production275"; }

        /**
         * Reduce by <EntityDeclList> ::= @:<EntityDeclList> tcomma:T_COMMA EntityDecl:<EntityDecl>  :production275
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EntityDeclList> ::= @:<EntityDeclList> tcomma:T_COMMA EntityDecl:<EntityDecl>  :production275
            ASTEntityDeclNode v3 = (ASTEntityDeclNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEntityDeclListNode v1 = (ASTEntityDeclListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEntityDeclListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EntityDeclListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("EntityDecl"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EntityDeclList> ::= @:<EntityDeclList> tcomma:T_COMMA EntityDecl:<EntityDecl>  :production275
         */
        protected ASTEntityDeclListNode userAction(ASTEntityDeclListNode v1, Token v2, ASTEntityDeclNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production275Production PRODUCTION275 = Production275Production.getInstance();

    public static class Production276Production extends Production
    {
        private Production276Production() {;} // Singleton
        private static Production276Production singletonInstance = null;
        public static final Production276Production getInstance() { if (singletonInstance == null) singletonInstance = new Production276Production(); return singletonInstance; }

        public String getDescription() { return "<EntityDecl> ::= ObjectName:<ObjectName>  :production276"; }

        /**
         * Reduce by <EntityDecl> ::= ObjectName:<ObjectName>  :production276
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EntityDecl> ::= ObjectName:<ObjectName>  :production276
            ASTObjectNameNode v1 = (ASTObjectNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEntityDeclNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.EntityDeclNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ObjectName"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EntityDecl> ::= ObjectName:<ObjectName>  :production276
         */
        protected ASTEntityDeclNode userAction(ASTObjectNameNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production276Production PRODUCTION276 = Production276Production.getInstance();

    public static class Production277Production extends Production
    {
        private Production277Production() {;} // Singleton
        private static Production277Production singletonInstance = null;
        public static final Production277Production getInstance() { if (singletonInstance == null) singletonInstance = new Production277Production(); return singletonInstance; }

        public String getDescription() { return "<EntityDecl> ::= ObjectName:<ObjectName> <EntityDecl@5>  :production277"; }

        /**
         * Reduce by <EntityDecl> ::= ObjectName:<ObjectName> <EntityDecl@5>  :production277
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EntityDecl> ::= ObjectName:<ObjectName> <EntityDecl@5>  :production277
            ASTInitializationNode v2 = (ASTInitializationNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTObjectNameNode v1 = (ASTObjectNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEntityDeclNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.EntityDeclNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ObjectName"))
                return 0;
            else
                if (name.equals("Initialization"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EntityDecl> ::= ObjectName:<ObjectName> <EntityDecl@5>  :production277
         */
        protected ASTEntityDeclNode userAction(ASTObjectNameNode v1, ASTInitializationNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production277Production PRODUCTION277 = Production277Production.getInstance();

    public static class Production278Production extends Production
    {
        private Production278Production() {;} // Singleton
        private static Production278Production singletonInstance = null;
        public static final Production278Production getInstance() { if (singletonInstance == null) singletonInstance = new Production278Production(); return singletonInstance; }

        public String getDescription() { return "<EntityDecl> ::= ObjectName:<ObjectName> <EntityDecl@4>  :production278"; }

        /**
         * Reduce by <EntityDecl> ::= ObjectName:<ObjectName> <EntityDecl@4>  :production278
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EntityDecl> ::= ObjectName:<ObjectName> <EntityDecl@4>  :production278
            ASTCharLengthNode v3 = (ASTCharLengthNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTObjectNameNode v1 = (ASTObjectNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEntityDeclNode userValue = userAction(v1, v2, v3);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.EntityDeclNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ObjectName"))
                return 0;
            else
                if (name.equals("tasterisk"))
                    return 1;
                else
                    if (name.equals("CharLength"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EntityDecl> ::= ObjectName:<ObjectName> <EntityDecl@4>  :production278
         */
        protected ASTEntityDeclNode userAction(ASTObjectNameNode v1, Token v2, ASTCharLengthNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production278Production PRODUCTION278 = Production278Production.getInstance();

    public static class Production279Production extends Production
    {
        private Production279Production() {;} // Singleton
        private static Production279Production singletonInstance = null;
        public static final Production279Production getInstance() { if (singletonInstance == null) singletonInstance = new Production279Production(); return singletonInstance; }

        public String getDescription() { return "<EntityDecl> ::= ObjectName:<ObjectName> <EntityDecl@4> <EntityDecl@5>  :production279"; }

        /**
         * Reduce by <EntityDecl> ::= ObjectName:<ObjectName> <EntityDecl@4> <EntityDecl@5>  :production279
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EntityDecl> ::= ObjectName:<ObjectName> <EntityDecl@4> <EntityDecl@5>  :production279
            ASTInitializationNode v4 = (ASTInitializationNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTCharLengthNode v3 = (ASTCharLengthNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTObjectNameNode v1 = (ASTObjectNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEntityDeclNode userValue = userAction(v1, v2, v3, v4);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EntityDeclNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ObjectName"))
                return 0;
            else
                if (name.equals("tasterisk"))
                    return 1;
                else
                    if (name.equals("CharLength"))
                        return 2;
                    else
                        if (name.equals("Initialization"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EntityDecl> ::= ObjectName:<ObjectName> <EntityDecl@4> <EntityDecl@5>  :production279
         */
        protected ASTEntityDeclNode userAction(ASTObjectNameNode v1, Token v2, ASTCharLengthNode v3, ASTInitializationNode v4)
        {
            return null;
        }
    }
    public static final Productions.Production279Production PRODUCTION279 = Production279Production.getInstance();

    public static class Production280Production extends Production
    {
        private Production280Production() {;} // Singleton
        private static Production280Production singletonInstance = null;
        public static final Production280Production getInstance() { if (singletonInstance == null) singletonInstance = new Production280Production(); return singletonInstance; }

        public String getDescription() { return "<EntityDecl> ::= ObjectName:<ObjectName> <EntityDecl@3>  :production280"; }

        /**
         * Reduce by <EntityDecl> ::= ObjectName:<ObjectName> <EntityDecl@3>  :production280
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EntityDecl> ::= ObjectName:<ObjectName> <EntityDecl@3>  :production280
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTArraySpecNode v3 = (ASTArraySpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTObjectNameNode v1 = (ASTObjectNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEntityDeclNode userValue = userAction(v1, v2, v3, v4);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.EntityDeclNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ObjectName"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("ArraySpec"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EntityDecl> ::= ObjectName:<ObjectName> <EntityDecl@3>  :production280
         */
        protected ASTEntityDeclNode userAction(ASTObjectNameNode v1, Token v2, ASTArraySpecNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production280Production PRODUCTION280 = Production280Production.getInstance();

    public static class Production281Production extends Production
    {
        private Production281Production() {;} // Singleton
        private static Production281Production singletonInstance = null;
        public static final Production281Production getInstance() { if (singletonInstance == null) singletonInstance = new Production281Production(); return singletonInstance; }

        public String getDescription() { return "<EntityDecl> ::= ObjectName:<ObjectName> <EntityDecl@3> <EntityDecl@5>  :production281"; }

        /**
         * Reduce by <EntityDecl> ::= ObjectName:<ObjectName> <EntityDecl@3> <EntityDecl@5>  :production281
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EntityDecl> ::= ObjectName:<ObjectName> <EntityDecl@3> <EntityDecl@5>  :production281
            ASTInitializationNode v5 = (ASTInitializationNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTArraySpecNode v3 = (ASTArraySpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTObjectNameNode v1 = (ASTObjectNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEntityDeclNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EntityDeclNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ObjectName"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("ArraySpec"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("Initialization"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EntityDecl> ::= ObjectName:<ObjectName> <EntityDecl@3> <EntityDecl@5>  :production281
         */
        protected ASTEntityDeclNode userAction(ASTObjectNameNode v1, Token v2, ASTArraySpecNode v3, Token v4, ASTInitializationNode v5)
        {
            return null;
        }
    }
    public static final Productions.Production281Production PRODUCTION281 = Production281Production.getInstance();

    public static class Production282Production extends Production
    {
        private Production282Production() {;} // Singleton
        private static Production282Production singletonInstance = null;
        public static final Production282Production getInstance() { if (singletonInstance == null) singletonInstance = new Production282Production(); return singletonInstance; }

        public String getDescription() { return "<EntityDecl> ::= ObjectName:<ObjectName> <EntityDecl@3> <EntityDecl@4>  :production282"; }

        /**
         * Reduce by <EntityDecl> ::= ObjectName:<ObjectName> <EntityDecl@3> <EntityDecl@4>  :production282
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EntityDecl> ::= ObjectName:<ObjectName> <EntityDecl@3> <EntityDecl@4>  :production282
            ASTCharLengthNode v6 = (ASTCharLengthNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTArraySpecNode v3 = (ASTArraySpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTObjectNameNode v1 = (ASTObjectNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEntityDeclNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EntityDeclNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ObjectName"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("ArraySpec"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("tasterisk"))
                                return 4;
                            else
                                if (name.equals("CharLength"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EntityDecl> ::= ObjectName:<ObjectName> <EntityDecl@3> <EntityDecl@4>  :production282
         */
        protected ASTEntityDeclNode userAction(ASTObjectNameNode v1, Token v2, ASTArraySpecNode v3, Token v4, Token v5, ASTCharLengthNode v6)
        {
            return null;
        }
    }
    public static final Productions.Production282Production PRODUCTION282 = Production282Production.getInstance();

    public static class Production283Production extends Production
    {
        private Production283Production() {;} // Singleton
        private static Production283Production singletonInstance = null;
        public static final Production283Production getInstance() { if (singletonInstance == null) singletonInstance = new Production283Production(); return singletonInstance; }

        public String getDescription() { return "<EntityDecl> ::= ObjectName:<ObjectName> <EntityDecl@3> <EntityDecl@4> <EntityDecl@5>  :production283"; }

        /**
         * Reduce by <EntityDecl> ::= ObjectName:<ObjectName> <EntityDecl@3> <EntityDecl@4> <EntityDecl@5>  :production283
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EntityDecl> ::= ObjectName:<ObjectName> <EntityDecl@3> <EntityDecl@4> <EntityDecl@5>  :production283
            ASTInitializationNode v7 = (ASTInitializationNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTCharLengthNode v6 = (ASTCharLengthNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTArraySpecNode v3 = (ASTArraySpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTObjectNameNode v1 = (ASTObjectNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEntityDeclNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EntityDeclNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ObjectName"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("ArraySpec"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("tasterisk"))
                                return 4;
                            else
                                if (name.equals("CharLength"))
                                    return 5;
                                else
                                    if (name.equals("Initialization"))
                                        return 6;
                                    else
                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EntityDecl> ::= ObjectName:<ObjectName> <EntityDecl@3> <EntityDecl@4> <EntityDecl@5>  :production283
         */
        protected ASTEntityDeclNode userAction(ASTObjectNameNode v1, Token v2, ASTArraySpecNode v3, Token v4, Token v5, ASTCharLengthNode v6, ASTInitializationNode v7)
        {
            return null;
        }
    }
    public static final Productions.Production283Production PRODUCTION283 = Production283Production.getInstance();

    public static class Production284Production extends Production
    {
        private Production284Production() {;} // Singleton
        private static Production284Production singletonInstance = null;
        public static final Production284Production getInstance() { if (singletonInstance == null) singletonInstance = new Production284Production(); return singletonInstance; }

        public String getDescription() { return "<EntityDecl> ::= InvalidEntityDecl:<InvalidEntityDecl>  :production284"; }

        /**
         * Reduce by <EntityDecl> ::= InvalidEntityDecl:<InvalidEntityDecl>  :production284
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EntityDecl> ::= InvalidEntityDecl:<InvalidEntityDecl>  :production284
            ASTInvalidEntityDeclNode v1 = (ASTInvalidEntityDeclNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEntityDeclNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.EntityDeclNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("InvalidEntityDecl"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EntityDecl> ::= InvalidEntityDecl:<InvalidEntityDecl>  :production284
         */
        protected ASTEntityDeclNode userAction(ASTInvalidEntityDeclNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production284Production PRODUCTION284 = Production284Production.getInstance();

    public static class Production285Production extends Production
    {
        private Production285Production() {;} // Singleton
        private static Production285Production singletonInstance = null;
        public static final Production285Production getInstance() { if (singletonInstance == null) singletonInstance = new Production285Production(); return singletonInstance; }

        public String getDescription() { return "<InvalidEntityDecl> ::= ObjectName:<ObjectName> tasterisk:T_ASTERISK CharLength:<CharLength> tlparen:T_LPAREN ArraySpec:<ArraySpec> trparen:T_RPAREN  :production285"; }

        /**
         * Reduce by <InvalidEntityDecl> ::= ObjectName:<ObjectName> tasterisk:T_ASTERISK CharLength:<CharLength> tlparen:T_LPAREN ArraySpec:<ArraySpec> trparen:T_RPAREN  :production285
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InvalidEntityDecl> ::= ObjectName:<ObjectName> tasterisk:T_ASTERISK CharLength:<CharLength> tlparen:T_LPAREN ArraySpec:<ArraySpec> trparen:T_RPAREN  :production285
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTArraySpecNode v5 = (ASTArraySpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTCharLengthNode v3 = (ASTCharLengthNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTObjectNameNode v1 = (ASTObjectNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInvalidEntityDeclNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.InvalidEntityDeclNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ObjectName"))
                return 0;
            else
                if (name.equals("tasterisk"))
                    return 1;
                else
                    if (name.equals("CharLength"))
                        return 2;
                    else
                        if (name.equals("tlparen"))
                            return 3;
                        else
                            if (name.equals("ArraySpec"))
                                return 4;
                            else
                                if (name.equals("trparen"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InvalidEntityDecl> ::= ObjectName:<ObjectName> tasterisk:T_ASTERISK CharLength:<CharLength> tlparen:T_LPAREN ArraySpec:<ArraySpec> trparen:T_RPAREN  :production285
         */
        protected ASTInvalidEntityDeclNode userAction(ASTObjectNameNode v1, Token v2, ASTCharLengthNode v3, Token v4, ASTArraySpecNode v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production285Production PRODUCTION285 = Production285Production.getInstance();

    public static class Production286Production extends Production
    {
        private Production286Production() {;} // Singleton
        private static Production286Production singletonInstance = null;
        public static final Production286Production getInstance() { if (singletonInstance == null) singletonInstance = new Production286Production(); return singletonInstance; }

        public String getDescription() { return "<InvalidEntityDecl> ::= ObjectName:<ObjectName> tasterisk:T_ASTERISK CharLength:<CharLength> tlparen:T_LPAREN ArraySpec:<ArraySpec> trparen:T_RPAREN <InvalidEntityDecl@6>  :production286"; }

        /**
         * Reduce by <InvalidEntityDecl> ::= ObjectName:<ObjectName> tasterisk:T_ASTERISK CharLength:<CharLength> tlparen:T_LPAREN ArraySpec:<ArraySpec> trparen:T_RPAREN <InvalidEntityDecl@6>  :production286
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InvalidEntityDecl> ::= ObjectName:<ObjectName> tasterisk:T_ASTERISK CharLength:<CharLength> tlparen:T_LPAREN ArraySpec:<ArraySpec> trparen:T_RPAREN <InvalidEntityDecl@6>  :production286
            ASTInitializationNode v7 = (ASTInitializationNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTArraySpecNode v5 = (ASTArraySpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTCharLengthNode v3 = (ASTCharLengthNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTObjectNameNode v1 = (ASTObjectNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInvalidEntityDeclNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7);

            // The production has 7 symbols on its RHS
            parser.reduce(Nonterminal.InvalidEntityDeclNonterminal.getInstance(), 7, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ObjectName"))
                return 0;
            else
                if (name.equals("tasterisk"))
                    return 1;
                else
                    if (name.equals("CharLength"))
                        return 2;
                    else
                        if (name.equals("tlparen"))
                            return 3;
                        else
                            if (name.equals("ArraySpec"))
                                return 4;
                            else
                                if (name.equals("trparen"))
                                    return 5;
                                else
                                    if (name.equals("Initialization"))
                                        return 6;
                                    else
                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InvalidEntityDecl> ::= ObjectName:<ObjectName> tasterisk:T_ASTERISK CharLength:<CharLength> tlparen:T_LPAREN ArraySpec:<ArraySpec> trparen:T_RPAREN <InvalidEntityDecl@6>  :production286
         */
        protected ASTInvalidEntityDeclNode userAction(ASTObjectNameNode v1, Token v2, ASTCharLengthNode v3, Token v4, ASTArraySpecNode v5, Token v6, ASTInitializationNode v7)
        {
            return null;
        }
    }
    public static final Productions.Production286Production PRODUCTION286 = Production286Production.getInstance();

    public static class Production287Production extends Production
    {
        private Production287Production() {;} // Singleton
        private static Production287Production singletonInstance = null;
        public static final Production287Production getInstance() { if (singletonInstance == null) singletonInstance = new Production287Production(); return singletonInstance; }

        public String getDescription() { return "<Initialization> ::= tequals:T_EQUALS Expr:<Expr>  :production287"; }

        /**
         * Reduce by <Initialization> ::= tequals:T_EQUALS Expr:<Expr>  :production287
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Initialization> ::= tequals:T_EQUALS Expr:<Expr>  :production287
            ASTExprNode v2 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInitializationNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.InitializationNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tequals"))
                return 0;
            else
                if (name.equals("Expr"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Initialization> ::= tequals:T_EQUALS Expr:<Expr>  :production287
         */
        protected ASTInitializationNode userAction(Token v1, ASTExprNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production287Production PRODUCTION287 = Production287Production.getInstance();

    public static class Production288Production extends Production
    {
        private Production288Production() {;} // Singleton
        private static Production288Production singletonInstance = null;
        public static final Production288Production getInstance() { if (singletonInstance == null) singletonInstance = new Production288Production(); return singletonInstance; }

        public String getDescription() { return "<Initialization> ::= teqgreaterthan:T_EQGREATERTHAN tnull:T_NULL tlparen:T_LPAREN trparen:T_RPAREN  :production288"; }

        /**
         * Reduce by <Initialization> ::= teqgreaterthan:T_EQGREATERTHAN tnull:T_NULL tlparen:T_LPAREN trparen:T_RPAREN  :production288
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Initialization> ::= teqgreaterthan:T_EQGREATERTHAN tnull:T_NULL tlparen:T_LPAREN trparen:T_RPAREN  :production288
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInitializationNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.InitializationNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("teqgreaterthan"))
                return 0;
            else
                if (name.equals("tnull"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Initialization> ::= teqgreaterthan:T_EQGREATERTHAN tnull:T_NULL tlparen:T_LPAREN trparen:T_RPAREN  :production288
         */
        protected ASTInitializationNode userAction(Token v1, Token v2, Token v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production288Production PRODUCTION288 = Production288Production.getInstance();

    public static class Production289Production extends Production
    {
        private Production289Production() {;} // Singleton
        private static Production289Production singletonInstance = null;
        public static final Production289Production getInstance() { if (singletonInstance == null) singletonInstance = new Production289Production(); return singletonInstance; }

        public String getDescription() { return "<KindSelector> ::= tlparen:T_LPAREN tkindeq:T_KINDEQ Expr:<Expr> trparen:T_RPAREN  :production289"; }

        /**
         * Reduce by <KindSelector> ::= tlparen:T_LPAREN tkindeq:T_KINDEQ Expr:<Expr> trparen:T_RPAREN  :production289
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <KindSelector> ::= tlparen:T_LPAREN tkindeq:T_KINDEQ Expr:<Expr> trparen:T_RPAREN  :production289
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v3 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTKindSelectorNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.KindSelectorNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("tkindeq"))
                    return 1;
                else
                    if (name.equals("Expr"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <KindSelector> ::= tlparen:T_LPAREN tkindeq:T_KINDEQ Expr:<Expr> trparen:T_RPAREN  :production289
         */
        protected ASTKindSelectorNode userAction(Token v1, Token v2, ASTExprNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production289Production PRODUCTION289 = Production289Production.getInstance();

    public static class Production290Production extends Production
    {
        private Production290Production() {;} // Singleton
        private static Production290Production singletonInstance = null;
        public static final Production290Production getInstance() { if (singletonInstance == null) singletonInstance = new Production290Production(); return singletonInstance; }

        public String getDescription() { return "<KindSelector> ::= tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN  :production290"; }

        /**
         * Reduce by <KindSelector> ::= tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN  :production290
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <KindSelector> ::= tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN  :production290
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v2 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTKindSelectorNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.KindSelectorNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("Expr"))
                    return 1;
                else
                    if (name.equals("trparen"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <KindSelector> ::= tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN  :production290
         */
        protected ASTKindSelectorNode userAction(Token v1, ASTExprNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production290Production PRODUCTION290 = Production290Production.getInstance();

    public static class Production291Production extends Production
    {
        private Production291Production() {;} // Singleton
        private static Production291Production singletonInstance = null;
        public static final Production291Production getInstance() { if (singletonInstance == null) singletonInstance = new Production291Production(); return singletonInstance; }

        public String getDescription() { return "<CharSelector> ::= LengthSelector:<LengthSelector>  :production291"; }

        /**
         * Reduce by <CharSelector> ::= LengthSelector:<LengthSelector>  :production291
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CharSelector> ::= LengthSelector:<LengthSelector>  :production291
            ASTLengthSelectorNode v1 = (ASTLengthSelectorNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCharSelectorNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.CharSelectorNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LengthSelector"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CharSelector> ::= LengthSelector:<LengthSelector>  :production291
         */
        protected ASTCharSelectorNode userAction(ASTLengthSelectorNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production291Production PRODUCTION291 = Production291Production.getInstance();

    public static class Production292Production extends Production
    {
        private Production292Production() {;} // Singleton
        private static Production292Production singletonInstance = null;
        public static final Production292Production getInstance() { if (singletonInstance == null) singletonInstance = new Production292Production(); return singletonInstance; }

        public String getDescription() { return "<CharSelector> ::= tlparen:T_LPAREN tleneq:T_LENEQ CharLenParamValue:<CharLenParamValue> tcomma:T_COMMA tkindeq:T_KINDEQ Expr:<Expr> trparen:T_RPAREN  :production292"; }

        /**
         * Reduce by <CharSelector> ::= tlparen:T_LPAREN tleneq:T_LENEQ CharLenParamValue:<CharLenParamValue> tcomma:T_COMMA tkindeq:T_KINDEQ Expr:<Expr> trparen:T_RPAREN  :production292
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CharSelector> ::= tlparen:T_LPAREN tleneq:T_LENEQ CharLenParamValue:<CharLenParamValue> tcomma:T_COMMA tkindeq:T_KINDEQ Expr:<Expr> trparen:T_RPAREN  :production292
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v6 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTCharLenParamValueNode v3 = (ASTCharLenParamValueNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCharSelectorNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7);

            // The production has 7 symbols on its RHS
            parser.reduce(Nonterminal.CharSelectorNonterminal.getInstance(), 7, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("tleneq"))
                    return 1;
                else
                    if (name.equals("CharLenParamValue"))
                        return 2;
                    else
                        if (name.equals("tcomma"))
                            return 3;
                        else
                            if (name.equals("tkindeq"))
                                return 4;
                            else
                                if (name.equals("Expr"))
                                    return 5;
                                else
                                    if (name.equals("trparen"))
                                        return 6;
                                    else
                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CharSelector> ::= tlparen:T_LPAREN tleneq:T_LENEQ CharLenParamValue:<CharLenParamValue> tcomma:T_COMMA tkindeq:T_KINDEQ Expr:<Expr> trparen:T_RPAREN  :production292
         */
        protected ASTCharSelectorNode userAction(Token v1, Token v2, ASTCharLenParamValueNode v3, Token v4, Token v5, ASTExprNode v6, Token v7)
        {
            return null;
        }
    }
    public static final Productions.Production292Production PRODUCTION292 = Production292Production.getInstance();

    public static class Production293Production extends Production
    {
        private Production293Production() {;} // Singleton
        private static Production293Production singletonInstance = null;
        public static final Production293Production getInstance() { if (singletonInstance == null) singletonInstance = new Production293Production(); return singletonInstance; }

        public String getDescription() { return "<CharSelector> ::= tlparen:T_LPAREN tleneq:T_LENEQ CharLenParamValue:<CharLenParamValue> tcomma:T_COMMA Expr:<Expr> trparen:T_RPAREN  :production293"; }

        /**
         * Reduce by <CharSelector> ::= tlparen:T_LPAREN tleneq:T_LENEQ CharLenParamValue:<CharLenParamValue> tcomma:T_COMMA Expr:<Expr> trparen:T_RPAREN  :production293
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CharSelector> ::= tlparen:T_LPAREN tleneq:T_LENEQ CharLenParamValue:<CharLenParamValue> tcomma:T_COMMA Expr:<Expr> trparen:T_RPAREN  :production293
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v5 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTCharLenParamValueNode v3 = (ASTCharLenParamValueNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCharSelectorNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.CharSelectorNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("tleneq"))
                    return 1;
                else
                    if (name.equals("CharLenParamValue"))
                        return 2;
                    else
                        if (name.equals("tcomma"))
                            return 3;
                        else
                            if (name.equals("Expr"))
                                return 4;
                            else
                                if (name.equals("trparen"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CharSelector> ::= tlparen:T_LPAREN tleneq:T_LENEQ CharLenParamValue:<CharLenParamValue> tcomma:T_COMMA Expr:<Expr> trparen:T_RPAREN  :production293
         */
        protected ASTCharSelectorNode userAction(Token v1, Token v2, ASTCharLenParamValueNode v3, Token v4, ASTExprNode v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production293Production PRODUCTION293 = Production293Production.getInstance();

    public static class Production294Production extends Production
    {
        private Production294Production() {;} // Singleton
        private static Production294Production singletonInstance = null;
        public static final Production294Production getInstance() { if (singletonInstance == null) singletonInstance = new Production294Production(); return singletonInstance; }

        public String getDescription() { return "<CharSelector> ::= tlparen:T_LPAREN tkindeq:T_KINDEQ Expr:<Expr> trparen:T_RPAREN  :production294"; }

        /**
         * Reduce by <CharSelector> ::= tlparen:T_LPAREN tkindeq:T_KINDEQ Expr:<Expr> trparen:T_RPAREN  :production294
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CharSelector> ::= tlparen:T_LPAREN tkindeq:T_KINDEQ Expr:<Expr> trparen:T_RPAREN  :production294
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v3 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCharSelectorNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.CharSelectorNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("tkindeq"))
                    return 1;
                else
                    if (name.equals("Expr"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CharSelector> ::= tlparen:T_LPAREN tkindeq:T_KINDEQ Expr:<Expr> trparen:T_RPAREN  :production294
         */
        protected ASTCharSelectorNode userAction(Token v1, Token v2, ASTExprNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production294Production PRODUCTION294 = Production294Production.getInstance();

    public static class Production295Production extends Production
    {
        private Production295Production() {;} // Singleton
        private static Production295Production singletonInstance = null;
        public static final Production295Production getInstance() { if (singletonInstance == null) singletonInstance = new Production295Production(); return singletonInstance; }

        public String getDescription() { return "<CharSelector> ::= tlparen:T_LPAREN tleneq:T_LENEQ CharLenParamValue:<CharLenParamValue> trparen:T_RPAREN  :production295"; }

        /**
         * Reduce by <CharSelector> ::= tlparen:T_LPAREN tleneq:T_LENEQ CharLenParamValue:<CharLenParamValue> trparen:T_RPAREN  :production295
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CharSelector> ::= tlparen:T_LPAREN tleneq:T_LENEQ CharLenParamValue:<CharLenParamValue> trparen:T_RPAREN  :production295
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTCharLenParamValueNode v3 = (ASTCharLenParamValueNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCharSelectorNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.CharSelectorNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("tleneq"))
                    return 1;
                else
                    if (name.equals("CharLenParamValue"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CharSelector> ::= tlparen:T_LPAREN tleneq:T_LENEQ CharLenParamValue:<CharLenParamValue> trparen:T_RPAREN  :production295
         */
        protected ASTCharSelectorNode userAction(Token v1, Token v2, ASTCharLenParamValueNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production295Production PRODUCTION295 = Production295Production.getInstance();

    public static class Production296Production extends Production
    {
        private Production296Production() {;} // Singleton
        private static Production296Production singletonInstance = null;
        public static final Production296Production getInstance() { if (singletonInstance == null) singletonInstance = new Production296Production(); return singletonInstance; }

        public String getDescription() { return "<CharSelector> ::= tlparen:T_LPAREN CharLenParamValue:<CharLenParamValue> trparen:T_RPAREN  :production296"; }

        /**
         * Reduce by <CharSelector> ::= tlparen:T_LPAREN CharLenParamValue:<CharLenParamValue> trparen:T_RPAREN  :production296
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CharSelector> ::= tlparen:T_LPAREN CharLenParamValue:<CharLenParamValue> trparen:T_RPAREN  :production296
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTCharLenParamValueNode v2 = (ASTCharLenParamValueNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCharSelectorNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.CharSelectorNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("CharLenParamValue"))
                    return 1;
                else
                    if (name.equals("trparen"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CharSelector> ::= tlparen:T_LPAREN CharLenParamValue:<CharLenParamValue> trparen:T_RPAREN  :production296
         */
        protected ASTCharSelectorNode userAction(Token v1, ASTCharLenParamValueNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production296Production PRODUCTION296 = Production296Production.getInstance();

    public static class Production297Production extends Production
    {
        private Production297Production() {;} // Singleton
        private static Production297Production singletonInstance = null;
        public static final Production297Production getInstance() { if (singletonInstance == null) singletonInstance = new Production297Production(); return singletonInstance; }

        public String getDescription() { return "<LengthSelector> ::= tasterisk:T_ASTERISK CharLength:<CharLength>  :production297"; }

        /**
         * Reduce by <LengthSelector> ::= tasterisk:T_ASTERISK CharLength:<CharLength>  :production297
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <LengthSelector> ::= tasterisk:T_ASTERISK CharLength:<CharLength>  :production297
            ASTCharLengthNode v2 = (ASTCharLengthNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTLengthSelectorNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.LengthSelectorNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tasterisk"))
                return 0;
            else
                if (name.equals("CharLength"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <LengthSelector> ::= tasterisk:T_ASTERISK CharLength:<CharLength>  :production297
         */
        protected ASTLengthSelectorNode userAction(Token v1, ASTCharLengthNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production297Production PRODUCTION297 = Production297Production.getInstance();

    public static class Production298Production extends Production
    {
        private Production298Production() {;} // Singleton
        private static Production298Production singletonInstance = null;
        public static final Production298Production getInstance() { if (singletonInstance == null) singletonInstance = new Production298Production(); return singletonInstance; }

        public String getDescription() { return "<CharLength> ::= tlparen:T_LPAREN CharLenParamValue:<CharLenParamValue> trparen:T_RPAREN  :production298"; }

        /**
         * Reduce by <CharLength> ::= tlparen:T_LPAREN CharLenParamValue:<CharLenParamValue> trparen:T_RPAREN  :production298
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CharLength> ::= tlparen:T_LPAREN CharLenParamValue:<CharLenParamValue> trparen:T_RPAREN  :production298
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTCharLenParamValueNode v2 = (ASTCharLenParamValueNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCharLengthNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.CharLengthNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("CharLenParamValue"))
                    return 1;
                else
                    if (name.equals("trparen"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CharLength> ::= tlparen:T_LPAREN CharLenParamValue:<CharLenParamValue> trparen:T_RPAREN  :production298
         */
        protected ASTCharLengthNode userAction(Token v1, ASTCharLenParamValueNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production298Production PRODUCTION298 = Production298Production.getInstance();

    public static class Production299Production extends Production
    {
        private Production299Production() {;} // Singleton
        private static Production299Production singletonInstance = null;
        public static final Production299Production getInstance() { if (singletonInstance == null) singletonInstance = new Production299Production(); return singletonInstance; }

        public String getDescription() { return "<CharLength> ::= ticon:T_ICON  :production299"; }

        /**
         * Reduce by <CharLength> ::= ticon:T_ICON  :production299
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CharLength> ::= ticon:T_ICON  :production299
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCharLengthNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.CharLengthNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ticon"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CharLength> ::= ticon:T_ICON  :production299
         */
        protected ASTCharLengthNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production299Production PRODUCTION299 = Production299Production.getInstance();

    public static class Production300Production extends Production
    {
        private Production300Production() {;} // Singleton
        private static Production300Production singletonInstance = null;
        public static final Production300Production getInstance() { if (singletonInstance == null) singletonInstance = new Production300Production(); return singletonInstance; }

        public String getDescription() { return "<CharLenParamValue> ::= Expr:<Expr>  :production300"; }

        /**
         * Reduce by <CharLenParamValue> ::= Expr:<Expr>  :production300
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CharLenParamValue> ::= Expr:<Expr>  :production300
            ASTExprNode v1 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCharLenParamValueNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.CharLenParamValueNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Expr"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CharLenParamValue> ::= Expr:<Expr>  :production300
         */
        protected ASTCharLenParamValueNode userAction(ASTExprNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production300Production PRODUCTION300 = Production300Production.getInstance();

    public static class Production301Production extends Production
    {
        private Production301Production() {;} // Singleton
        private static Production301Production singletonInstance = null;
        public static final Production301Production getInstance() { if (singletonInstance == null) singletonInstance = new Production301Production(); return singletonInstance; }

        public String getDescription() { return "<CharLenParamValue> ::= tasterisk:T_ASTERISK  :production301"; }

        /**
         * Reduce by <CharLenParamValue> ::= tasterisk:T_ASTERISK  :production301
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CharLenParamValue> ::= tasterisk:T_ASTERISK  :production301
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCharLenParamValueNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.CharLenParamValueNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tasterisk"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CharLenParamValue> ::= tasterisk:T_ASTERISK  :production301
         */
        protected ASTCharLenParamValueNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production301Production PRODUCTION301 = Production301Production.getInstance();

    public static class Production302Production extends Production
    {
        private Production302Production() {;} // Singleton
        private static Production302Production singletonInstance = null;
        public static final Production302Production getInstance() { if (singletonInstance == null) singletonInstance = new Production302Production(); return singletonInstance; }

        public String getDescription() { return "<AccessSpec> ::= tpublic:T_PUBLIC  :production302"; }

        /**
         * Reduce by <AccessSpec> ::= tpublic:T_PUBLIC  :production302
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AccessSpec> ::= tpublic:T_PUBLIC  :production302
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAccessSpecNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.AccessSpecNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tpublic"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AccessSpec> ::= tpublic:T_PUBLIC  :production302
         */
        protected ASTAccessSpecNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production302Production PRODUCTION302 = Production302Production.getInstance();

    public static class Production303Production extends Production
    {
        private Production303Production() {;} // Singleton
        private static Production303Production singletonInstance = null;
        public static final Production303Production getInstance() { if (singletonInstance == null) singletonInstance = new Production303Production(); return singletonInstance; }

        public String getDescription() { return "<AccessSpec> ::= tprivate:T_PRIVATE  :production303"; }

        /**
         * Reduce by <AccessSpec> ::= tprivate:T_PRIVATE  :production303
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AccessSpec> ::= tprivate:T_PRIVATE  :production303
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAccessSpecNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.AccessSpecNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tprivate"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AccessSpec> ::= tprivate:T_PRIVATE  :production303
         */
        protected ASTAccessSpecNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production303Production PRODUCTION303 = Production303Production.getInstance();

    public static class Production304Production extends Production
    {
        private Production304Production() {;} // Singleton
        private static Production304Production singletonInstance = null;
        public static final Production304Production getInstance() { if (singletonInstance == null) singletonInstance = new Production304Production(); return singletonInstance; }

        public String getDescription() { return "<IntentSpec> ::= tin:T_IN  :production304"; }

        /**
         * Reduce by <IntentSpec> ::= tin:T_IN  :production304
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <IntentSpec> ::= tin:T_IN  :production304
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTIntentSpecNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.IntentSpecNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tin"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <IntentSpec> ::= tin:T_IN  :production304
         */
        protected ASTIntentSpecNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production304Production PRODUCTION304 = Production304Production.getInstance();

    public static class Production305Production extends Production
    {
        private Production305Production() {;} // Singleton
        private static Production305Production singletonInstance = null;
        public static final Production305Production getInstance() { if (singletonInstance == null) singletonInstance = new Production305Production(); return singletonInstance; }

        public String getDescription() { return "<IntentSpec> ::= tout:T_OUT  :production305"; }

        /**
         * Reduce by <IntentSpec> ::= tout:T_OUT  :production305
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <IntentSpec> ::= tout:T_OUT  :production305
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTIntentSpecNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.IntentSpecNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tout"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <IntentSpec> ::= tout:T_OUT  :production305
         */
        protected ASTIntentSpecNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production305Production PRODUCTION305 = Production305Production.getInstance();

    public static class Production306Production extends Production
    {
        private Production306Production() {;} // Singleton
        private static Production306Production singletonInstance = null;
        public static final Production306Production getInstance() { if (singletonInstance == null) singletonInstance = new Production306Production(); return singletonInstance; }

        public String getDescription() { return "<IntentSpec> ::= tinout:T_INOUT  :production306"; }

        /**
         * Reduce by <IntentSpec> ::= tinout:T_INOUT  :production306
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <IntentSpec> ::= tinout:T_INOUT  :production306
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTIntentSpecNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.IntentSpecNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tinout"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <IntentSpec> ::= tinout:T_INOUT  :production306
         */
        protected ASTIntentSpecNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production306Production PRODUCTION306 = Production306Production.getInstance();

    public static class Production307Production extends Production
    {
        private Production307Production() {;} // Singleton
        private static Production307Production singletonInstance = null;
        public static final Production307Production getInstance() { if (singletonInstance == null) singletonInstance = new Production307Production(); return singletonInstance; }

        public String getDescription() { return "<IntentSpec> ::= tin:T_IN tout:T_OUT  :production307"; }

        /**
         * Reduce by <IntentSpec> ::= tin:T_IN tout:T_OUT  :production307
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <IntentSpec> ::= tin:T_IN tout:T_OUT  :production307
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTIntentSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.IntentSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tin"))
                return 0;
            else
                if (name.equals("tout"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <IntentSpec> ::= tin:T_IN tout:T_OUT  :production307
         */
        protected ASTIntentSpecNode userAction(Token v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production307Production PRODUCTION307 = Production307Production.getInstance();

    public static class Production308Production extends Production
    {
        private Production308Production() {;} // Singleton
        private static Production308Production singletonInstance = null;
        public static final Production308Production getInstance() { if (singletonInstance == null) singletonInstance = new Production308Production(); return singletonInstance; }

        public String getDescription() { return "<ArraySpec> ::= ExplicitShapeSpecList:<ExplicitShapeSpecList>  :production308"; }

        /**
         * Reduce by <ArraySpec> ::= ExplicitShapeSpecList:<ExplicitShapeSpecList>  :production308
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ArraySpec> ::= ExplicitShapeSpecList:<ExplicitShapeSpecList>  :production308
            ASTExplicitShapeSpecListNode v1 = (ASTExplicitShapeSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTArraySpecNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ArraySpecNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ExplicitShapeSpecList"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ArraySpec> ::= ExplicitShapeSpecList:<ExplicitShapeSpecList>  :production308
         */
        protected ASTArraySpecNode userAction(ASTExplicitShapeSpecListNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production308Production PRODUCTION308 = Production308Production.getInstance();

    public static class Production309Production extends Production
    {
        private Production309Production() {;} // Singleton
        private static Production309Production singletonInstance = null;
        public static final Production309Production getInstance() { if (singletonInstance == null) singletonInstance = new Production309Production(); return singletonInstance; }

        public String getDescription() { return "<ArraySpec> ::= AssumedSizeSpec:<AssumedSizeSpec>  :production309"; }

        /**
         * Reduce by <ArraySpec> ::= AssumedSizeSpec:<AssumedSizeSpec>  :production309
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ArraySpec> ::= AssumedSizeSpec:<AssumedSizeSpec>  :production309
            ASTAssumedSizeSpecNode v1 = (ASTAssumedSizeSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTArraySpecNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ArraySpecNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("AssumedSizeSpec"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ArraySpec> ::= AssumedSizeSpec:<AssumedSizeSpec>  :production309
         */
        protected ASTArraySpecNode userAction(ASTAssumedSizeSpecNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production309Production PRODUCTION309 = Production309Production.getInstance();

    public static class Production310Production extends Production
    {
        private Production310Production() {;} // Singleton
        private static Production310Production singletonInstance = null;
        public static final Production310Production getInstance() { if (singletonInstance == null) singletonInstance = new Production310Production(); return singletonInstance; }

        public String getDescription() { return "<ArraySpec> ::= AssumedShapeSpecList:<AssumedShapeSpecList>  :production310"; }

        /**
         * Reduce by <ArraySpec> ::= AssumedShapeSpecList:<AssumedShapeSpecList>  :production310
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ArraySpec> ::= AssumedShapeSpecList:<AssumedShapeSpecList>  :production310
            ASTAssumedShapeSpecListNode v1 = (ASTAssumedShapeSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTArraySpecNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ArraySpecNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("AssumedShapeSpecList"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ArraySpec> ::= AssumedShapeSpecList:<AssumedShapeSpecList>  :production310
         */
        protected ASTArraySpecNode userAction(ASTAssumedShapeSpecListNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production310Production PRODUCTION310 = Production310Production.getInstance();

    public static class Production311Production extends Production
    {
        private Production311Production() {;} // Singleton
        private static Production311Production singletonInstance = null;
        public static final Production311Production getInstance() { if (singletonInstance == null) singletonInstance = new Production311Production(); return singletonInstance; }

        public String getDescription() { return "<ArraySpec> ::= DeferredShapeSpecList:<DeferredShapeSpecList>  :production311"; }

        /**
         * Reduce by <ArraySpec> ::= DeferredShapeSpecList:<DeferredShapeSpecList>  :production311
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ArraySpec> ::= DeferredShapeSpecList:<DeferredShapeSpecList>  :production311
            ASTDeferredShapeSpecListNode v1 = (ASTDeferredShapeSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTArraySpecNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ArraySpecNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("DeferredShapeSpecList"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ArraySpec> ::= DeferredShapeSpecList:<DeferredShapeSpecList>  :production311
         */
        protected ASTArraySpecNode userAction(ASTDeferredShapeSpecListNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production311Production PRODUCTION311 = Production311Production.getInstance();

    public static class Production312Production extends Production
    {
        private Production312Production() {;} // Singleton
        private static Production312Production singletonInstance = null;
        public static final Production312Production getInstance() { if (singletonInstance == null) singletonInstance = new Production312Production(); return singletonInstance; }

        public String getDescription() { return "<AssumedShapeSpecList> ::= LowerBound:<LowerBound> tcolon:T_COLON  :production312"; }

        /**
         * Reduce by <AssumedShapeSpecList> ::= LowerBound:<LowerBound> tcolon:T_COLON  :production312
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssumedShapeSpecList> ::= LowerBound:<LowerBound> tcolon:T_COLON  :production312
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLowerBoundNode v1 = (ASTLowerBoundNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAssumedShapeSpecListNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.AssumedShapeSpecListNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LowerBound"))
                return 0;
            else
                if (name.equals("tcolon"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AssumedShapeSpecList> ::= LowerBound:<LowerBound> tcolon:T_COLON  :production312
         */
        protected ASTAssumedShapeSpecListNode userAction(ASTLowerBoundNode v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production312Production PRODUCTION312 = Production312Production.getInstance();

    public static class Production313Production extends Production
    {
        private Production313Production() {;} // Singleton
        private static Production313Production singletonInstance = null;
        public static final Production313Production getInstance() { if (singletonInstance == null) singletonInstance = new Production313Production(); return singletonInstance; }

        public String getDescription() { return "<AssumedShapeSpecList> ::= DeferredShapeSpecList:<DeferredShapeSpecList> tcomma:T_COMMA LowerBound:<LowerBound> tcolon:T_COLON  :production313"; }

        /**
         * Reduce by <AssumedShapeSpecList> ::= DeferredShapeSpecList:<DeferredShapeSpecList> tcomma:T_COMMA LowerBound:<LowerBound> tcolon:T_COLON  :production313
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssumedShapeSpecList> ::= DeferredShapeSpecList:<DeferredShapeSpecList> tcomma:T_COMMA LowerBound:<LowerBound> tcolon:T_COLON  :production313
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLowerBoundNode v3 = (ASTLowerBoundNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDeferredShapeSpecListNode v1 = (ASTDeferredShapeSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAssumedShapeSpecListNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.AssumedShapeSpecListNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("DeferredShapeSpecList"))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("LowerBound"))
                        return 2;
                    else
                        if (name.equals("tcolon"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AssumedShapeSpecList> ::= DeferredShapeSpecList:<DeferredShapeSpecList> tcomma:T_COMMA LowerBound:<LowerBound> tcolon:T_COLON  :production313
         */
        protected ASTAssumedShapeSpecListNode userAction(ASTDeferredShapeSpecListNode v1, Token v2, ASTLowerBoundNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production313Production PRODUCTION313 = Production313Production.getInstance();

    public static class Production314Production extends Production
    {
        private Production314Production() {;} // Singleton
        private static Production314Production singletonInstance = null;
        public static final Production314Production getInstance() { if (singletonInstance == null) singletonInstance = new Production314Production(); return singletonInstance; }

        public String getDescription() { return "<AssumedShapeSpecList> ::= @:<AssumedShapeSpecList> tcomma:T_COMMA AssumedShapeSpec:<AssumedShapeSpec>  :production314"; }

        /**
         * Reduce by <AssumedShapeSpecList> ::= @:<AssumedShapeSpecList> tcomma:T_COMMA AssumedShapeSpec:<AssumedShapeSpec>  :production314
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssumedShapeSpecList> ::= @:<AssumedShapeSpecList> tcomma:T_COMMA AssumedShapeSpec:<AssumedShapeSpec>  :production314
            ASTAssumedShapeSpecNode v3 = (ASTAssumedShapeSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTAssumedShapeSpecListNode v1 = (ASTAssumedShapeSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAssumedShapeSpecListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.AssumedShapeSpecListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("AssumedShapeSpec"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AssumedShapeSpecList> ::= @:<AssumedShapeSpecList> tcomma:T_COMMA AssumedShapeSpec:<AssumedShapeSpec>  :production314
         */
        protected ASTAssumedShapeSpecListNode userAction(ASTAssumedShapeSpecListNode v1, Token v2, ASTAssumedShapeSpecNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production314Production PRODUCTION314 = Production314Production.getInstance();

    public static class Production315Production extends Production
    {
        private Production315Production() {;} // Singleton
        private static Production315Production singletonInstance = null;
        public static final Production315Production getInstance() { if (singletonInstance == null) singletonInstance = new Production315Production(); return singletonInstance; }

        public String getDescription() { return "<ExplicitShapeSpecList> ::= ExplicitShapeSpec:<ExplicitShapeSpec>  :production315"; }

        /**
         * Reduce by <ExplicitShapeSpecList> ::= ExplicitShapeSpec:<ExplicitShapeSpec>  :production315
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ExplicitShapeSpecList> ::= ExplicitShapeSpec:<ExplicitShapeSpec>  :production315
            ASTExplicitShapeSpecNode v1 = (ASTExplicitShapeSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTExplicitShapeSpecListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ExplicitShapeSpecListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ExplicitShapeSpec"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ExplicitShapeSpecList> ::= ExplicitShapeSpec:<ExplicitShapeSpec>  :production315
         */
        protected ASTExplicitShapeSpecListNode userAction(ASTExplicitShapeSpecNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production315Production PRODUCTION315 = Production315Production.getInstance();

    public static class Production316Production extends Production
    {
        private Production316Production() {;} // Singleton
        private static Production316Production singletonInstance = null;
        public static final Production316Production getInstance() { if (singletonInstance == null) singletonInstance = new Production316Production(); return singletonInstance; }

        public String getDescription() { return "<ExplicitShapeSpecList> ::= @:<ExplicitShapeSpecList> tcomma:T_COMMA ExplicitShapeSpec:<ExplicitShapeSpec>  :production316"; }

        /**
         * Reduce by <ExplicitShapeSpecList> ::= @:<ExplicitShapeSpecList> tcomma:T_COMMA ExplicitShapeSpec:<ExplicitShapeSpec>  :production316
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ExplicitShapeSpecList> ::= @:<ExplicitShapeSpecList> tcomma:T_COMMA ExplicitShapeSpec:<ExplicitShapeSpec>  :production316
            ASTExplicitShapeSpecNode v3 = (ASTExplicitShapeSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExplicitShapeSpecListNode v1 = (ASTExplicitShapeSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTExplicitShapeSpecListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.ExplicitShapeSpecListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("ExplicitShapeSpec"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ExplicitShapeSpecList> ::= @:<ExplicitShapeSpecList> tcomma:T_COMMA ExplicitShapeSpec:<ExplicitShapeSpec>  :production316
         */
        protected ASTExplicitShapeSpecListNode userAction(ASTExplicitShapeSpecListNode v1, Token v2, ASTExplicitShapeSpecNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production316Production PRODUCTION316 = Production316Production.getInstance();

    public static class Production317Production extends Production
    {
        private Production317Production() {;} // Singleton
        private static Production317Production singletonInstance = null;
        public static final Production317Production getInstance() { if (singletonInstance == null) singletonInstance = new Production317Production(); return singletonInstance; }

        public String getDescription() { return "<ExplicitShapeSpec> ::= LowerBound:<LowerBound> tcolon:T_COLON UpperBound:<UpperBound>  :production317"; }

        /**
         * Reduce by <ExplicitShapeSpec> ::= LowerBound:<LowerBound> tcolon:T_COLON UpperBound:<UpperBound>  :production317
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ExplicitShapeSpec> ::= LowerBound:<LowerBound> tcolon:T_COLON UpperBound:<UpperBound>  :production317
            ASTUpperBoundNode v3 = (ASTUpperBoundNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLowerBoundNode v1 = (ASTLowerBoundNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTExplicitShapeSpecNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.ExplicitShapeSpecNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LowerBound"))
                return 0;
            else
                if (name.equals("tcolon"))
                    return 1;
                else
                    if (name.equals("UpperBound"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ExplicitShapeSpec> ::= LowerBound:<LowerBound> tcolon:T_COLON UpperBound:<UpperBound>  :production317
         */
        protected ASTExplicitShapeSpecNode userAction(ASTLowerBoundNode v1, Token v2, ASTUpperBoundNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production317Production PRODUCTION317 = Production317Production.getInstance();

    public static class Production318Production extends Production
    {
        private Production318Production() {;} // Singleton
        private static Production318Production singletonInstance = null;
        public static final Production318Production getInstance() { if (singletonInstance == null) singletonInstance = new Production318Production(); return singletonInstance; }

        public String getDescription() { return "<ExplicitShapeSpec> ::= UpperBound:<UpperBound>  :production318"; }

        /**
         * Reduce by <ExplicitShapeSpec> ::= UpperBound:<UpperBound>  :production318
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ExplicitShapeSpec> ::= UpperBound:<UpperBound>  :production318
            ASTUpperBoundNode v1 = (ASTUpperBoundNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTExplicitShapeSpecNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ExplicitShapeSpecNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("UpperBound"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ExplicitShapeSpec> ::= UpperBound:<UpperBound>  :production318
         */
        protected ASTExplicitShapeSpecNode userAction(ASTUpperBoundNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production318Production PRODUCTION318 = Production318Production.getInstance();

    public static class Production319Production extends Production
    {
        private Production319Production() {;} // Singleton
        private static Production319Production singletonInstance = null;
        public static final Production319Production getInstance() { if (singletonInstance == null) singletonInstance = new Production319Production(); return singletonInstance; }

        public String getDescription() { return "<LowerBound> ::= Expr:<Expr>  :production319"; }

        /**
         * Reduce by <LowerBound> ::= Expr:<Expr>  :production319
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <LowerBound> ::= Expr:<Expr>  :production319
            ASTExprNode v1 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTLowerBoundNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.LowerBoundNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Expr"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <LowerBound> ::= Expr:<Expr>  :production319
         */
        protected ASTLowerBoundNode userAction(ASTExprNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production319Production PRODUCTION319 = Production319Production.getInstance();

    public static class Production320Production extends Production
    {
        private Production320Production() {;} // Singleton
        private static Production320Production singletonInstance = null;
        public static final Production320Production getInstance() { if (singletonInstance == null) singletonInstance = new Production320Production(); return singletonInstance; }

        public String getDescription() { return "<UpperBound> ::= Expr:<Expr>  :production320"; }

        /**
         * Reduce by <UpperBound> ::= Expr:<Expr>  :production320
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UpperBound> ::= Expr:<Expr>  :production320
            ASTExprNode v1 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTUpperBoundNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.UpperBoundNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Expr"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <UpperBound> ::= Expr:<Expr>  :production320
         */
        protected ASTUpperBoundNode userAction(ASTExprNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production320Production PRODUCTION320 = Production320Production.getInstance();

    public static class Production321Production extends Production
    {
        private Production321Production() {;} // Singleton
        private static Production321Production singletonInstance = null;
        public static final Production321Production getInstance() { if (singletonInstance == null) singletonInstance = new Production321Production(); return singletonInstance; }

        public String getDescription() { return "<AssumedShapeSpec> ::= LowerBound:<LowerBound> tcolon:T_COLON  :production321"; }

        /**
         * Reduce by <AssumedShapeSpec> ::= LowerBound:<LowerBound> tcolon:T_COLON  :production321
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssumedShapeSpec> ::= LowerBound:<LowerBound> tcolon:T_COLON  :production321
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLowerBoundNode v1 = (ASTLowerBoundNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAssumedShapeSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.AssumedShapeSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LowerBound"))
                return 0;
            else
                if (name.equals("tcolon"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AssumedShapeSpec> ::= LowerBound:<LowerBound> tcolon:T_COLON  :production321
         */
        protected ASTAssumedShapeSpecNode userAction(ASTLowerBoundNode v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production321Production PRODUCTION321 = Production321Production.getInstance();

    public static class Production322Production extends Production
    {
        private Production322Production() {;} // Singleton
        private static Production322Production singletonInstance = null;
        public static final Production322Production getInstance() { if (singletonInstance == null) singletonInstance = new Production322Production(); return singletonInstance; }

        public String getDescription() { return "<AssumedShapeSpec> ::= tcolon:T_COLON  :production322"; }

        /**
         * Reduce by <AssumedShapeSpec> ::= tcolon:T_COLON  :production322
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssumedShapeSpec> ::= tcolon:T_COLON  :production322
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAssumedShapeSpecNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.AssumedShapeSpecNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tcolon"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AssumedShapeSpec> ::= tcolon:T_COLON  :production322
         */
        protected ASTAssumedShapeSpecNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production322Production PRODUCTION322 = Production322Production.getInstance();

    public static class Production323Production extends Production
    {
        private Production323Production() {;} // Singleton
        private static Production323Production singletonInstance = null;
        public static final Production323Production getInstance() { if (singletonInstance == null) singletonInstance = new Production323Production(); return singletonInstance; }

        public String getDescription() { return "<DeferredShapeSpecList> ::= DeferredShapeSpec:<DeferredShapeSpec>  :production323"; }

        /**
         * Reduce by <DeferredShapeSpecList> ::= DeferredShapeSpec:<DeferredShapeSpec>  :production323
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DeferredShapeSpecList> ::= DeferredShapeSpec:<DeferredShapeSpec>  :production323
            ASTDeferredShapeSpecNode v1 = (ASTDeferredShapeSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDeferredShapeSpecListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.DeferredShapeSpecListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("DeferredShapeSpec"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DeferredShapeSpecList> ::= DeferredShapeSpec:<DeferredShapeSpec>  :production323
         */
        protected ASTDeferredShapeSpecListNode userAction(ASTDeferredShapeSpecNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production323Production PRODUCTION323 = Production323Production.getInstance();

    public static class Production324Production extends Production
    {
        private Production324Production() {;} // Singleton
        private static Production324Production singletonInstance = null;
        public static final Production324Production getInstance() { if (singletonInstance == null) singletonInstance = new Production324Production(); return singletonInstance; }

        public String getDescription() { return "<DeferredShapeSpecList> ::= @:<DeferredShapeSpecList> tcomma:T_COMMA DeferredShapeSpec:<DeferredShapeSpec>  :production324"; }

        /**
         * Reduce by <DeferredShapeSpecList> ::= @:<DeferredShapeSpecList> tcomma:T_COMMA DeferredShapeSpec:<DeferredShapeSpec>  :production324
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DeferredShapeSpecList> ::= @:<DeferredShapeSpecList> tcomma:T_COMMA DeferredShapeSpec:<DeferredShapeSpec>  :production324
            ASTDeferredShapeSpecNode v3 = (ASTDeferredShapeSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDeferredShapeSpecListNode v1 = (ASTDeferredShapeSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDeferredShapeSpecListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.DeferredShapeSpecListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("DeferredShapeSpec"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DeferredShapeSpecList> ::= @:<DeferredShapeSpecList> tcomma:T_COMMA DeferredShapeSpec:<DeferredShapeSpec>  :production324
         */
        protected ASTDeferredShapeSpecListNode userAction(ASTDeferredShapeSpecListNode v1, Token v2, ASTDeferredShapeSpecNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production324Production PRODUCTION324 = Production324Production.getInstance();

    public static class Production325Production extends Production
    {
        private Production325Production() {;} // Singleton
        private static Production325Production singletonInstance = null;
        public static final Production325Production getInstance() { if (singletonInstance == null) singletonInstance = new Production325Production(); return singletonInstance; }

        public String getDescription() { return "<DeferredShapeSpec> ::= tcolon:T_COLON  :production325"; }

        /**
         * Reduce by <DeferredShapeSpec> ::= tcolon:T_COLON  :production325
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DeferredShapeSpec> ::= tcolon:T_COLON  :production325
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDeferredShapeSpecNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.DeferredShapeSpecNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tcolon"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DeferredShapeSpec> ::= tcolon:T_COLON  :production325
         */
        protected ASTDeferredShapeSpecNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production325Production PRODUCTION325 = Production325Production.getInstance();

    public static class Production326Production extends Production
    {
        private Production326Production() {;} // Singleton
        private static Production326Production singletonInstance = null;
        public static final Production326Production getInstance() { if (singletonInstance == null) singletonInstance = new Production326Production(); return singletonInstance; }

        public String getDescription() { return "<AssumedSizeSpec> ::= tasterisk:T_ASTERISK  :production326"; }

        /**
         * Reduce by <AssumedSizeSpec> ::= tasterisk:T_ASTERISK  :production326
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssumedSizeSpec> ::= tasterisk:T_ASTERISK  :production326
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAssumedSizeSpecNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.AssumedSizeSpecNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tasterisk"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AssumedSizeSpec> ::= tasterisk:T_ASTERISK  :production326
         */
        protected ASTAssumedSizeSpecNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production326Production PRODUCTION326 = Production326Production.getInstance();

    public static class Production327Production extends Production
    {
        private Production327Production() {;} // Singleton
        private static Production327Production singletonInstance = null;
        public static final Production327Production getInstance() { if (singletonInstance == null) singletonInstance = new Production327Production(); return singletonInstance; }

        public String getDescription() { return "<AssumedSizeSpec> ::= LowerBound:<LowerBound> tcolon:T_COLON tasterisk:T_ASTERISK  :production327"; }

        /**
         * Reduce by <AssumedSizeSpec> ::= LowerBound:<LowerBound> tcolon:T_COLON tasterisk:T_ASTERISK  :production327
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssumedSizeSpec> ::= LowerBound:<LowerBound> tcolon:T_COLON tasterisk:T_ASTERISK  :production327
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLowerBoundNode v1 = (ASTLowerBoundNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAssumedSizeSpecNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.AssumedSizeSpecNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LowerBound"))
                return 0;
            else
                if (name.equals("tcolon"))
                    return 1;
                else
                    if (name.equals("tasterisk"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AssumedSizeSpec> ::= LowerBound:<LowerBound> tcolon:T_COLON tasterisk:T_ASTERISK  :production327
         */
        protected ASTAssumedSizeSpecNode userAction(ASTLowerBoundNode v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production327Production PRODUCTION327 = Production327Production.getInstance();

    public static class Production328Production extends Production
    {
        private Production328Production() {;} // Singleton
        private static Production328Production singletonInstance = null;
        public static final Production328Production getInstance() { if (singletonInstance == null) singletonInstance = new Production328Production(); return singletonInstance; }

        public String getDescription() { return "<AssumedSizeSpec> ::= ExplicitShapeSpecList:<ExplicitShapeSpecList> tcomma:T_COMMA tasterisk:T_ASTERISK  :production328"; }

        /**
         * Reduce by <AssumedSizeSpec> ::= ExplicitShapeSpecList:<ExplicitShapeSpecList> tcomma:T_COMMA tasterisk:T_ASTERISK  :production328
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssumedSizeSpec> ::= ExplicitShapeSpecList:<ExplicitShapeSpecList> tcomma:T_COMMA tasterisk:T_ASTERISK  :production328
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExplicitShapeSpecListNode v1 = (ASTExplicitShapeSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAssumedSizeSpecNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.AssumedSizeSpecNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ExplicitShapeSpecList"))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("tasterisk"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AssumedSizeSpec> ::= ExplicitShapeSpecList:<ExplicitShapeSpecList> tcomma:T_COMMA tasterisk:T_ASTERISK  :production328
         */
        protected ASTAssumedSizeSpecNode userAction(ASTExplicitShapeSpecListNode v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production328Production PRODUCTION328 = Production328Production.getInstance();

    public static class Production329Production extends Production
    {
        private Production329Production() {;} // Singleton
        private static Production329Production singletonInstance = null;
        public static final Production329Production getInstance() { if (singletonInstance == null) singletonInstance = new Production329Production(); return singletonInstance; }

        public String getDescription() { return "<AssumedSizeSpec> ::= ExplicitShapeSpecList:<ExplicitShapeSpecList> tcomma:T_COMMA LowerBound:<LowerBound> tcolon:T_COLON tasterisk:T_ASTERISK  :production329"; }

        /**
         * Reduce by <AssumedSizeSpec> ::= ExplicitShapeSpecList:<ExplicitShapeSpecList> tcomma:T_COMMA LowerBound:<LowerBound> tcolon:T_COLON tasterisk:T_ASTERISK  :production329
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssumedSizeSpec> ::= ExplicitShapeSpecList:<ExplicitShapeSpecList> tcomma:T_COMMA LowerBound:<LowerBound> tcolon:T_COLON tasterisk:T_ASTERISK  :production329
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLowerBoundNode v3 = (ASTLowerBoundNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExplicitShapeSpecListNode v1 = (ASTExplicitShapeSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAssumedSizeSpecNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.AssumedSizeSpecNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ExplicitShapeSpecList"))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("LowerBound"))
                        return 2;
                    else
                        if (name.equals("tcolon"))
                            return 3;
                        else
                            if (name.equals("tasterisk"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AssumedSizeSpec> ::= ExplicitShapeSpecList:<ExplicitShapeSpecList> tcomma:T_COMMA LowerBound:<LowerBound> tcolon:T_COLON tasterisk:T_ASTERISK  :production329
         */
        protected ASTAssumedSizeSpecNode userAction(ASTExplicitShapeSpecListNode v1, Token v2, ASTLowerBoundNode v3, Token v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production329Production PRODUCTION329 = Production329Production.getInstance();

    public static class Production330Production extends Production
    {
        private Production330Production() {;} // Singleton
        private static Production330Production singletonInstance = null;
        public static final Production330Production getInstance() { if (singletonInstance == null) singletonInstance = new Production330Production(); return singletonInstance; }

        public String getDescription() { return "<IntentStmt> ::= tintent:T_INTENT tlparen:T_LPAREN IntentSpec:<IntentSpec> trparen:T_RPAREN IntentParList:<IntentParList> teos:T_EOS  :production330"; }

        /**
         * Reduce by <IntentStmt> ::= tintent:T_INTENT tlparen:T_LPAREN IntentSpec:<IntentSpec> trparen:T_RPAREN IntentParList:<IntentParList> teos:T_EOS  :production330
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <IntentStmt> ::= tintent:T_INTENT tlparen:T_LPAREN IntentSpec:<IntentSpec> trparen:T_RPAREN IntentParList:<IntentParList> teos:T_EOS  :production330
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTIntentParListNode v5 = (ASTIntentParListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTIntentSpecNode v3 = (ASTIntentSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTIntentStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.IntentStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tintent"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("IntentSpec"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("IntentParList"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <IntentStmt> ::= tintent:T_INTENT tlparen:T_LPAREN IntentSpec:<IntentSpec> trparen:T_RPAREN IntentParList:<IntentParList> teos:T_EOS  :production330
         */
        protected ASTIntentStmtNode userAction(Token v1, Token v2, ASTIntentSpecNode v3, Token v4, ASTIntentParListNode v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production330Production PRODUCTION330 = Production330Production.getInstance();

    public static class Production331Production extends Production
    {
        private Production331Production() {;} // Singleton
        private static Production331Production singletonInstance = null;
        public static final Production331Production getInstance() { if (singletonInstance == null) singletonInstance = new Production331Production(); return singletonInstance; }

        public String getDescription() { return "<IntentStmt> ::= tintent:T_INTENT tlparen:T_LPAREN IntentSpec:<IntentSpec> trparen:T_RPAREN <IntentStmt@7> IntentParList:<IntentParList> teos:T_EOS  :production331"; }

        /**
         * Reduce by <IntentStmt> ::= tintent:T_INTENT tlparen:T_LPAREN IntentSpec:<IntentSpec> trparen:T_RPAREN <IntentStmt@7> IntentParList:<IntentParList> teos:T_EOS  :production331
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <IntentStmt> ::= tintent:T_INTENT tlparen:T_LPAREN IntentSpec:<IntentSpec> trparen:T_RPAREN <IntentStmt@7> IntentParList:<IntentParList> teos:T_EOS  :production331
            Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTIntentParListNode v7 = (ASTIntentParListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTIntentSpecNode v3 = (ASTIntentSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTIntentStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8);

            // The production has 7 symbols on its RHS
            parser.reduce(Nonterminal.IntentStmtNonterminal.getInstance(), 7, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tintent"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("IntentSpec"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("tcolon"))
                                return 4;
                            else
                                if (name.equals("tcolon2"))
                                    return 5;
                                else
                                    if (name.equals("IntentParList"))
                                        return 6;
                                    else
                                        if (name.equals("teos"))
                                            return 7;
                                        else
                                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <IntentStmt> ::= tintent:T_INTENT tlparen:T_LPAREN IntentSpec:<IntentSpec> trparen:T_RPAREN <IntentStmt@7> IntentParList:<IntentParList> teos:T_EOS  :production331
         */
        protected ASTIntentStmtNode userAction(Token v1, Token v2, ASTIntentSpecNode v3, Token v4, Token v5, Token v6, ASTIntentParListNode v7, Token v8)
        {
            return null;
        }
    }
    public static final Productions.Production331Production PRODUCTION331 = Production331Production.getInstance();

    public static class Production332Production extends Production
    {
        private Production332Production() {;} // Singleton
        private static Production332Production singletonInstance = null;
        public static final Production332Production getInstance() { if (singletonInstance == null) singletonInstance = new Production332Production(); return singletonInstance; }

        public String getDescription() { return "<IntentStmt> ::= LblDef:<LblDef> tintent:T_INTENT tlparen:T_LPAREN IntentSpec:<IntentSpec> trparen:T_RPAREN IntentParList:<IntentParList> teos:T_EOS  :production332"; }

        /**
         * Reduce by <IntentStmt> ::= LblDef:<LblDef> tintent:T_INTENT tlparen:T_LPAREN IntentSpec:<IntentSpec> trparen:T_RPAREN IntentParList:<IntentParList> teos:T_EOS  :production332
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <IntentStmt> ::= LblDef:<LblDef> tintent:T_INTENT tlparen:T_LPAREN IntentSpec:<IntentSpec> trparen:T_RPAREN IntentParList:<IntentParList> teos:T_EOS  :production332
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTIntentParListNode v6 = (ASTIntentParListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTIntentSpecNode v4 = (ASTIntentSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTIntentStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7);

            // The production has 7 symbols on its RHS
            parser.reduce(Nonterminal.IntentStmtNonterminal.getInstance(), 7, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tintent"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("IntentSpec"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("IntentParList"))
                                    return 5;
                                else
                                    if (name.equals("teos"))
                                        return 6;
                                    else
                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <IntentStmt> ::= LblDef:<LblDef> tintent:T_INTENT tlparen:T_LPAREN IntentSpec:<IntentSpec> trparen:T_RPAREN IntentParList:<IntentParList> teos:T_EOS  :production332
         */
        protected ASTIntentStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, ASTIntentSpecNode v4, Token v5, ASTIntentParListNode v6, Token v7)
        {
            return null;
        }
    }
    public static final Productions.Production332Production PRODUCTION332 = Production332Production.getInstance();

    public static class Production333Production extends Production
    {
        private Production333Production() {;} // Singleton
        private static Production333Production singletonInstance = null;
        public static final Production333Production getInstance() { if (singletonInstance == null) singletonInstance = new Production333Production(); return singletonInstance; }

        public String getDescription() { return "<IntentStmt> ::= LblDef:<LblDef> tintent:T_INTENT tlparen:T_LPAREN IntentSpec:<IntentSpec> trparen:T_RPAREN <IntentStmt@7> IntentParList:<IntentParList> teos:T_EOS  :production333"; }

        /**
         * Reduce by <IntentStmt> ::= LblDef:<LblDef> tintent:T_INTENT tlparen:T_LPAREN IntentSpec:<IntentSpec> trparen:T_RPAREN <IntentStmt@7> IntentParList:<IntentParList> teos:T_EOS  :production333
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <IntentStmt> ::= LblDef:<LblDef> tintent:T_INTENT tlparen:T_LPAREN IntentSpec:<IntentSpec> trparen:T_RPAREN <IntentStmt@7> IntentParList:<IntentParList> teos:T_EOS  :production333
            Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTIntentParListNode v8 = (ASTIntentParListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTIntentSpecNode v4 = (ASTIntentSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTIntentStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8, v9);

            // The production has 8 symbols on its RHS
            parser.reduce(Nonterminal.IntentStmtNonterminal.getInstance(), 8, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tintent"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("IntentSpec"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("tcolon"))
                                    return 5;
                                else
                                    if (name.equals("tcolon2"))
                                        return 6;
                                    else
                                        if (name.equals("IntentParList"))
                                            return 7;
                                        else
                                            if (name.equals("teos"))
                                                return 8;
                                            else
                                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <IntentStmt> ::= LblDef:<LblDef> tintent:T_INTENT tlparen:T_LPAREN IntentSpec:<IntentSpec> trparen:T_RPAREN <IntentStmt@7> IntentParList:<IntentParList> teos:T_EOS  :production333
         */
        protected ASTIntentStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, ASTIntentSpecNode v4, Token v5, Token v6, Token v7, ASTIntentParListNode v8, Token v9)
        {
            return null;
        }
    }
    public static final Productions.Production333Production PRODUCTION333 = Production333Production.getInstance();

    public static class Production334Production extends Production
    {
        private Production334Production() {;} // Singleton
        private static Production334Production singletonInstance = null;
        public static final Production334Production getInstance() { if (singletonInstance == null) singletonInstance = new Production334Production(); return singletonInstance; }

        public String getDescription() { return "<IntentParList> ::= IntentPar:<IntentPar>  :production334"; }

        /**
         * Reduce by <IntentParList> ::= IntentPar:<IntentPar>  :production334
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <IntentParList> ::= IntentPar:<IntentPar>  :production334
            ASTIntentParNode v1 = (ASTIntentParNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTIntentParListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.IntentParListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("IntentPar"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <IntentParList> ::= IntentPar:<IntentPar>  :production334
         */
        protected ASTIntentParListNode userAction(ASTIntentParNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production334Production PRODUCTION334 = Production334Production.getInstance();

    public static class Production335Production extends Production
    {
        private Production335Production() {;} // Singleton
        private static Production335Production singletonInstance = null;
        public static final Production335Production getInstance() { if (singletonInstance == null) singletonInstance = new Production335Production(); return singletonInstance; }

        public String getDescription() { return "<IntentParList> ::= @:<IntentParList> tcomma:T_COMMA IntentPar:<IntentPar>  :production335"; }

        /**
         * Reduce by <IntentParList> ::= @:<IntentParList> tcomma:T_COMMA IntentPar:<IntentPar>  :production335
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <IntentParList> ::= @:<IntentParList> tcomma:T_COMMA IntentPar:<IntentPar>  :production335
            ASTIntentParNode v3 = (ASTIntentParNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTIntentParListNode v1 = (ASTIntentParListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTIntentParListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.IntentParListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("IntentPar"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <IntentParList> ::= @:<IntentParList> tcomma:T_COMMA IntentPar:<IntentPar>  :production335
         */
        protected ASTIntentParListNode userAction(ASTIntentParListNode v1, Token v2, ASTIntentParNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production335Production PRODUCTION335 = Production335Production.getInstance();

    public static class Production336Production extends Production
    {
        private Production336Production() {;} // Singleton
        private static Production336Production singletonInstance = null;
        public static final Production336Production getInstance() { if (singletonInstance == null) singletonInstance = new Production336Production(); return singletonInstance; }

        public String getDescription() { return "<IntentPar> ::= DummyArgName:<DummyArgName>  :production336"; }

        /**
         * Reduce by <IntentPar> ::= DummyArgName:<DummyArgName>  :production336
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <IntentPar> ::= DummyArgName:<DummyArgName>  :production336
            ASTDummyArgNameNode v1 = (ASTDummyArgNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTIntentParNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.IntentParNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("DummyArgName"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <IntentPar> ::= DummyArgName:<DummyArgName>  :production336
         */
        protected ASTIntentParNode userAction(ASTDummyArgNameNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production336Production PRODUCTION336 = Production336Production.getInstance();

    public static class Production337Production extends Production
    {
        private Production337Production() {;} // Singleton
        private static Production337Production singletonInstance = null;
        public static final Production337Production getInstance() { if (singletonInstance == null) singletonInstance = new Production337Production(); return singletonInstance; }

        public String getDescription() { return "<OptionalStmt> ::= toptional:T_OPTIONAL OptionalParList:<OptionalParList> teos:T_EOS  :production337"; }

        /**
         * Reduce by <OptionalStmt> ::= toptional:T_OPTIONAL OptionalParList:<OptionalParList> teos:T_EOS  :production337
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <OptionalStmt> ::= toptional:T_OPTIONAL OptionalParList:<OptionalParList> teos:T_EOS  :production337
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTOptionalParListNode v2 = (ASTOptionalParListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTOptionalStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.OptionalStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("toptional"))
                return 0;
            else
                if (name.equals("OptionalParList"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <OptionalStmt> ::= toptional:T_OPTIONAL OptionalParList:<OptionalParList> teos:T_EOS  :production337
         */
        protected ASTOptionalStmtNode userAction(Token v1, ASTOptionalParListNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production337Production PRODUCTION337 = Production337Production.getInstance();

    public static class Production338Production extends Production
    {
        private Production338Production() {;} // Singleton
        private static Production338Production singletonInstance = null;
        public static final Production338Production getInstance() { if (singletonInstance == null) singletonInstance = new Production338Production(); return singletonInstance; }

        public String getDescription() { return "<OptionalStmt> ::= toptional:T_OPTIONAL <OptionalStmt@8> OptionalParList:<OptionalParList> teos:T_EOS  :production338"; }

        /**
         * Reduce by <OptionalStmt> ::= toptional:T_OPTIONAL <OptionalStmt@8> OptionalParList:<OptionalParList> teos:T_EOS  :production338
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <OptionalStmt> ::= toptional:T_OPTIONAL <OptionalStmt@8> OptionalParList:<OptionalParList> teos:T_EOS  :production338
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTOptionalParListNode v4 = (ASTOptionalParListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTOptionalStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.OptionalStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("toptional"))
                return 0;
            else
                if (name.equals("tcolon"))
                    return 1;
                else
                    if (name.equals("tcolon2"))
                        return 2;
                    else
                        if (name.equals("OptionalParList"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <OptionalStmt> ::= toptional:T_OPTIONAL <OptionalStmt@8> OptionalParList:<OptionalParList> teos:T_EOS  :production338
         */
        protected ASTOptionalStmtNode userAction(Token v1, Token v2, Token v3, ASTOptionalParListNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production338Production PRODUCTION338 = Production338Production.getInstance();

    public static class Production339Production extends Production
    {
        private Production339Production() {;} // Singleton
        private static Production339Production singletonInstance = null;
        public static final Production339Production getInstance() { if (singletonInstance == null) singletonInstance = new Production339Production(); return singletonInstance; }

        public String getDescription() { return "<OptionalStmt> ::= LblDef:<LblDef> toptional:T_OPTIONAL OptionalParList:<OptionalParList> teos:T_EOS  :production339"; }

        /**
         * Reduce by <OptionalStmt> ::= LblDef:<LblDef> toptional:T_OPTIONAL OptionalParList:<OptionalParList> teos:T_EOS  :production339
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <OptionalStmt> ::= LblDef:<LblDef> toptional:T_OPTIONAL OptionalParList:<OptionalParList> teos:T_EOS  :production339
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTOptionalParListNode v3 = (ASTOptionalParListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTOptionalStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.OptionalStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("toptional"))
                    return 1;
                else
                    if (name.equals("OptionalParList"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <OptionalStmt> ::= LblDef:<LblDef> toptional:T_OPTIONAL OptionalParList:<OptionalParList> teos:T_EOS  :production339
         */
        protected ASTOptionalStmtNode userAction(ASTLblDefNode v1, Token v2, ASTOptionalParListNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production339Production PRODUCTION339 = Production339Production.getInstance();

    public static class Production340Production extends Production
    {
        private Production340Production() {;} // Singleton
        private static Production340Production singletonInstance = null;
        public static final Production340Production getInstance() { if (singletonInstance == null) singletonInstance = new Production340Production(); return singletonInstance; }

        public String getDescription() { return "<OptionalStmt> ::= LblDef:<LblDef> toptional:T_OPTIONAL <OptionalStmt@8> OptionalParList:<OptionalParList> teos:T_EOS  :production340"; }

        /**
         * Reduce by <OptionalStmt> ::= LblDef:<LblDef> toptional:T_OPTIONAL <OptionalStmt@8> OptionalParList:<OptionalParList> teos:T_EOS  :production340
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <OptionalStmt> ::= LblDef:<LblDef> toptional:T_OPTIONAL <OptionalStmt@8> OptionalParList:<OptionalParList> teos:T_EOS  :production340
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTOptionalParListNode v5 = (ASTOptionalParListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTOptionalStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.OptionalStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("toptional"))
                    return 1;
                else
                    if (name.equals("tcolon"))
                        return 2;
                    else
                        if (name.equals("tcolon2"))
                            return 3;
                        else
                            if (name.equals("OptionalParList"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <OptionalStmt> ::= LblDef:<LblDef> toptional:T_OPTIONAL <OptionalStmt@8> OptionalParList:<OptionalParList> teos:T_EOS  :production340
         */
        protected ASTOptionalStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, Token v4, ASTOptionalParListNode v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production340Production PRODUCTION340 = Production340Production.getInstance();

    public static class Production341Production extends Production
    {
        private Production341Production() {;} // Singleton
        private static Production341Production singletonInstance = null;
        public static final Production341Production getInstance() { if (singletonInstance == null) singletonInstance = new Production341Production(); return singletonInstance; }

        public String getDescription() { return "<OptionalParList> ::= OptionalPar:<OptionalPar>  :production341"; }

        /**
         * Reduce by <OptionalParList> ::= OptionalPar:<OptionalPar>  :production341
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <OptionalParList> ::= OptionalPar:<OptionalPar>  :production341
            ASTOptionalParNode v1 = (ASTOptionalParNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTOptionalParListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.OptionalParListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("OptionalPar"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <OptionalParList> ::= OptionalPar:<OptionalPar>  :production341
         */
        protected ASTOptionalParListNode userAction(ASTOptionalParNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production341Production PRODUCTION341 = Production341Production.getInstance();

    public static class Production342Production extends Production
    {
        private Production342Production() {;} // Singleton
        private static Production342Production singletonInstance = null;
        public static final Production342Production getInstance() { if (singletonInstance == null) singletonInstance = new Production342Production(); return singletonInstance; }

        public String getDescription() { return "<OptionalParList> ::= @:<OptionalParList> tcomma:T_COMMA OptionalPar:<OptionalPar>  :production342"; }

        /**
         * Reduce by <OptionalParList> ::= @:<OptionalParList> tcomma:T_COMMA OptionalPar:<OptionalPar>  :production342
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <OptionalParList> ::= @:<OptionalParList> tcomma:T_COMMA OptionalPar:<OptionalPar>  :production342
            ASTOptionalParNode v3 = (ASTOptionalParNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTOptionalParListNode v1 = (ASTOptionalParListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTOptionalParListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.OptionalParListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("OptionalPar"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <OptionalParList> ::= @:<OptionalParList> tcomma:T_COMMA OptionalPar:<OptionalPar>  :production342
         */
        protected ASTOptionalParListNode userAction(ASTOptionalParListNode v1, Token v2, ASTOptionalParNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production342Production PRODUCTION342 = Production342Production.getInstance();

    public static class Production343Production extends Production
    {
        private Production343Production() {;} // Singleton
        private static Production343Production singletonInstance = null;
        public static final Production343Production getInstance() { if (singletonInstance == null) singletonInstance = new Production343Production(); return singletonInstance; }

        public String getDescription() { return "<OptionalPar> ::= DummyArgName:<DummyArgName>  :production343"; }

        /**
         * Reduce by <OptionalPar> ::= DummyArgName:<DummyArgName>  :production343
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <OptionalPar> ::= DummyArgName:<DummyArgName>  :production343
            ASTDummyArgNameNode v1 = (ASTDummyArgNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTOptionalParNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.OptionalParNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("DummyArgName"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <OptionalPar> ::= DummyArgName:<DummyArgName>  :production343
         */
        protected ASTOptionalParNode userAction(ASTDummyArgNameNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production343Production PRODUCTION343 = Production343Production.getInstance();

    public static class Production344Production extends Production
    {
        private Production344Production() {;} // Singleton
        private static Production344Production singletonInstance = null;
        public static final Production344Production getInstance() { if (singletonInstance == null) singletonInstance = new Production344Production(); return singletonInstance; }

        public String getDescription() { return "<AccessStmt> ::= AccessSpec:<AccessSpec> AccessIdList:<AccessIdList> teos:T_EOS  :production344"; }

        /**
         * Reduce by <AccessStmt> ::= AccessSpec:<AccessSpec> AccessIdList:<AccessIdList> teos:T_EOS  :production344
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AccessStmt> ::= AccessSpec:<AccessSpec> AccessIdList:<AccessIdList> teos:T_EOS  :production344
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTAccessIdListNode v2 = (ASTAccessIdListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTAccessSpecNode v1 = (ASTAccessSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAccessStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.AccessStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("AccessSpec"))
                return 0;
            else
                if (name.equals("AccessIdList"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AccessStmt> ::= AccessSpec:<AccessSpec> AccessIdList:<AccessIdList> teos:T_EOS  :production344
         */
        protected ASTAccessStmtNode userAction(ASTAccessSpecNode v1, ASTAccessIdListNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production344Production PRODUCTION344 = Production344Production.getInstance();

    public static class Production345Production extends Production
    {
        private Production345Production() {;} // Singleton
        private static Production345Production singletonInstance = null;
        public static final Production345Production getInstance() { if (singletonInstance == null) singletonInstance = new Production345Production(); return singletonInstance; }

        public String getDescription() { return "<AccessStmt> ::= AccessSpec:<AccessSpec> <AccessStmt@9> AccessIdList:<AccessIdList> teos:T_EOS  :production345"; }

        /**
         * Reduce by <AccessStmt> ::= AccessSpec:<AccessSpec> <AccessStmt@9> AccessIdList:<AccessIdList> teos:T_EOS  :production345
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AccessStmt> ::= AccessSpec:<AccessSpec> <AccessStmt@9> AccessIdList:<AccessIdList> teos:T_EOS  :production345
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTAccessIdListNode v4 = (ASTAccessIdListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTAccessSpecNode v1 = (ASTAccessSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAccessStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.AccessStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("AccessSpec"))
                return 0;
            else
                if (name.equals("tcolon"))
                    return 1;
                else
                    if (name.equals("tcolon2"))
                        return 2;
                    else
                        if (name.equals("AccessIdList"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AccessStmt> ::= AccessSpec:<AccessSpec> <AccessStmt@9> AccessIdList:<AccessIdList> teos:T_EOS  :production345
         */
        protected ASTAccessStmtNode userAction(ASTAccessSpecNode v1, Token v2, Token v3, ASTAccessIdListNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production345Production PRODUCTION345 = Production345Production.getInstance();

    public static class Production346Production extends Production
    {
        private Production346Production() {;} // Singleton
        private static Production346Production singletonInstance = null;
        public static final Production346Production getInstance() { if (singletonInstance == null) singletonInstance = new Production346Production(); return singletonInstance; }

        public String getDescription() { return "<AccessStmt> ::= LblDef:<LblDef> AccessSpec:<AccessSpec> AccessIdList:<AccessIdList> teos:T_EOS  :production346"; }

        /**
         * Reduce by <AccessStmt> ::= LblDef:<LblDef> AccessSpec:<AccessSpec> AccessIdList:<AccessIdList> teos:T_EOS  :production346
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AccessStmt> ::= LblDef:<LblDef> AccessSpec:<AccessSpec> AccessIdList:<AccessIdList> teos:T_EOS  :production346
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTAccessIdListNode v3 = (ASTAccessIdListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTAccessSpecNode v2 = (ASTAccessSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAccessStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.AccessStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("AccessSpec"))
                    return 1;
                else
                    if (name.equals("AccessIdList"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AccessStmt> ::= LblDef:<LblDef> AccessSpec:<AccessSpec> AccessIdList:<AccessIdList> teos:T_EOS  :production346
         */
        protected ASTAccessStmtNode userAction(ASTLblDefNode v1, ASTAccessSpecNode v2, ASTAccessIdListNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production346Production PRODUCTION346 = Production346Production.getInstance();

    public static class Production347Production extends Production
    {
        private Production347Production() {;} // Singleton
        private static Production347Production singletonInstance = null;
        public static final Production347Production getInstance() { if (singletonInstance == null) singletonInstance = new Production347Production(); return singletonInstance; }

        public String getDescription() { return "<AccessStmt> ::= LblDef:<LblDef> AccessSpec:<AccessSpec> <AccessStmt@9> AccessIdList:<AccessIdList> teos:T_EOS  :production347"; }

        /**
         * Reduce by <AccessStmt> ::= LblDef:<LblDef> AccessSpec:<AccessSpec> <AccessStmt@9> AccessIdList:<AccessIdList> teos:T_EOS  :production347
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AccessStmt> ::= LblDef:<LblDef> AccessSpec:<AccessSpec> <AccessStmt@9> AccessIdList:<AccessIdList> teos:T_EOS  :production347
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTAccessIdListNode v5 = (ASTAccessIdListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTAccessSpecNode v2 = (ASTAccessSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAccessStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.AccessStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("AccessSpec"))
                    return 1;
                else
                    if (name.equals("tcolon"))
                        return 2;
                    else
                        if (name.equals("tcolon2"))
                            return 3;
                        else
                            if (name.equals("AccessIdList"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AccessStmt> ::= LblDef:<LblDef> AccessSpec:<AccessSpec> <AccessStmt@9> AccessIdList:<AccessIdList> teos:T_EOS  :production347
         */
        protected ASTAccessStmtNode userAction(ASTLblDefNode v1, ASTAccessSpecNode v2, Token v3, Token v4, ASTAccessIdListNode v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production347Production PRODUCTION347 = Production347Production.getInstance();

    public static class Production348Production extends Production
    {
        private Production348Production() {;} // Singleton
        private static Production348Production singletonInstance = null;
        public static final Production348Production getInstance() { if (singletonInstance == null) singletonInstance = new Production348Production(); return singletonInstance; }

        public String getDescription() { return "<AccessStmt> ::= AccessSpec:<AccessSpec> teos:T_EOS  :production348"; }

        /**
         * Reduce by <AccessStmt> ::= AccessSpec:<AccessSpec> teos:T_EOS  :production348
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AccessStmt> ::= AccessSpec:<AccessSpec> teos:T_EOS  :production348
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTAccessSpecNode v1 = (ASTAccessSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAccessStmtNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.AccessStmtNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("AccessSpec"))
                return 0;
            else
                if (name.equals("teos"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AccessStmt> ::= AccessSpec:<AccessSpec> teos:T_EOS  :production348
         */
        protected ASTAccessStmtNode userAction(ASTAccessSpecNode v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production348Production PRODUCTION348 = Production348Production.getInstance();

    public static class Production349Production extends Production
    {
        private Production349Production() {;} // Singleton
        private static Production349Production singletonInstance = null;
        public static final Production349Production getInstance() { if (singletonInstance == null) singletonInstance = new Production349Production(); return singletonInstance; }

        public String getDescription() { return "<AccessStmt> ::= LblDef:<LblDef> AccessSpec:<AccessSpec> teos:T_EOS  :production349"; }

        /**
         * Reduce by <AccessStmt> ::= LblDef:<LblDef> AccessSpec:<AccessSpec> teos:T_EOS  :production349
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AccessStmt> ::= LblDef:<LblDef> AccessSpec:<AccessSpec> teos:T_EOS  :production349
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTAccessSpecNode v2 = (ASTAccessSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAccessStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.AccessStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("AccessSpec"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AccessStmt> ::= LblDef:<LblDef> AccessSpec:<AccessSpec> teos:T_EOS  :production349
         */
        protected ASTAccessStmtNode userAction(ASTLblDefNode v1, ASTAccessSpecNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production349Production PRODUCTION349 = Production349Production.getInstance();

    public static class Production350Production extends Production
    {
        private Production350Production() {;} // Singleton
        private static Production350Production singletonInstance = null;
        public static final Production350Production getInstance() { if (singletonInstance == null) singletonInstance = new Production350Production(); return singletonInstance; }

        public String getDescription() { return "<AccessIdList> ::= AccessId:<AccessId>  :production350"; }

        /**
         * Reduce by <AccessIdList> ::= AccessId:<AccessId>  :production350
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AccessIdList> ::= AccessId:<AccessId>  :production350
            ASTAccessIdNode v1 = (ASTAccessIdNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAccessIdListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.AccessIdListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("AccessId"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AccessIdList> ::= AccessId:<AccessId>  :production350
         */
        protected ASTAccessIdListNode userAction(ASTAccessIdNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production350Production PRODUCTION350 = Production350Production.getInstance();

    public static class Production351Production extends Production
    {
        private Production351Production() {;} // Singleton
        private static Production351Production singletonInstance = null;
        public static final Production351Production getInstance() { if (singletonInstance == null) singletonInstance = new Production351Production(); return singletonInstance; }

        public String getDescription() { return "<AccessIdList> ::= @:<AccessIdList> tcomma:T_COMMA AccessId:<AccessId>  :production351"; }

        /**
         * Reduce by <AccessIdList> ::= @:<AccessIdList> tcomma:T_COMMA AccessId:<AccessId>  :production351
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AccessIdList> ::= @:<AccessIdList> tcomma:T_COMMA AccessId:<AccessId>  :production351
            ASTAccessIdNode v3 = (ASTAccessIdNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTAccessIdListNode v1 = (ASTAccessIdListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAccessIdListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.AccessIdListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("AccessId"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AccessIdList> ::= @:<AccessIdList> tcomma:T_COMMA AccessId:<AccessId>  :production351
         */
        protected ASTAccessIdListNode userAction(ASTAccessIdListNode v1, Token v2, ASTAccessIdNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production351Production PRODUCTION351 = Production351Production.getInstance();

    public static class Production352Production extends Production
    {
        private Production352Production() {;} // Singleton
        private static Production352Production singletonInstance = null;
        public static final Production352Production getInstance() { if (singletonInstance == null) singletonInstance = new Production352Production(); return singletonInstance; }

        public String getDescription() { return "<AccessId> ::= GenericName:<GenericName>  :production352"; }

        /**
         * Reduce by <AccessId> ::= GenericName:<GenericName>  :production352
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AccessId> ::= GenericName:<GenericName>  :production352
            ASTGenericNameNode v1 = (ASTGenericNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAccessIdNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.AccessIdNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("GenericName"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AccessId> ::= GenericName:<GenericName>  :production352
         */
        protected ASTAccessIdNode userAction(ASTGenericNameNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production352Production PRODUCTION352 = Production352Production.getInstance();

    public static class Production353Production extends Production
    {
        private Production353Production() {;} // Singleton
        private static Production353Production singletonInstance = null;
        public static final Production353Production getInstance() { if (singletonInstance == null) singletonInstance = new Production353Production(); return singletonInstance; }

        public String getDescription() { return "<AccessId> ::= GenericSpec:<GenericSpec>  :production353"; }

        /**
         * Reduce by <AccessId> ::= GenericSpec:<GenericSpec>  :production353
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AccessId> ::= GenericSpec:<GenericSpec>  :production353
            ASTGenericSpecNode v1 = (ASTGenericSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAccessIdNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.AccessIdNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("GenericSpec"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AccessId> ::= GenericSpec:<GenericSpec>  :production353
         */
        protected ASTAccessIdNode userAction(ASTGenericSpecNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production353Production PRODUCTION353 = Production353Production.getInstance();

    public static class Production354Production extends Production
    {
        private Production354Production() {;} // Singleton
        private static Production354Production singletonInstance = null;
        public static final Production354Production getInstance() { if (singletonInstance == null) singletonInstance = new Production354Production(); return singletonInstance; }

        public String getDescription() { return "<SaveStmt> ::= tsave:T_SAVE teos:T_EOS  :production354"; }

        /**
         * Reduce by <SaveStmt> ::= tsave:T_SAVE teos:T_EOS  :production354
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SaveStmt> ::= tsave:T_SAVE teos:T_EOS  :production354
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSaveStmtNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.SaveStmtNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tsave"))
                return 0;
            else
                if (name.equals("teos"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SaveStmt> ::= tsave:T_SAVE teos:T_EOS  :production354
         */
        protected ASTSaveStmtNode userAction(Token v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production354Production PRODUCTION354 = Production354Production.getInstance();

    public static class Production355Production extends Production
    {
        private Production355Production() {;} // Singleton
        private static Production355Production singletonInstance = null;
        public static final Production355Production getInstance() { if (singletonInstance == null) singletonInstance = new Production355Production(); return singletonInstance; }

        public String getDescription() { return "<SaveStmt> ::= LblDef:<LblDef> tsave:T_SAVE teos:T_EOS  :production355"; }

        /**
         * Reduce by <SaveStmt> ::= LblDef:<LblDef> tsave:T_SAVE teos:T_EOS  :production355
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SaveStmt> ::= LblDef:<LblDef> tsave:T_SAVE teos:T_EOS  :production355
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSaveStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.SaveStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tsave"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SaveStmt> ::= LblDef:<LblDef> tsave:T_SAVE teos:T_EOS  :production355
         */
        protected ASTSaveStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production355Production PRODUCTION355 = Production355Production.getInstance();

    public static class Production356Production extends Production
    {
        private Production356Production() {;} // Singleton
        private static Production356Production singletonInstance = null;
        public static final Production356Production getInstance() { if (singletonInstance == null) singletonInstance = new Production356Production(); return singletonInstance; }

        public String getDescription() { return "<SaveStmt> ::= tsave:T_SAVE SavedEntityList:<SavedEntityList> teos:T_EOS  :production356"; }

        /**
         * Reduce by <SaveStmt> ::= tsave:T_SAVE SavedEntityList:<SavedEntityList> teos:T_EOS  :production356
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SaveStmt> ::= tsave:T_SAVE SavedEntityList:<SavedEntityList> teos:T_EOS  :production356
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSavedEntityListNode v2 = (ASTSavedEntityListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSaveStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.SaveStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tsave"))
                return 0;
            else
                if (name.equals("SavedEntityList"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SaveStmt> ::= tsave:T_SAVE SavedEntityList:<SavedEntityList> teos:T_EOS  :production356
         */
        protected ASTSaveStmtNode userAction(Token v1, ASTSavedEntityListNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production356Production PRODUCTION356 = Production356Production.getInstance();

    public static class Production357Production extends Production
    {
        private Production357Production() {;} // Singleton
        private static Production357Production singletonInstance = null;
        public static final Production357Production getInstance() { if (singletonInstance == null) singletonInstance = new Production357Production(); return singletonInstance; }

        public String getDescription() { return "<SaveStmt> ::= tsave:T_SAVE <SaveStmt@10> SavedEntityList:<SavedEntityList> teos:T_EOS  :production357"; }

        /**
         * Reduce by <SaveStmt> ::= tsave:T_SAVE <SaveStmt@10> SavedEntityList:<SavedEntityList> teos:T_EOS  :production357
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SaveStmt> ::= tsave:T_SAVE <SaveStmt@10> SavedEntityList:<SavedEntityList> teos:T_EOS  :production357
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSavedEntityListNode v4 = (ASTSavedEntityListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSaveStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.SaveStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tsave"))
                return 0;
            else
                if (name.equals("tcolon"))
                    return 1;
                else
                    if (name.equals("tcolon2"))
                        return 2;
                    else
                        if (name.equals("SavedEntityList"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SaveStmt> ::= tsave:T_SAVE <SaveStmt@10> SavedEntityList:<SavedEntityList> teos:T_EOS  :production357
         */
        protected ASTSaveStmtNode userAction(Token v1, Token v2, Token v3, ASTSavedEntityListNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production357Production PRODUCTION357 = Production357Production.getInstance();

    public static class Production358Production extends Production
    {
        private Production358Production() {;} // Singleton
        private static Production358Production singletonInstance = null;
        public static final Production358Production getInstance() { if (singletonInstance == null) singletonInstance = new Production358Production(); return singletonInstance; }

        public String getDescription() { return "<SaveStmt> ::= LblDef:<LblDef> tsave:T_SAVE SavedEntityList:<SavedEntityList> teos:T_EOS  :production358"; }

        /**
         * Reduce by <SaveStmt> ::= LblDef:<LblDef> tsave:T_SAVE SavedEntityList:<SavedEntityList> teos:T_EOS  :production358
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SaveStmt> ::= LblDef:<LblDef> tsave:T_SAVE SavedEntityList:<SavedEntityList> teos:T_EOS  :production358
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSavedEntityListNode v3 = (ASTSavedEntityListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSaveStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.SaveStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tsave"))
                    return 1;
                else
                    if (name.equals("SavedEntityList"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SaveStmt> ::= LblDef:<LblDef> tsave:T_SAVE SavedEntityList:<SavedEntityList> teos:T_EOS  :production358
         */
        protected ASTSaveStmtNode userAction(ASTLblDefNode v1, Token v2, ASTSavedEntityListNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production358Production PRODUCTION358 = Production358Production.getInstance();

    public static class Production359Production extends Production
    {
        private Production359Production() {;} // Singleton
        private static Production359Production singletonInstance = null;
        public static final Production359Production getInstance() { if (singletonInstance == null) singletonInstance = new Production359Production(); return singletonInstance; }

        public String getDescription() { return "<SaveStmt> ::= LblDef:<LblDef> tsave:T_SAVE <SaveStmt@10> SavedEntityList:<SavedEntityList> teos:T_EOS  :production359"; }

        /**
         * Reduce by <SaveStmt> ::= LblDef:<LblDef> tsave:T_SAVE <SaveStmt@10> SavedEntityList:<SavedEntityList> teos:T_EOS  :production359
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SaveStmt> ::= LblDef:<LblDef> tsave:T_SAVE <SaveStmt@10> SavedEntityList:<SavedEntityList> teos:T_EOS  :production359
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSavedEntityListNode v5 = (ASTSavedEntityListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSaveStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.SaveStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tsave"))
                    return 1;
                else
                    if (name.equals("tcolon"))
                        return 2;
                    else
                        if (name.equals("tcolon2"))
                            return 3;
                        else
                            if (name.equals("SavedEntityList"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SaveStmt> ::= LblDef:<LblDef> tsave:T_SAVE <SaveStmt@10> SavedEntityList:<SavedEntityList> teos:T_EOS  :production359
         */
        protected ASTSaveStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, Token v4, ASTSavedEntityListNode v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production359Production PRODUCTION359 = Production359Production.getInstance();

    public static class Production360Production extends Production
    {
        private Production360Production() {;} // Singleton
        private static Production360Production singletonInstance = null;
        public static final Production360Production getInstance() { if (singletonInstance == null) singletonInstance = new Production360Production(); return singletonInstance; }

        public String getDescription() { return "<SavedEntityList> ::= SavedEntity:<SavedEntity>  :production360"; }

        /**
         * Reduce by <SavedEntityList> ::= SavedEntity:<SavedEntity>  :production360
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SavedEntityList> ::= SavedEntity:<SavedEntity>  :production360
            ASTSavedEntityNode v1 = (ASTSavedEntityNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSavedEntityListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SavedEntityListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SavedEntity"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SavedEntityList> ::= SavedEntity:<SavedEntity>  :production360
         */
        protected ASTSavedEntityListNode userAction(ASTSavedEntityNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production360Production PRODUCTION360 = Production360Production.getInstance();

    public static class Production361Production extends Production
    {
        private Production361Production() {;} // Singleton
        private static Production361Production singletonInstance = null;
        public static final Production361Production getInstance() { if (singletonInstance == null) singletonInstance = new Production361Production(); return singletonInstance; }

        public String getDescription() { return "<SavedEntityList> ::= @:<SavedEntityList> tcomma:T_COMMA SavedEntity:<SavedEntity>  :production361"; }

        /**
         * Reduce by <SavedEntityList> ::= @:<SavedEntityList> tcomma:T_COMMA SavedEntity:<SavedEntity>  :production361
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SavedEntityList> ::= @:<SavedEntityList> tcomma:T_COMMA SavedEntity:<SavedEntity>  :production361
            ASTSavedEntityNode v3 = (ASTSavedEntityNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSavedEntityListNode v1 = (ASTSavedEntityListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSavedEntityListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.SavedEntityListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("SavedEntity"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SavedEntityList> ::= @:<SavedEntityList> tcomma:T_COMMA SavedEntity:<SavedEntity>  :production361
         */
        protected ASTSavedEntityListNode userAction(ASTSavedEntityListNode v1, Token v2, ASTSavedEntityNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production361Production PRODUCTION361 = Production361Production.getInstance();

    public static class Production362Production extends Production
    {
        private Production362Production() {;} // Singleton
        private static Production362Production singletonInstance = null;
        public static final Production362Production getInstance() { if (singletonInstance == null) singletonInstance = new Production362Production(); return singletonInstance; }

        public String getDescription() { return "<SavedEntity> ::= VariableName:<VariableName>  :production362"; }

        /**
         * Reduce by <SavedEntity> ::= VariableName:<VariableName>  :production362
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SavedEntity> ::= VariableName:<VariableName>  :production362
            ASTVariableNameNode v1 = (ASTVariableNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSavedEntityNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SavedEntityNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("VariableName"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SavedEntity> ::= VariableName:<VariableName>  :production362
         */
        protected ASTSavedEntityNode userAction(ASTVariableNameNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production362Production PRODUCTION362 = Production362Production.getInstance();

    public static class Production363Production extends Production
    {
        private Production363Production() {;} // Singleton
        private static Production363Production singletonInstance = null;
        public static final Production363Production getInstance() { if (singletonInstance == null) singletonInstance = new Production363Production(); return singletonInstance; }

        public String getDescription() { return "<SavedEntity> ::= SavedCommonBlock:<SavedCommonBlock>  :production363"; }

        /**
         * Reduce by <SavedEntity> ::= SavedCommonBlock:<SavedCommonBlock>  :production363
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SavedEntity> ::= SavedCommonBlock:<SavedCommonBlock>  :production363
            ASTSavedCommonBlockNode v1 = (ASTSavedCommonBlockNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSavedEntityNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SavedEntityNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SavedCommonBlock"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SavedEntity> ::= SavedCommonBlock:<SavedCommonBlock>  :production363
         */
        protected ASTSavedEntityNode userAction(ASTSavedCommonBlockNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production363Production PRODUCTION363 = Production363Production.getInstance();

    public static class Production364Production extends Production
    {
        private Production364Production() {;} // Singleton
        private static Production364Production singletonInstance = null;
        public static final Production364Production getInstance() { if (singletonInstance == null) singletonInstance = new Production364Production(); return singletonInstance; }

        public String getDescription() { return "<SavedCommonBlock> ::= tslash:T_SLASH CommonBlockName:<CommonBlockName> tslash2:T_SLASH  :production364"; }

        /**
         * Reduce by <SavedCommonBlock> ::= tslash:T_SLASH CommonBlockName:<CommonBlockName> tslash2:T_SLASH  :production364
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SavedCommonBlock> ::= tslash:T_SLASH CommonBlockName:<CommonBlockName> tslash2:T_SLASH  :production364
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTCommonBlockNameNode v2 = (ASTCommonBlockNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSavedCommonBlockNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.SavedCommonBlockNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tslash"))
                return 0;
            else
                if (name.equals("CommonBlockName"))
                    return 1;
                else
                    if (name.equals("tslash2"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SavedCommonBlock> ::= tslash:T_SLASH CommonBlockName:<CommonBlockName> tslash2:T_SLASH  :production364
         */
        protected ASTSavedCommonBlockNode userAction(Token v1, ASTCommonBlockNameNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production364Production PRODUCTION364 = Production364Production.getInstance();

    public static class Production365Production extends Production
    {
        private Production365Production() {;} // Singleton
        private static Production365Production singletonInstance = null;
        public static final Production365Production getInstance() { if (singletonInstance == null) singletonInstance = new Production365Production(); return singletonInstance; }

        public String getDescription() { return "<DimensionStmt> ::= tdimension:T_DIMENSION ArrayDeclaratorList:<ArrayDeclaratorList> teos:T_EOS  :production365"; }

        /**
         * Reduce by <DimensionStmt> ::= tdimension:T_DIMENSION ArrayDeclaratorList:<ArrayDeclaratorList> teos:T_EOS  :production365
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DimensionStmt> ::= tdimension:T_DIMENSION ArrayDeclaratorList:<ArrayDeclaratorList> teos:T_EOS  :production365
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTArrayDeclaratorListNode v2 = (ASTArrayDeclaratorListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDimensionStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.DimensionStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tdimension"))
                return 0;
            else
                if (name.equals("ArrayDeclaratorList"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DimensionStmt> ::= tdimension:T_DIMENSION ArrayDeclaratorList:<ArrayDeclaratorList> teos:T_EOS  :production365
         */
        protected ASTDimensionStmtNode userAction(Token v1, ASTArrayDeclaratorListNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production365Production PRODUCTION365 = Production365Production.getInstance();

    public static class Production366Production extends Production
    {
        private Production366Production() {;} // Singleton
        private static Production366Production singletonInstance = null;
        public static final Production366Production getInstance() { if (singletonInstance == null) singletonInstance = new Production366Production(); return singletonInstance; }

        public String getDescription() { return "<DimensionStmt> ::= tdimension:T_DIMENSION <DimensionStmt@11> ArrayDeclaratorList:<ArrayDeclaratorList> teos:T_EOS  :production366"; }

        /**
         * Reduce by <DimensionStmt> ::= tdimension:T_DIMENSION <DimensionStmt@11> ArrayDeclaratorList:<ArrayDeclaratorList> teos:T_EOS  :production366
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DimensionStmt> ::= tdimension:T_DIMENSION <DimensionStmt@11> ArrayDeclaratorList:<ArrayDeclaratorList> teos:T_EOS  :production366
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTArrayDeclaratorListNode v4 = (ASTArrayDeclaratorListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDimensionStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.DimensionStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tdimension"))
                return 0;
            else
                if (name.equals("tcolon"))
                    return 1;
                else
                    if (name.equals("tcolon2"))
                        return 2;
                    else
                        if (name.equals("ArrayDeclaratorList"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DimensionStmt> ::= tdimension:T_DIMENSION <DimensionStmt@11> ArrayDeclaratorList:<ArrayDeclaratorList> teos:T_EOS  :production366
         */
        protected ASTDimensionStmtNode userAction(Token v1, Token v2, Token v3, ASTArrayDeclaratorListNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production366Production PRODUCTION366 = Production366Production.getInstance();

    public static class Production367Production extends Production
    {
        private Production367Production() {;} // Singleton
        private static Production367Production singletonInstance = null;
        public static final Production367Production getInstance() { if (singletonInstance == null) singletonInstance = new Production367Production(); return singletonInstance; }

        public String getDescription() { return "<DimensionStmt> ::= LblDef:<LblDef> tdimension:T_DIMENSION ArrayDeclaratorList:<ArrayDeclaratorList> teos:T_EOS  :production367"; }

        /**
         * Reduce by <DimensionStmt> ::= LblDef:<LblDef> tdimension:T_DIMENSION ArrayDeclaratorList:<ArrayDeclaratorList> teos:T_EOS  :production367
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DimensionStmt> ::= LblDef:<LblDef> tdimension:T_DIMENSION ArrayDeclaratorList:<ArrayDeclaratorList> teos:T_EOS  :production367
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTArrayDeclaratorListNode v3 = (ASTArrayDeclaratorListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDimensionStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.DimensionStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tdimension"))
                    return 1;
                else
                    if (name.equals("ArrayDeclaratorList"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DimensionStmt> ::= LblDef:<LblDef> tdimension:T_DIMENSION ArrayDeclaratorList:<ArrayDeclaratorList> teos:T_EOS  :production367
         */
        protected ASTDimensionStmtNode userAction(ASTLblDefNode v1, Token v2, ASTArrayDeclaratorListNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production367Production PRODUCTION367 = Production367Production.getInstance();

    public static class Production368Production extends Production
    {
        private Production368Production() {;} // Singleton
        private static Production368Production singletonInstance = null;
        public static final Production368Production getInstance() { if (singletonInstance == null) singletonInstance = new Production368Production(); return singletonInstance; }

        public String getDescription() { return "<DimensionStmt> ::= LblDef:<LblDef> tdimension:T_DIMENSION <DimensionStmt@11> ArrayDeclaratorList:<ArrayDeclaratorList> teos:T_EOS  :production368"; }

        /**
         * Reduce by <DimensionStmt> ::= LblDef:<LblDef> tdimension:T_DIMENSION <DimensionStmt@11> ArrayDeclaratorList:<ArrayDeclaratorList> teos:T_EOS  :production368
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DimensionStmt> ::= LblDef:<LblDef> tdimension:T_DIMENSION <DimensionStmt@11> ArrayDeclaratorList:<ArrayDeclaratorList> teos:T_EOS  :production368
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTArrayDeclaratorListNode v5 = (ASTArrayDeclaratorListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDimensionStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.DimensionStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tdimension"))
                    return 1;
                else
                    if (name.equals("tcolon"))
                        return 2;
                    else
                        if (name.equals("tcolon2"))
                            return 3;
                        else
                            if (name.equals("ArrayDeclaratorList"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DimensionStmt> ::= LblDef:<LblDef> tdimension:T_DIMENSION <DimensionStmt@11> ArrayDeclaratorList:<ArrayDeclaratorList> teos:T_EOS  :production368
         */
        protected ASTDimensionStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, Token v4, ASTArrayDeclaratorListNode v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production368Production PRODUCTION368 = Production368Production.getInstance();

    public static class Production369Production extends Production
    {
        private Production369Production() {;} // Singleton
        private static Production369Production singletonInstance = null;
        public static final Production369Production getInstance() { if (singletonInstance == null) singletonInstance = new Production369Production(); return singletonInstance; }

        public String getDescription() { return "<ArrayDeclaratorList> ::= ArrayDeclarator:<ArrayDeclarator>  :production369"; }

        /**
         * Reduce by <ArrayDeclaratorList> ::= ArrayDeclarator:<ArrayDeclarator>  :production369
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ArrayDeclaratorList> ::= ArrayDeclarator:<ArrayDeclarator>  :production369
            ASTArrayDeclaratorNode v1 = (ASTArrayDeclaratorNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTArrayDeclaratorListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ArrayDeclaratorListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ArrayDeclarator"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ArrayDeclaratorList> ::= ArrayDeclarator:<ArrayDeclarator>  :production369
         */
        protected ASTArrayDeclaratorListNode userAction(ASTArrayDeclaratorNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production369Production PRODUCTION369 = Production369Production.getInstance();

    public static class Production370Production extends Production
    {
        private Production370Production() {;} // Singleton
        private static Production370Production singletonInstance = null;
        public static final Production370Production getInstance() { if (singletonInstance == null) singletonInstance = new Production370Production(); return singletonInstance; }

        public String getDescription() { return "<ArrayDeclaratorList> ::= @:<ArrayDeclaratorList> tcomma:T_COMMA ArrayDeclarator:<ArrayDeclarator>  :production370"; }

        /**
         * Reduce by <ArrayDeclaratorList> ::= @:<ArrayDeclaratorList> tcomma:T_COMMA ArrayDeclarator:<ArrayDeclarator>  :production370
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ArrayDeclaratorList> ::= @:<ArrayDeclaratorList> tcomma:T_COMMA ArrayDeclarator:<ArrayDeclarator>  :production370
            ASTArrayDeclaratorNode v3 = (ASTArrayDeclaratorNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTArrayDeclaratorListNode v1 = (ASTArrayDeclaratorListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTArrayDeclaratorListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.ArrayDeclaratorListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("ArrayDeclarator"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ArrayDeclaratorList> ::= @:<ArrayDeclaratorList> tcomma:T_COMMA ArrayDeclarator:<ArrayDeclarator>  :production370
         */
        protected ASTArrayDeclaratorListNode userAction(ASTArrayDeclaratorListNode v1, Token v2, ASTArrayDeclaratorNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production370Production PRODUCTION370 = Production370Production.getInstance();

    public static class Production371Production extends Production
    {
        private Production371Production() {;} // Singleton
        private static Production371Production singletonInstance = null;
        public static final Production371Production getInstance() { if (singletonInstance == null) singletonInstance = new Production371Production(); return singletonInstance; }

        public String getDescription() { return "<ArrayDeclarator> ::= VariableName:<VariableName> tlparen:T_LPAREN ArraySpec:<ArraySpec> trparen:T_RPAREN  :production371"; }

        /**
         * Reduce by <ArrayDeclarator> ::= VariableName:<VariableName> tlparen:T_LPAREN ArraySpec:<ArraySpec> trparen:T_RPAREN  :production371
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ArrayDeclarator> ::= VariableName:<VariableName> tlparen:T_LPAREN ArraySpec:<ArraySpec> trparen:T_RPAREN  :production371
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTArraySpecNode v3 = (ASTArraySpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTVariableNameNode v1 = (ASTVariableNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTArrayDeclaratorNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.ArrayDeclaratorNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("VariableName"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("ArraySpec"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ArrayDeclarator> ::= VariableName:<VariableName> tlparen:T_LPAREN ArraySpec:<ArraySpec> trparen:T_RPAREN  :production371
         */
        protected ASTArrayDeclaratorNode userAction(ASTVariableNameNode v1, Token v2, ASTArraySpecNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production371Production PRODUCTION371 = Production371Production.getInstance();

    public static class Production372Production extends Production
    {
        private Production372Production() {;} // Singleton
        private static Production372Production singletonInstance = null;
        public static final Production372Production getInstance() { if (singletonInstance == null) singletonInstance = new Production372Production(); return singletonInstance; }

        public String getDescription() { return "<AllocatableStmt> ::= tallocatable:T_ALLOCATABLE ArrayAllocationList:<ArrayAllocationList> teos:T_EOS  :production372"; }

        /**
         * Reduce by <AllocatableStmt> ::= tallocatable:T_ALLOCATABLE ArrayAllocationList:<ArrayAllocationList> teos:T_EOS  :production372
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AllocatableStmt> ::= tallocatable:T_ALLOCATABLE ArrayAllocationList:<ArrayAllocationList> teos:T_EOS  :production372
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTArrayAllocationListNode v2 = (ASTArrayAllocationListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAllocatableStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.AllocatableStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tallocatable"))
                return 0;
            else
                if (name.equals("ArrayAllocationList"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AllocatableStmt> ::= tallocatable:T_ALLOCATABLE ArrayAllocationList:<ArrayAllocationList> teos:T_EOS  :production372
         */
        protected ASTAllocatableStmtNode userAction(Token v1, ASTArrayAllocationListNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production372Production PRODUCTION372 = Production372Production.getInstance();

    public static class Production373Production extends Production
    {
        private Production373Production() {;} // Singleton
        private static Production373Production singletonInstance = null;
        public static final Production373Production getInstance() { if (singletonInstance == null) singletonInstance = new Production373Production(); return singletonInstance; }

        public String getDescription() { return "<AllocatableStmt> ::= tallocatable:T_ALLOCATABLE <AllocatableStmt@12> ArrayAllocationList:<ArrayAllocationList> teos:T_EOS  :production373"; }

        /**
         * Reduce by <AllocatableStmt> ::= tallocatable:T_ALLOCATABLE <AllocatableStmt@12> ArrayAllocationList:<ArrayAllocationList> teos:T_EOS  :production373
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AllocatableStmt> ::= tallocatable:T_ALLOCATABLE <AllocatableStmt@12> ArrayAllocationList:<ArrayAllocationList> teos:T_EOS  :production373
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTArrayAllocationListNode v4 = (ASTArrayAllocationListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAllocatableStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.AllocatableStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tallocatable"))
                return 0;
            else
                if (name.equals("tcolon"))
                    return 1;
                else
                    if (name.equals("tcolon2"))
                        return 2;
                    else
                        if (name.equals("ArrayAllocationList"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AllocatableStmt> ::= tallocatable:T_ALLOCATABLE <AllocatableStmt@12> ArrayAllocationList:<ArrayAllocationList> teos:T_EOS  :production373
         */
        protected ASTAllocatableStmtNode userAction(Token v1, Token v2, Token v3, ASTArrayAllocationListNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production373Production PRODUCTION373 = Production373Production.getInstance();

    public static class Production374Production extends Production
    {
        private Production374Production() {;} // Singleton
        private static Production374Production singletonInstance = null;
        public static final Production374Production getInstance() { if (singletonInstance == null) singletonInstance = new Production374Production(); return singletonInstance; }

        public String getDescription() { return "<AllocatableStmt> ::= LblDef:<LblDef> tallocatable:T_ALLOCATABLE ArrayAllocationList:<ArrayAllocationList> teos:T_EOS  :production374"; }

        /**
         * Reduce by <AllocatableStmt> ::= LblDef:<LblDef> tallocatable:T_ALLOCATABLE ArrayAllocationList:<ArrayAllocationList> teos:T_EOS  :production374
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AllocatableStmt> ::= LblDef:<LblDef> tallocatable:T_ALLOCATABLE ArrayAllocationList:<ArrayAllocationList> teos:T_EOS  :production374
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTArrayAllocationListNode v3 = (ASTArrayAllocationListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAllocatableStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.AllocatableStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tallocatable"))
                    return 1;
                else
                    if (name.equals("ArrayAllocationList"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AllocatableStmt> ::= LblDef:<LblDef> tallocatable:T_ALLOCATABLE ArrayAllocationList:<ArrayAllocationList> teos:T_EOS  :production374
         */
        protected ASTAllocatableStmtNode userAction(ASTLblDefNode v1, Token v2, ASTArrayAllocationListNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production374Production PRODUCTION374 = Production374Production.getInstance();

    public static class Production375Production extends Production
    {
        private Production375Production() {;} // Singleton
        private static Production375Production singletonInstance = null;
        public static final Production375Production getInstance() { if (singletonInstance == null) singletonInstance = new Production375Production(); return singletonInstance; }

        public String getDescription() { return "<AllocatableStmt> ::= LblDef:<LblDef> tallocatable:T_ALLOCATABLE <AllocatableStmt@12> ArrayAllocationList:<ArrayAllocationList> teos:T_EOS  :production375"; }

        /**
         * Reduce by <AllocatableStmt> ::= LblDef:<LblDef> tallocatable:T_ALLOCATABLE <AllocatableStmt@12> ArrayAllocationList:<ArrayAllocationList> teos:T_EOS  :production375
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AllocatableStmt> ::= LblDef:<LblDef> tallocatable:T_ALLOCATABLE <AllocatableStmt@12> ArrayAllocationList:<ArrayAllocationList> teos:T_EOS  :production375
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTArrayAllocationListNode v5 = (ASTArrayAllocationListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAllocatableStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.AllocatableStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tallocatable"))
                    return 1;
                else
                    if (name.equals("tcolon"))
                        return 2;
                    else
                        if (name.equals("tcolon2"))
                            return 3;
                        else
                            if (name.equals("ArrayAllocationList"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AllocatableStmt> ::= LblDef:<LblDef> tallocatable:T_ALLOCATABLE <AllocatableStmt@12> ArrayAllocationList:<ArrayAllocationList> teos:T_EOS  :production375
         */
        protected ASTAllocatableStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, Token v4, ASTArrayAllocationListNode v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production375Production PRODUCTION375 = Production375Production.getInstance();

    public static class Production376Production extends Production
    {
        private Production376Production() {;} // Singleton
        private static Production376Production singletonInstance = null;
        public static final Production376Production getInstance() { if (singletonInstance == null) singletonInstance = new Production376Production(); return singletonInstance; }

        public String getDescription() { return "<ArrayAllocationList> ::= ArrayAllocation:<ArrayAllocation>  :production376"; }

        /**
         * Reduce by <ArrayAllocationList> ::= ArrayAllocation:<ArrayAllocation>  :production376
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ArrayAllocationList> ::= ArrayAllocation:<ArrayAllocation>  :production376
            ASTArrayAllocationNode v1 = (ASTArrayAllocationNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTArrayAllocationListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ArrayAllocationListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ArrayAllocation"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ArrayAllocationList> ::= ArrayAllocation:<ArrayAllocation>  :production376
         */
        protected ASTArrayAllocationListNode userAction(ASTArrayAllocationNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production376Production PRODUCTION376 = Production376Production.getInstance();

    public static class Production377Production extends Production
    {
        private Production377Production() {;} // Singleton
        private static Production377Production singletonInstance = null;
        public static final Production377Production getInstance() { if (singletonInstance == null) singletonInstance = new Production377Production(); return singletonInstance; }

        public String getDescription() { return "<ArrayAllocationList> ::= @:<ArrayAllocationList> tcomma:T_COMMA ArrayAllocation:<ArrayAllocation>  :production377"; }

        /**
         * Reduce by <ArrayAllocationList> ::= @:<ArrayAllocationList> tcomma:T_COMMA ArrayAllocation:<ArrayAllocation>  :production377
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ArrayAllocationList> ::= @:<ArrayAllocationList> tcomma:T_COMMA ArrayAllocation:<ArrayAllocation>  :production377
            ASTArrayAllocationNode v3 = (ASTArrayAllocationNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTArrayAllocationListNode v1 = (ASTArrayAllocationListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTArrayAllocationListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.ArrayAllocationListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("ArrayAllocation"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ArrayAllocationList> ::= @:<ArrayAllocationList> tcomma:T_COMMA ArrayAllocation:<ArrayAllocation>  :production377
         */
        protected ASTArrayAllocationListNode userAction(ASTArrayAllocationListNode v1, Token v2, ASTArrayAllocationNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production377Production PRODUCTION377 = Production377Production.getInstance();

    public static class Production378Production extends Production
    {
        private Production378Production() {;} // Singleton
        private static Production378Production singletonInstance = null;
        public static final Production378Production getInstance() { if (singletonInstance == null) singletonInstance = new Production378Production(); return singletonInstance; }

        public String getDescription() { return "<ArrayAllocation> ::= ArrayName:<ArrayName>  :production378"; }

        /**
         * Reduce by <ArrayAllocation> ::= ArrayName:<ArrayName>  :production378
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ArrayAllocation> ::= ArrayName:<ArrayName>  :production378
            ASTArrayNameNode v1 = (ASTArrayNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTArrayAllocationNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ArrayAllocationNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ArrayName"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ArrayAllocation> ::= ArrayName:<ArrayName>  :production378
         */
        protected ASTArrayAllocationNode userAction(ASTArrayNameNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production378Production PRODUCTION378 = Production378Production.getInstance();

    public static class Production379Production extends Production
    {
        private Production379Production() {;} // Singleton
        private static Production379Production singletonInstance = null;
        public static final Production379Production getInstance() { if (singletonInstance == null) singletonInstance = new Production379Production(); return singletonInstance; }

        public String getDescription() { return "<ArrayAllocation> ::= ArrayName:<ArrayName> tlparen:T_LPAREN DeferredShapeSpecList:<DeferredShapeSpecList> trparen:T_RPAREN  :production379"; }

        /**
         * Reduce by <ArrayAllocation> ::= ArrayName:<ArrayName> tlparen:T_LPAREN DeferredShapeSpecList:<DeferredShapeSpecList> trparen:T_RPAREN  :production379
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ArrayAllocation> ::= ArrayName:<ArrayName> tlparen:T_LPAREN DeferredShapeSpecList:<DeferredShapeSpecList> trparen:T_RPAREN  :production379
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDeferredShapeSpecListNode v3 = (ASTDeferredShapeSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTArrayNameNode v1 = (ASTArrayNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTArrayAllocationNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.ArrayAllocationNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ArrayName"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("DeferredShapeSpecList"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ArrayAllocation> ::= ArrayName:<ArrayName> tlparen:T_LPAREN DeferredShapeSpecList:<DeferredShapeSpecList> trparen:T_RPAREN  :production379
         */
        protected ASTArrayAllocationNode userAction(ASTArrayNameNode v1, Token v2, ASTDeferredShapeSpecListNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production379Production PRODUCTION379 = Production379Production.getInstance();

    public static class Production380Production extends Production
    {
        private Production380Production() {;} // Singleton
        private static Production380Production singletonInstance = null;
        public static final Production380Production getInstance() { if (singletonInstance == null) singletonInstance = new Production380Production(); return singletonInstance; }

        public String getDescription() { return "<PointerStmt> ::= tpointer:T_POINTER PointerStmtObjectList:<PointerStmtObjectList> teos:T_EOS  :production380"; }

        /**
         * Reduce by <PointerStmt> ::= tpointer:T_POINTER PointerStmtObjectList:<PointerStmtObjectList> teos:T_EOS  :production380
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PointerStmt> ::= tpointer:T_POINTER PointerStmtObjectList:<PointerStmtObjectList> teos:T_EOS  :production380
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTPointerStmtObjectListNode v2 = (ASTPointerStmtObjectListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPointerStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.PointerStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tpointer"))
                return 0;
            else
                if (name.equals("PointerStmtObjectList"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PointerStmt> ::= tpointer:T_POINTER PointerStmtObjectList:<PointerStmtObjectList> teos:T_EOS  :production380
         */
        protected ASTPointerStmtNode userAction(Token v1, ASTPointerStmtObjectListNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production380Production PRODUCTION380 = Production380Production.getInstance();

    public static class Production381Production extends Production
    {
        private Production381Production() {;} // Singleton
        private static Production381Production singletonInstance = null;
        public static final Production381Production getInstance() { if (singletonInstance == null) singletonInstance = new Production381Production(); return singletonInstance; }

        public String getDescription() { return "<PointerStmt> ::= tpointer:T_POINTER <PointerStmt@13> PointerStmtObjectList:<PointerStmtObjectList> teos:T_EOS  :production381"; }

        /**
         * Reduce by <PointerStmt> ::= tpointer:T_POINTER <PointerStmt@13> PointerStmtObjectList:<PointerStmtObjectList> teos:T_EOS  :production381
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PointerStmt> ::= tpointer:T_POINTER <PointerStmt@13> PointerStmtObjectList:<PointerStmtObjectList> teos:T_EOS  :production381
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTPointerStmtObjectListNode v4 = (ASTPointerStmtObjectListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPointerStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.PointerStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tpointer"))
                return 0;
            else
                if (name.equals("tcolon"))
                    return 1;
                else
                    if (name.equals("tcolon2"))
                        return 2;
                    else
                        if (name.equals("PointerStmtObjectList"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PointerStmt> ::= tpointer:T_POINTER <PointerStmt@13> PointerStmtObjectList:<PointerStmtObjectList> teos:T_EOS  :production381
         */
        protected ASTPointerStmtNode userAction(Token v1, Token v2, Token v3, ASTPointerStmtObjectListNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production381Production PRODUCTION381 = Production381Production.getInstance();

    public static class Production382Production extends Production
    {
        private Production382Production() {;} // Singleton
        private static Production382Production singletonInstance = null;
        public static final Production382Production getInstance() { if (singletonInstance == null) singletonInstance = new Production382Production(); return singletonInstance; }

        public String getDescription() { return "<PointerStmt> ::= LblDef:<LblDef> tpointer:T_POINTER PointerStmtObjectList:<PointerStmtObjectList> teos:T_EOS  :production382"; }

        /**
         * Reduce by <PointerStmt> ::= LblDef:<LblDef> tpointer:T_POINTER PointerStmtObjectList:<PointerStmtObjectList> teos:T_EOS  :production382
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PointerStmt> ::= LblDef:<LblDef> tpointer:T_POINTER PointerStmtObjectList:<PointerStmtObjectList> teos:T_EOS  :production382
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTPointerStmtObjectListNode v3 = (ASTPointerStmtObjectListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPointerStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.PointerStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tpointer"))
                    return 1;
                else
                    if (name.equals("PointerStmtObjectList"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PointerStmt> ::= LblDef:<LblDef> tpointer:T_POINTER PointerStmtObjectList:<PointerStmtObjectList> teos:T_EOS  :production382
         */
        protected ASTPointerStmtNode userAction(ASTLblDefNode v1, Token v2, ASTPointerStmtObjectListNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production382Production PRODUCTION382 = Production382Production.getInstance();

    public static class Production383Production extends Production
    {
        private Production383Production() {;} // Singleton
        private static Production383Production singletonInstance = null;
        public static final Production383Production getInstance() { if (singletonInstance == null) singletonInstance = new Production383Production(); return singletonInstance; }

        public String getDescription() { return "<PointerStmt> ::= LblDef:<LblDef> tpointer:T_POINTER <PointerStmt@13> PointerStmtObjectList:<PointerStmtObjectList> teos:T_EOS  :production383"; }

        /**
         * Reduce by <PointerStmt> ::= LblDef:<LblDef> tpointer:T_POINTER <PointerStmt@13> PointerStmtObjectList:<PointerStmtObjectList> teos:T_EOS  :production383
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PointerStmt> ::= LblDef:<LblDef> tpointer:T_POINTER <PointerStmt@13> PointerStmtObjectList:<PointerStmtObjectList> teos:T_EOS  :production383
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTPointerStmtObjectListNode v5 = (ASTPointerStmtObjectListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPointerStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.PointerStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tpointer"))
                    return 1;
                else
                    if (name.equals("tcolon"))
                        return 2;
                    else
                        if (name.equals("tcolon2"))
                            return 3;
                        else
                            if (name.equals("PointerStmtObjectList"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PointerStmt> ::= LblDef:<LblDef> tpointer:T_POINTER <PointerStmt@13> PointerStmtObjectList:<PointerStmtObjectList> teos:T_EOS  :production383
         */
        protected ASTPointerStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, Token v4, ASTPointerStmtObjectListNode v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production383Production PRODUCTION383 = Production383Production.getInstance();

    public static class Production384Production extends Production
    {
        private Production384Production() {;} // Singleton
        private static Production384Production singletonInstance = null;
        public static final Production384Production getInstance() { if (singletonInstance == null) singletonInstance = new Production384Production(); return singletonInstance; }

        public String getDescription() { return "<PointerStmtObjectList> ::= PointerStmtObject:<PointerStmtObject>  :production384"; }

        /**
         * Reduce by <PointerStmtObjectList> ::= PointerStmtObject:<PointerStmtObject>  :production384
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PointerStmtObjectList> ::= PointerStmtObject:<PointerStmtObject>  :production384
            ASTPointerStmtObjectNode v1 = (ASTPointerStmtObjectNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPointerStmtObjectListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.PointerStmtObjectListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("PointerStmtObject"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PointerStmtObjectList> ::= PointerStmtObject:<PointerStmtObject>  :production384
         */
        protected ASTPointerStmtObjectListNode userAction(ASTPointerStmtObjectNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production384Production PRODUCTION384 = Production384Production.getInstance();

    public static class Production385Production extends Production
    {
        private Production385Production() {;} // Singleton
        private static Production385Production singletonInstance = null;
        public static final Production385Production getInstance() { if (singletonInstance == null) singletonInstance = new Production385Production(); return singletonInstance; }

        public String getDescription() { return "<PointerStmtObjectList> ::= @:<PointerStmtObjectList> tcomma:T_COMMA PointerStmtObject:<PointerStmtObject>  :production385"; }

        /**
         * Reduce by <PointerStmtObjectList> ::= @:<PointerStmtObjectList> tcomma:T_COMMA PointerStmtObject:<PointerStmtObject>  :production385
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PointerStmtObjectList> ::= @:<PointerStmtObjectList> tcomma:T_COMMA PointerStmtObject:<PointerStmtObject>  :production385
            ASTPointerStmtObjectNode v3 = (ASTPointerStmtObjectNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTPointerStmtObjectListNode v1 = (ASTPointerStmtObjectListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPointerStmtObjectListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.PointerStmtObjectListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("PointerStmtObject"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PointerStmtObjectList> ::= @:<PointerStmtObjectList> tcomma:T_COMMA PointerStmtObject:<PointerStmtObject>  :production385
         */
        protected ASTPointerStmtObjectListNode userAction(ASTPointerStmtObjectListNode v1, Token v2, ASTPointerStmtObjectNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production385Production PRODUCTION385 = Production385Production.getInstance();

    public static class Production386Production extends Production
    {
        private Production386Production() {;} // Singleton
        private static Production386Production singletonInstance = null;
        public static final Production386Production getInstance() { if (singletonInstance == null) singletonInstance = new Production386Production(); return singletonInstance; }

        public String getDescription() { return "<PointerStmtObject> ::= PointerName:<PointerName>  :production386"; }

        /**
         * Reduce by <PointerStmtObject> ::= PointerName:<PointerName>  :production386
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PointerStmtObject> ::= PointerName:<PointerName>  :production386
            ASTPointerNameNode v1 = (ASTPointerNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPointerStmtObjectNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.PointerStmtObjectNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("PointerName"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PointerStmtObject> ::= PointerName:<PointerName>  :production386
         */
        protected ASTPointerStmtObjectNode userAction(ASTPointerNameNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production386Production PRODUCTION386 = Production386Production.getInstance();

    public static class Production387Production extends Production
    {
        private Production387Production() {;} // Singleton
        private static Production387Production singletonInstance = null;
        public static final Production387Production getInstance() { if (singletonInstance == null) singletonInstance = new Production387Production(); return singletonInstance; }

        public String getDescription() { return "<PointerStmtObject> ::= PointerName:<PointerName> tlparen:T_LPAREN DeferredShapeSpecList:<DeferredShapeSpecList> trparen:T_RPAREN  :production387"; }

        /**
         * Reduce by <PointerStmtObject> ::= PointerName:<PointerName> tlparen:T_LPAREN DeferredShapeSpecList:<DeferredShapeSpecList> trparen:T_RPAREN  :production387
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PointerStmtObject> ::= PointerName:<PointerName> tlparen:T_LPAREN DeferredShapeSpecList:<DeferredShapeSpecList> trparen:T_RPAREN  :production387
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDeferredShapeSpecListNode v3 = (ASTDeferredShapeSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTPointerNameNode v1 = (ASTPointerNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPointerStmtObjectNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.PointerStmtObjectNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("PointerName"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("DeferredShapeSpecList"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PointerStmtObject> ::= PointerName:<PointerName> tlparen:T_LPAREN DeferredShapeSpecList:<DeferredShapeSpecList> trparen:T_RPAREN  :production387
         */
        protected ASTPointerStmtObjectNode userAction(ASTPointerNameNode v1, Token v2, ASTDeferredShapeSpecListNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production387Production PRODUCTION387 = Production387Production.getInstance();

    public static class Production388Production extends Production
    {
        private Production388Production() {;} // Singleton
        private static Production388Production singletonInstance = null;
        public static final Production388Production getInstance() { if (singletonInstance == null) singletonInstance = new Production388Production(); return singletonInstance; }

        public String getDescription() { return "<PointerName> ::= tident:T_IDENT  :production388"; }

        /**
         * Reduce by <PointerName> ::= tident:T_IDENT  :production388
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PointerName> ::= tident:T_IDENT  :production388
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPointerNameNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.PointerNameNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tident"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PointerName> ::= tident:T_IDENT  :production388
         */
        protected ASTPointerNameNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production388Production PRODUCTION388 = Production388Production.getInstance();

    public static class Production389Production extends Production
    {
        private Production389Production() {;} // Singleton
        private static Production389Production singletonInstance = null;
        public static final Production389Production getInstance() { if (singletonInstance == null) singletonInstance = new Production389Production(); return singletonInstance; }

        public String getDescription() { return "<TargetStmt> ::= ttarget:T_TARGET TargetObjectList:<TargetObjectList> teos:T_EOS  :production389"; }

        /**
         * Reduce by <TargetStmt> ::= ttarget:T_TARGET TargetObjectList:<TargetObjectList> teos:T_EOS  :production389
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <TargetStmt> ::= ttarget:T_TARGET TargetObjectList:<TargetObjectList> teos:T_EOS  :production389
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTTargetObjectListNode v2 = (ASTTargetObjectListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTTargetStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.TargetStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ttarget"))
                return 0;
            else
                if (name.equals("TargetObjectList"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <TargetStmt> ::= ttarget:T_TARGET TargetObjectList:<TargetObjectList> teos:T_EOS  :production389
         */
        protected ASTTargetStmtNode userAction(Token v1, ASTTargetObjectListNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production389Production PRODUCTION389 = Production389Production.getInstance();

    public static class Production390Production extends Production
    {
        private Production390Production() {;} // Singleton
        private static Production390Production singletonInstance = null;
        public static final Production390Production getInstance() { if (singletonInstance == null) singletonInstance = new Production390Production(); return singletonInstance; }

        public String getDescription() { return "<TargetStmt> ::= ttarget:T_TARGET <TargetStmt@14> TargetObjectList:<TargetObjectList> teos:T_EOS  :production390"; }

        /**
         * Reduce by <TargetStmt> ::= ttarget:T_TARGET <TargetStmt@14> TargetObjectList:<TargetObjectList> teos:T_EOS  :production390
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <TargetStmt> ::= ttarget:T_TARGET <TargetStmt@14> TargetObjectList:<TargetObjectList> teos:T_EOS  :production390
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTTargetObjectListNode v4 = (ASTTargetObjectListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTTargetStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.TargetStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ttarget"))
                return 0;
            else
                if (name.equals("tcolon"))
                    return 1;
                else
                    if (name.equals("tcolon2"))
                        return 2;
                    else
                        if (name.equals("TargetObjectList"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <TargetStmt> ::= ttarget:T_TARGET <TargetStmt@14> TargetObjectList:<TargetObjectList> teos:T_EOS  :production390
         */
        protected ASTTargetStmtNode userAction(Token v1, Token v2, Token v3, ASTTargetObjectListNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production390Production PRODUCTION390 = Production390Production.getInstance();

    public static class Production391Production extends Production
    {
        private Production391Production() {;} // Singleton
        private static Production391Production singletonInstance = null;
        public static final Production391Production getInstance() { if (singletonInstance == null) singletonInstance = new Production391Production(); return singletonInstance; }

        public String getDescription() { return "<TargetStmt> ::= LblDef:<LblDef> ttarget:T_TARGET TargetObjectList:<TargetObjectList> teos:T_EOS  :production391"; }

        /**
         * Reduce by <TargetStmt> ::= LblDef:<LblDef> ttarget:T_TARGET TargetObjectList:<TargetObjectList> teos:T_EOS  :production391
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <TargetStmt> ::= LblDef:<LblDef> ttarget:T_TARGET TargetObjectList:<TargetObjectList> teos:T_EOS  :production391
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTTargetObjectListNode v3 = (ASTTargetObjectListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTTargetStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.TargetStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("ttarget"))
                    return 1;
                else
                    if (name.equals("TargetObjectList"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <TargetStmt> ::= LblDef:<LblDef> ttarget:T_TARGET TargetObjectList:<TargetObjectList> teos:T_EOS  :production391
         */
        protected ASTTargetStmtNode userAction(ASTLblDefNode v1, Token v2, ASTTargetObjectListNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production391Production PRODUCTION391 = Production391Production.getInstance();

    public static class Production392Production extends Production
    {
        private Production392Production() {;} // Singleton
        private static Production392Production singletonInstance = null;
        public static final Production392Production getInstance() { if (singletonInstance == null) singletonInstance = new Production392Production(); return singletonInstance; }

        public String getDescription() { return "<TargetStmt> ::= LblDef:<LblDef> ttarget:T_TARGET <TargetStmt@14> TargetObjectList:<TargetObjectList> teos:T_EOS  :production392"; }

        /**
         * Reduce by <TargetStmt> ::= LblDef:<LblDef> ttarget:T_TARGET <TargetStmt@14> TargetObjectList:<TargetObjectList> teos:T_EOS  :production392
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <TargetStmt> ::= LblDef:<LblDef> ttarget:T_TARGET <TargetStmt@14> TargetObjectList:<TargetObjectList> teos:T_EOS  :production392
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTTargetObjectListNode v5 = (ASTTargetObjectListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTTargetStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.TargetStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("ttarget"))
                    return 1;
                else
                    if (name.equals("tcolon"))
                        return 2;
                    else
                        if (name.equals("tcolon2"))
                            return 3;
                        else
                            if (name.equals("TargetObjectList"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <TargetStmt> ::= LblDef:<LblDef> ttarget:T_TARGET <TargetStmt@14> TargetObjectList:<TargetObjectList> teos:T_EOS  :production392
         */
        protected ASTTargetStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, Token v4, ASTTargetObjectListNode v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production392Production PRODUCTION392 = Production392Production.getInstance();

    public static class Production393Production extends Production
    {
        private Production393Production() {;} // Singleton
        private static Production393Production singletonInstance = null;
        public static final Production393Production getInstance() { if (singletonInstance == null) singletonInstance = new Production393Production(); return singletonInstance; }

        public String getDescription() { return "<TargetObjectList> ::= TargetObject:<TargetObject>  :production393"; }

        /**
         * Reduce by <TargetObjectList> ::= TargetObject:<TargetObject>  :production393
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <TargetObjectList> ::= TargetObject:<TargetObject>  :production393
            ASTTargetObjectNode v1 = (ASTTargetObjectNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTTargetObjectListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.TargetObjectListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("TargetObject"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <TargetObjectList> ::= TargetObject:<TargetObject>  :production393
         */
        protected ASTTargetObjectListNode userAction(ASTTargetObjectNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production393Production PRODUCTION393 = Production393Production.getInstance();

    public static class Production394Production extends Production
    {
        private Production394Production() {;} // Singleton
        private static Production394Production singletonInstance = null;
        public static final Production394Production getInstance() { if (singletonInstance == null) singletonInstance = new Production394Production(); return singletonInstance; }

        public String getDescription() { return "<TargetObjectList> ::= @:<TargetObjectList> tcomma:T_COMMA TargetObject:<TargetObject>  :production394"; }

        /**
         * Reduce by <TargetObjectList> ::= @:<TargetObjectList> tcomma:T_COMMA TargetObject:<TargetObject>  :production394
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <TargetObjectList> ::= @:<TargetObjectList> tcomma:T_COMMA TargetObject:<TargetObject>  :production394
            ASTTargetObjectNode v3 = (ASTTargetObjectNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTTargetObjectListNode v1 = (ASTTargetObjectListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTTargetObjectListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.TargetObjectListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("TargetObject"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <TargetObjectList> ::= @:<TargetObjectList> tcomma:T_COMMA TargetObject:<TargetObject>  :production394
         */
        protected ASTTargetObjectListNode userAction(ASTTargetObjectListNode v1, Token v2, ASTTargetObjectNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production394Production PRODUCTION394 = Production394Production.getInstance();

    public static class Production395Production extends Production
    {
        private Production395Production() {;} // Singleton
        private static Production395Production singletonInstance = null;
        public static final Production395Production getInstance() { if (singletonInstance == null) singletonInstance = new Production395Production(); return singletonInstance; }

        public String getDescription() { return "<TargetObject> ::= TargetName:<TargetName>  :production395"; }

        /**
         * Reduce by <TargetObject> ::= TargetName:<TargetName>  :production395
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <TargetObject> ::= TargetName:<TargetName>  :production395
            ASTTargetNameNode v1 = (ASTTargetNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTTargetObjectNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.TargetObjectNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("TargetName"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <TargetObject> ::= TargetName:<TargetName>  :production395
         */
        protected ASTTargetObjectNode userAction(ASTTargetNameNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production395Production PRODUCTION395 = Production395Production.getInstance();

    public static class Production396Production extends Production
    {
        private Production396Production() {;} // Singleton
        private static Production396Production singletonInstance = null;
        public static final Production396Production getInstance() { if (singletonInstance == null) singletonInstance = new Production396Production(); return singletonInstance; }

        public String getDescription() { return "<TargetObject> ::= TargetName:<TargetName> tlparen:T_LPAREN ArraySpec:<ArraySpec> trparen:T_RPAREN  :production396"; }

        /**
         * Reduce by <TargetObject> ::= TargetName:<TargetName> tlparen:T_LPAREN ArraySpec:<ArraySpec> trparen:T_RPAREN  :production396
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <TargetObject> ::= TargetName:<TargetName> tlparen:T_LPAREN ArraySpec:<ArraySpec> trparen:T_RPAREN  :production396
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTArraySpecNode v3 = (ASTArraySpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTTargetNameNode v1 = (ASTTargetNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTTargetObjectNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.TargetObjectNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("TargetName"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("ArraySpec"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <TargetObject> ::= TargetName:<TargetName> tlparen:T_LPAREN ArraySpec:<ArraySpec> trparen:T_RPAREN  :production396
         */
        protected ASTTargetObjectNode userAction(ASTTargetNameNode v1, Token v2, ASTArraySpecNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production396Production PRODUCTION396 = Production396Production.getInstance();

    public static class Production397Production extends Production
    {
        private Production397Production() {;} // Singleton
        private static Production397Production singletonInstance = null;
        public static final Production397Production getInstance() { if (singletonInstance == null) singletonInstance = new Production397Production(); return singletonInstance; }

        public String getDescription() { return "<TargetName> ::= tident:T_IDENT  :production397"; }

        /**
         * Reduce by <TargetName> ::= tident:T_IDENT  :production397
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <TargetName> ::= tident:T_IDENT  :production397
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTTargetNameNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.TargetNameNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tident"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <TargetName> ::= tident:T_IDENT  :production397
         */
        protected ASTTargetNameNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production397Production PRODUCTION397 = Production397Production.getInstance();

    public static class Production398Production extends Production
    {
        private Production398Production() {;} // Singleton
        private static Production398Production singletonInstance = null;
        public static final Production398Production getInstance() { if (singletonInstance == null) singletonInstance = new Production398Production(); return singletonInstance; }

        public String getDescription() { return "<ParameterStmt> ::= tparameter:T_PARAMETER tlparen:T_LPAREN NamedConstantDefList:<NamedConstantDefList> trparen:T_RPAREN teos:T_EOS  :production398"; }

        /**
         * Reduce by <ParameterStmt> ::= tparameter:T_PARAMETER tlparen:T_LPAREN NamedConstantDefList:<NamedConstantDefList> trparen:T_RPAREN teos:T_EOS  :production398
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ParameterStmt> ::= tparameter:T_PARAMETER tlparen:T_LPAREN NamedConstantDefList:<NamedConstantDefList> trparen:T_RPAREN teos:T_EOS  :production398
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNamedConstantDefListNode v3 = (ASTNamedConstantDefListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTParameterStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.ParameterStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tparameter"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("NamedConstantDefList"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ParameterStmt> ::= tparameter:T_PARAMETER tlparen:T_LPAREN NamedConstantDefList:<NamedConstantDefList> trparen:T_RPAREN teos:T_EOS  :production398
         */
        protected ASTParameterStmtNode userAction(Token v1, Token v2, ASTNamedConstantDefListNode v3, Token v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production398Production PRODUCTION398 = Production398Production.getInstance();

    public static class Production399Production extends Production
    {
        private Production399Production() {;} // Singleton
        private static Production399Production singletonInstance = null;
        public static final Production399Production getInstance() { if (singletonInstance == null) singletonInstance = new Production399Production(); return singletonInstance; }

        public String getDescription() { return "<ParameterStmt> ::= LblDef:<LblDef> tparameter:T_PARAMETER tlparen:T_LPAREN NamedConstantDefList:<NamedConstantDefList> trparen:T_RPAREN teos:T_EOS  :production399"; }

        /**
         * Reduce by <ParameterStmt> ::= LblDef:<LblDef> tparameter:T_PARAMETER tlparen:T_LPAREN NamedConstantDefList:<NamedConstantDefList> trparen:T_RPAREN teos:T_EOS  :production399
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ParameterStmt> ::= LblDef:<LblDef> tparameter:T_PARAMETER tlparen:T_LPAREN NamedConstantDefList:<NamedConstantDefList> trparen:T_RPAREN teos:T_EOS  :production399
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNamedConstantDefListNode v4 = (ASTNamedConstantDefListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTParameterStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.ParameterStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tparameter"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("NamedConstantDefList"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ParameterStmt> ::= LblDef:<LblDef> tparameter:T_PARAMETER tlparen:T_LPAREN NamedConstantDefList:<NamedConstantDefList> trparen:T_RPAREN teos:T_EOS  :production399
         */
        protected ASTParameterStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, ASTNamedConstantDefListNode v4, Token v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production399Production PRODUCTION399 = Production399Production.getInstance();

    public static class Production400Production extends Production
    {
        private Production400Production() {;} // Singleton
        private static Production400Production singletonInstance = null;
        public static final Production400Production getInstance() { if (singletonInstance == null) singletonInstance = new Production400Production(); return singletonInstance; }

        public String getDescription() { return "<NamedConstantDefList> ::= NamedConstantDef:<NamedConstantDef>  :production400"; }

        /**
         * Reduce by <NamedConstantDefList> ::= NamedConstantDef:<NamedConstantDef>  :production400
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <NamedConstantDefList> ::= NamedConstantDef:<NamedConstantDef>  :production400
            ASTNamedConstantDefNode v1 = (ASTNamedConstantDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTNamedConstantDefListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.NamedConstantDefListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("NamedConstantDef"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <NamedConstantDefList> ::= NamedConstantDef:<NamedConstantDef>  :production400
         */
        protected ASTNamedConstantDefListNode userAction(ASTNamedConstantDefNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production400Production PRODUCTION400 = Production400Production.getInstance();

    public static class Production401Production extends Production
    {
        private Production401Production() {;} // Singleton
        private static Production401Production singletonInstance = null;
        public static final Production401Production getInstance() { if (singletonInstance == null) singletonInstance = new Production401Production(); return singletonInstance; }

        public String getDescription() { return "<NamedConstantDefList> ::= @:<NamedConstantDefList> tcomma:T_COMMA NamedConstantDef:<NamedConstantDef>  :production401"; }

        /**
         * Reduce by <NamedConstantDefList> ::= @:<NamedConstantDefList> tcomma:T_COMMA NamedConstantDef:<NamedConstantDef>  :production401
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <NamedConstantDefList> ::= @:<NamedConstantDefList> tcomma:T_COMMA NamedConstantDef:<NamedConstantDef>  :production401
            ASTNamedConstantDefNode v3 = (ASTNamedConstantDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNamedConstantDefListNode v1 = (ASTNamedConstantDefListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTNamedConstantDefListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.NamedConstantDefListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("NamedConstantDef"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <NamedConstantDefList> ::= @:<NamedConstantDefList> tcomma:T_COMMA NamedConstantDef:<NamedConstantDef>  :production401
         */
        protected ASTNamedConstantDefListNode userAction(ASTNamedConstantDefListNode v1, Token v2, ASTNamedConstantDefNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production401Production PRODUCTION401 = Production401Production.getInstance();

    public static class Production402Production extends Production
    {
        private Production402Production() {;} // Singleton
        private static Production402Production singletonInstance = null;
        public static final Production402Production getInstance() { if (singletonInstance == null) singletonInstance = new Production402Production(); return singletonInstance; }

        public String getDescription() { return "<NamedConstantDef> ::= NamedConstant:<NamedConstant> tequals:T_EQUALS Expr:<Expr>  :production402"; }

        /**
         * Reduce by <NamedConstantDef> ::= NamedConstant:<NamedConstant> tequals:T_EQUALS Expr:<Expr>  :production402
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <NamedConstantDef> ::= NamedConstant:<NamedConstant> tequals:T_EQUALS Expr:<Expr>  :production402
            ASTExprNode v3 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNamedConstantNode v1 = (ASTNamedConstantNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTNamedConstantDefNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.NamedConstantDefNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("NamedConstant"))
                return 0;
            else
                if (name.equals("tequals"))
                    return 1;
                else
                    if (name.equals("Expr"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <NamedConstantDef> ::= NamedConstant:<NamedConstant> tequals:T_EQUALS Expr:<Expr>  :production402
         */
        protected ASTNamedConstantDefNode userAction(ASTNamedConstantNode v1, Token v2, ASTExprNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production402Production PRODUCTION402 = Production402Production.getInstance();

    public static class Production403Production extends Production
    {
        private Production403Production() {;} // Singleton
        private static Production403Production singletonInstance = null;
        public static final Production403Production getInstance() { if (singletonInstance == null) singletonInstance = new Production403Production(); return singletonInstance; }

        public String getDescription() { return "<DataStmt> ::= tdata:T_DATA Datalist:<Datalist> teos:T_EOS  :production403"; }

        /**
         * Reduce by <DataStmt> ::= tdata:T_DATA Datalist:<Datalist> teos:T_EOS  :production403
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DataStmt> ::= tdata:T_DATA Datalist:<Datalist> teos:T_EOS  :production403
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDatalistNode v2 = (ASTDatalistNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDataStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.DataStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tdata"))
                return 0;
            else
                if (name.equals("Datalist"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DataStmt> ::= tdata:T_DATA Datalist:<Datalist> teos:T_EOS  :production403
         */
        protected ASTDataStmtNode userAction(Token v1, ASTDatalistNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production403Production PRODUCTION403 = Production403Production.getInstance();

    public static class Production404Production extends Production
    {
        private Production404Production() {;} // Singleton
        private static Production404Production singletonInstance = null;
        public static final Production404Production getInstance() { if (singletonInstance == null) singletonInstance = new Production404Production(); return singletonInstance; }

        public String getDescription() { return "<DataStmt> ::= LblDef:<LblDef> tdata:T_DATA Datalist:<Datalist> teos:T_EOS  :production404"; }

        /**
         * Reduce by <DataStmt> ::= LblDef:<LblDef> tdata:T_DATA Datalist:<Datalist> teos:T_EOS  :production404
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DataStmt> ::= LblDef:<LblDef> tdata:T_DATA Datalist:<Datalist> teos:T_EOS  :production404
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDatalistNode v3 = (ASTDatalistNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDataStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.DataStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tdata"))
                    return 1;
                else
                    if (name.equals("Datalist"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DataStmt> ::= LblDef:<LblDef> tdata:T_DATA Datalist:<Datalist> teos:T_EOS  :production404
         */
        protected ASTDataStmtNode userAction(ASTLblDefNode v1, Token v2, ASTDatalistNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production404Production PRODUCTION404 = Production404Production.getInstance();

    public static class Production405Production extends Production
    {
        private Production405Production() {;} // Singleton
        private static Production405Production singletonInstance = null;
        public static final Production405Production getInstance() { if (singletonInstance == null) singletonInstance = new Production405Production(); return singletonInstance; }

        public String getDescription() { return "<Datalist> ::= DataStmtSet:<DataStmtSet>  :production405"; }

        /**
         * Reduce by <Datalist> ::= DataStmtSet:<DataStmtSet>  :production405
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Datalist> ::= DataStmtSet:<DataStmtSet>  :production405
            ASTDataStmtSetNode v1 = (ASTDataStmtSetNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDatalistNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.DatalistNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("DataStmtSet"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Datalist> ::= DataStmtSet:<DataStmtSet>  :production405
         */
        protected ASTDatalistNode userAction(ASTDataStmtSetNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production405Production PRODUCTION405 = Production405Production.getInstance();

    public static class Production406Production extends Production
    {
        private Production406Production() {;} // Singleton
        private static Production406Production singletonInstance = null;
        public static final Production406Production getInstance() { if (singletonInstance == null) singletonInstance = new Production406Production(); return singletonInstance; }

        public String getDescription() { return "<Datalist> ::= @:<Datalist> DataStmtSet:<DataStmtSet>  :production406"; }

        /**
         * Reduce by <Datalist> ::= @:<Datalist> DataStmtSet:<DataStmtSet>  :production406
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Datalist> ::= @:<Datalist> DataStmtSet:<DataStmtSet>  :production406
            ASTDataStmtSetNode v2 = (ASTDataStmtSetNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDatalistNode v1 = (ASTDatalistNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDatalistNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.DatalistNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("DataStmtSet"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Datalist> ::= @:<Datalist> DataStmtSet:<DataStmtSet>  :production406
         */
        protected ASTDatalistNode userAction(ASTDatalistNode v1, ASTDataStmtSetNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production406Production PRODUCTION406 = Production406Production.getInstance();

    public static class Production407Production extends Production
    {
        private Production407Production() {;} // Singleton
        private static Production407Production singletonInstance = null;
        public static final Production407Production getInstance() { if (singletonInstance == null) singletonInstance = new Production407Production(); return singletonInstance; }

        public String getDescription() { return "<Datalist> ::= @:<Datalist> tcomma:T_COMMA DataStmtSet:<DataStmtSet>  :production407"; }

        /**
         * Reduce by <Datalist> ::= @:<Datalist> tcomma:T_COMMA DataStmtSet:<DataStmtSet>  :production407
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Datalist> ::= @:<Datalist> tcomma:T_COMMA DataStmtSet:<DataStmtSet>  :production407
            ASTDataStmtSetNode v3 = (ASTDataStmtSetNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDatalistNode v1 = (ASTDatalistNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDatalistNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.DatalistNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("DataStmtSet"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Datalist> ::= @:<Datalist> tcomma:T_COMMA DataStmtSet:<DataStmtSet>  :production407
         */
        protected ASTDatalistNode userAction(ASTDatalistNode v1, Token v2, ASTDataStmtSetNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production407Production PRODUCTION407 = Production407Production.getInstance();

    public static class Production408Production extends Production
    {
        private Production408Production() {;} // Singleton
        private static Production408Production singletonInstance = null;
        public static final Production408Production getInstance() { if (singletonInstance == null) singletonInstance = new Production408Production(); return singletonInstance; }

        public String getDescription() { return "<DataStmtSet> ::= DataStmtObjectList:<DataStmtObjectList> tslash:T_SLASH DataStmtValueList:<DataStmtValueList> tslash2:T_SLASH  :production408"; }

        /**
         * Reduce by <DataStmtSet> ::= DataStmtObjectList:<DataStmtObjectList> tslash:T_SLASH DataStmtValueList:<DataStmtValueList> tslash2:T_SLASH  :production408
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DataStmtSet> ::= DataStmtObjectList:<DataStmtObjectList> tslash:T_SLASH DataStmtValueList:<DataStmtValueList> tslash2:T_SLASH  :production408
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDataStmtValueListNode v3 = (ASTDataStmtValueListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDataStmtObjectListNode v1 = (ASTDataStmtObjectListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDataStmtSetNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.DataStmtSetNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("DataStmtObjectList"))
                return 0;
            else
                if (name.equals("tslash"))
                    return 1;
                else
                    if (name.equals("DataStmtValueList"))
                        return 2;
                    else
                        if (name.equals("tslash2"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DataStmtSet> ::= DataStmtObjectList:<DataStmtObjectList> tslash:T_SLASH DataStmtValueList:<DataStmtValueList> tslash2:T_SLASH  :production408
         */
        protected ASTDataStmtSetNode userAction(ASTDataStmtObjectListNode v1, Token v2, ASTDataStmtValueListNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production408Production PRODUCTION408 = Production408Production.getInstance();

    public static class Production409Production extends Production
    {
        private Production409Production() {;} // Singleton
        private static Production409Production singletonInstance = null;
        public static final Production409Production getInstance() { if (singletonInstance == null) singletonInstance = new Production409Production(); return singletonInstance; }

        public String getDescription() { return "<DataStmtObjectList> ::= DataStmtObject:<DataStmtObject>  :production409"; }

        /**
         * Reduce by <DataStmtObjectList> ::= DataStmtObject:<DataStmtObject>  :production409
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DataStmtObjectList> ::= DataStmtObject:<DataStmtObject>  :production409
            ASTDataStmtObjectNode v1 = (ASTDataStmtObjectNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDataStmtObjectListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.DataStmtObjectListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("DataStmtObject"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DataStmtObjectList> ::= DataStmtObject:<DataStmtObject>  :production409
         */
        protected ASTDataStmtObjectListNode userAction(ASTDataStmtObjectNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production409Production PRODUCTION409 = Production409Production.getInstance();

    public static class Production410Production extends Production
    {
        private Production410Production() {;} // Singleton
        private static Production410Production singletonInstance = null;
        public static final Production410Production getInstance() { if (singletonInstance == null) singletonInstance = new Production410Production(); return singletonInstance; }

        public String getDescription() { return "<DataStmtObjectList> ::= @:<DataStmtObjectList> tcomma:T_COMMA DataStmtObject:<DataStmtObject>  :production410"; }

        /**
         * Reduce by <DataStmtObjectList> ::= @:<DataStmtObjectList> tcomma:T_COMMA DataStmtObject:<DataStmtObject>  :production410
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DataStmtObjectList> ::= @:<DataStmtObjectList> tcomma:T_COMMA DataStmtObject:<DataStmtObject>  :production410
            ASTDataStmtObjectNode v3 = (ASTDataStmtObjectNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDataStmtObjectListNode v1 = (ASTDataStmtObjectListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDataStmtObjectListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.DataStmtObjectListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("DataStmtObject"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DataStmtObjectList> ::= @:<DataStmtObjectList> tcomma:T_COMMA DataStmtObject:<DataStmtObject>  :production410
         */
        protected ASTDataStmtObjectListNode userAction(ASTDataStmtObjectListNode v1, Token v2, ASTDataStmtObjectNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production410Production PRODUCTION410 = Production410Production.getInstance();

    public static class Production411Production extends Production
    {
        private Production411Production() {;} // Singleton
        private static Production411Production singletonInstance = null;
        public static final Production411Production getInstance() { if (singletonInstance == null) singletonInstance = new Production411Production(); return singletonInstance; }

        public String getDescription() { return "<DataStmtObject> ::= Variable:<Variable>  :production411"; }

        /**
         * Reduce by <DataStmtObject> ::= Variable:<Variable>  :production411
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DataStmtObject> ::= Variable:<Variable>  :production411
            ASTVariableNode v1 = (ASTVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDataStmtObjectNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.DataStmtObjectNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Variable"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DataStmtObject> ::= Variable:<Variable>  :production411
         */
        protected ASTDataStmtObjectNode userAction(ASTVariableNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production411Production PRODUCTION411 = Production411Production.getInstance();

    public static class Production412Production extends Production
    {
        private Production412Production() {;} // Singleton
        private static Production412Production singletonInstance = null;
        public static final Production412Production getInstance() { if (singletonInstance == null) singletonInstance = new Production412Production(); return singletonInstance; }

        public String getDescription() { return "<DataStmtObject> ::= DataImpliedDo:<DataImpliedDo>  :production412"; }

        /**
         * Reduce by <DataStmtObject> ::= DataImpliedDo:<DataImpliedDo>  :production412
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DataStmtObject> ::= DataImpliedDo:<DataImpliedDo>  :production412
            ASTDataImpliedDoNode v1 = (ASTDataImpliedDoNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDataStmtObjectNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.DataStmtObjectNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("DataImpliedDo"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DataStmtObject> ::= DataImpliedDo:<DataImpliedDo>  :production412
         */
        protected ASTDataStmtObjectNode userAction(ASTDataImpliedDoNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production412Production PRODUCTION412 = Production412Production.getInstance();

    public static class Production413Production extends Production
    {
        private Production413Production() {;} // Singleton
        private static Production413Production singletonInstance = null;
        public static final Production413Production getInstance() { if (singletonInstance == null) singletonInstance = new Production413Production(); return singletonInstance; }

        public String getDescription() { return "<DataImpliedDo> ::= tlparen:T_LPAREN DataIDoObjectList:<DataIDoObjectList> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr:<Expr> tcomma2:T_COMMA Expr2:<Expr> trparen:T_RPAREN  :production413"; }

        /**
         * Reduce by <DataImpliedDo> ::= tlparen:T_LPAREN DataIDoObjectList:<DataIDoObjectList> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr:<Expr> tcomma2:T_COMMA Expr2:<Expr> trparen:T_RPAREN  :production413
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DataImpliedDo> ::= tlparen:T_LPAREN DataIDoObjectList:<DataIDoObjectList> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr:<Expr> tcomma2:T_COMMA Expr2:<Expr> trparen:T_RPAREN  :production413
            Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v8 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v6 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTImpliedDoVariableNode v4 = (ASTImpliedDoVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDataIDoObjectListNode v2 = (ASTDataIDoObjectListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDataImpliedDoNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8, v9);

            // The production has 9 symbols on its RHS
            parser.reduce(Nonterminal.DataImpliedDoNonterminal.getInstance(), 9, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("DataIDoObjectList"))
                    return 1;
                else
                    if (name.equals("tcomma"))
                        return 2;
                    else
                        if (name.equals("ImpliedDoVariable"))
                            return 3;
                        else
                            if (name.equals("tequals"))
                                return 4;
                            else
                                if (name.equals("Expr"))
                                    return 5;
                                else
                                    if (name.equals("tcomma2"))
                                        return 6;
                                    else
                                        if (name.equals("Expr2"))
                                            return 7;
                                        else
                                            if (name.equals("trparen"))
                                                return 8;
                                            else
                                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DataImpliedDo> ::= tlparen:T_LPAREN DataIDoObjectList:<DataIDoObjectList> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr:<Expr> tcomma2:T_COMMA Expr2:<Expr> trparen:T_RPAREN  :production413
         */
        protected ASTDataImpliedDoNode userAction(Token v1, ASTDataIDoObjectListNode v2, Token v3, ASTImpliedDoVariableNode v4, Token v5, ASTExprNode v6, Token v7, ASTExprNode v8, Token v9)
        {
            return null;
        }
    }
    public static final Productions.Production413Production PRODUCTION413 = Production413Production.getInstance();

    public static class Production414Production extends Production
    {
        private Production414Production() {;} // Singleton
        private static Production414Production singletonInstance = null;
        public static final Production414Production getInstance() { if (singletonInstance == null) singletonInstance = new Production414Production(); return singletonInstance; }

        public String getDescription() { return "<DataImpliedDo> ::= tlparen:T_LPAREN DataIDoObjectList:<DataIDoObjectList> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr:<Expr> tcomma2:T_COMMA Expr2:<Expr> tcomma3:T_COMMA Expr3:<Expr> trparen:T_RPAREN  :production414"; }

        /**
         * Reduce by <DataImpliedDo> ::= tlparen:T_LPAREN DataIDoObjectList:<DataIDoObjectList> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr:<Expr> tcomma2:T_COMMA Expr2:<Expr> tcomma3:T_COMMA Expr3:<Expr> trparen:T_RPAREN  :production414
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DataImpliedDo> ::= tlparen:T_LPAREN DataIDoObjectList:<DataIDoObjectList> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr:<Expr> tcomma2:T_COMMA Expr2:<Expr> tcomma3:T_COMMA Expr3:<Expr> trparen:T_RPAREN  :production414
            Token v11 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v10 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v8 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v6 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTImpliedDoVariableNode v4 = (ASTImpliedDoVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDataIDoObjectListNode v2 = (ASTDataIDoObjectListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDataImpliedDoNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);

            // The production has 11 symbols on its RHS
            parser.reduce(Nonterminal.DataImpliedDoNonterminal.getInstance(), 11, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("DataIDoObjectList"))
                    return 1;
                else
                    if (name.equals("tcomma"))
                        return 2;
                    else
                        if (name.equals("ImpliedDoVariable"))
                            return 3;
                        else
                            if (name.equals("tequals"))
                                return 4;
                            else
                                if (name.equals("Expr"))
                                    return 5;
                                else
                                    if (name.equals("tcomma2"))
                                        return 6;
                                    else
                                        if (name.equals("Expr2"))
                                            return 7;
                                        else
                                            if (name.equals("tcomma3"))
                                                return 8;
                                            else
                                                if (name.equals("Expr3"))
                                                    return 9;
                                                else
                                                    if (name.equals("trparen"))
                                                        return 10;
                                                    else
                                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DataImpliedDo> ::= tlparen:T_LPAREN DataIDoObjectList:<DataIDoObjectList> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr:<Expr> tcomma2:T_COMMA Expr2:<Expr> tcomma3:T_COMMA Expr3:<Expr> trparen:T_RPAREN  :production414
         */
        protected ASTDataImpliedDoNode userAction(Token v1, ASTDataIDoObjectListNode v2, Token v3, ASTImpliedDoVariableNode v4, Token v5, ASTExprNode v6, Token v7, ASTExprNode v8, Token v9, ASTExprNode v10, Token v11)
        {
            return null;
        }
    }
    public static final Productions.Production414Production PRODUCTION414 = Production414Production.getInstance();

    public static class Production415Production extends Production
    {
        private Production415Production() {;} // Singleton
        private static Production415Production singletonInstance = null;
        public static final Production415Production getInstance() { if (singletonInstance == null) singletonInstance = new Production415Production(); return singletonInstance; }

        public String getDescription() { return "<DataIDoObjectList> ::= DataIDoObject:<DataIDoObject>  :production415"; }

        /**
         * Reduce by <DataIDoObjectList> ::= DataIDoObject:<DataIDoObject>  :production415
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DataIDoObjectList> ::= DataIDoObject:<DataIDoObject>  :production415
            ASTDataIDoObjectNode v1 = (ASTDataIDoObjectNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDataIDoObjectListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.DataIDoObjectListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("DataIDoObject"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DataIDoObjectList> ::= DataIDoObject:<DataIDoObject>  :production415
         */
        protected ASTDataIDoObjectListNode userAction(ASTDataIDoObjectNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production415Production PRODUCTION415 = Production415Production.getInstance();

    public static class Production416Production extends Production
    {
        private Production416Production() {;} // Singleton
        private static Production416Production singletonInstance = null;
        public static final Production416Production getInstance() { if (singletonInstance == null) singletonInstance = new Production416Production(); return singletonInstance; }

        public String getDescription() { return "<DataIDoObjectList> ::= @:<DataIDoObjectList> tcomma:T_COMMA DataIDoObject:<DataIDoObject>  :production416"; }

        /**
         * Reduce by <DataIDoObjectList> ::= @:<DataIDoObjectList> tcomma:T_COMMA DataIDoObject:<DataIDoObject>  :production416
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DataIDoObjectList> ::= @:<DataIDoObjectList> tcomma:T_COMMA DataIDoObject:<DataIDoObject>  :production416
            ASTDataIDoObjectNode v3 = (ASTDataIDoObjectNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDataIDoObjectListNode v1 = (ASTDataIDoObjectListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDataIDoObjectListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.DataIDoObjectListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("DataIDoObject"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DataIDoObjectList> ::= @:<DataIDoObjectList> tcomma:T_COMMA DataIDoObject:<DataIDoObject>  :production416
         */
        protected ASTDataIDoObjectListNode userAction(ASTDataIDoObjectListNode v1, Token v2, ASTDataIDoObjectNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production416Production PRODUCTION416 = Production416Production.getInstance();

    public static class Production417Production extends Production
    {
        private Production417Production() {;} // Singleton
        private static Production417Production singletonInstance = null;
        public static final Production417Production getInstance() { if (singletonInstance == null) singletonInstance = new Production417Production(); return singletonInstance; }

        public String getDescription() { return "<DataIDoObject> ::= ArrayElement:<ArrayElement>  :production417"; }

        /**
         * Reduce by <DataIDoObject> ::= ArrayElement:<ArrayElement>  :production417
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DataIDoObject> ::= ArrayElement:<ArrayElement>  :production417
            ASTArrayElementNode v1 = (ASTArrayElementNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDataIDoObjectNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.DataIDoObjectNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ArrayElement"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DataIDoObject> ::= ArrayElement:<ArrayElement>  :production417
         */
        protected ASTDataIDoObjectNode userAction(ASTArrayElementNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production417Production PRODUCTION417 = Production417Production.getInstance();

    public static class Production418Production extends Production
    {
        private Production418Production() {;} // Singleton
        private static Production418Production singletonInstance = null;
        public static final Production418Production getInstance() { if (singletonInstance == null) singletonInstance = new Production418Production(); return singletonInstance; }

        public String getDescription() { return "<DataIDoObject> ::= DataImpliedDo:<DataImpliedDo>  :production418"; }

        /**
         * Reduce by <DataIDoObject> ::= DataImpliedDo:<DataImpliedDo>  :production418
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DataIDoObject> ::= DataImpliedDo:<DataImpliedDo>  :production418
            ASTDataImpliedDoNode v1 = (ASTDataImpliedDoNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDataIDoObjectNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.DataIDoObjectNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("DataImpliedDo"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DataIDoObject> ::= DataImpliedDo:<DataImpliedDo>  :production418
         */
        protected ASTDataIDoObjectNode userAction(ASTDataImpliedDoNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production418Production PRODUCTION418 = Production418Production.getInstance();

    public static class Production419Production extends Production
    {
        private Production419Production() {;} // Singleton
        private static Production419Production singletonInstance = null;
        public static final Production419Production getInstance() { if (singletonInstance == null) singletonInstance = new Production419Production(); return singletonInstance; }

        public String getDescription() { return "<DataIDoObject> ::= StructureComponent:<StructureComponent>  :production419"; }

        /**
         * Reduce by <DataIDoObject> ::= StructureComponent:<StructureComponent>  :production419
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DataIDoObject> ::= StructureComponent:<StructureComponent>  :production419
            ASTStructureComponentNode v1 = (ASTStructureComponentNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDataIDoObjectNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.DataIDoObjectNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("StructureComponent"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DataIDoObject> ::= StructureComponent:<StructureComponent>  :production419
         */
        protected ASTDataIDoObjectNode userAction(ASTStructureComponentNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production419Production PRODUCTION419 = Production419Production.getInstance();

    public static class Production420Production extends Production
    {
        private Production420Production() {;} // Singleton
        private static Production420Production singletonInstance = null;
        public static final Production420Production getInstance() { if (singletonInstance == null) singletonInstance = new Production420Production(); return singletonInstance; }

        public String getDescription() { return "<DataStmtValueList> ::= DataStmtValue:<DataStmtValue>  :production420"; }

        /**
         * Reduce by <DataStmtValueList> ::= DataStmtValue:<DataStmtValue>  :production420
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DataStmtValueList> ::= DataStmtValue:<DataStmtValue>  :production420
            ASTDataStmtValueNode v1 = (ASTDataStmtValueNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDataStmtValueListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.DataStmtValueListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("DataStmtValue"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DataStmtValueList> ::= DataStmtValue:<DataStmtValue>  :production420
         */
        protected ASTDataStmtValueListNode userAction(ASTDataStmtValueNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production420Production PRODUCTION420 = Production420Production.getInstance();

    public static class Production421Production extends Production
    {
        private Production421Production() {;} // Singleton
        private static Production421Production singletonInstance = null;
        public static final Production421Production getInstance() { if (singletonInstance == null) singletonInstance = new Production421Production(); return singletonInstance; }

        public String getDescription() { return "<DataStmtValueList> ::= @:<DataStmtValueList> tcomma:T_COMMA DataStmtValue:<DataStmtValue>  :production421"; }

        /**
         * Reduce by <DataStmtValueList> ::= @:<DataStmtValueList> tcomma:T_COMMA DataStmtValue:<DataStmtValue>  :production421
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DataStmtValueList> ::= @:<DataStmtValueList> tcomma:T_COMMA DataStmtValue:<DataStmtValue>  :production421
            ASTDataStmtValueNode v3 = (ASTDataStmtValueNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDataStmtValueListNode v1 = (ASTDataStmtValueListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDataStmtValueListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.DataStmtValueListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("DataStmtValue"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DataStmtValueList> ::= @:<DataStmtValueList> tcomma:T_COMMA DataStmtValue:<DataStmtValue>  :production421
         */
        protected ASTDataStmtValueListNode userAction(ASTDataStmtValueListNode v1, Token v2, ASTDataStmtValueNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production421Production PRODUCTION421 = Production421Production.getInstance();

    public static class Production422Production extends Production
    {
        private Production422Production() {;} // Singleton
        private static Production422Production singletonInstance = null;
        public static final Production422Production getInstance() { if (singletonInstance == null) singletonInstance = new Production422Production(); return singletonInstance; }

        public String getDescription() { return "<DataStmtValue> ::= DataStmtConstant:<DataStmtConstant>  :production422"; }

        /**
         * Reduce by <DataStmtValue> ::= DataStmtConstant:<DataStmtConstant>  :production422
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DataStmtValue> ::= DataStmtConstant:<DataStmtConstant>  :production422
            ASTDataStmtConstantNode v1 = (ASTDataStmtConstantNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDataStmtValueNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.DataStmtValueNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("DataStmtConstant"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DataStmtValue> ::= DataStmtConstant:<DataStmtConstant>  :production422
         */
        protected ASTDataStmtValueNode userAction(ASTDataStmtConstantNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production422Production PRODUCTION422 = Production422Production.getInstance();

    public static class Production423Production extends Production
    {
        private Production423Production() {;} // Singleton
        private static Production423Production singletonInstance = null;
        public static final Production423Production getInstance() { if (singletonInstance == null) singletonInstance = new Production423Production(); return singletonInstance; }

        public String getDescription() { return "<DataStmtValue> ::= ticon:T_ICON tasterisk:T_ASTERISK DataStmtConstant:<DataStmtConstant>  :production423"; }

        /**
         * Reduce by <DataStmtValue> ::= ticon:T_ICON tasterisk:T_ASTERISK DataStmtConstant:<DataStmtConstant>  :production423
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DataStmtValue> ::= ticon:T_ICON tasterisk:T_ASTERISK DataStmtConstant:<DataStmtConstant>  :production423
            ASTDataStmtConstantNode v3 = (ASTDataStmtConstantNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDataStmtValueNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.DataStmtValueNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ticon"))
                return 0;
            else
                if (name.equals("tasterisk"))
                    return 1;
                else
                    if (name.equals("DataStmtConstant"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DataStmtValue> ::= ticon:T_ICON tasterisk:T_ASTERISK DataStmtConstant:<DataStmtConstant>  :production423
         */
        protected ASTDataStmtValueNode userAction(Token v1, Token v2, ASTDataStmtConstantNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production423Production PRODUCTION423 = Production423Production.getInstance();

    public static class Production424Production extends Production
    {
        private Production424Production() {;} // Singleton
        private static Production424Production singletonInstance = null;
        public static final Production424Production getInstance() { if (singletonInstance == null) singletonInstance = new Production424Production(); return singletonInstance; }

        public String getDescription() { return "<DataStmtValue> ::= NamedConstantUse:<NamedConstantUse> tasterisk:T_ASTERISK DataStmtConstant:<DataStmtConstant>  :production424"; }

        /**
         * Reduce by <DataStmtValue> ::= NamedConstantUse:<NamedConstantUse> tasterisk:T_ASTERISK DataStmtConstant:<DataStmtConstant>  :production424
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DataStmtValue> ::= NamedConstantUse:<NamedConstantUse> tasterisk:T_ASTERISK DataStmtConstant:<DataStmtConstant>  :production424
            ASTDataStmtConstantNode v3 = (ASTDataStmtConstantNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNamedConstantUseNode v1 = (ASTNamedConstantUseNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDataStmtValueNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.DataStmtValueNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("NamedConstantUse"))
                return 0;
            else
                if (name.equals("tasterisk"))
                    return 1;
                else
                    if (name.equals("DataStmtConstant"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DataStmtValue> ::= NamedConstantUse:<NamedConstantUse> tasterisk:T_ASTERISK DataStmtConstant:<DataStmtConstant>  :production424
         */
        protected ASTDataStmtValueNode userAction(ASTNamedConstantUseNode v1, Token v2, ASTDataStmtConstantNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production424Production PRODUCTION424 = Production424Production.getInstance();

    public static class Production425Production extends Production
    {
        private Production425Production() {;} // Singleton
        private static Production425Production singletonInstance = null;
        public static final Production425Production getInstance() { if (singletonInstance == null) singletonInstance = new Production425Production(); return singletonInstance; }

        public String getDescription() { return "<DataStmtConstant> ::= Constant:<Constant>  :production425"; }

        /**
         * Reduce by <DataStmtConstant> ::= Constant:<Constant>  :production425
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DataStmtConstant> ::= Constant:<Constant>  :production425
            ASTConstantNode v1 = (ASTConstantNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDataStmtConstantNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.DataStmtConstantNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Constant"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DataStmtConstant> ::= Constant:<Constant>  :production425
         */
        protected ASTDataStmtConstantNode userAction(ASTConstantNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production425Production PRODUCTION425 = Production425Production.getInstance();

    public static class Production426Production extends Production
    {
        private Production426Production() {;} // Singleton
        private static Production426Production singletonInstance = null;
        public static final Production426Production getInstance() { if (singletonInstance == null) singletonInstance = new Production426Production(); return singletonInstance; }

        public String getDescription() { return "<DataStmtConstant> ::= tnull:T_NULL tlparen:T_LPAREN trparen:T_RPAREN  :production426"; }

        /**
         * Reduce by <DataStmtConstant> ::= tnull:T_NULL tlparen:T_LPAREN trparen:T_RPAREN  :production426
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DataStmtConstant> ::= tnull:T_NULL tlparen:T_LPAREN trparen:T_RPAREN  :production426
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDataStmtConstantNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.DataStmtConstantNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tnull"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("trparen"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DataStmtConstant> ::= tnull:T_NULL tlparen:T_LPAREN trparen:T_RPAREN  :production426
         */
        protected ASTDataStmtConstantNode userAction(Token v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production426Production PRODUCTION426 = Production426Production.getInstance();

    public static class Production427Production extends Production
    {
        private Production427Production() {;} // Singleton
        private static Production427Production singletonInstance = null;
        public static final Production427Production getInstance() { if (singletonInstance == null) singletonInstance = new Production427Production(); return singletonInstance; }

        public String getDescription() { return "<ImplicitStmt> ::= timplicit:T_IMPLICIT ImplicitSpecList:<ImplicitSpecList> teos:T_EOS  :production427"; }

        /**
         * Reduce by <ImplicitStmt> ::= timplicit:T_IMPLICIT ImplicitSpecList:<ImplicitSpecList> teos:T_EOS  :production427
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ImplicitStmt> ::= timplicit:T_IMPLICIT ImplicitSpecList:<ImplicitSpecList> teos:T_EOS  :production427
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTImplicitSpecListNode v2 = (ASTImplicitSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTImplicitStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.ImplicitStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("timplicit"))
                return 0;
            else
                if (name.equals("ImplicitSpecList"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ImplicitStmt> ::= timplicit:T_IMPLICIT ImplicitSpecList:<ImplicitSpecList> teos:T_EOS  :production427
         */
        protected ASTImplicitStmtNode userAction(Token v1, ASTImplicitSpecListNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production427Production PRODUCTION427 = Production427Production.getInstance();

    public static class Production428Production extends Production
    {
        private Production428Production() {;} // Singleton
        private static Production428Production singletonInstance = null;
        public static final Production428Production getInstance() { if (singletonInstance == null) singletonInstance = new Production428Production(); return singletonInstance; }

        public String getDescription() { return "<ImplicitStmt> ::= LblDef:<LblDef> timplicit:T_IMPLICIT ImplicitSpecList:<ImplicitSpecList> teos:T_EOS  :production428"; }

        /**
         * Reduce by <ImplicitStmt> ::= LblDef:<LblDef> timplicit:T_IMPLICIT ImplicitSpecList:<ImplicitSpecList> teos:T_EOS  :production428
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ImplicitStmt> ::= LblDef:<LblDef> timplicit:T_IMPLICIT ImplicitSpecList:<ImplicitSpecList> teos:T_EOS  :production428
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTImplicitSpecListNode v3 = (ASTImplicitSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTImplicitStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.ImplicitStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("timplicit"))
                    return 1;
                else
                    if (name.equals("ImplicitSpecList"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ImplicitStmt> ::= LblDef:<LblDef> timplicit:T_IMPLICIT ImplicitSpecList:<ImplicitSpecList> teos:T_EOS  :production428
         */
        protected ASTImplicitStmtNode userAction(ASTLblDefNode v1, Token v2, ASTImplicitSpecListNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production428Production PRODUCTION428 = Production428Production.getInstance();

    public static class Production429Production extends Production
    {
        private Production429Production() {;} // Singleton
        private static Production429Production singletonInstance = null;
        public static final Production429Production getInstance() { if (singletonInstance == null) singletonInstance = new Production429Production(); return singletonInstance; }

        public String getDescription() { return "<ImplicitStmt> ::= timplicit:T_IMPLICIT tnone:T_NONE teos:T_EOS  :production429"; }

        /**
         * Reduce by <ImplicitStmt> ::= timplicit:T_IMPLICIT tnone:T_NONE teos:T_EOS  :production429
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ImplicitStmt> ::= timplicit:T_IMPLICIT tnone:T_NONE teos:T_EOS  :production429
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTImplicitStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.ImplicitStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("timplicit"))
                return 0;
            else
                if (name.equals("tnone"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ImplicitStmt> ::= timplicit:T_IMPLICIT tnone:T_NONE teos:T_EOS  :production429
         */
        protected ASTImplicitStmtNode userAction(Token v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production429Production PRODUCTION429 = Production429Production.getInstance();

    public static class Production430Production extends Production
    {
        private Production430Production() {;} // Singleton
        private static Production430Production singletonInstance = null;
        public static final Production430Production getInstance() { if (singletonInstance == null) singletonInstance = new Production430Production(); return singletonInstance; }

        public String getDescription() { return "<ImplicitStmt> ::= LblDef:<LblDef> timplicit:T_IMPLICIT tnone:T_NONE teos:T_EOS  :production430"; }

        /**
         * Reduce by <ImplicitStmt> ::= LblDef:<LblDef> timplicit:T_IMPLICIT tnone:T_NONE teos:T_EOS  :production430
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ImplicitStmt> ::= LblDef:<LblDef> timplicit:T_IMPLICIT tnone:T_NONE teos:T_EOS  :production430
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTImplicitStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.ImplicitStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("timplicit"))
                    return 1;
                else
                    if (name.equals("tnone"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ImplicitStmt> ::= LblDef:<LblDef> timplicit:T_IMPLICIT tnone:T_NONE teos:T_EOS  :production430
         */
        protected ASTImplicitStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production430Production PRODUCTION430 = Production430Production.getInstance();

    public static class Production431Production extends Production
    {
        private Production431Production() {;} // Singleton
        private static Production431Production singletonInstance = null;
        public static final Production431Production getInstance() { if (singletonInstance == null) singletonInstance = new Production431Production(); return singletonInstance; }

        public String getDescription() { return "<ImplicitSpecList> ::= ImplicitSpec:<ImplicitSpec>  :production431"; }

        /**
         * Reduce by <ImplicitSpecList> ::= ImplicitSpec:<ImplicitSpec>  :production431
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ImplicitSpecList> ::= ImplicitSpec:<ImplicitSpec>  :production431
            ASTImplicitSpecNode v1 = (ASTImplicitSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTImplicitSpecListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ImplicitSpecListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ImplicitSpec"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ImplicitSpecList> ::= ImplicitSpec:<ImplicitSpec>  :production431
         */
        protected ASTImplicitSpecListNode userAction(ASTImplicitSpecNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production431Production PRODUCTION431 = Production431Production.getInstance();

    public static class Production432Production extends Production
    {
        private Production432Production() {;} // Singleton
        private static Production432Production singletonInstance = null;
        public static final Production432Production getInstance() { if (singletonInstance == null) singletonInstance = new Production432Production(); return singletonInstance; }

        public String getDescription() { return "<ImplicitSpecList> ::= @:<ImplicitSpecList> tcomma:T_COMMA ImplicitSpec:<ImplicitSpec>  :production432"; }

        /**
         * Reduce by <ImplicitSpecList> ::= @:<ImplicitSpecList> tcomma:T_COMMA ImplicitSpec:<ImplicitSpec>  :production432
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ImplicitSpecList> ::= @:<ImplicitSpecList> tcomma:T_COMMA ImplicitSpec:<ImplicitSpec>  :production432
            ASTImplicitSpecNode v3 = (ASTImplicitSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTImplicitSpecListNode v1 = (ASTImplicitSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTImplicitSpecListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.ImplicitSpecListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("ImplicitSpec"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ImplicitSpecList> ::= @:<ImplicitSpecList> tcomma:T_COMMA ImplicitSpec:<ImplicitSpec>  :production432
         */
        protected ASTImplicitSpecListNode userAction(ASTImplicitSpecListNode v1, Token v2, ASTImplicitSpecNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production432Production PRODUCTION432 = Production432Production.getInstance();

    public static class Production433Production extends Production
    {
        private Production433Production() {;} // Singleton
        private static Production433Production singletonInstance = null;
        public static final Production433Production getInstance() { if (singletonInstance == null) singletonInstance = new Production433Production(); return singletonInstance; }

        public String getDescription() { return "<ImplicitSpec> ::= TypeSpec:<TypeSpec> TxImpl:T_xImpl  :production433"; }

        /**
         * Reduce by <ImplicitSpec> ::= TypeSpec:<TypeSpec> TxImpl:T_xImpl  :production433
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ImplicitSpec> ::= TypeSpec:<TypeSpec> TxImpl:T_xImpl  :production433
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTTypeSpecNode v1 = (ASTTypeSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTImplicitSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.ImplicitSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("TypeSpec"))
                return 0;
            else
                if (name.equals("TxImpl"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ImplicitSpec> ::= TypeSpec:<TypeSpec> TxImpl:T_xImpl  :production433
         */
        protected ASTImplicitSpecNode userAction(ASTTypeSpecNode v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production433Production PRODUCTION433 = Production433Production.getInstance();

    public static class Production434Production extends Production
    {
        private Production434Production() {;} // Singleton
        private static Production434Production singletonInstance = null;
        public static final Production434Production getInstance() { if (singletonInstance == null) singletonInstance = new Production434Production(); return singletonInstance; }

        public String getDescription() { return "<NamelistStmt> ::= tnamelist:T_NAMELIST NamelistGroups:<NamelistGroups> teos:T_EOS  :production434"; }

        /**
         * Reduce by <NamelistStmt> ::= tnamelist:T_NAMELIST NamelistGroups:<NamelistGroups> teos:T_EOS  :production434
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <NamelistStmt> ::= tnamelist:T_NAMELIST NamelistGroups:<NamelistGroups> teos:T_EOS  :production434
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNamelistGroupsNode v2 = (ASTNamelistGroupsNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTNamelistStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.NamelistStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tnamelist"))
                return 0;
            else
                if (name.equals("NamelistGroups"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <NamelistStmt> ::= tnamelist:T_NAMELIST NamelistGroups:<NamelistGroups> teos:T_EOS  :production434
         */
        protected ASTNamelistStmtNode userAction(Token v1, ASTNamelistGroupsNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production434Production PRODUCTION434 = Production434Production.getInstance();

    public static class Production435Production extends Production
    {
        private Production435Production() {;} // Singleton
        private static Production435Production singletonInstance = null;
        public static final Production435Production getInstance() { if (singletonInstance == null) singletonInstance = new Production435Production(); return singletonInstance; }

        public String getDescription() { return "<NamelistStmt> ::= LblDef:<LblDef> tnamelist:T_NAMELIST NamelistGroups:<NamelistGroups> teos:T_EOS  :production435"; }

        /**
         * Reduce by <NamelistStmt> ::= LblDef:<LblDef> tnamelist:T_NAMELIST NamelistGroups:<NamelistGroups> teos:T_EOS  :production435
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <NamelistStmt> ::= LblDef:<LblDef> tnamelist:T_NAMELIST NamelistGroups:<NamelistGroups> teos:T_EOS  :production435
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNamelistGroupsNode v3 = (ASTNamelistGroupsNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTNamelistStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.NamelistStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tnamelist"))
                    return 1;
                else
                    if (name.equals("NamelistGroups"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <NamelistStmt> ::= LblDef:<LblDef> tnamelist:T_NAMELIST NamelistGroups:<NamelistGroups> teos:T_EOS  :production435
         */
        protected ASTNamelistStmtNode userAction(ASTLblDefNode v1, Token v2, ASTNamelistGroupsNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production435Production PRODUCTION435 = Production435Production.getInstance();

    public static class Production436Production extends Production
    {
        private Production436Production() {;} // Singleton
        private static Production436Production singletonInstance = null;
        public static final Production436Production getInstance() { if (singletonInstance == null) singletonInstance = new Production436Production(); return singletonInstance; }

        public String getDescription() { return "<NamelistGroups> ::= tslash:T_SLASH NamelistGroupName:<NamelistGroupName> tslash2:T_SLASH NamelistGroupObject:<NamelistGroupObject>  :production436"; }

        /**
         * Reduce by <NamelistGroups> ::= tslash:T_SLASH NamelistGroupName:<NamelistGroupName> tslash2:T_SLASH NamelistGroupObject:<NamelistGroupObject>  :production436
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <NamelistGroups> ::= tslash:T_SLASH NamelistGroupName:<NamelistGroupName> tslash2:T_SLASH NamelistGroupObject:<NamelistGroupObject>  :production436
            ASTNamelistGroupObjectNode v4 = (ASTNamelistGroupObjectNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNamelistGroupNameNode v2 = (ASTNamelistGroupNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTNamelistGroupsNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.NamelistGroupsNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tslash"))
                return 0;
            else
                if (name.equals("NamelistGroupName"))
                    return 1;
                else
                    if (name.equals("tslash2"))
                        return 2;
                    else
                        if (name.equals("NamelistGroupObject"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <NamelistGroups> ::= tslash:T_SLASH NamelistGroupName:<NamelistGroupName> tslash2:T_SLASH NamelistGroupObject:<NamelistGroupObject>  :production436
         */
        protected ASTNamelistGroupsNode userAction(Token v1, ASTNamelistGroupNameNode v2, Token v3, ASTNamelistGroupObjectNode v4)
        {
            return null;
        }
    }
    public static final Productions.Production436Production PRODUCTION436 = Production436Production.getInstance();

    public static class Production437Production extends Production
    {
        private Production437Production() {;} // Singleton
        private static Production437Production singletonInstance = null;
        public static final Production437Production getInstance() { if (singletonInstance == null) singletonInstance = new Production437Production(); return singletonInstance; }

        public String getDescription() { return "<NamelistGroups> ::= @:<NamelistGroups> tslash:T_SLASH NamelistGroupName:<NamelistGroupName> tslash2:T_SLASH NamelistGroupObject:<NamelistGroupObject>  :production437"; }

        /**
         * Reduce by <NamelistGroups> ::= @:<NamelistGroups> tslash:T_SLASH NamelistGroupName:<NamelistGroupName> tslash2:T_SLASH NamelistGroupObject:<NamelistGroupObject>  :production437
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <NamelistGroups> ::= @:<NamelistGroups> tslash:T_SLASH NamelistGroupName:<NamelistGroupName> tslash2:T_SLASH NamelistGroupObject:<NamelistGroupObject>  :production437
            ASTNamelistGroupObjectNode v5 = (ASTNamelistGroupObjectNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNamelistGroupNameNode v3 = (ASTNamelistGroupNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNamelistGroupsNode v1 = (ASTNamelistGroupsNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTNamelistGroupsNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.NamelistGroupsNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tslash"))
                    return 1;
                else
                    if (name.equals("NamelistGroupName"))
                        return 2;
                    else
                        if (name.equals("tslash2"))
                            return 3;
                        else
                            if (name.equals("NamelistGroupObject"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <NamelistGroups> ::= @:<NamelistGroups> tslash:T_SLASH NamelistGroupName:<NamelistGroupName> tslash2:T_SLASH NamelistGroupObject:<NamelistGroupObject>  :production437
         */
        protected ASTNamelistGroupsNode userAction(ASTNamelistGroupsNode v1, Token v2, ASTNamelistGroupNameNode v3, Token v4, ASTNamelistGroupObjectNode v5)
        {
            return null;
        }
    }
    public static final Productions.Production437Production PRODUCTION437 = Production437Production.getInstance();

    public static class Production438Production extends Production
    {
        private Production438Production() {;} // Singleton
        private static Production438Production singletonInstance = null;
        public static final Production438Production getInstance() { if (singletonInstance == null) singletonInstance = new Production438Production(); return singletonInstance; }

        public String getDescription() { return "<NamelistGroups> ::= @:<NamelistGroups> tcomma:T_COMMA tslash:T_SLASH NamelistGroupName:<NamelistGroupName> tslash2:T_SLASH NamelistGroupObject:<NamelistGroupObject>  :production438"; }

        /**
         * Reduce by <NamelistGroups> ::= @:<NamelistGroups> tcomma:T_COMMA tslash:T_SLASH NamelistGroupName:<NamelistGroupName> tslash2:T_SLASH NamelistGroupObject:<NamelistGroupObject>  :production438
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <NamelistGroups> ::= @:<NamelistGroups> tcomma:T_COMMA tslash:T_SLASH NamelistGroupName:<NamelistGroupName> tslash2:T_SLASH NamelistGroupObject:<NamelistGroupObject>  :production438
            ASTNamelistGroupObjectNode v6 = (ASTNamelistGroupObjectNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNamelistGroupNameNode v4 = (ASTNamelistGroupNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNamelistGroupsNode v1 = (ASTNamelistGroupsNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTNamelistGroupsNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.NamelistGroupsNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("tslash"))
                        return 2;
                    else
                        if (name.equals("NamelistGroupName"))
                            return 3;
                        else
                            if (name.equals("tslash2"))
                                return 4;
                            else
                                if (name.equals("NamelistGroupObject"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <NamelistGroups> ::= @:<NamelistGroups> tcomma:T_COMMA tslash:T_SLASH NamelistGroupName:<NamelistGroupName> tslash2:T_SLASH NamelistGroupObject:<NamelistGroupObject>  :production438
         */
        protected ASTNamelistGroupsNode userAction(ASTNamelistGroupsNode v1, Token v2, Token v3, ASTNamelistGroupNameNode v4, Token v5, ASTNamelistGroupObjectNode v6)
        {
            return null;
        }
    }
    public static final Productions.Production438Production PRODUCTION438 = Production438Production.getInstance();

    public static class Production439Production extends Production
    {
        private Production439Production() {;} // Singleton
        private static Production439Production singletonInstance = null;
        public static final Production439Production getInstance() { if (singletonInstance == null) singletonInstance = new Production439Production(); return singletonInstance; }

        public String getDescription() { return "<NamelistGroups> ::= @:<NamelistGroups> tcomma:T_COMMA NamelistGroupObject:<NamelistGroupObject>  :production439"; }

        /**
         * Reduce by <NamelistGroups> ::= @:<NamelistGroups> tcomma:T_COMMA NamelistGroupObject:<NamelistGroupObject>  :production439
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <NamelistGroups> ::= @:<NamelistGroups> tcomma:T_COMMA NamelistGroupObject:<NamelistGroupObject>  :production439
            ASTNamelistGroupObjectNode v3 = (ASTNamelistGroupObjectNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNamelistGroupsNode v1 = (ASTNamelistGroupsNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTNamelistGroupsNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.NamelistGroupsNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("NamelistGroupObject"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <NamelistGroups> ::= @:<NamelistGroups> tcomma:T_COMMA NamelistGroupObject:<NamelistGroupObject>  :production439
         */
        protected ASTNamelistGroupsNode userAction(ASTNamelistGroupsNode v1, Token v2, ASTNamelistGroupObjectNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production439Production PRODUCTION439 = Production439Production.getInstance();

    public static class Production440Production extends Production
    {
        private Production440Production() {;} // Singleton
        private static Production440Production singletonInstance = null;
        public static final Production440Production getInstance() { if (singletonInstance == null) singletonInstance = new Production440Production(); return singletonInstance; }

        public String getDescription() { return "<NamelistGroupObject> ::= VariableName:<VariableName>  :production440"; }

        /**
         * Reduce by <NamelistGroupObject> ::= VariableName:<VariableName>  :production440
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <NamelistGroupObject> ::= VariableName:<VariableName>  :production440
            ASTVariableNameNode v1 = (ASTVariableNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTNamelistGroupObjectNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.NamelistGroupObjectNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("VariableName"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <NamelistGroupObject> ::= VariableName:<VariableName>  :production440
         */
        protected ASTNamelistGroupObjectNode userAction(ASTVariableNameNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production440Production PRODUCTION440 = Production440Production.getInstance();

    public static class Production441Production extends Production
    {
        private Production441Production() {;} // Singleton
        private static Production441Production singletonInstance = null;
        public static final Production441Production getInstance() { if (singletonInstance == null) singletonInstance = new Production441Production(); return singletonInstance; }

        public String getDescription() { return "<EquivalenceStmt> ::= tequivalence:T_EQUIVALENCE EquivalenceSetList:<EquivalenceSetList> teos:T_EOS  :production441"; }

        /**
         * Reduce by <EquivalenceStmt> ::= tequivalence:T_EQUIVALENCE EquivalenceSetList:<EquivalenceSetList> teos:T_EOS  :production441
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EquivalenceStmt> ::= tequivalence:T_EQUIVALENCE EquivalenceSetList:<EquivalenceSetList> teos:T_EOS  :production441
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEquivalenceSetListNode v2 = (ASTEquivalenceSetListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEquivalenceStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EquivalenceStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tequivalence"))
                return 0;
            else
                if (name.equals("EquivalenceSetList"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EquivalenceStmt> ::= tequivalence:T_EQUIVALENCE EquivalenceSetList:<EquivalenceSetList> teos:T_EOS  :production441
         */
        protected ASTEquivalenceStmtNode userAction(Token v1, ASTEquivalenceSetListNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production441Production PRODUCTION441 = Production441Production.getInstance();

    public static class Production442Production extends Production
    {
        private Production442Production() {;} // Singleton
        private static Production442Production singletonInstance = null;
        public static final Production442Production getInstance() { if (singletonInstance == null) singletonInstance = new Production442Production(); return singletonInstance; }

        public String getDescription() { return "<EquivalenceStmt> ::= LblDef:<LblDef> tequivalence:T_EQUIVALENCE EquivalenceSetList:<EquivalenceSetList> teos:T_EOS  :production442"; }

        /**
         * Reduce by <EquivalenceStmt> ::= LblDef:<LblDef> tequivalence:T_EQUIVALENCE EquivalenceSetList:<EquivalenceSetList> teos:T_EOS  :production442
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EquivalenceStmt> ::= LblDef:<LblDef> tequivalence:T_EQUIVALENCE EquivalenceSetList:<EquivalenceSetList> teos:T_EOS  :production442
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEquivalenceSetListNode v3 = (ASTEquivalenceSetListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEquivalenceStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EquivalenceStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tequivalence"))
                    return 1;
                else
                    if (name.equals("EquivalenceSetList"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EquivalenceStmt> ::= LblDef:<LblDef> tequivalence:T_EQUIVALENCE EquivalenceSetList:<EquivalenceSetList> teos:T_EOS  :production442
         */
        protected ASTEquivalenceStmtNode userAction(ASTLblDefNode v1, Token v2, ASTEquivalenceSetListNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production442Production PRODUCTION442 = Production442Production.getInstance();

    public static class Production443Production extends Production
    {
        private Production443Production() {;} // Singleton
        private static Production443Production singletonInstance = null;
        public static final Production443Production getInstance() { if (singletonInstance == null) singletonInstance = new Production443Production(); return singletonInstance; }

        public String getDescription() { return "<EquivalenceSetList> ::= EquivalenceSet:<EquivalenceSet>  :production443"; }

        /**
         * Reduce by <EquivalenceSetList> ::= EquivalenceSet:<EquivalenceSet>  :production443
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EquivalenceSetList> ::= EquivalenceSet:<EquivalenceSet>  :production443
            ASTEquivalenceSetNode v1 = (ASTEquivalenceSetNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEquivalenceSetListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.EquivalenceSetListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EquivalenceSet"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EquivalenceSetList> ::= EquivalenceSet:<EquivalenceSet>  :production443
         */
        protected ASTEquivalenceSetListNode userAction(ASTEquivalenceSetNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production443Production PRODUCTION443 = Production443Production.getInstance();

    public static class Production444Production extends Production
    {
        private Production444Production() {;} // Singleton
        private static Production444Production singletonInstance = null;
        public static final Production444Production getInstance() { if (singletonInstance == null) singletonInstance = new Production444Production(); return singletonInstance; }

        public String getDescription() { return "<EquivalenceSetList> ::= @:<EquivalenceSetList> tcomma:T_COMMA EquivalenceSet:<EquivalenceSet>  :production444"; }

        /**
         * Reduce by <EquivalenceSetList> ::= @:<EquivalenceSetList> tcomma:T_COMMA EquivalenceSet:<EquivalenceSet>  :production444
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EquivalenceSetList> ::= @:<EquivalenceSetList> tcomma:T_COMMA EquivalenceSet:<EquivalenceSet>  :production444
            ASTEquivalenceSetNode v3 = (ASTEquivalenceSetNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEquivalenceSetListNode v1 = (ASTEquivalenceSetListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEquivalenceSetListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EquivalenceSetListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("EquivalenceSet"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EquivalenceSetList> ::= @:<EquivalenceSetList> tcomma:T_COMMA EquivalenceSet:<EquivalenceSet>  :production444
         */
        protected ASTEquivalenceSetListNode userAction(ASTEquivalenceSetListNode v1, Token v2, ASTEquivalenceSetNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production444Production PRODUCTION444 = Production444Production.getInstance();

    public static class Production445Production extends Production
    {
        private Production445Production() {;} // Singleton
        private static Production445Production singletonInstance = null;
        public static final Production445Production getInstance() { if (singletonInstance == null) singletonInstance = new Production445Production(); return singletonInstance; }

        public String getDescription() { return "<EquivalenceSet> ::= tlparen:T_LPAREN EquivalenceObject:<EquivalenceObject> tcomma:T_COMMA EquivalenceObjectList:<EquivalenceObjectList> trparen:T_RPAREN  :production445"; }

        /**
         * Reduce by <EquivalenceSet> ::= tlparen:T_LPAREN EquivalenceObject:<EquivalenceObject> tcomma:T_COMMA EquivalenceObjectList:<EquivalenceObjectList> trparen:T_RPAREN  :production445
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EquivalenceSet> ::= tlparen:T_LPAREN EquivalenceObject:<EquivalenceObject> tcomma:T_COMMA EquivalenceObjectList:<EquivalenceObjectList> trparen:T_RPAREN  :production445
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEquivalenceObjectListNode v4 = (ASTEquivalenceObjectListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEquivalenceObjectNode v2 = (ASTEquivalenceObjectNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEquivalenceSetNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.EquivalenceSetNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("EquivalenceObject"))
                    return 1;
                else
                    if (name.equals("tcomma"))
                        return 2;
                    else
                        if (name.equals("EquivalenceObjectList"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EquivalenceSet> ::= tlparen:T_LPAREN EquivalenceObject:<EquivalenceObject> tcomma:T_COMMA EquivalenceObjectList:<EquivalenceObjectList> trparen:T_RPAREN  :production445
         */
        protected ASTEquivalenceSetNode userAction(Token v1, ASTEquivalenceObjectNode v2, Token v3, ASTEquivalenceObjectListNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production445Production PRODUCTION445 = Production445Production.getInstance();

    public static class Production446Production extends Production
    {
        private Production446Production() {;} // Singleton
        private static Production446Production singletonInstance = null;
        public static final Production446Production getInstance() { if (singletonInstance == null) singletonInstance = new Production446Production(); return singletonInstance; }

        public String getDescription() { return "<EquivalenceObjectList> ::= EquivalenceObject:<EquivalenceObject>  :production446"; }

        /**
         * Reduce by <EquivalenceObjectList> ::= EquivalenceObject:<EquivalenceObject>  :production446
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EquivalenceObjectList> ::= EquivalenceObject:<EquivalenceObject>  :production446
            ASTEquivalenceObjectNode v1 = (ASTEquivalenceObjectNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEquivalenceObjectListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.EquivalenceObjectListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EquivalenceObject"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EquivalenceObjectList> ::= EquivalenceObject:<EquivalenceObject>  :production446
         */
        protected ASTEquivalenceObjectListNode userAction(ASTEquivalenceObjectNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production446Production PRODUCTION446 = Production446Production.getInstance();

    public static class Production447Production extends Production
    {
        private Production447Production() {;} // Singleton
        private static Production447Production singletonInstance = null;
        public static final Production447Production getInstance() { if (singletonInstance == null) singletonInstance = new Production447Production(); return singletonInstance; }

        public String getDescription() { return "<EquivalenceObjectList> ::= @:<EquivalenceObjectList> tcomma:T_COMMA EquivalenceObject:<EquivalenceObject>  :production447"; }

        /**
         * Reduce by <EquivalenceObjectList> ::= @:<EquivalenceObjectList> tcomma:T_COMMA EquivalenceObject:<EquivalenceObject>  :production447
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EquivalenceObjectList> ::= @:<EquivalenceObjectList> tcomma:T_COMMA EquivalenceObject:<EquivalenceObject>  :production447
            ASTEquivalenceObjectNode v3 = (ASTEquivalenceObjectNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEquivalenceObjectListNode v1 = (ASTEquivalenceObjectListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEquivalenceObjectListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EquivalenceObjectListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("EquivalenceObject"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EquivalenceObjectList> ::= @:<EquivalenceObjectList> tcomma:T_COMMA EquivalenceObject:<EquivalenceObject>  :production447
         */
        protected ASTEquivalenceObjectListNode userAction(ASTEquivalenceObjectListNode v1, Token v2, ASTEquivalenceObjectNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production447Production PRODUCTION447 = Production447Production.getInstance();

    public static class Production448Production extends Production
    {
        private Production448Production() {;} // Singleton
        private static Production448Production singletonInstance = null;
        public static final Production448Production getInstance() { if (singletonInstance == null) singletonInstance = new Production448Production(); return singletonInstance; }

        public String getDescription() { return "<EquivalenceObject> ::= Variable:<Variable>  :production448"; }

        /**
         * Reduce by <EquivalenceObject> ::= Variable:<Variable>  :production448
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EquivalenceObject> ::= Variable:<Variable>  :production448
            ASTVariableNode v1 = (ASTVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEquivalenceObjectNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.EquivalenceObjectNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Variable"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EquivalenceObject> ::= Variable:<Variable>  :production448
         */
        protected ASTEquivalenceObjectNode userAction(ASTVariableNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production448Production PRODUCTION448 = Production448Production.getInstance();

    public static class Production449Production extends Production
    {
        private Production449Production() {;} // Singleton
        private static Production449Production singletonInstance = null;
        public static final Production449Production getInstance() { if (singletonInstance == null) singletonInstance = new Production449Production(); return singletonInstance; }

        public String getDescription() { return "<CommonStmt> ::= tcommon:T_COMMON Comlist:<Comlist> teos:T_EOS  :production449"; }

        /**
         * Reduce by <CommonStmt> ::= tcommon:T_COMMON Comlist:<Comlist> teos:T_EOS  :production449
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CommonStmt> ::= tcommon:T_COMMON Comlist:<Comlist> teos:T_EOS  :production449
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTComlistNode v2 = (ASTComlistNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCommonStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.CommonStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tcommon"))
                return 0;
            else
                if (name.equals("Comlist"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CommonStmt> ::= tcommon:T_COMMON Comlist:<Comlist> teos:T_EOS  :production449
         */
        protected ASTCommonStmtNode userAction(Token v1, ASTComlistNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production449Production PRODUCTION449 = Production449Production.getInstance();

    public static class Production450Production extends Production
    {
        private Production450Production() {;} // Singleton
        private static Production450Production singletonInstance = null;
        public static final Production450Production getInstance() { if (singletonInstance == null) singletonInstance = new Production450Production(); return singletonInstance; }

        public String getDescription() { return "<CommonStmt> ::= LblDef:<LblDef> tcommon:T_COMMON Comlist:<Comlist> teos:T_EOS  :production450"; }

        /**
         * Reduce by <CommonStmt> ::= LblDef:<LblDef> tcommon:T_COMMON Comlist:<Comlist> teos:T_EOS  :production450
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CommonStmt> ::= LblDef:<LblDef> tcommon:T_COMMON Comlist:<Comlist> teos:T_EOS  :production450
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTComlistNode v3 = (ASTComlistNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCommonStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.CommonStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tcommon"))
                    return 1;
                else
                    if (name.equals("Comlist"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CommonStmt> ::= LblDef:<LblDef> tcommon:T_COMMON Comlist:<Comlist> teos:T_EOS  :production450
         */
        protected ASTCommonStmtNode userAction(ASTLblDefNode v1, Token v2, ASTComlistNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production450Production PRODUCTION450 = Production450Production.getInstance();

    public static class Production451Production extends Production
    {
        private Production451Production() {;} // Singleton
        private static Production451Production singletonInstance = null;
        public static final Production451Production getInstance() { if (singletonInstance == null) singletonInstance = new Production451Production(); return singletonInstance; }

        public String getDescription() { return "<Comlist> ::= CommonBlockObject:<CommonBlockObject>  :production451"; }

        /**
         * Reduce by <Comlist> ::= CommonBlockObject:<CommonBlockObject>  :production451
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Comlist> ::= CommonBlockObject:<CommonBlockObject>  :production451
            ASTCommonBlockObjectNode v1 = (ASTCommonBlockObjectNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTComlistNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ComlistNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("CommonBlockObject"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Comlist> ::= CommonBlockObject:<CommonBlockObject>  :production451
         */
        protected ASTComlistNode userAction(ASTCommonBlockObjectNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production451Production PRODUCTION451 = Production451Production.getInstance();

    public static class Production452Production extends Production
    {
        private Production452Production() {;} // Singleton
        private static Production452Production singletonInstance = null;
        public static final Production452Production getInstance() { if (singletonInstance == null) singletonInstance = new Production452Production(); return singletonInstance; }

        public String getDescription() { return "<Comlist> ::= Comblock:<Comblock> CommonBlockObject:<CommonBlockObject>  :production452"; }

        /**
         * Reduce by <Comlist> ::= Comblock:<Comblock> CommonBlockObject:<CommonBlockObject>  :production452
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Comlist> ::= Comblock:<Comblock> CommonBlockObject:<CommonBlockObject>  :production452
            ASTCommonBlockObjectNode v2 = (ASTCommonBlockObjectNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTComblockNode v1 = (ASTComblockNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTComlistNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.ComlistNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Comblock"))
                return 0;
            else
                if (name.equals("CommonBlockObject"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Comlist> ::= Comblock:<Comblock> CommonBlockObject:<CommonBlockObject>  :production452
         */
        protected ASTComlistNode userAction(ASTComblockNode v1, ASTCommonBlockObjectNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production452Production PRODUCTION452 = Production452Production.getInstance();

    public static class Production453Production extends Production
    {
        private Production453Production() {;} // Singleton
        private static Production453Production singletonInstance = null;
        public static final Production453Production getInstance() { if (singletonInstance == null) singletonInstance = new Production453Production(); return singletonInstance; }

        public String getDescription() { return "<Comlist> ::= @:<Comlist> tcomma:T_COMMA CommonBlockObject:<CommonBlockObject>  :production453"; }

        /**
         * Reduce by <Comlist> ::= @:<Comlist> tcomma:T_COMMA CommonBlockObject:<CommonBlockObject>  :production453
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Comlist> ::= @:<Comlist> tcomma:T_COMMA CommonBlockObject:<CommonBlockObject>  :production453
            ASTCommonBlockObjectNode v3 = (ASTCommonBlockObjectNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTComlistNode v1 = (ASTComlistNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTComlistNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.ComlistNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("CommonBlockObject"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Comlist> ::= @:<Comlist> tcomma:T_COMMA CommonBlockObject:<CommonBlockObject>  :production453
         */
        protected ASTComlistNode userAction(ASTComlistNode v1, Token v2, ASTCommonBlockObjectNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production453Production PRODUCTION453 = Production453Production.getInstance();

    public static class Production454Production extends Production
    {
        private Production454Production() {;} // Singleton
        private static Production454Production singletonInstance = null;
        public static final Production454Production getInstance() { if (singletonInstance == null) singletonInstance = new Production454Production(); return singletonInstance; }

        public String getDescription() { return "<Comlist> ::= Comlist:<Comlist> Comblock:<Comblock> CommonBlockObject:<CommonBlockObject>  :production454"; }

        /**
         * Reduce by <Comlist> ::= Comlist:<Comlist> Comblock:<Comblock> CommonBlockObject:<CommonBlockObject>  :production454
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Comlist> ::= Comlist:<Comlist> Comblock:<Comblock> CommonBlockObject:<CommonBlockObject>  :production454
            ASTCommonBlockObjectNode v3 = (ASTCommonBlockObjectNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTComblockNode v2 = (ASTComblockNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTComlistNode v1 = (ASTComlistNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTComlistNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.ComlistNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Comlist"))
                return 0;
            else
                if (name.equals("Comblock"))
                    return 1;
                else
                    if (name.equals("CommonBlockObject"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Comlist> ::= Comlist:<Comlist> Comblock:<Comblock> CommonBlockObject:<CommonBlockObject>  :production454
         */
        protected ASTComlistNode userAction(ASTComlistNode v1, ASTComblockNode v2, ASTCommonBlockObjectNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production454Production PRODUCTION454 = Production454Production.getInstance();

    public static class Production455Production extends Production
    {
        private Production455Production() {;} // Singleton
        private static Production455Production singletonInstance = null;
        public static final Production455Production getInstance() { if (singletonInstance == null) singletonInstance = new Production455Production(); return singletonInstance; }

        public String getDescription() { return "<Comlist> ::= Comlist:<Comlist> tcomma:T_COMMA Comblock:<Comblock> CommonBlockObject:<CommonBlockObject>  :production455"; }

        /**
         * Reduce by <Comlist> ::= Comlist:<Comlist> tcomma:T_COMMA Comblock:<Comblock> CommonBlockObject:<CommonBlockObject>  :production455
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Comlist> ::= Comlist:<Comlist> tcomma:T_COMMA Comblock:<Comblock> CommonBlockObject:<CommonBlockObject>  :production455
            ASTCommonBlockObjectNode v4 = (ASTCommonBlockObjectNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTComblockNode v3 = (ASTComblockNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTComlistNode v1 = (ASTComlistNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTComlistNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.ComlistNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Comlist"))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("Comblock"))
                        return 2;
                    else
                        if (name.equals("CommonBlockObject"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Comlist> ::= Comlist:<Comlist> tcomma:T_COMMA Comblock:<Comblock> CommonBlockObject:<CommonBlockObject>  :production455
         */
        protected ASTComlistNode userAction(ASTComlistNode v1, Token v2, ASTComblockNode v3, ASTCommonBlockObjectNode v4)
        {
            return null;
        }
    }
    public static final Productions.Production455Production PRODUCTION455 = Production455Production.getInstance();

    public static class Production456Production extends Production
    {
        private Production456Production() {;} // Singleton
        private static Production456Production singletonInstance = null;
        public static final Production456Production getInstance() { if (singletonInstance == null) singletonInstance = new Production456Production(); return singletonInstance; }

        public String getDescription() { return "<Comblock> ::= tslash:T_SLASH tslash2:T_SLASH  :production456"; }

        /**
         * Reduce by <Comblock> ::= tslash:T_SLASH tslash2:T_SLASH  :production456
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Comblock> ::= tslash:T_SLASH tslash2:T_SLASH  :production456
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTComblockNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.ComblockNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tslash"))
                return 0;
            else
                if (name.equals("tslash2"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Comblock> ::= tslash:T_SLASH tslash2:T_SLASH  :production456
         */
        protected ASTComblockNode userAction(Token v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production456Production PRODUCTION456 = Production456Production.getInstance();

    public static class Production457Production extends Production
    {
        private Production457Production() {;} // Singleton
        private static Production457Production singletonInstance = null;
        public static final Production457Production getInstance() { if (singletonInstance == null) singletonInstance = new Production457Production(); return singletonInstance; }

        public String getDescription() { return "<Comblock> ::= tslash:T_SLASH CommonBlockName:<CommonBlockName> tslash2:T_SLASH  :production457"; }

        /**
         * Reduce by <Comblock> ::= tslash:T_SLASH CommonBlockName:<CommonBlockName> tslash2:T_SLASH  :production457
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Comblock> ::= tslash:T_SLASH CommonBlockName:<CommonBlockName> tslash2:T_SLASH  :production457
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTCommonBlockNameNode v2 = (ASTCommonBlockNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTComblockNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.ComblockNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tslash"))
                return 0;
            else
                if (name.equals("CommonBlockName"))
                    return 1;
                else
                    if (name.equals("tslash2"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Comblock> ::= tslash:T_SLASH CommonBlockName:<CommonBlockName> tslash2:T_SLASH  :production457
         */
        protected ASTComblockNode userAction(Token v1, ASTCommonBlockNameNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production457Production PRODUCTION457 = Production457Production.getInstance();

    public static class Production458Production extends Production
    {
        private Production458Production() {;} // Singleton
        private static Production458Production singletonInstance = null;
        public static final Production458Production getInstance() { if (singletonInstance == null) singletonInstance = new Production458Production(); return singletonInstance; }

        public String getDescription() { return "<CommonBlockObject> ::= VariableName:<VariableName>  :production458"; }

        /**
         * Reduce by <CommonBlockObject> ::= VariableName:<VariableName>  :production458
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CommonBlockObject> ::= VariableName:<VariableName>  :production458
            ASTVariableNameNode v1 = (ASTVariableNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCommonBlockObjectNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.CommonBlockObjectNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("VariableName"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CommonBlockObject> ::= VariableName:<VariableName>  :production458
         */
        protected ASTCommonBlockObjectNode userAction(ASTVariableNameNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production458Production PRODUCTION458 = Production458Production.getInstance();

    public static class Production459Production extends Production
    {
        private Production459Production() {;} // Singleton
        private static Production459Production singletonInstance = null;
        public static final Production459Production getInstance() { if (singletonInstance == null) singletonInstance = new Production459Production(); return singletonInstance; }

        public String getDescription() { return "<CommonBlockObject> ::= ArrayDeclarator:<ArrayDeclarator>  :production459"; }

        /**
         * Reduce by <CommonBlockObject> ::= ArrayDeclarator:<ArrayDeclarator>  :production459
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CommonBlockObject> ::= ArrayDeclarator:<ArrayDeclarator>  :production459
            ASTArrayDeclaratorNode v1 = (ASTArrayDeclaratorNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCommonBlockObjectNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.CommonBlockObjectNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ArrayDeclarator"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CommonBlockObject> ::= ArrayDeclarator:<ArrayDeclarator>  :production459
         */
        protected ASTCommonBlockObjectNode userAction(ASTArrayDeclaratorNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production459Production PRODUCTION459 = Production459Production.getInstance();

    public static class Production460Production extends Production
    {
        private Production460Production() {;} // Singleton
        private static Production460Production singletonInstance = null;
        public static final Production460Production getInstance() { if (singletonInstance == null) singletonInstance = new Production460Production(); return singletonInstance; }

        public String getDescription() { return "<Variable> ::= DataRef:<DataRef>  :production460"; }

        /**
         * Reduce by <Variable> ::= DataRef:<DataRef>  :production460
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Variable> ::= DataRef:<DataRef>  :production460
            ASTDataRefNode v1 = (ASTDataRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTVariableNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.VariableNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("DataRef"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Variable> ::= DataRef:<DataRef>  :production460
         */
        protected ASTVariableNode userAction(ASTDataRefNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production460Production PRODUCTION460 = Production460Production.getInstance();

    public static class Production461Production extends Production
    {
        private Production461Production() {;} // Singleton
        private static Production461Production singletonInstance = null;
        public static final Production461Production getInstance() { if (singletonInstance == null) singletonInstance = new Production461Production(); return singletonInstance; }

        public String getDescription() { return "<Variable> ::= DataRef:<DataRef> <Variable@15>  :production461"; }

        /**
         * Reduce by <Variable> ::= DataRef:<DataRef> <Variable@15>  :production461
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Variable> ::= DataRef:<DataRef> <Variable@15>  :production461
            ASTSubstringRangeNode v5 = (ASTSubstringRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v3 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDataRefNode v1 = (ASTDataRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTVariableNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.VariableNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("DataRef"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("SectionSubscriptList"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("SubstringRange"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Variable> ::= DataRef:<DataRef> <Variable@15>  :production461
         */
        protected ASTVariableNode userAction(ASTDataRefNode v1, Token v2, ASTSectionSubscriptListNode v3, Token v4, ASTSubstringRangeNode v5)
        {
            return null;
        }
    }
    public static final Productions.Production461Production PRODUCTION461 = Production461Production.getInstance();

    public static class Production462Production extends Production
    {
        private Production462Production() {;} // Singleton
        private static Production462Production singletonInstance = null;
        public static final Production462Production getInstance() { if (singletonInstance == null) singletonInstance = new Production462Production(); return singletonInstance; }

        public String getDescription() { return "<Variable> ::= SubstrConst:<SubstrConst>  :production462"; }

        /**
         * Reduce by <Variable> ::= SubstrConst:<SubstrConst>  :production462
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Variable> ::= SubstrConst:<SubstrConst>  :production462
            ASTSubstrConstNode v1 = (ASTSubstrConstNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTVariableNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.VariableNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SubstrConst"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Variable> ::= SubstrConst:<SubstrConst>  :production462
         */
        protected ASTVariableNode userAction(ASTSubstrConstNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production462Production PRODUCTION462 = Production462Production.getInstance();

    public static class Production463Production extends Production
    {
        private Production463Production() {;} // Singleton
        private static Production463Production singletonInstance = null;
        public static final Production463Production getInstance() { if (singletonInstance == null) singletonInstance = new Production463Production(); return singletonInstance; }

        public String getDescription() { return "<SubstrConst> ::= tscon:T_SCON SubstringRange:<SubstringRange>  :production463"; }

        /**
         * Reduce by <SubstrConst> ::= tscon:T_SCON SubstringRange:<SubstringRange>  :production463
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SubstrConst> ::= tscon:T_SCON SubstringRange:<SubstringRange>  :production463
            ASTSubstringRangeNode v2 = (ASTSubstringRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSubstrConstNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.SubstrConstNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tscon"))
                return 0;
            else
                if (name.equals("SubstringRange"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SubstrConst> ::= tscon:T_SCON SubstringRange:<SubstringRange>  :production463
         */
        protected ASTSubstrConstNode userAction(Token v1, ASTSubstringRangeNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production463Production PRODUCTION463 = Production463Production.getInstance();

    public static class Production464Production extends Production
    {
        private Production464Production() {;} // Singleton
        private static Production464Production singletonInstance = null;
        public static final Production464Production getInstance() { if (singletonInstance == null) singletonInstance = new Production464Production(); return singletonInstance; }

        public String getDescription() { return "<VariableName> ::= tident:T_IDENT  :production464"; }

        /**
         * Reduce by <VariableName> ::= tident:T_IDENT  :production464
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <VariableName> ::= tident:T_IDENT  :production464
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTVariableNameNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.VariableNameNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tident"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <VariableName> ::= tident:T_IDENT  :production464
         */
        protected ASTVariableNameNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production464Production PRODUCTION464 = Production464Production.getInstance();

    public static class Production465Production extends Production
    {
        private Production465Production() {;} // Singleton
        private static Production465Production singletonInstance = null;
        public static final Production465Production getInstance() { if (singletonInstance == null) singletonInstance = new Production465Production(); return singletonInstance; }

        public String getDescription() { return "<ScalarVariable> ::= VariableName:<VariableName>  :production465"; }

        /**
         * Reduce by <ScalarVariable> ::= VariableName:<VariableName>  :production465
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ScalarVariable> ::= VariableName:<VariableName>  :production465
            ASTVariableNameNode v1 = (ASTVariableNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTScalarVariableNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ScalarVariableNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("VariableName"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ScalarVariable> ::= VariableName:<VariableName>  :production465
         */
        protected ASTScalarVariableNode userAction(ASTVariableNameNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production465Production PRODUCTION465 = Production465Production.getInstance();

    public static class Production466Production extends Production
    {
        private Production466Production() {;} // Singleton
        private static Production466Production singletonInstance = null;
        public static final Production466Production getInstance() { if (singletonInstance == null) singletonInstance = new Production466Production(); return singletonInstance; }

        public String getDescription() { return "<ScalarVariable> ::= ArrayElement:<ArrayElement>  :production466"; }

        /**
         * Reduce by <ScalarVariable> ::= ArrayElement:<ArrayElement>  :production466
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ScalarVariable> ::= ArrayElement:<ArrayElement>  :production466
            ASTArrayElementNode v1 = (ASTArrayElementNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTScalarVariableNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ScalarVariableNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ArrayElement"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ScalarVariable> ::= ArrayElement:<ArrayElement>  :production466
         */
        protected ASTScalarVariableNode userAction(ASTArrayElementNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production466Production PRODUCTION466 = Production466Production.getInstance();

    public static class Production467Production extends Production
    {
        private Production467Production() {;} // Singleton
        private static Production467Production singletonInstance = null;
        public static final Production467Production getInstance() { if (singletonInstance == null) singletonInstance = new Production467Production(); return singletonInstance; }

        public String getDescription() { return "<SubstringRange> ::= tlparen:T_LPAREN SubscriptTriplet:<SubscriptTriplet> trparen:T_RPAREN  :production467"; }

        /**
         * Reduce by <SubstringRange> ::= tlparen:T_LPAREN SubscriptTriplet:<SubscriptTriplet> trparen:T_RPAREN  :production467
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SubstringRange> ::= tlparen:T_LPAREN SubscriptTriplet:<SubscriptTriplet> trparen:T_RPAREN  :production467
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubscriptTripletNode v2 = (ASTSubscriptTripletNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSubstringRangeNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.SubstringRangeNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("SubscriptTriplet"))
                    return 1;
                else
                    if (name.equals("trparen"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SubstringRange> ::= tlparen:T_LPAREN SubscriptTriplet:<SubscriptTriplet> trparen:T_RPAREN  :production467
         */
        protected ASTSubstringRangeNode userAction(Token v1, ASTSubscriptTripletNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production467Production PRODUCTION467 = Production467Production.getInstance();

    public static class Production468Production extends Production
    {
        private Production468Production() {;} // Singleton
        private static Production468Production singletonInstance = null;
        public static final Production468Production getInstance() { if (singletonInstance == null) singletonInstance = new Production468Production(); return singletonInstance; }

        public String getDescription() { return "<DataRef> ::= Name:<Name>  :production468"; }

        /**
         * Reduce by <DataRef> ::= Name:<Name>  :production468
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DataRef> ::= Name:<Name>  :production468
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDataRefNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.DataRefNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DataRef> ::= Name:<Name>  :production468
         */
        protected ASTDataRefNode userAction(ASTNameNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production468Production PRODUCTION468 = Production468Production.getInstance();

    public static class Production469Production extends Production
    {
        private Production469Production() {;} // Singleton
        private static Production469Production singletonInstance = null;
        public static final Production469Production getInstance() { if (singletonInstance == null) singletonInstance = new Production469Production(); return singletonInstance; }

        public String getDescription() { return "<DataRef> ::= DataRef:<DataRef> tpercent:T_PERCENT Name:<Name>  :production469"; }

        /**
         * Reduce by <DataRef> ::= DataRef:<DataRef> tpercent:T_PERCENT Name:<Name>  :production469
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DataRef> ::= DataRef:<DataRef> tpercent:T_PERCENT Name:<Name>  :production469
            ASTNameNode v3 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDataRefNode v1 = (ASTDataRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDataRefNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.DataRefNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("DataRef"))
                return 0;
            else
                if (name.equals("tpercent"))
                    return 1;
                else
                    if (name.equals("Name"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DataRef> ::= DataRef:<DataRef> tpercent:T_PERCENT Name:<Name>  :production469
         */
        protected ASTDataRefNode userAction(ASTDataRefNode v1, Token v2, ASTNameNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production469Production PRODUCTION469 = Production469Production.getInstance();

    public static class Production470Production extends Production
    {
        private Production470Production() {;} // Singleton
        private static Production470Production singletonInstance = null;
        public static final Production470Production getInstance() { if (singletonInstance == null) singletonInstance = new Production470Production(); return singletonInstance; }

        public String getDescription() { return "<DataRef> ::= DataRef:<DataRef> <DataRef@17> tpercent:T_PERCENT Name:<Name>  :production470"; }

        /**
         * Reduce by <DataRef> ::= DataRef:<DataRef> <DataRef@17> tpercent:T_PERCENT Name:<Name>  :production470
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DataRef> ::= DataRef:<DataRef> <DataRef@17> tpercent:T_PERCENT Name:<Name>  :production470
            ASTNameNode v6 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v3 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDataRefNode v1 = (ASTDataRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDataRefNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.DataRefNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("DataRef"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("SectionSubscriptList"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("tpercent"))
                                return 4;
                            else
                                if (name.equals("Name"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DataRef> ::= DataRef:<DataRef> <DataRef@17> tpercent:T_PERCENT Name:<Name>  :production470
         */
        protected ASTDataRefNode userAction(ASTDataRefNode v1, Token v2, ASTSectionSubscriptListNode v3, Token v4, Token v5, ASTNameNode v6)
        {
            return null;
        }
    }
    public static final Productions.Production470Production PRODUCTION470 = Production470Production.getInstance();

    public static class Production471Production extends Production
    {
        private Production471Production() {;} // Singleton
        private static Production471Production singletonInstance = null;
        public static final Production471Production getInstance() { if (singletonInstance == null) singletonInstance = new Production471Production(); return singletonInstance; }

        public String getDescription() { return "<SFDataRef> ::= Name:<Name> tpercent:T_PERCENT Name2:<Name>  :production471"; }

        /**
         * Reduce by <SFDataRef> ::= Name:<Name> tpercent:T_PERCENT Name2:<Name>  :production471
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SFDataRef> ::= Name:<Name> tpercent:T_PERCENT Name2:<Name>  :production471
            ASTNameNode v3 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSFDataRefNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.SFDataRefNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tpercent"))
                    return 1;
                else
                    if (name.equals("Name2"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SFDataRef> ::= Name:<Name> tpercent:T_PERCENT Name2:<Name>  :production471
         */
        protected ASTSFDataRefNode userAction(ASTNameNode v1, Token v2, ASTNameNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production471Production PRODUCTION471 = Production471Production.getInstance();

    public static class Production472Production extends Production
    {
        private Production472Production() {;} // Singleton
        private static Production472Production singletonInstance = null;
        public static final Production472Production getInstance() { if (singletonInstance == null) singletonInstance = new Production472Production(); return singletonInstance; }

        public String getDescription() { return "<SFDataRef> ::= Name:<Name> tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :production472"; }

        /**
         * Reduce by <SFDataRef> ::= Name:<Name> tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :production472
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SFDataRef> ::= Name:<Name> tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :production472
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v3 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSFDataRefNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.SFDataRefNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("SectionSubscriptList"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SFDataRef> ::= Name:<Name> tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :production472
         */
        protected ASTSFDataRefNode userAction(ASTNameNode v1, Token v2, ASTSectionSubscriptListNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production472Production PRODUCTION472 = Production472Production.getInstance();

    public static class Production473Production extends Production
    {
        private Production473Production() {;} // Singleton
        private static Production473Production singletonInstance = null;
        public static final Production473Production getInstance() { if (singletonInstance == null) singletonInstance = new Production473Production(); return singletonInstance; }

        public String getDescription() { return "<SFDataRef> ::= SFDataRef:<SFDataRef> tpercent:T_PERCENT Name:<Name>  :production473"; }

        /**
         * Reduce by <SFDataRef> ::= SFDataRef:<SFDataRef> tpercent:T_PERCENT Name:<Name>  :production473
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SFDataRef> ::= SFDataRef:<SFDataRef> tpercent:T_PERCENT Name:<Name>  :production473
            ASTNameNode v3 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSFDataRefNode v1 = (ASTSFDataRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSFDataRefNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.SFDataRefNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SFDataRef"))
                return 0;
            else
                if (name.equals("tpercent"))
                    return 1;
                else
                    if (name.equals("Name"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SFDataRef> ::= SFDataRef:<SFDataRef> tpercent:T_PERCENT Name:<Name>  :production473
         */
        protected ASTSFDataRefNode userAction(ASTSFDataRefNode v1, Token v2, ASTNameNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production473Production PRODUCTION473 = Production473Production.getInstance();

    public static class Production474Production extends Production
    {
        private Production474Production() {;} // Singleton
        private static Production474Production singletonInstance = null;
        public static final Production474Production getInstance() { if (singletonInstance == null) singletonInstance = new Production474Production(); return singletonInstance; }

        public String getDescription() { return "<SFDataRef> ::= SFDataRef:<SFDataRef> <SFDataRef@18> tpercent:T_PERCENT Name:<Name>  :production474"; }

        /**
         * Reduce by <SFDataRef> ::= SFDataRef:<SFDataRef> <SFDataRef@18> tpercent:T_PERCENT Name:<Name>  :production474
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SFDataRef> ::= SFDataRef:<SFDataRef> <SFDataRef@18> tpercent:T_PERCENT Name:<Name>  :production474
            ASTNameNode v6 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v3 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSFDataRefNode v1 = (ASTSFDataRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSFDataRefNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.SFDataRefNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SFDataRef"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("SectionSubscriptList"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("tpercent"))
                                return 4;
                            else
                                if (name.equals("Name"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SFDataRef> ::= SFDataRef:<SFDataRef> <SFDataRef@18> tpercent:T_PERCENT Name:<Name>  :production474
         */
        protected ASTSFDataRefNode userAction(ASTSFDataRefNode v1, Token v2, ASTSectionSubscriptListNode v3, Token v4, Token v5, ASTNameNode v6)
        {
            return null;
        }
    }
    public static final Productions.Production474Production PRODUCTION474 = Production474Production.getInstance();

    public static class Production475Production extends Production
    {
        private Production475Production() {;} // Singleton
        private static Production475Production singletonInstance = null;
        public static final Production475Production getInstance() { if (singletonInstance == null) singletonInstance = new Production475Production(); return singletonInstance; }

        public String getDescription() { return "<StructureComponent> ::= VariableName:<VariableName> FieldSelector:<FieldSelector>  :production475"; }

        /**
         * Reduce by <StructureComponent> ::= VariableName:<VariableName> FieldSelector:<FieldSelector>  :production475
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <StructureComponent> ::= VariableName:<VariableName> FieldSelector:<FieldSelector>  :production475
            ASTFieldSelectorNode v2 = (ASTFieldSelectorNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTVariableNameNode v1 = (ASTVariableNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTStructureComponentNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.StructureComponentNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("VariableName"))
                return 0;
            else
                if (name.equals("FieldSelector"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <StructureComponent> ::= VariableName:<VariableName> FieldSelector:<FieldSelector>  :production475
         */
        protected ASTStructureComponentNode userAction(ASTVariableNameNode v1, ASTFieldSelectorNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production475Production PRODUCTION475 = Production475Production.getInstance();

    public static class Production476Production extends Production
    {
        private Production476Production() {;} // Singleton
        private static Production476Production singletonInstance = null;
        public static final Production476Production getInstance() { if (singletonInstance == null) singletonInstance = new Production476Production(); return singletonInstance; }

        public String getDescription() { return "<StructureComponent> ::= StructureComponent:<StructureComponent> FieldSelector:<FieldSelector>  :production476"; }

        /**
         * Reduce by <StructureComponent> ::= StructureComponent:<StructureComponent> FieldSelector:<FieldSelector>  :production476
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <StructureComponent> ::= StructureComponent:<StructureComponent> FieldSelector:<FieldSelector>  :production476
            ASTFieldSelectorNode v2 = (ASTFieldSelectorNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTStructureComponentNode v1 = (ASTStructureComponentNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTStructureComponentNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.StructureComponentNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("StructureComponent"))
                return 0;
            else
                if (name.equals("FieldSelector"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <StructureComponent> ::= StructureComponent:<StructureComponent> FieldSelector:<FieldSelector>  :production476
         */
        protected ASTStructureComponentNode userAction(ASTStructureComponentNode v1, ASTFieldSelectorNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production476Production PRODUCTION476 = Production476Production.getInstance();

    public static class Production477Production extends Production
    {
        private Production477Production() {;} // Singleton
        private static Production477Production singletonInstance = null;
        public static final Production477Production getInstance() { if (singletonInstance == null) singletonInstance = new Production477Production(); return singletonInstance; }

        public String getDescription() { return "<FieldSelector> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN tpercent:T_PERCENT Name:<Name>  :production477"; }

        /**
         * Reduce by <FieldSelector> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN tpercent:T_PERCENT Name:<Name>  :production477
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FieldSelector> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN tpercent:T_PERCENT Name:<Name>  :production477
            ASTNameNode v5 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v2 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFieldSelectorNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.FieldSelectorNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("SectionSubscriptList"))
                    return 1;
                else
                    if (name.equals("trparen"))
                        return 2;
                    else
                        if (name.equals("tpercent"))
                            return 3;
                        else
                            if (name.equals("Name"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FieldSelector> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN tpercent:T_PERCENT Name:<Name>  :production477
         */
        protected ASTFieldSelectorNode userAction(Token v1, ASTSectionSubscriptListNode v2, Token v3, Token v4, ASTNameNode v5)
        {
            return null;
        }
    }
    public static final Productions.Production477Production PRODUCTION477 = Production477Production.getInstance();

    public static class Production478Production extends Production
    {
        private Production478Production() {;} // Singleton
        private static Production478Production singletonInstance = null;
        public static final Production478Production getInstance() { if (singletonInstance == null) singletonInstance = new Production478Production(); return singletonInstance; }

        public String getDescription() { return "<FieldSelector> ::= tpercent:T_PERCENT Name:<Name>  :production478"; }

        /**
         * Reduce by <FieldSelector> ::= tpercent:T_PERCENT Name:<Name>  :production478
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FieldSelector> ::= tpercent:T_PERCENT Name:<Name>  :production478
            ASTNameNode v2 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFieldSelectorNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.FieldSelectorNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tpercent"))
                return 0;
            else
                if (name.equals("Name"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FieldSelector> ::= tpercent:T_PERCENT Name:<Name>  :production478
         */
        protected ASTFieldSelectorNode userAction(Token v1, ASTNameNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production478Production PRODUCTION478 = Production478Production.getInstance();

    public static class Production479Production extends Production
    {
        private Production479Production() {;} // Singleton
        private static Production479Production singletonInstance = null;
        public static final Production479Production getInstance() { if (singletonInstance == null) singletonInstance = new Production479Production(); return singletonInstance; }

        public String getDescription() { return "<ArrayElement> ::= VariableName:<VariableName> tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :production479"; }

        /**
         * Reduce by <ArrayElement> ::= VariableName:<VariableName> tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :production479
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ArrayElement> ::= VariableName:<VariableName> tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :production479
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v3 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTVariableNameNode v1 = (ASTVariableNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTArrayElementNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.ArrayElementNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("VariableName"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("SectionSubscriptList"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ArrayElement> ::= VariableName:<VariableName> tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :production479
         */
        protected ASTArrayElementNode userAction(ASTVariableNameNode v1, Token v2, ASTSectionSubscriptListNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production479Production PRODUCTION479 = Production479Production.getInstance();

    public static class Production480Production extends Production
    {
        private Production480Production() {;} // Singleton
        private static Production480Production singletonInstance = null;
        public static final Production480Production getInstance() { if (singletonInstance == null) singletonInstance = new Production480Production(); return singletonInstance; }

        public String getDescription() { return "<ArrayElement> ::= StructureComponent:<StructureComponent> tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :production480"; }

        /**
         * Reduce by <ArrayElement> ::= StructureComponent:<StructureComponent> tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :production480
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ArrayElement> ::= StructureComponent:<StructureComponent> tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :production480
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v3 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTStructureComponentNode v1 = (ASTStructureComponentNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTArrayElementNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.ArrayElementNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("StructureComponent"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("SectionSubscriptList"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ArrayElement> ::= StructureComponent:<StructureComponent> tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :production480
         */
        protected ASTArrayElementNode userAction(ASTStructureComponentNode v1, Token v2, ASTSectionSubscriptListNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production480Production PRODUCTION480 = Production480Production.getInstance();

    public static class Production481Production extends Production
    {
        private Production481Production() {;} // Singleton
        private static Production481Production singletonInstance = null;
        public static final Production481Production getInstance() { if (singletonInstance == null) singletonInstance = new Production481Production(); return singletonInstance; }

        public String getDescription() { return "<Subscript> ::= Expr:<Expr>  :production481"; }

        /**
         * Reduce by <Subscript> ::= Expr:<Expr>  :production481
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Subscript> ::= Expr:<Expr>  :production481
            ASTExprNode v1 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSubscriptNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SubscriptNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Expr"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Subscript> ::= Expr:<Expr>  :production481
         */
        protected ASTSubscriptNode userAction(ASTExprNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production481Production PRODUCTION481 = Production481Production.getInstance();

    public static class Production482Production extends Production
    {
        private Production482Production() {;} // Singleton
        private static Production482Production singletonInstance = null;
        public static final Production482Production getInstance() { if (singletonInstance == null) singletonInstance = new Production482Production(); return singletonInstance; }

        public String getDescription() { return "<SectionSubscriptList> ::= SectionSubscript:<SectionSubscript>  :production482"; }

        /**
         * Reduce by <SectionSubscriptList> ::= SectionSubscript:<SectionSubscript>  :production482
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SectionSubscriptList> ::= SectionSubscript:<SectionSubscript>  :production482
            ASTSectionSubscriptNode v1 = (ASTSectionSubscriptNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSectionSubscriptListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SectionSubscriptListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SectionSubscript"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SectionSubscriptList> ::= SectionSubscript:<SectionSubscript>  :production482
         */
        protected ASTSectionSubscriptListNode userAction(ASTSectionSubscriptNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production482Production PRODUCTION482 = Production482Production.getInstance();

    public static class Production483Production extends Production
    {
        private Production483Production() {;} // Singleton
        private static Production483Production singletonInstance = null;
        public static final Production483Production getInstance() { if (singletonInstance == null) singletonInstance = new Production483Production(); return singletonInstance; }

        public String getDescription() { return "<SectionSubscriptList> ::= @:<SectionSubscriptList> tcomma:T_COMMA SectionSubscript:<SectionSubscript>  :production483"; }

        /**
         * Reduce by <SectionSubscriptList> ::= @:<SectionSubscriptList> tcomma:T_COMMA SectionSubscript:<SectionSubscript>  :production483
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SectionSubscriptList> ::= @:<SectionSubscriptList> tcomma:T_COMMA SectionSubscript:<SectionSubscript>  :production483
            ASTSectionSubscriptNode v3 = (ASTSectionSubscriptNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v1 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSectionSubscriptListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.SectionSubscriptListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("SectionSubscript"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SectionSubscriptList> ::= @:<SectionSubscriptList> tcomma:T_COMMA SectionSubscript:<SectionSubscript>  :production483
         */
        protected ASTSectionSubscriptListNode userAction(ASTSectionSubscriptListNode v1, Token v2, ASTSectionSubscriptNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production483Production PRODUCTION483 = Production483Production.getInstance();

    public static class Production484Production extends Production
    {
        private Production484Production() {;} // Singleton
        private static Production484Production singletonInstance = null;
        public static final Production484Production getInstance() { if (singletonInstance == null) singletonInstance = new Production484Production(); return singletonInstance; }

        public String getDescription() { return "<SectionSubscript> ::= Expr:<Expr>  :production484"; }

        /**
         * Reduce by <SectionSubscript> ::= Expr:<Expr>  :production484
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SectionSubscript> ::= Expr:<Expr>  :production484
            ASTExprNode v1 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSectionSubscriptNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SectionSubscriptNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Expr"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SectionSubscript> ::= Expr:<Expr>  :production484
         */
        protected ASTSectionSubscriptNode userAction(ASTExprNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production484Production PRODUCTION484 = Production484Production.getInstance();

    public static class Production485Production extends Production
    {
        private Production485Production() {;} // Singleton
        private static Production485Production singletonInstance = null;
        public static final Production485Production getInstance() { if (singletonInstance == null) singletonInstance = new Production485Production(); return singletonInstance; }

        public String getDescription() { return "<SectionSubscript> ::= SubscriptTriplet:<SubscriptTriplet>  :production485"; }

        /**
         * Reduce by <SectionSubscript> ::= SubscriptTriplet:<SubscriptTriplet>  :production485
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SectionSubscript> ::= SubscriptTriplet:<SubscriptTriplet>  :production485
            ASTSubscriptTripletNode v1 = (ASTSubscriptTripletNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSectionSubscriptNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SectionSubscriptNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SubscriptTriplet"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SectionSubscript> ::= SubscriptTriplet:<SubscriptTriplet>  :production485
         */
        protected ASTSectionSubscriptNode userAction(ASTSubscriptTripletNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production485Production PRODUCTION485 = Production485Production.getInstance();

    public static class Production486Production extends Production
    {
        private Production486Production() {;} // Singleton
        private static Production486Production singletonInstance = null;
        public static final Production486Production getInstance() { if (singletonInstance == null) singletonInstance = new Production486Production(); return singletonInstance; }

        public String getDescription() { return "<SubscriptTriplet> ::= tcolon:T_COLON  :production486"; }

        /**
         * Reduce by <SubscriptTriplet> ::= tcolon:T_COLON  :production486
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SubscriptTriplet> ::= tcolon:T_COLON  :production486
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSubscriptTripletNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SubscriptTripletNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tcolon"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SubscriptTriplet> ::= tcolon:T_COLON  :production486
         */
        protected ASTSubscriptTripletNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production486Production PRODUCTION486 = Production486Production.getInstance();

    public static class Production487Production extends Production
    {
        private Production487Production() {;} // Singleton
        private static Production487Production singletonInstance = null;
        public static final Production487Production getInstance() { if (singletonInstance == null) singletonInstance = new Production487Production(); return singletonInstance; }

        public String getDescription() { return "<SubscriptTriplet> ::= tcolon:T_COLON Expr:<Expr>  :production487"; }

        /**
         * Reduce by <SubscriptTriplet> ::= tcolon:T_COLON Expr:<Expr>  :production487
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SubscriptTriplet> ::= tcolon:T_COLON Expr:<Expr>  :production487
            ASTExprNode v2 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSubscriptTripletNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.SubscriptTripletNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tcolon"))
                return 0;
            else
                if (name.equals("Expr"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SubscriptTriplet> ::= tcolon:T_COLON Expr:<Expr>  :production487
         */
        protected ASTSubscriptTripletNode userAction(Token v1, ASTExprNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production487Production PRODUCTION487 = Production487Production.getInstance();

    public static class Production488Production extends Production
    {
        private Production488Production() {;} // Singleton
        private static Production488Production singletonInstance = null;
        public static final Production488Production getInstance() { if (singletonInstance == null) singletonInstance = new Production488Production(); return singletonInstance; }

        public String getDescription() { return "<SubscriptTriplet> ::= Expr:<Expr> tcolon:T_COLON  :production488"; }

        /**
         * Reduce by <SubscriptTriplet> ::= Expr:<Expr> tcolon:T_COLON  :production488
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SubscriptTriplet> ::= Expr:<Expr> tcolon:T_COLON  :production488
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v1 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSubscriptTripletNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.SubscriptTripletNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Expr"))
                return 0;
            else
                if (name.equals("tcolon"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SubscriptTriplet> ::= Expr:<Expr> tcolon:T_COLON  :production488
         */
        protected ASTSubscriptTripletNode userAction(ASTExprNode v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production488Production PRODUCTION488 = Production488Production.getInstance();

    public static class Production489Production extends Production
    {
        private Production489Production() {;} // Singleton
        private static Production489Production singletonInstance = null;
        public static final Production489Production getInstance() { if (singletonInstance == null) singletonInstance = new Production489Production(); return singletonInstance; }

        public String getDescription() { return "<SubscriptTriplet> ::= Expr:<Expr> tcolon:T_COLON Expr2:<Expr>  :production489"; }

        /**
         * Reduce by <SubscriptTriplet> ::= Expr:<Expr> tcolon:T_COLON Expr2:<Expr>  :production489
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SubscriptTriplet> ::= Expr:<Expr> tcolon:T_COLON Expr2:<Expr>  :production489
            ASTExprNode v3 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v1 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSubscriptTripletNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.SubscriptTripletNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Expr"))
                return 0;
            else
                if (name.equals("tcolon"))
                    return 1;
                else
                    if (name.equals("Expr2"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SubscriptTriplet> ::= Expr:<Expr> tcolon:T_COLON Expr2:<Expr>  :production489
         */
        protected ASTSubscriptTripletNode userAction(ASTExprNode v1, Token v2, ASTExprNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production489Production PRODUCTION489 = Production489Production.getInstance();

    public static class Production490Production extends Production
    {
        private Production490Production() {;} // Singleton
        private static Production490Production singletonInstance = null;
        public static final Production490Production getInstance() { if (singletonInstance == null) singletonInstance = new Production490Production(); return singletonInstance; }

        public String getDescription() { return "<SubscriptTriplet> ::= Expr:<Expr> tcolon:T_COLON Expr2:<Expr> tcolon2:T_COLON Expr3:<Expr>  :production490"; }

        /**
         * Reduce by <SubscriptTriplet> ::= Expr:<Expr> tcolon:T_COLON Expr2:<Expr> tcolon2:T_COLON Expr3:<Expr>  :production490
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SubscriptTriplet> ::= Expr:<Expr> tcolon:T_COLON Expr2:<Expr> tcolon2:T_COLON Expr3:<Expr>  :production490
            ASTExprNode v5 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v3 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v1 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSubscriptTripletNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.SubscriptTripletNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Expr"))
                return 0;
            else
                if (name.equals("tcolon"))
                    return 1;
                else
                    if (name.equals("Expr2"))
                        return 2;
                    else
                        if (name.equals("tcolon2"))
                            return 3;
                        else
                            if (name.equals("Expr3"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SubscriptTriplet> ::= Expr:<Expr> tcolon:T_COLON Expr2:<Expr> tcolon2:T_COLON Expr3:<Expr>  :production490
         */
        protected ASTSubscriptTripletNode userAction(ASTExprNode v1, Token v2, ASTExprNode v3, Token v4, ASTExprNode v5)
        {
            return null;
        }
    }
    public static final Productions.Production490Production PRODUCTION490 = Production490Production.getInstance();

    public static class Production491Production extends Production
    {
        private Production491Production() {;} // Singleton
        private static Production491Production singletonInstance = null;
        public static final Production491Production getInstance() { if (singletonInstance == null) singletonInstance = new Production491Production(); return singletonInstance; }

        public String getDescription() { return "<SubscriptTriplet> ::= Expr:<Expr> tcolon:T_COLON tcolon2:T_COLON Expr2:<Expr>  :production491"; }

        /**
         * Reduce by <SubscriptTriplet> ::= Expr:<Expr> tcolon:T_COLON tcolon2:T_COLON Expr2:<Expr>  :production491
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SubscriptTriplet> ::= Expr:<Expr> tcolon:T_COLON tcolon2:T_COLON Expr2:<Expr>  :production491
            ASTExprNode v4 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v1 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSubscriptTripletNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.SubscriptTripletNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Expr"))
                return 0;
            else
                if (name.equals("tcolon"))
                    return 1;
                else
                    if (name.equals("tcolon2"))
                        return 2;
                    else
                        if (name.equals("Expr2"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SubscriptTriplet> ::= Expr:<Expr> tcolon:T_COLON tcolon2:T_COLON Expr2:<Expr>  :production491
         */
        protected ASTSubscriptTripletNode userAction(ASTExprNode v1, Token v2, Token v3, ASTExprNode v4)
        {
            return null;
        }
    }
    public static final Productions.Production491Production PRODUCTION491 = Production491Production.getInstance();

    public static class Production492Production extends Production
    {
        private Production492Production() {;} // Singleton
        private static Production492Production singletonInstance = null;
        public static final Production492Production getInstance() { if (singletonInstance == null) singletonInstance = new Production492Production(); return singletonInstance; }

        public String getDescription() { return "<SubscriptTriplet> ::= tcolon:T_COLON Expr:<Expr> tcolon2:T_COLON Expr2:<Expr>  :production492"; }

        /**
         * Reduce by <SubscriptTriplet> ::= tcolon:T_COLON Expr:<Expr> tcolon2:T_COLON Expr2:<Expr>  :production492
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SubscriptTriplet> ::= tcolon:T_COLON Expr:<Expr> tcolon2:T_COLON Expr2:<Expr>  :production492
            ASTExprNode v4 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v2 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSubscriptTripletNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.SubscriptTripletNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tcolon"))
                return 0;
            else
                if (name.equals("Expr"))
                    return 1;
                else
                    if (name.equals("tcolon2"))
                        return 2;
                    else
                        if (name.equals("Expr2"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SubscriptTriplet> ::= tcolon:T_COLON Expr:<Expr> tcolon2:T_COLON Expr2:<Expr>  :production492
         */
        protected ASTSubscriptTripletNode userAction(Token v1, ASTExprNode v2, Token v3, ASTExprNode v4)
        {
            return null;
        }
    }
    public static final Productions.Production492Production PRODUCTION492 = Production492Production.getInstance();

    public static class Production493Production extends Production
    {
        private Production493Production() {;} // Singleton
        private static Production493Production singletonInstance = null;
        public static final Production493Production getInstance() { if (singletonInstance == null) singletonInstance = new Production493Production(); return singletonInstance; }

        public String getDescription() { return "<SubscriptTriplet> ::= tcolon:T_COLON tcolon2:T_COLON Expr:<Expr>  :production493"; }

        /**
         * Reduce by <SubscriptTriplet> ::= tcolon:T_COLON tcolon2:T_COLON Expr:<Expr>  :production493
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SubscriptTriplet> ::= tcolon:T_COLON tcolon2:T_COLON Expr:<Expr>  :production493
            ASTExprNode v3 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSubscriptTripletNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.SubscriptTripletNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tcolon"))
                return 0;
            else
                if (name.equals("tcolon2"))
                    return 1;
                else
                    if (name.equals("Expr"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SubscriptTriplet> ::= tcolon:T_COLON tcolon2:T_COLON Expr:<Expr>  :production493
         */
        protected ASTSubscriptTripletNode userAction(Token v1, Token v2, ASTExprNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production493Production PRODUCTION493 = Production493Production.getInstance();

    public static class Production494Production extends Production
    {
        private Production494Production() {;} // Singleton
        private static Production494Production singletonInstance = null;
        public static final Production494Production getInstance() { if (singletonInstance == null) singletonInstance = new Production494Production(); return singletonInstance; }

        public String getDescription() { return "<AllocateStmt> ::= tallocate:T_ALLOCATE tlparen:T_LPAREN AllocationList:<AllocationList> tcomma:T_COMMA tstateq:T_STATEQ Variable:<Variable> trparen:T_RPAREN teos:T_EOS  :production494"; }

        /**
         * Reduce by <AllocateStmt> ::= tallocate:T_ALLOCATE tlparen:T_LPAREN AllocationList:<AllocationList> tcomma:T_COMMA tstateq:T_STATEQ Variable:<Variable> trparen:T_RPAREN teos:T_EOS  :production494
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AllocateStmt> ::= tallocate:T_ALLOCATE tlparen:T_LPAREN AllocationList:<AllocationList> tcomma:T_COMMA tstateq:T_STATEQ Variable:<Variable> trparen:T_RPAREN teos:T_EOS  :production494
            Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTVariableNode v6 = (ASTVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTAllocationListNode v3 = (ASTAllocationListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAllocateStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8);

            // The production has 8 symbols on its RHS
            parser.reduce(Nonterminal.AllocateStmtNonterminal.getInstance(), 8, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tallocate"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("AllocationList"))
                        return 2;
                    else
                        if (name.equals("tcomma"))
                            return 3;
                        else
                            if (name.equals("tstateq"))
                                return 4;
                            else
                                if (name.equals("Variable"))
                                    return 5;
                                else
                                    if (name.equals("trparen"))
                                        return 6;
                                    else
                                        if (name.equals("teos"))
                                            return 7;
                                        else
                                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AllocateStmt> ::= tallocate:T_ALLOCATE tlparen:T_LPAREN AllocationList:<AllocationList> tcomma:T_COMMA tstateq:T_STATEQ Variable:<Variable> trparen:T_RPAREN teos:T_EOS  :production494
         */
        protected ASTAllocateStmtNode userAction(Token v1, Token v2, ASTAllocationListNode v3, Token v4, Token v5, ASTVariableNode v6, Token v7, Token v8)
        {
            return null;
        }
    }
    public static final Productions.Production494Production PRODUCTION494 = Production494Production.getInstance();

    public static class Production495Production extends Production
    {
        private Production495Production() {;} // Singleton
        private static Production495Production singletonInstance = null;
        public static final Production495Production getInstance() { if (singletonInstance == null) singletonInstance = new Production495Production(); return singletonInstance; }

        public String getDescription() { return "<AllocateStmt> ::= LblDef:<LblDef> tallocate:T_ALLOCATE tlparen:T_LPAREN AllocationList:<AllocationList> tcomma:T_COMMA tstateq:T_STATEQ Variable:<Variable> trparen:T_RPAREN teos:T_EOS  :production495"; }

        /**
         * Reduce by <AllocateStmt> ::= LblDef:<LblDef> tallocate:T_ALLOCATE tlparen:T_LPAREN AllocationList:<AllocationList> tcomma:T_COMMA tstateq:T_STATEQ Variable:<Variable> trparen:T_RPAREN teos:T_EOS  :production495
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AllocateStmt> ::= LblDef:<LblDef> tallocate:T_ALLOCATE tlparen:T_LPAREN AllocationList:<AllocationList> tcomma:T_COMMA tstateq:T_STATEQ Variable:<Variable> trparen:T_RPAREN teos:T_EOS  :production495
            Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTVariableNode v7 = (ASTVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTAllocationListNode v4 = (ASTAllocationListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAllocateStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8, v9);

            // The production has 9 symbols on its RHS
            parser.reduce(Nonterminal.AllocateStmtNonterminal.getInstance(), 9, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tallocate"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("AllocationList"))
                            return 3;
                        else
                            if (name.equals("tcomma"))
                                return 4;
                            else
                                if (name.equals("tstateq"))
                                    return 5;
                                else
                                    if (name.equals("Variable"))
                                        return 6;
                                    else
                                        if (name.equals("trparen"))
                                            return 7;
                                        else
                                            if (name.equals("teos"))
                                                return 8;
                                            else
                                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AllocateStmt> ::= LblDef:<LblDef> tallocate:T_ALLOCATE tlparen:T_LPAREN AllocationList:<AllocationList> tcomma:T_COMMA tstateq:T_STATEQ Variable:<Variable> trparen:T_RPAREN teos:T_EOS  :production495
         */
        protected ASTAllocateStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, ASTAllocationListNode v4, Token v5, Token v6, ASTVariableNode v7, Token v8, Token v9)
        {
            return null;
        }
    }
    public static final Productions.Production495Production PRODUCTION495 = Production495Production.getInstance();

    public static class Production496Production extends Production
    {
        private Production496Production() {;} // Singleton
        private static Production496Production singletonInstance = null;
        public static final Production496Production getInstance() { if (singletonInstance == null) singletonInstance = new Production496Production(); return singletonInstance; }

        public String getDescription() { return "<AllocateStmt> ::= tallocate:T_ALLOCATE tlparen:T_LPAREN AllocationList:<AllocationList> trparen:T_RPAREN teos:T_EOS  :production496"; }

        /**
         * Reduce by <AllocateStmt> ::= tallocate:T_ALLOCATE tlparen:T_LPAREN AllocationList:<AllocationList> trparen:T_RPAREN teos:T_EOS  :production496
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AllocateStmt> ::= tallocate:T_ALLOCATE tlparen:T_LPAREN AllocationList:<AllocationList> trparen:T_RPAREN teos:T_EOS  :production496
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTAllocationListNode v3 = (ASTAllocationListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAllocateStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.AllocateStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tallocate"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("AllocationList"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AllocateStmt> ::= tallocate:T_ALLOCATE tlparen:T_LPAREN AllocationList:<AllocationList> trparen:T_RPAREN teos:T_EOS  :production496
         */
        protected ASTAllocateStmtNode userAction(Token v1, Token v2, ASTAllocationListNode v3, Token v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production496Production PRODUCTION496 = Production496Production.getInstance();

    public static class Production497Production extends Production
    {
        private Production497Production() {;} // Singleton
        private static Production497Production singletonInstance = null;
        public static final Production497Production getInstance() { if (singletonInstance == null) singletonInstance = new Production497Production(); return singletonInstance; }

        public String getDescription() { return "<AllocateStmt> ::= LblDef:<LblDef> tallocate:T_ALLOCATE tlparen:T_LPAREN AllocationList:<AllocationList> trparen:T_RPAREN teos:T_EOS  :production497"; }

        /**
         * Reduce by <AllocateStmt> ::= LblDef:<LblDef> tallocate:T_ALLOCATE tlparen:T_LPAREN AllocationList:<AllocationList> trparen:T_RPAREN teos:T_EOS  :production497
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AllocateStmt> ::= LblDef:<LblDef> tallocate:T_ALLOCATE tlparen:T_LPAREN AllocationList:<AllocationList> trparen:T_RPAREN teos:T_EOS  :production497
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTAllocationListNode v4 = (ASTAllocationListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAllocateStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.AllocateStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tallocate"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("AllocationList"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AllocateStmt> ::= LblDef:<LblDef> tallocate:T_ALLOCATE tlparen:T_LPAREN AllocationList:<AllocationList> trparen:T_RPAREN teos:T_EOS  :production497
         */
        protected ASTAllocateStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, ASTAllocationListNode v4, Token v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production497Production PRODUCTION497 = Production497Production.getInstance();

    public static class Production498Production extends Production
    {
        private Production498Production() {;} // Singleton
        private static Production498Production singletonInstance = null;
        public static final Production498Production getInstance() { if (singletonInstance == null) singletonInstance = new Production498Production(); return singletonInstance; }

        public String getDescription() { return "<AllocationList> ::= Allocation:<Allocation>  :production498"; }

        /**
         * Reduce by <AllocationList> ::= Allocation:<Allocation>  :production498
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AllocationList> ::= Allocation:<Allocation>  :production498
            ASTAllocationNode v1 = (ASTAllocationNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAllocationListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.AllocationListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Allocation"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AllocationList> ::= Allocation:<Allocation>  :production498
         */
        protected ASTAllocationListNode userAction(ASTAllocationNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production498Production PRODUCTION498 = Production498Production.getInstance();

    public static class Production499Production extends Production
    {
        private Production499Production() {;} // Singleton
        private static Production499Production singletonInstance = null;
        public static final Production499Production getInstance() { if (singletonInstance == null) singletonInstance = new Production499Production(); return singletonInstance; }

        public String getDescription() { return "<AllocationList> ::= @:<AllocationList> tcomma:T_COMMA Allocation:<Allocation>  :production499"; }

        /**
         * Reduce by <AllocationList> ::= @:<AllocationList> tcomma:T_COMMA Allocation:<Allocation>  :production499
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AllocationList> ::= @:<AllocationList> tcomma:T_COMMA Allocation:<Allocation>  :production499
            ASTAllocationNode v3 = (ASTAllocationNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTAllocationListNode v1 = (ASTAllocationListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAllocationListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.AllocationListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("Allocation"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AllocationList> ::= @:<AllocationList> tcomma:T_COMMA Allocation:<Allocation>  :production499
         */
        protected ASTAllocationListNode userAction(ASTAllocationListNode v1, Token v2, ASTAllocationNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production499Production PRODUCTION499 = Production499Production.getInstance();

    public static class Production500Production extends Production
    {
        private Production500Production() {;} // Singleton
        private static Production500Production singletonInstance = null;
        public static final Production500Production getInstance() { if (singletonInstance == null) singletonInstance = new Production500Production(); return singletonInstance; }

        public String getDescription() { return "<Allocation> ::= AllocateObject:<AllocateObject>  :production500"; }

        /**
         * Reduce by <Allocation> ::= AllocateObject:<AllocateObject>  :production500
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Allocation> ::= AllocateObject:<AllocateObject>  :production500
            ASTAllocateObjectNode v1 = (ASTAllocateObjectNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAllocationNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.AllocationNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("AllocateObject"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Allocation> ::= AllocateObject:<AllocateObject>  :production500
         */
        protected ASTAllocationNode userAction(ASTAllocateObjectNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production500Production PRODUCTION500 = Production500Production.getInstance();

    public static class Production501Production extends Production
    {
        private Production501Production() {;} // Singleton
        private static Production501Production singletonInstance = null;
        public static final Production501Production getInstance() { if (singletonInstance == null) singletonInstance = new Production501Production(); return singletonInstance; }

        public String getDescription() { return "<Allocation> ::= AllocateObject:<AllocateObject> AllocatedShape:<AllocatedShape>  :production501"; }

        /**
         * Reduce by <Allocation> ::= AllocateObject:<AllocateObject> AllocatedShape:<AllocatedShape>  :production501
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Allocation> ::= AllocateObject:<AllocateObject> AllocatedShape:<AllocatedShape>  :production501
            ASTAllocatedShapeNode v2 = (ASTAllocatedShapeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTAllocateObjectNode v1 = (ASTAllocateObjectNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAllocationNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.AllocationNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("AllocateObject"))
                return 0;
            else
                if (name.equals("AllocatedShape"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Allocation> ::= AllocateObject:<AllocateObject> AllocatedShape:<AllocatedShape>  :production501
         */
        protected ASTAllocationNode userAction(ASTAllocateObjectNode v1, ASTAllocatedShapeNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production501Production PRODUCTION501 = Production501Production.getInstance();

    public static class Production502Production extends Production
    {
        private Production502Production() {;} // Singleton
        private static Production502Production singletonInstance = null;
        public static final Production502Production getInstance() { if (singletonInstance == null) singletonInstance = new Production502Production(); return singletonInstance; }

        public String getDescription() { return "<AllocatedShape> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :production502"; }

        /**
         * Reduce by <AllocatedShape> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :production502
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AllocatedShape> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :production502
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v2 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAllocatedShapeNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.AllocatedShapeNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("SectionSubscriptList"))
                    return 1;
                else
                    if (name.equals("trparen"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AllocatedShape> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :production502
         */
        protected ASTAllocatedShapeNode userAction(Token v1, ASTSectionSubscriptListNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production502Production PRODUCTION502 = Production502Production.getInstance();

    public static class Production503Production extends Production
    {
        private Production503Production() {;} // Singleton
        private static Production503Production singletonInstance = null;
        public static final Production503Production getInstance() { if (singletonInstance == null) singletonInstance = new Production503Production(); return singletonInstance; }

        public String getDescription() { return "<AllocateObjectList> ::= AllocateObject:<AllocateObject>  :production503"; }

        /**
         * Reduce by <AllocateObjectList> ::= AllocateObject:<AllocateObject>  :production503
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AllocateObjectList> ::= AllocateObject:<AllocateObject>  :production503
            ASTAllocateObjectNode v1 = (ASTAllocateObjectNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAllocateObjectListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.AllocateObjectListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("AllocateObject"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AllocateObjectList> ::= AllocateObject:<AllocateObject>  :production503
         */
        protected ASTAllocateObjectListNode userAction(ASTAllocateObjectNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production503Production PRODUCTION503 = Production503Production.getInstance();

    public static class Production504Production extends Production
    {
        private Production504Production() {;} // Singleton
        private static Production504Production singletonInstance = null;
        public static final Production504Production getInstance() { if (singletonInstance == null) singletonInstance = new Production504Production(); return singletonInstance; }

        public String getDescription() { return "<AllocateObjectList> ::= @:<AllocateObjectList> tcomma:T_COMMA AllocateObject:<AllocateObject>  :production504"; }

        /**
         * Reduce by <AllocateObjectList> ::= @:<AllocateObjectList> tcomma:T_COMMA AllocateObject:<AllocateObject>  :production504
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AllocateObjectList> ::= @:<AllocateObjectList> tcomma:T_COMMA AllocateObject:<AllocateObject>  :production504
            ASTAllocateObjectNode v3 = (ASTAllocateObjectNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTAllocateObjectListNode v1 = (ASTAllocateObjectListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAllocateObjectListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.AllocateObjectListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("AllocateObject"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AllocateObjectList> ::= @:<AllocateObjectList> tcomma:T_COMMA AllocateObject:<AllocateObject>  :production504
         */
        protected ASTAllocateObjectListNode userAction(ASTAllocateObjectListNode v1, Token v2, ASTAllocateObjectNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production504Production PRODUCTION504 = Production504Production.getInstance();

    public static class Production505Production extends Production
    {
        private Production505Production() {;} // Singleton
        private static Production505Production singletonInstance = null;
        public static final Production505Production getInstance() { if (singletonInstance == null) singletonInstance = new Production505Production(); return singletonInstance; }

        public String getDescription() { return "<AllocateObject> ::= VariableName:<VariableName>  :production505"; }

        /**
         * Reduce by <AllocateObject> ::= VariableName:<VariableName>  :production505
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AllocateObject> ::= VariableName:<VariableName>  :production505
            ASTVariableNameNode v1 = (ASTVariableNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAllocateObjectNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.AllocateObjectNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("VariableName"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AllocateObject> ::= VariableName:<VariableName>  :production505
         */
        protected ASTAllocateObjectNode userAction(ASTVariableNameNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production505Production PRODUCTION505 = Production505Production.getInstance();

    public static class Production506Production extends Production
    {
        private Production506Production() {;} // Singleton
        private static Production506Production singletonInstance = null;
        public static final Production506Production getInstance() { if (singletonInstance == null) singletonInstance = new Production506Production(); return singletonInstance; }

        public String getDescription() { return "<AllocateObject> ::= AllocateObject:<AllocateObject> FieldSelector:<FieldSelector>  :production506"; }

        /**
         * Reduce by <AllocateObject> ::= AllocateObject:<AllocateObject> FieldSelector:<FieldSelector>  :production506
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AllocateObject> ::= AllocateObject:<AllocateObject> FieldSelector:<FieldSelector>  :production506
            ASTFieldSelectorNode v2 = (ASTFieldSelectorNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTAllocateObjectNode v1 = (ASTAllocateObjectNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAllocateObjectNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.AllocateObjectNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("AllocateObject"))
                return 0;
            else
                if (name.equals("FieldSelector"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AllocateObject> ::= AllocateObject:<AllocateObject> FieldSelector:<FieldSelector>  :production506
         */
        protected ASTAllocateObjectNode userAction(ASTAllocateObjectNode v1, ASTFieldSelectorNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production506Production PRODUCTION506 = Production506Production.getInstance();

    public static class Production507Production extends Production
    {
        private Production507Production() {;} // Singleton
        private static Production507Production singletonInstance = null;
        public static final Production507Production getInstance() { if (singletonInstance == null) singletonInstance = new Production507Production(); return singletonInstance; }

        public String getDescription() { return "<NullifyStmt> ::= tnullify:T_NULLIFY tlparen:T_LPAREN PointerObjectList:<PointerObjectList> trparen:T_RPAREN teos:T_EOS  :production507"; }

        /**
         * Reduce by <NullifyStmt> ::= tnullify:T_NULLIFY tlparen:T_LPAREN PointerObjectList:<PointerObjectList> trparen:T_RPAREN teos:T_EOS  :production507
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <NullifyStmt> ::= tnullify:T_NULLIFY tlparen:T_LPAREN PointerObjectList:<PointerObjectList> trparen:T_RPAREN teos:T_EOS  :production507
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTPointerObjectListNode v3 = (ASTPointerObjectListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTNullifyStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.NullifyStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tnullify"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("PointerObjectList"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <NullifyStmt> ::= tnullify:T_NULLIFY tlparen:T_LPAREN PointerObjectList:<PointerObjectList> trparen:T_RPAREN teos:T_EOS  :production507
         */
        protected ASTNullifyStmtNode userAction(Token v1, Token v2, ASTPointerObjectListNode v3, Token v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production507Production PRODUCTION507 = Production507Production.getInstance();

    public static class Production508Production extends Production
    {
        private Production508Production() {;} // Singleton
        private static Production508Production singletonInstance = null;
        public static final Production508Production getInstance() { if (singletonInstance == null) singletonInstance = new Production508Production(); return singletonInstance; }

        public String getDescription() { return "<NullifyStmt> ::= LblDef:<LblDef> tnullify:T_NULLIFY tlparen:T_LPAREN PointerObjectList:<PointerObjectList> trparen:T_RPAREN teos:T_EOS  :production508"; }

        /**
         * Reduce by <NullifyStmt> ::= LblDef:<LblDef> tnullify:T_NULLIFY tlparen:T_LPAREN PointerObjectList:<PointerObjectList> trparen:T_RPAREN teos:T_EOS  :production508
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <NullifyStmt> ::= LblDef:<LblDef> tnullify:T_NULLIFY tlparen:T_LPAREN PointerObjectList:<PointerObjectList> trparen:T_RPAREN teos:T_EOS  :production508
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTPointerObjectListNode v4 = (ASTPointerObjectListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTNullifyStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.NullifyStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tnullify"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("PointerObjectList"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <NullifyStmt> ::= LblDef:<LblDef> tnullify:T_NULLIFY tlparen:T_LPAREN PointerObjectList:<PointerObjectList> trparen:T_RPAREN teos:T_EOS  :production508
         */
        protected ASTNullifyStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, ASTPointerObjectListNode v4, Token v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production508Production PRODUCTION508 = Production508Production.getInstance();

    public static class Production509Production extends Production
    {
        private Production509Production() {;} // Singleton
        private static Production509Production singletonInstance = null;
        public static final Production509Production getInstance() { if (singletonInstance == null) singletonInstance = new Production509Production(); return singletonInstance; }

        public String getDescription() { return "<PointerObjectList> ::= PointerObject:<PointerObject>  :production509"; }

        /**
         * Reduce by <PointerObjectList> ::= PointerObject:<PointerObject>  :production509
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PointerObjectList> ::= PointerObject:<PointerObject>  :production509
            ASTPointerObjectNode v1 = (ASTPointerObjectNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPointerObjectListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.PointerObjectListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("PointerObject"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PointerObjectList> ::= PointerObject:<PointerObject>  :production509
         */
        protected ASTPointerObjectListNode userAction(ASTPointerObjectNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production509Production PRODUCTION509 = Production509Production.getInstance();

    public static class Production510Production extends Production
    {
        private Production510Production() {;} // Singleton
        private static Production510Production singletonInstance = null;
        public static final Production510Production getInstance() { if (singletonInstance == null) singletonInstance = new Production510Production(); return singletonInstance; }

        public String getDescription() { return "<PointerObjectList> ::= @:<PointerObjectList> tcomma:T_COMMA PointerObject:<PointerObject>  :production510"; }

        /**
         * Reduce by <PointerObjectList> ::= @:<PointerObjectList> tcomma:T_COMMA PointerObject:<PointerObject>  :production510
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PointerObjectList> ::= @:<PointerObjectList> tcomma:T_COMMA PointerObject:<PointerObject>  :production510
            ASTPointerObjectNode v3 = (ASTPointerObjectNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTPointerObjectListNode v1 = (ASTPointerObjectListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPointerObjectListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.PointerObjectListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("PointerObject"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PointerObjectList> ::= @:<PointerObjectList> tcomma:T_COMMA PointerObject:<PointerObject>  :production510
         */
        protected ASTPointerObjectListNode userAction(ASTPointerObjectListNode v1, Token v2, ASTPointerObjectNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production510Production PRODUCTION510 = Production510Production.getInstance();

    public static class Production511Production extends Production
    {
        private Production511Production() {;} // Singleton
        private static Production511Production singletonInstance = null;
        public static final Production511Production getInstance() { if (singletonInstance == null) singletonInstance = new Production511Production(); return singletonInstance; }

        public String getDescription() { return "<PointerObject> ::= Name:<Name>  :production511"; }

        /**
         * Reduce by <PointerObject> ::= Name:<Name>  :production511
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PointerObject> ::= Name:<Name>  :production511
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPointerObjectNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.PointerObjectNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PointerObject> ::= Name:<Name>  :production511
         */
        protected ASTPointerObjectNode userAction(ASTNameNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production511Production PRODUCTION511 = Production511Production.getInstance();

    public static class Production512Production extends Production
    {
        private Production512Production() {;} // Singleton
        private static Production512Production singletonInstance = null;
        public static final Production512Production getInstance() { if (singletonInstance == null) singletonInstance = new Production512Production(); return singletonInstance; }

        public String getDescription() { return "<PointerObject> ::= PointerField:<PointerField>  :production512"; }

        /**
         * Reduce by <PointerObject> ::= PointerField:<PointerField>  :production512
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PointerObject> ::= PointerField:<PointerField>  :production512
            ASTPointerFieldNode v1 = (ASTPointerFieldNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPointerObjectNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.PointerObjectNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("PointerField"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PointerObject> ::= PointerField:<PointerField>  :production512
         */
        protected ASTPointerObjectNode userAction(ASTPointerFieldNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production512Production PRODUCTION512 = Production512Production.getInstance();

    public static class Production513Production extends Production
    {
        private Production513Production() {;} // Singleton
        private static Production513Production singletonInstance = null;
        public static final Production513Production getInstance() { if (singletonInstance == null) singletonInstance = new Production513Production(); return singletonInstance; }

        public String getDescription() { return "<PointerField> ::= Name:<Name> tlparen:T_LPAREN SFExprList:<SFExprList> trparen:T_RPAREN tpercent:T_PERCENT Name2:<Name>  :production513"; }

        /**
         * Reduce by <PointerField> ::= Name:<Name> tlparen:T_LPAREN SFExprList:<SFExprList> trparen:T_RPAREN tpercent:T_PERCENT Name2:<Name>  :production513
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PointerField> ::= Name:<Name> tlparen:T_LPAREN SFExprList:<SFExprList> trparen:T_RPAREN tpercent:T_PERCENT Name2:<Name>  :production513
            ASTNameNode v6 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSFExprListNode v3 = (ASTSFExprListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPointerFieldNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.PointerFieldNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("SFExprList"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("tpercent"))
                                return 4;
                            else
                                if (name.equals("Name2"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PointerField> ::= Name:<Name> tlparen:T_LPAREN SFExprList:<SFExprList> trparen:T_RPAREN tpercent:T_PERCENT Name2:<Name>  :production513
         */
        protected ASTPointerFieldNode userAction(ASTNameNode v1, Token v2, ASTSFExprListNode v3, Token v4, Token v5, ASTNameNode v6)
        {
            return null;
        }
    }
    public static final Productions.Production513Production PRODUCTION513 = Production513Production.getInstance();

    public static class Production514Production extends Production
    {
        private Production514Production() {;} // Singleton
        private static Production514Production singletonInstance = null;
        public static final Production514Production getInstance() { if (singletonInstance == null) singletonInstance = new Production514Production(); return singletonInstance; }

        public String getDescription() { return "<PointerField> ::= Name:<Name> tlparen:T_LPAREN SFDummyArgNameList:<SFDummyArgNameList> trparen:T_RPAREN tpercent:T_PERCENT Name2:<Name>  :production514"; }

        /**
         * Reduce by <PointerField> ::= Name:<Name> tlparen:T_LPAREN SFDummyArgNameList:<SFDummyArgNameList> trparen:T_RPAREN tpercent:T_PERCENT Name2:<Name>  :production514
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PointerField> ::= Name:<Name> tlparen:T_LPAREN SFDummyArgNameList:<SFDummyArgNameList> trparen:T_RPAREN tpercent:T_PERCENT Name2:<Name>  :production514
            ASTNameNode v6 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSFDummyArgNameListNode v3 = (ASTSFDummyArgNameListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPointerFieldNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.PointerFieldNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("SFDummyArgNameList"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("tpercent"))
                                return 4;
                            else
                                if (name.equals("Name2"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PointerField> ::= Name:<Name> tlparen:T_LPAREN SFDummyArgNameList:<SFDummyArgNameList> trparen:T_RPAREN tpercent:T_PERCENT Name2:<Name>  :production514
         */
        protected ASTPointerFieldNode userAction(ASTNameNode v1, Token v2, ASTSFDummyArgNameListNode v3, Token v4, Token v5, ASTNameNode v6)
        {
            return null;
        }
    }
    public static final Productions.Production514Production PRODUCTION514 = Production514Production.getInstance();

    public static class Production515Production extends Production
    {
        private Production515Production() {;} // Singleton
        private static Production515Production singletonInstance = null;
        public static final Production515Production getInstance() { if (singletonInstance == null) singletonInstance = new Production515Production(); return singletonInstance; }

        public String getDescription() { return "<PointerField> ::= Name:<Name> tpercent:T_PERCENT Name2:<Name>  :production515"; }

        /**
         * Reduce by <PointerField> ::= Name:<Name> tpercent:T_PERCENT Name2:<Name>  :production515
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PointerField> ::= Name:<Name> tpercent:T_PERCENT Name2:<Name>  :production515
            ASTNameNode v3 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPointerFieldNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.PointerFieldNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tpercent"))
                    return 1;
                else
                    if (name.equals("Name2"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PointerField> ::= Name:<Name> tpercent:T_PERCENT Name2:<Name>  :production515
         */
        protected ASTPointerFieldNode userAction(ASTNameNode v1, Token v2, ASTNameNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production515Production PRODUCTION515 = Production515Production.getInstance();

    public static class Production516Production extends Production
    {
        private Production516Production() {;} // Singleton
        private static Production516Production singletonInstance = null;
        public static final Production516Production getInstance() { if (singletonInstance == null) singletonInstance = new Production516Production(); return singletonInstance; }

        public String getDescription() { return "<PointerField> ::= PointerField:<PointerField> FieldSelector:<FieldSelector>  :production516"; }

        /**
         * Reduce by <PointerField> ::= PointerField:<PointerField> FieldSelector:<FieldSelector>  :production516
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PointerField> ::= PointerField:<PointerField> FieldSelector:<FieldSelector>  :production516
            ASTFieldSelectorNode v2 = (ASTFieldSelectorNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTPointerFieldNode v1 = (ASTPointerFieldNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPointerFieldNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.PointerFieldNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("PointerField"))
                return 0;
            else
                if (name.equals("FieldSelector"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PointerField> ::= PointerField:<PointerField> FieldSelector:<FieldSelector>  :production516
         */
        protected ASTPointerFieldNode userAction(ASTPointerFieldNode v1, ASTFieldSelectorNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production516Production PRODUCTION516 = Production516Production.getInstance();

    public static class Production517Production extends Production
    {
        private Production517Production() {;} // Singleton
        private static Production517Production singletonInstance = null;
        public static final Production517Production getInstance() { if (singletonInstance == null) singletonInstance = new Production517Production(); return singletonInstance; }

        public String getDescription() { return "<DeallocateStmt> ::= tdeallocate:T_DEALLOCATE tlparen:T_LPAREN AllocateObjectList:<AllocateObjectList> tcomma:T_COMMA tstateq:T_STATEQ Variable:<Variable> trparen:T_RPAREN teos:T_EOS  :production517"; }

        /**
         * Reduce by <DeallocateStmt> ::= tdeallocate:T_DEALLOCATE tlparen:T_LPAREN AllocateObjectList:<AllocateObjectList> tcomma:T_COMMA tstateq:T_STATEQ Variable:<Variable> trparen:T_RPAREN teos:T_EOS  :production517
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DeallocateStmt> ::= tdeallocate:T_DEALLOCATE tlparen:T_LPAREN AllocateObjectList:<AllocateObjectList> tcomma:T_COMMA tstateq:T_STATEQ Variable:<Variable> trparen:T_RPAREN teos:T_EOS  :production517
            Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTVariableNode v6 = (ASTVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTAllocateObjectListNode v3 = (ASTAllocateObjectListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDeallocateStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8);

            // The production has 8 symbols on its RHS
            parser.reduce(Nonterminal.DeallocateStmtNonterminal.getInstance(), 8, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tdeallocate"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("AllocateObjectList"))
                        return 2;
                    else
                        if (name.equals("tcomma"))
                            return 3;
                        else
                            if (name.equals("tstateq"))
                                return 4;
                            else
                                if (name.equals("Variable"))
                                    return 5;
                                else
                                    if (name.equals("trparen"))
                                        return 6;
                                    else
                                        if (name.equals("teos"))
                                            return 7;
                                        else
                                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DeallocateStmt> ::= tdeallocate:T_DEALLOCATE tlparen:T_LPAREN AllocateObjectList:<AllocateObjectList> tcomma:T_COMMA tstateq:T_STATEQ Variable:<Variable> trparen:T_RPAREN teos:T_EOS  :production517
         */
        protected ASTDeallocateStmtNode userAction(Token v1, Token v2, ASTAllocateObjectListNode v3, Token v4, Token v5, ASTVariableNode v6, Token v7, Token v8)
        {
            return null;
        }
    }
    public static final Productions.Production517Production PRODUCTION517 = Production517Production.getInstance();

    public static class Production518Production extends Production
    {
        private Production518Production() {;} // Singleton
        private static Production518Production singletonInstance = null;
        public static final Production518Production getInstance() { if (singletonInstance == null) singletonInstance = new Production518Production(); return singletonInstance; }

        public String getDescription() { return "<DeallocateStmt> ::= LblDef:<LblDef> tdeallocate:T_DEALLOCATE tlparen:T_LPAREN AllocateObjectList:<AllocateObjectList> tcomma:T_COMMA tstateq:T_STATEQ Variable:<Variable> trparen:T_RPAREN teos:T_EOS  :production518"; }

        /**
         * Reduce by <DeallocateStmt> ::= LblDef:<LblDef> tdeallocate:T_DEALLOCATE tlparen:T_LPAREN AllocateObjectList:<AllocateObjectList> tcomma:T_COMMA tstateq:T_STATEQ Variable:<Variable> trparen:T_RPAREN teos:T_EOS  :production518
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DeallocateStmt> ::= LblDef:<LblDef> tdeallocate:T_DEALLOCATE tlparen:T_LPAREN AllocateObjectList:<AllocateObjectList> tcomma:T_COMMA tstateq:T_STATEQ Variable:<Variable> trparen:T_RPAREN teos:T_EOS  :production518
            Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTVariableNode v7 = (ASTVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTAllocateObjectListNode v4 = (ASTAllocateObjectListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDeallocateStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8, v9);

            // The production has 9 symbols on its RHS
            parser.reduce(Nonterminal.DeallocateStmtNonterminal.getInstance(), 9, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tdeallocate"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("AllocateObjectList"))
                            return 3;
                        else
                            if (name.equals("tcomma"))
                                return 4;
                            else
                                if (name.equals("tstateq"))
                                    return 5;
                                else
                                    if (name.equals("Variable"))
                                        return 6;
                                    else
                                        if (name.equals("trparen"))
                                            return 7;
                                        else
                                            if (name.equals("teos"))
                                                return 8;
                                            else
                                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DeallocateStmt> ::= LblDef:<LblDef> tdeallocate:T_DEALLOCATE tlparen:T_LPAREN AllocateObjectList:<AllocateObjectList> tcomma:T_COMMA tstateq:T_STATEQ Variable:<Variable> trparen:T_RPAREN teos:T_EOS  :production518
         */
        protected ASTDeallocateStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, ASTAllocateObjectListNode v4, Token v5, Token v6, ASTVariableNode v7, Token v8, Token v9)
        {
            return null;
        }
    }
    public static final Productions.Production518Production PRODUCTION518 = Production518Production.getInstance();

    public static class Production519Production extends Production
    {
        private Production519Production() {;} // Singleton
        private static Production519Production singletonInstance = null;
        public static final Production519Production getInstance() { if (singletonInstance == null) singletonInstance = new Production519Production(); return singletonInstance; }

        public String getDescription() { return "<DeallocateStmt> ::= tdeallocate:T_DEALLOCATE tlparen:T_LPAREN AllocateObjectList:<AllocateObjectList> trparen:T_RPAREN teos:T_EOS  :production519"; }

        /**
         * Reduce by <DeallocateStmt> ::= tdeallocate:T_DEALLOCATE tlparen:T_LPAREN AllocateObjectList:<AllocateObjectList> trparen:T_RPAREN teos:T_EOS  :production519
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DeallocateStmt> ::= tdeallocate:T_DEALLOCATE tlparen:T_LPAREN AllocateObjectList:<AllocateObjectList> trparen:T_RPAREN teos:T_EOS  :production519
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTAllocateObjectListNode v3 = (ASTAllocateObjectListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDeallocateStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.DeallocateStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tdeallocate"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("AllocateObjectList"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DeallocateStmt> ::= tdeallocate:T_DEALLOCATE tlparen:T_LPAREN AllocateObjectList:<AllocateObjectList> trparen:T_RPAREN teos:T_EOS  :production519
         */
        protected ASTDeallocateStmtNode userAction(Token v1, Token v2, ASTAllocateObjectListNode v3, Token v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production519Production PRODUCTION519 = Production519Production.getInstance();

    public static class Production520Production extends Production
    {
        private Production520Production() {;} // Singleton
        private static Production520Production singletonInstance = null;
        public static final Production520Production getInstance() { if (singletonInstance == null) singletonInstance = new Production520Production(); return singletonInstance; }

        public String getDescription() { return "<DeallocateStmt> ::= LblDef:<LblDef> tdeallocate:T_DEALLOCATE tlparen:T_LPAREN AllocateObjectList:<AllocateObjectList> trparen:T_RPAREN teos:T_EOS  :production520"; }

        /**
         * Reduce by <DeallocateStmt> ::= LblDef:<LblDef> tdeallocate:T_DEALLOCATE tlparen:T_LPAREN AllocateObjectList:<AllocateObjectList> trparen:T_RPAREN teos:T_EOS  :production520
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DeallocateStmt> ::= LblDef:<LblDef> tdeallocate:T_DEALLOCATE tlparen:T_LPAREN AllocateObjectList:<AllocateObjectList> trparen:T_RPAREN teos:T_EOS  :production520
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTAllocateObjectListNode v4 = (ASTAllocateObjectListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDeallocateStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.DeallocateStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tdeallocate"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("AllocateObjectList"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DeallocateStmt> ::= LblDef:<LblDef> tdeallocate:T_DEALLOCATE tlparen:T_LPAREN AllocateObjectList:<AllocateObjectList> trparen:T_RPAREN teos:T_EOS  :production520
         */
        protected ASTDeallocateStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, ASTAllocateObjectListNode v4, Token v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production520Production PRODUCTION520 = Production520Production.getInstance();

    public static class Production521Production extends Production
    {
        private Production521Production() {;} // Singleton
        private static Production521Production singletonInstance = null;
        public static final Production521Production getInstance() { if (singletonInstance == null) singletonInstance = new Production521Production(); return singletonInstance; }

        public String getDescription() { return "<Primary> ::= LogicalConstant:<LogicalConstant>  :production521"; }

        /**
         * Reduce by <Primary> ::= LogicalConstant:<LogicalConstant>  :production521
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Primary> ::= LogicalConstant:<LogicalConstant>  :production521
            ASTLogicalConstantNode v1 = (ASTLogicalConstantNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPrimaryNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.PrimaryNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LogicalConstant"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Primary> ::= LogicalConstant:<LogicalConstant>  :production521
         */
        protected ASTPrimaryNode userAction(ASTLogicalConstantNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production521Production PRODUCTION521 = Production521Production.getInstance();

    public static class Production522Production extends Production
    {
        private Production522Production() {;} // Singleton
        private static Production522Production singletonInstance = null;
        public static final Production522Production getInstance() { if (singletonInstance == null) singletonInstance = new Production522Production(); return singletonInstance; }

        public String getDescription() { return "<Primary> ::= tscon:T_SCON  :production522"; }

        /**
         * Reduce by <Primary> ::= tscon:T_SCON  :production522
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Primary> ::= tscon:T_SCON  :production522
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPrimaryNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.PrimaryNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tscon"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Primary> ::= tscon:T_SCON  :production522
         */
        protected ASTPrimaryNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production522Production PRODUCTION522 = Production522Production.getInstance();

    public static class Production523Production extends Production
    {
        private Production523Production() {;} // Singleton
        private static Production523Production singletonInstance = null;
        public static final Production523Production getInstance() { if (singletonInstance == null) singletonInstance = new Production523Production(); return singletonInstance; }

        public String getDescription() { return "<Primary> ::= UnsignedArithmeticConstant:<UnsignedArithmeticConstant>  :production523"; }

        /**
         * Reduce by <Primary> ::= UnsignedArithmeticConstant:<UnsignedArithmeticConstant>  :production523
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Primary> ::= UnsignedArithmeticConstant:<UnsignedArithmeticConstant>  :production523
            ASTUnsignedArithmeticConstantNode v1 = (ASTUnsignedArithmeticConstantNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPrimaryNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.PrimaryNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("UnsignedArithmeticConstant"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Primary> ::= UnsignedArithmeticConstant:<UnsignedArithmeticConstant>  :production523
         */
        protected ASTPrimaryNode userAction(ASTUnsignedArithmeticConstantNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production523Production PRODUCTION523 = Production523Production.getInstance();

    public static class Production524Production extends Production
    {
        private Production524Production() {;} // Singleton
        private static Production524Production singletonInstance = null;
        public static final Production524Production getInstance() { if (singletonInstance == null) singletonInstance = new Production524Production(); return singletonInstance; }

        public String getDescription() { return "<Primary> ::= ArrayConstructor:<ArrayConstructor>  :production524"; }

        /**
         * Reduce by <Primary> ::= ArrayConstructor:<ArrayConstructor>  :production524
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Primary> ::= ArrayConstructor:<ArrayConstructor>  :production524
            ASTArrayConstructorNode v1 = (ASTArrayConstructorNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPrimaryNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.PrimaryNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ArrayConstructor"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Primary> ::= ArrayConstructor:<ArrayConstructor>  :production524
         */
        protected ASTPrimaryNode userAction(ASTArrayConstructorNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production524Production PRODUCTION524 = Production524Production.getInstance();

    public static class Production525Production extends Production
    {
        private Production525Production() {;} // Singleton
        private static Production525Production singletonInstance = null;
        public static final Production525Production getInstance() { if (singletonInstance == null) singletonInstance = new Production525Production(); return singletonInstance; }

        public String getDescription() { return "<Primary> ::= Name:<Name>  :production525"; }

        /**
         * Reduce by <Primary> ::= Name:<Name>  :production525
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Primary> ::= Name:<Name>  :production525
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPrimaryNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.PrimaryNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Primary> ::= Name:<Name>  :production525
         */
        protected ASTPrimaryNode userAction(ASTNameNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production525Production PRODUCTION525 = Production525Production.getInstance();

    public static class Production526Production extends Production
    {
        private Production526Production() {;} // Singleton
        private static Production526Production singletonInstance = null;
        public static final Production526Production getInstance() { if (singletonInstance == null) singletonInstance = new Production526Production(); return singletonInstance; }

        public String getDescription() { return "<Primary> ::= Name:<Name> <Primary@19>  :production526"; }

        /**
         * Reduce by <Primary> ::= Name:<Name> <Primary@19>  :production526
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Primary> ::= Name:<Name> <Primary@19>  :production526
            ASTSubstringRangeNode v5 = (ASTSubstringRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v3 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPrimaryNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.PrimaryNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("SectionSubscriptList"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("SubstringRange"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Primary> ::= Name:<Name> <Primary@19>  :production526
         */
        protected ASTPrimaryNode userAction(ASTNameNode v1, Token v2, ASTSectionSubscriptListNode v3, Token v4, ASTSubstringRangeNode v5)
        {
            return null;
        }
    }
    public static final Productions.Production526Production PRODUCTION526 = Production526Production.getInstance();

    public static class Production527Production extends Production
    {
        private Production527Production() {;} // Singleton
        private static Production527Production singletonInstance = null;
        public static final Production527Production getInstance() { if (singletonInstance == null) singletonInstance = new Production527Production(); return singletonInstance; }

        public String getDescription() { return "<Primary> ::= Name:<Name> tpercent:T_PERCENT DataRef:<DataRef>  :production527"; }

        /**
         * Reduce by <Primary> ::= Name:<Name> tpercent:T_PERCENT DataRef:<DataRef>  :production527
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Primary> ::= Name:<Name> tpercent:T_PERCENT DataRef:<DataRef>  :production527
            ASTDataRefNode v3 = (ASTDataRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPrimaryNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.PrimaryNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tpercent"))
                    return 1;
                else
                    if (name.equals("DataRef"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Primary> ::= Name:<Name> tpercent:T_PERCENT DataRef:<DataRef>  :production527
         */
        protected ASTPrimaryNode userAction(ASTNameNode v1, Token v2, ASTDataRefNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production527Production PRODUCTION527 = Production527Production.getInstance();

    public static class Production528Production extends Production
    {
        private Production528Production() {;} // Singleton
        private static Production528Production singletonInstance = null;
        public static final Production528Production getInstance() { if (singletonInstance == null) singletonInstance = new Production528Production(); return singletonInstance; }

        public String getDescription() { return "<Primary> ::= Name:<Name> tpercent:T_PERCENT DataRef:<DataRef> <Primary@21>  :production528"; }

        /**
         * Reduce by <Primary> ::= Name:<Name> tpercent:T_PERCENT DataRef:<DataRef> <Primary@21>  :production528
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Primary> ::= Name:<Name> tpercent:T_PERCENT DataRef:<DataRef> <Primary@21>  :production528
            ASTSubstringRangeNode v7 = (ASTSubstringRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v5 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDataRefNode v3 = (ASTDataRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPrimaryNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.PrimaryNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tpercent"))
                    return 1;
                else
                    if (name.equals("DataRef"))
                        return 2;
                    else
                        if (name.equals("tlparen"))
                            return 3;
                        else
                            if (name.equals("SectionSubscriptList"))
                                return 4;
                            else
                                if (name.equals("trparen"))
                                    return 5;
                                else
                                    if (name.equals("SubstringRange"))
                                        return 6;
                                    else
                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Primary> ::= Name:<Name> tpercent:T_PERCENT DataRef:<DataRef> <Primary@21>  :production528
         */
        protected ASTPrimaryNode userAction(ASTNameNode v1, Token v2, ASTDataRefNode v3, Token v4, ASTSectionSubscriptListNode v5, Token v6, ASTSubstringRangeNode v7)
        {
            return null;
        }
    }
    public static final Productions.Production528Production PRODUCTION528 = Production528Production.getInstance();

    public static class Production529Production extends Production
    {
        private Production529Production() {;} // Singleton
        private static Production529Production singletonInstance = null;
        public static final Production529Production getInstance() { if (singletonInstance == null) singletonInstance = new Production529Production(); return singletonInstance; }

        public String getDescription() { return "<Primary> ::= Name:<Name> tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef>  :production529"; }

        /**
         * Reduce by <Primary> ::= Name:<Name> tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef>  :production529
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Primary> ::= Name:<Name> tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef>  :production529
            ASTDataRefNode v6 = (ASTDataRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v3 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPrimaryNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.PrimaryNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("SectionSubscriptList"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("tpercent"))
                                return 4;
                            else
                                if (name.equals("DataRef"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Primary> ::= Name:<Name> tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef>  :production529
         */
        protected ASTPrimaryNode userAction(ASTNameNode v1, Token v2, ASTSectionSubscriptListNode v3, Token v4, Token v5, ASTDataRefNode v6)
        {
            return null;
        }
    }
    public static final Productions.Production529Production PRODUCTION529 = Production529Production.getInstance();

    public static class Production530Production extends Production
    {
        private Production530Production() {;} // Singleton
        private static Production530Production singletonInstance = null;
        public static final Production530Production getInstance() { if (singletonInstance == null) singletonInstance = new Production530Production(); return singletonInstance; }

        public String getDescription() { return "<Primary> ::= Name:<Name> tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> <Primary@23>  :production530"; }

        /**
         * Reduce by <Primary> ::= Name:<Name> tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> <Primary@23>  :production530
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Primary> ::= Name:<Name> tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> <Primary@23>  :production530
            ASTSubstringRangeNode v10 = (ASTSubstringRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v8 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDataRefNode v6 = (ASTDataRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v3 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPrimaryNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);

            // The production has 7 symbols on its RHS
            parser.reduce(Nonterminal.PrimaryNonterminal.getInstance(), 7, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("SectionSubscriptList"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("tpercent"))
                                return 4;
                            else
                                if (name.equals("DataRef"))
                                    return 5;
                                else
                                    if (name.equals("tlparen2"))
                                        return 6;
                                    else
                                        if (name.equals("SectionSubscriptList2"))
                                            return 7;
                                        else
                                            if (name.equals("trparen2"))
                                                return 8;
                                            else
                                                if (name.equals("SubstringRange"))
                                                    return 9;
                                                else
                                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Primary> ::= Name:<Name> tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> <Primary@23>  :production530
         */
        protected ASTPrimaryNode userAction(ASTNameNode v1, Token v2, ASTSectionSubscriptListNode v3, Token v4, Token v5, ASTDataRefNode v6, Token v7, ASTSectionSubscriptListNode v8, Token v9, ASTSubstringRangeNode v10)
        {
            return null;
        }
    }
    public static final Productions.Production530Production PRODUCTION530 = Production530Production.getInstance();

    public static class Production531Production extends Production
    {
        private Production531Production() {;} // Singleton
        private static Production531Production singletonInstance = null;
        public static final Production531Production getInstance() { if (singletonInstance == null) singletonInstance = new Production531Production(); return singletonInstance; }

        public String getDescription() { return "<Primary> ::= FunctionReference:<FunctionReference>  :production531"; }

        /**
         * Reduce by <Primary> ::= FunctionReference:<FunctionReference>  :production531
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Primary> ::= FunctionReference:<FunctionReference>  :production531
            ASTFunctionReferenceNode v1 = (ASTFunctionReferenceNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPrimaryNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.PrimaryNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("FunctionReference"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Primary> ::= FunctionReference:<FunctionReference>  :production531
         */
        protected ASTPrimaryNode userAction(ASTFunctionReferenceNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production531Production PRODUCTION531 = Production531Production.getInstance();

    public static class Production532Production extends Production
    {
        private Production532Production() {;} // Singleton
        private static Production532Production singletonInstance = null;
        public static final Production532Production getInstance() { if (singletonInstance == null) singletonInstance = new Production532Production(); return singletonInstance; }

        public String getDescription() { return "<Primary> ::= FunctionReference:<FunctionReference> <Primary@25>  :production532"; }

        /**
         * Reduce by <Primary> ::= FunctionReference:<FunctionReference> <Primary@25>  :production532
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Primary> ::= FunctionReference:<FunctionReference> <Primary@25>  :production532
            ASTSubstringRangeNode v2 = (ASTSubstringRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFunctionReferenceNode v1 = (ASTFunctionReferenceNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPrimaryNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.PrimaryNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("FunctionReference"))
                return 0;
            else
                if (name.equals("SubstringRange"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Primary> ::= FunctionReference:<FunctionReference> <Primary@25>  :production532
         */
        protected ASTPrimaryNode userAction(ASTFunctionReferenceNode v1, ASTSubstringRangeNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production532Production PRODUCTION532 = Production532Production.getInstance();

    public static class Production533Production extends Production
    {
        private Production533Production() {;} // Singleton
        private static Production533Production singletonInstance = null;
        public static final Production533Production getInstance() { if (singletonInstance == null) singletonInstance = new Production533Production(); return singletonInstance; }

        public String getDescription() { return "<Primary> ::= FunctionReference:<FunctionReference> tpercent:T_PERCENT DataRef:<DataRef>  :production533"; }

        /**
         * Reduce by <Primary> ::= FunctionReference:<FunctionReference> tpercent:T_PERCENT DataRef:<DataRef>  :production533
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Primary> ::= FunctionReference:<FunctionReference> tpercent:T_PERCENT DataRef:<DataRef>  :production533
            ASTDataRefNode v3 = (ASTDataRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFunctionReferenceNode v1 = (ASTFunctionReferenceNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPrimaryNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.PrimaryNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("FunctionReference"))
                return 0;
            else
                if (name.equals("tpercent"))
                    return 1;
                else
                    if (name.equals("DataRef"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Primary> ::= FunctionReference:<FunctionReference> tpercent:T_PERCENT DataRef:<DataRef>  :production533
         */
        protected ASTPrimaryNode userAction(ASTFunctionReferenceNode v1, Token v2, ASTDataRefNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production533Production PRODUCTION533 = Production533Production.getInstance();

    public static class Production534Production extends Production
    {
        private Production534Production() {;} // Singleton
        private static Production534Production singletonInstance = null;
        public static final Production534Production getInstance() { if (singletonInstance == null) singletonInstance = new Production534Production(); return singletonInstance; }

        public String getDescription() { return "<Primary> ::= FunctionReference:<FunctionReference> tpercent:T_PERCENT DataRef:<DataRef> <Primary@26>  :production534"; }

        /**
         * Reduce by <Primary> ::= FunctionReference:<FunctionReference> tpercent:T_PERCENT DataRef:<DataRef> <Primary@26>  :production534
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Primary> ::= FunctionReference:<FunctionReference> tpercent:T_PERCENT DataRef:<DataRef> <Primary@26>  :production534
            ASTSubstringRangeNode v7 = (ASTSubstringRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v5 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDataRefNode v3 = (ASTDataRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFunctionReferenceNode v1 = (ASTFunctionReferenceNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPrimaryNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.PrimaryNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("FunctionReference"))
                return 0;
            else
                if (name.equals("tpercent"))
                    return 1;
                else
                    if (name.equals("DataRef"))
                        return 2;
                    else
                        if (name.equals("tlparen"))
                            return 3;
                        else
                            if (name.equals("SectionSubscriptList"))
                                return 4;
                            else
                                if (name.equals("trparen"))
                                    return 5;
                                else
                                    if (name.equals("SubstringRange"))
                                        return 6;
                                    else
                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Primary> ::= FunctionReference:<FunctionReference> tpercent:T_PERCENT DataRef:<DataRef> <Primary@26>  :production534
         */
        protected ASTPrimaryNode userAction(ASTFunctionReferenceNode v1, Token v2, ASTDataRefNode v3, Token v4, ASTSectionSubscriptListNode v5, Token v6, ASTSubstringRangeNode v7)
        {
            return null;
        }
    }
    public static final Productions.Production534Production PRODUCTION534 = Production534Production.getInstance();

    public static class Production535Production extends Production
    {
        private Production535Production() {;} // Singleton
        private static Production535Production singletonInstance = null;
        public static final Production535Production getInstance() { if (singletonInstance == null) singletonInstance = new Production535Production(); return singletonInstance; }

        public String getDescription() { return "<Primary> ::= tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN  :production535"; }

        /**
         * Reduce by <Primary> ::= tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN  :production535
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Primary> ::= tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN  :production535
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v2 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPrimaryNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.PrimaryNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("Expr"))
                    return 1;
                else
                    if (name.equals("trparen"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Primary> ::= tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN  :production535
         */
        protected ASTPrimaryNode userAction(Token v1, ASTExprNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production535Production PRODUCTION535 = Production535Production.getInstance();

    public static class Production536Production extends Production
    {
        private Production536Production() {;} // Singleton
        private static Production536Production singletonInstance = null;
        public static final Production536Production getInstance() { if (singletonInstance == null) singletonInstance = new Production536Production(); return singletonInstance; }

        public String getDescription() { return "<Primary> ::= SubstrConst:<SubstrConst>  :production536"; }

        /**
         * Reduce by <Primary> ::= SubstrConst:<SubstrConst>  :production536
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Primary> ::= SubstrConst:<SubstrConst>  :production536
            ASTSubstrConstNode v1 = (ASTSubstrConstNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPrimaryNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.PrimaryNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SubstrConst"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Primary> ::= SubstrConst:<SubstrConst>  :production536
         */
        protected ASTPrimaryNode userAction(ASTSubstrConstNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production536Production PRODUCTION536 = Production536Production.getInstance();

    public static class Production537Production extends Production
    {
        private Production537Production() {;} // Singleton
        private static Production537Production singletonInstance = null;
        public static final Production537Production getInstance() { if (singletonInstance == null) singletonInstance = new Production537Production(); return singletonInstance; }

        public String getDescription() { return "<CPrimary> ::= COperand:<COperand>  :production537"; }

        /**
         * Reduce by <CPrimary> ::= COperand:<COperand>  :production537
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CPrimary> ::= COperand:<COperand>  :production537
            ASTCOperandNode v1 = (ASTCOperandNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCPrimaryNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.CPrimaryNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("COperand"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CPrimary> ::= COperand:<COperand>  :production537
         */
        protected ASTCPrimaryNode userAction(ASTCOperandNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production537Production PRODUCTION537 = Production537Production.getInstance();

    public static class Production538Production extends Production
    {
        private Production538Production() {;} // Singleton
        private static Production538Production singletonInstance = null;
        public static final Production538Production getInstance() { if (singletonInstance == null) singletonInstance = new Production538Production(); return singletonInstance; }

        public String getDescription() { return "<CPrimary> ::= tlparen:T_LPAREN CExpr:<CExpr> trparen:T_RPAREN  :production538"; }

        /**
         * Reduce by <CPrimary> ::= tlparen:T_LPAREN CExpr:<CExpr> trparen:T_RPAREN  :production538
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CPrimary> ::= tlparen:T_LPAREN CExpr:<CExpr> trparen:T_RPAREN  :production538
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTCExprNode v2 = (ASTCExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCPrimaryNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.CPrimaryNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("CExpr"))
                    return 1;
                else
                    if (name.equals("trparen"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CPrimary> ::= tlparen:T_LPAREN CExpr:<CExpr> trparen:T_RPAREN  :production538
         */
        protected ASTCPrimaryNode userAction(Token v1, ASTCExprNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production538Production PRODUCTION538 = Production538Production.getInstance();

    public static class Production539Production extends Production
    {
        private Production539Production() {;} // Singleton
        private static Production539Production singletonInstance = null;
        public static final Production539Production getInstance() { if (singletonInstance == null) singletonInstance = new Production539Production(); return singletonInstance; }

        public String getDescription() { return "<COperand> ::= tscon:T_SCON  :production539"; }

        /**
         * Reduce by <COperand> ::= tscon:T_SCON  :production539
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <COperand> ::= tscon:T_SCON  :production539
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCOperandNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.COperandNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tscon"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <COperand> ::= tscon:T_SCON  :production539
         */
        protected ASTCOperandNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production539Production PRODUCTION539 = Production539Production.getInstance();

    public static class Production540Production extends Production
    {
        private Production540Production() {;} // Singleton
        private static Production540Production singletonInstance = null;
        public static final Production540Production getInstance() { if (singletonInstance == null) singletonInstance = new Production540Production(); return singletonInstance; }

        public String getDescription() { return "<COperand> ::= Name:<Name>  :production540"; }

        /**
         * Reduce by <COperand> ::= Name:<Name>  :production540
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <COperand> ::= Name:<Name>  :production540
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCOperandNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.COperandNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <COperand> ::= Name:<Name>  :production540
         */
        protected ASTCOperandNode userAction(ASTNameNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production540Production PRODUCTION540 = Production540Production.getInstance();

    public static class Production541Production extends Production
    {
        private Production541Production() {;} // Singleton
        private static Production541Production singletonInstance = null;
        public static final Production541Production getInstance() { if (singletonInstance == null) singletonInstance = new Production541Production(); return singletonInstance; }

        public String getDescription() { return "<COperand> ::= Name:<Name> <COperand@28>  :production541"; }

        /**
         * Reduce by <COperand> ::= Name:<Name> <COperand@28>  :production541
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <COperand> ::= Name:<Name> <COperand@28>  :production541
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v3 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCOperandNode userValue = userAction(v1, v2, v3, v4);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.COperandNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("SectionSubscriptList"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <COperand> ::= Name:<Name> <COperand@28>  :production541
         */
        protected ASTCOperandNode userAction(ASTNameNode v1, Token v2, ASTSectionSubscriptListNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production541Production PRODUCTION541 = Production541Production.getInstance();

    public static class Production542Production extends Production
    {
        private Production542Production() {;} // Singleton
        private static Production542Production singletonInstance = null;
        public static final Production542Production getInstance() { if (singletonInstance == null) singletonInstance = new Production542Production(); return singletonInstance; }

        public String getDescription() { return "<COperand> ::= Name:<Name> tpercent:T_PERCENT DataRef:<DataRef>  :production542"; }

        /**
         * Reduce by <COperand> ::= Name:<Name> tpercent:T_PERCENT DataRef:<DataRef>  :production542
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <COperand> ::= Name:<Name> tpercent:T_PERCENT DataRef:<DataRef>  :production542
            ASTDataRefNode v3 = (ASTDataRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCOperandNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.COperandNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tpercent"))
                    return 1;
                else
                    if (name.equals("DataRef"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <COperand> ::= Name:<Name> tpercent:T_PERCENT DataRef:<DataRef>  :production542
         */
        protected ASTCOperandNode userAction(ASTNameNode v1, Token v2, ASTDataRefNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production542Production PRODUCTION542 = Production542Production.getInstance();

    public static class Production543Production extends Production
    {
        private Production543Production() {;} // Singleton
        private static Production543Production singletonInstance = null;
        public static final Production543Production getInstance() { if (singletonInstance == null) singletonInstance = new Production543Production(); return singletonInstance; }

        public String getDescription() { return "<COperand> ::= Name:<Name> tpercent:T_PERCENT DataRef:<DataRef> <COperand@30>  :production543"; }

        /**
         * Reduce by <COperand> ::= Name:<Name> tpercent:T_PERCENT DataRef:<DataRef> <COperand@30>  :production543
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <COperand> ::= Name:<Name> tpercent:T_PERCENT DataRef:<DataRef> <COperand@30>  :production543
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v5 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDataRefNode v3 = (ASTDataRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCOperandNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.COperandNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tpercent"))
                    return 1;
                else
                    if (name.equals("DataRef"))
                        return 2;
                    else
                        if (name.equals("tlparen2"))
                            return 3;
                        else
                            if (name.equals("SectionSubscriptList2"))
                                return 4;
                            else
                                if (name.equals("trparen2"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <COperand> ::= Name:<Name> tpercent:T_PERCENT DataRef:<DataRef> <COperand@30>  :production543
         */
        protected ASTCOperandNode userAction(ASTNameNode v1, Token v2, ASTDataRefNode v3, Token v4, ASTSectionSubscriptListNode v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production543Production PRODUCTION543 = Production543Production.getInstance();

    public static class Production544Production extends Production
    {
        private Production544Production() {;} // Singleton
        private static Production544Production singletonInstance = null;
        public static final Production544Production getInstance() { if (singletonInstance == null) singletonInstance = new Production544Production(); return singletonInstance; }

        public String getDescription() { return "<COperand> ::= Name:<Name> <COperand@29> tpercent:T_PERCENT DataRef:<DataRef>  :production544"; }

        /**
         * Reduce by <COperand> ::= Name:<Name> <COperand@29> tpercent:T_PERCENT DataRef:<DataRef>  :production544
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <COperand> ::= Name:<Name> <COperand@29> tpercent:T_PERCENT DataRef:<DataRef>  :production544
            ASTDataRefNode v6 = (ASTDataRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v3 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCOperandNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.COperandNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("SectionSubscriptList"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("tpercent"))
                                return 4;
                            else
                                if (name.equals("DataRef"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <COperand> ::= Name:<Name> <COperand@29> tpercent:T_PERCENT DataRef:<DataRef>  :production544
         */
        protected ASTCOperandNode userAction(ASTNameNode v1, Token v2, ASTSectionSubscriptListNode v3, Token v4, Token v5, ASTDataRefNode v6)
        {
            return null;
        }
    }
    public static final Productions.Production544Production PRODUCTION544 = Production544Production.getInstance();

    public static class Production545Production extends Production
    {
        private Production545Production() {;} // Singleton
        private static Production545Production singletonInstance = null;
        public static final Production545Production getInstance() { if (singletonInstance == null) singletonInstance = new Production545Production(); return singletonInstance; }

        public String getDescription() { return "<COperand> ::= Name:<Name> <COperand@29> tpercent:T_PERCENT DataRef:<DataRef> <COperand@30>  :production545"; }

        /**
         * Reduce by <COperand> ::= Name:<Name> <COperand@29> tpercent:T_PERCENT DataRef:<DataRef> <COperand@30>  :production545
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <COperand> ::= Name:<Name> <COperand@29> tpercent:T_PERCENT DataRef:<DataRef> <COperand@30>  :production545
            Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v8 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDataRefNode v6 = (ASTDataRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v3 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCOperandNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8, v9);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.COperandNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("SectionSubscriptList"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("tpercent"))
                                return 4;
                            else
                                if (name.equals("DataRef"))
                                    return 5;
                                else
                                    if (name.equals("tlparen2"))
                                        return 6;
                                    else
                                        if (name.equals("SectionSubscriptList2"))
                                            return 7;
                                        else
                                            if (name.equals("trparen2"))
                                                return 8;
                                            else
                                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <COperand> ::= Name:<Name> <COperand@29> tpercent:T_PERCENT DataRef:<DataRef> <COperand@30>  :production545
         */
        protected ASTCOperandNode userAction(ASTNameNode v1, Token v2, ASTSectionSubscriptListNode v3, Token v4, Token v5, ASTDataRefNode v6, Token v7, ASTSectionSubscriptListNode v8, Token v9)
        {
            return null;
        }
    }
    public static final Productions.Production545Production PRODUCTION545 = Production545Production.getInstance();

    public static class Production546Production extends Production
    {
        private Production546Production() {;} // Singleton
        private static Production546Production singletonInstance = null;
        public static final Production546Production getInstance() { if (singletonInstance == null) singletonInstance = new Production546Production(); return singletonInstance; }

        public String getDescription() { return "<COperand> ::= FunctionReference:<FunctionReference>  :production546"; }

        /**
         * Reduce by <COperand> ::= FunctionReference:<FunctionReference>  :production546
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <COperand> ::= FunctionReference:<FunctionReference>  :production546
            ASTFunctionReferenceNode v1 = (ASTFunctionReferenceNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCOperandNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.COperandNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("FunctionReference"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <COperand> ::= FunctionReference:<FunctionReference>  :production546
         */
        protected ASTCOperandNode userAction(ASTFunctionReferenceNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production546Production PRODUCTION546 = Production546Production.getInstance();

    public static class Production547Production extends Production
    {
        private Production547Production() {;} // Singleton
        private static Production547Production singletonInstance = null;
        public static final Production547Production getInstance() { if (singletonInstance == null) singletonInstance = new Production547Production(); return singletonInstance; }

        public String getDescription() { return "<UFPrimary> ::= ticon:T_ICON  :production547"; }

        /**
         * Reduce by <UFPrimary> ::= ticon:T_ICON  :production547
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UFPrimary> ::= ticon:T_ICON  :production547
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTUFPrimaryNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.UFPrimaryNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ticon"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <UFPrimary> ::= ticon:T_ICON  :production547
         */
        protected ASTUFPrimaryNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production547Production PRODUCTION547 = Production547Production.getInstance();

    public static class Production548Production extends Production
    {
        private Production548Production() {;} // Singleton
        private static Production548Production singletonInstance = null;
        public static final Production548Production getInstance() { if (singletonInstance == null) singletonInstance = new Production548Production(); return singletonInstance; }

        public String getDescription() { return "<UFPrimary> ::= tscon:T_SCON  :production548"; }

        /**
         * Reduce by <UFPrimary> ::= tscon:T_SCON  :production548
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UFPrimary> ::= tscon:T_SCON  :production548
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTUFPrimaryNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.UFPrimaryNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tscon"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <UFPrimary> ::= tscon:T_SCON  :production548
         */
        protected ASTUFPrimaryNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production548Production PRODUCTION548 = Production548Production.getInstance();

    public static class Production549Production extends Production
    {
        private Production549Production() {;} // Singleton
        private static Production549Production singletonInstance = null;
        public static final Production549Production getInstance() { if (singletonInstance == null) singletonInstance = new Production549Production(); return singletonInstance; }

        public String getDescription() { return "<UFPrimary> ::= FunctionReference:<FunctionReference>  :production549"; }

        /**
         * Reduce by <UFPrimary> ::= FunctionReference:<FunctionReference>  :production549
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UFPrimary> ::= FunctionReference:<FunctionReference>  :production549
            ASTFunctionReferenceNode v1 = (ASTFunctionReferenceNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTUFPrimaryNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.UFPrimaryNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("FunctionReference"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <UFPrimary> ::= FunctionReference:<FunctionReference>  :production549
         */
        protected ASTUFPrimaryNode userAction(ASTFunctionReferenceNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production549Production PRODUCTION549 = Production549Production.getInstance();

    public static class Production550Production extends Production
    {
        private Production550Production() {;} // Singleton
        private static Production550Production singletonInstance = null;
        public static final Production550Production getInstance() { if (singletonInstance == null) singletonInstance = new Production550Production(); return singletonInstance; }

        public String getDescription() { return "<UFPrimary> ::= Name:<Name>  :production550"; }

        /**
         * Reduce by <UFPrimary> ::= Name:<Name>  :production550
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UFPrimary> ::= Name:<Name>  :production550
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTUFPrimaryNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.UFPrimaryNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <UFPrimary> ::= Name:<Name>  :production550
         */
        protected ASTUFPrimaryNode userAction(ASTNameNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production550Production PRODUCTION550 = Production550Production.getInstance();

    public static class Production551Production extends Production
    {
        private Production551Production() {;} // Singleton
        private static Production551Production singletonInstance = null;
        public static final Production551Production getInstance() { if (singletonInstance == null) singletonInstance = new Production551Production(); return singletonInstance; }

        public String getDescription() { return "<UFPrimary> ::= Name:<Name> <UFPrimary@31>  :production551"; }

        /**
         * Reduce by <UFPrimary> ::= Name:<Name> <UFPrimary@31>  :production551
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UFPrimary> ::= Name:<Name> <UFPrimary@31>  :production551
            ASTSubstringRangeNode v5 = (ASTSubstringRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v3 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTUFPrimaryNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.UFPrimaryNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("SectionSubscriptList"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("SubstringRange"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <UFPrimary> ::= Name:<Name> <UFPrimary@31>  :production551
         */
        protected ASTUFPrimaryNode userAction(ASTNameNode v1, Token v2, ASTSectionSubscriptListNode v3, Token v4, ASTSubstringRangeNode v5)
        {
            return null;
        }
    }
    public static final Productions.Production551Production PRODUCTION551 = Production551Production.getInstance();

    public static class Production552Production extends Production
    {
        private Production552Production() {;} // Singleton
        private static Production552Production singletonInstance = null;
        public static final Production552Production getInstance() { if (singletonInstance == null) singletonInstance = new Production552Production(); return singletonInstance; }

        public String getDescription() { return "<UFPrimary> ::= Name:<Name> tpercent:T_PERCENT DataRef:<DataRef>  :production552"; }

        /**
         * Reduce by <UFPrimary> ::= Name:<Name> tpercent:T_PERCENT DataRef:<DataRef>  :production552
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UFPrimary> ::= Name:<Name> tpercent:T_PERCENT DataRef:<DataRef>  :production552
            ASTDataRefNode v3 = (ASTDataRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTUFPrimaryNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.UFPrimaryNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tpercent"))
                    return 1;
                else
                    if (name.equals("DataRef"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <UFPrimary> ::= Name:<Name> tpercent:T_PERCENT DataRef:<DataRef>  :production552
         */
        protected ASTUFPrimaryNode userAction(ASTNameNode v1, Token v2, ASTDataRefNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production552Production PRODUCTION552 = Production552Production.getInstance();

    public static class Production553Production extends Production
    {
        private Production553Production() {;} // Singleton
        private static Production553Production singletonInstance = null;
        public static final Production553Production getInstance() { if (singletonInstance == null) singletonInstance = new Production553Production(); return singletonInstance; }

        public String getDescription() { return "<UFPrimary> ::= Name:<Name> tpercent:T_PERCENT DataRef:<DataRef> <UFPrimary@34>  :production553"; }

        /**
         * Reduce by <UFPrimary> ::= Name:<Name> tpercent:T_PERCENT DataRef:<DataRef> <UFPrimary@34>  :production553
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UFPrimary> ::= Name:<Name> tpercent:T_PERCENT DataRef:<DataRef> <UFPrimary@34>  :production553
            ASTSubstringRangeNode v7 = (ASTSubstringRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v5 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDataRefNode v3 = (ASTDataRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTUFPrimaryNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.UFPrimaryNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tpercent"))
                    return 1;
                else
                    if (name.equals("DataRef"))
                        return 2;
                    else
                        if (name.equals("tlparen2"))
                            return 3;
                        else
                            if (name.equals("SectionSubscriptList2"))
                                return 4;
                            else
                                if (name.equals("trparen2"))
                                    return 5;
                                else
                                    if (name.equals("SubstringRange"))
                                        return 6;
                                    else
                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <UFPrimary> ::= Name:<Name> tpercent:T_PERCENT DataRef:<DataRef> <UFPrimary@34>  :production553
         */
        protected ASTUFPrimaryNode userAction(ASTNameNode v1, Token v2, ASTDataRefNode v3, Token v4, ASTSectionSubscriptListNode v5, Token v6, ASTSubstringRangeNode v7)
        {
            return null;
        }
    }
    public static final Productions.Production553Production PRODUCTION553 = Production553Production.getInstance();

    public static class Production554Production extends Production
    {
        private Production554Production() {;} // Singleton
        private static Production554Production singletonInstance = null;
        public static final Production554Production getInstance() { if (singletonInstance == null) singletonInstance = new Production554Production(); return singletonInstance; }

        public String getDescription() { return "<UFPrimary> ::= Name:<Name> <UFPrimary@33> tpercent:T_PERCENT DataRef:<DataRef>  :production554"; }

        /**
         * Reduce by <UFPrimary> ::= Name:<Name> <UFPrimary@33> tpercent:T_PERCENT DataRef:<DataRef>  :production554
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UFPrimary> ::= Name:<Name> <UFPrimary@33> tpercent:T_PERCENT DataRef:<DataRef>  :production554
            ASTDataRefNode v6 = (ASTDataRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v3 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTUFPrimaryNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.UFPrimaryNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("SectionSubscriptList"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("tpercent"))
                                return 4;
                            else
                                if (name.equals("DataRef"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <UFPrimary> ::= Name:<Name> <UFPrimary@33> tpercent:T_PERCENT DataRef:<DataRef>  :production554
         */
        protected ASTUFPrimaryNode userAction(ASTNameNode v1, Token v2, ASTSectionSubscriptListNode v3, Token v4, Token v5, ASTDataRefNode v6)
        {
            return null;
        }
    }
    public static final Productions.Production554Production PRODUCTION554 = Production554Production.getInstance();

    public static class Production555Production extends Production
    {
        private Production555Production() {;} // Singleton
        private static Production555Production singletonInstance = null;
        public static final Production555Production getInstance() { if (singletonInstance == null) singletonInstance = new Production555Production(); return singletonInstance; }

        public String getDescription() { return "<UFPrimary> ::= Name:<Name> <UFPrimary@33> tpercent:T_PERCENT DataRef:<DataRef> <UFPrimary@34>  :production555"; }

        /**
         * Reduce by <UFPrimary> ::= Name:<Name> <UFPrimary@33> tpercent:T_PERCENT DataRef:<DataRef> <UFPrimary@34>  :production555
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UFPrimary> ::= Name:<Name> <UFPrimary@33> tpercent:T_PERCENT DataRef:<DataRef> <UFPrimary@34>  :production555
            ASTSubstringRangeNode v10 = (ASTSubstringRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v8 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDataRefNode v6 = (ASTDataRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v3 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTUFPrimaryNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.UFPrimaryNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("SectionSubscriptList"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("tpercent"))
                                return 4;
                            else
                                if (name.equals("DataRef"))
                                    return 5;
                                else
                                    if (name.equals("tlparen2"))
                                        return 6;
                                    else
                                        if (name.equals("SectionSubscriptList2"))
                                            return 7;
                                        else
                                            if (name.equals("trparen2"))
                                                return 8;
                                            else
                                                if (name.equals("SubstringRange"))
                                                    return 9;
                                                else
                                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <UFPrimary> ::= Name:<Name> <UFPrimary@33> tpercent:T_PERCENT DataRef:<DataRef> <UFPrimary@34>  :production555
         */
        protected ASTUFPrimaryNode userAction(ASTNameNode v1, Token v2, ASTSectionSubscriptListNode v3, Token v4, Token v5, ASTDataRefNode v6, Token v7, ASTSectionSubscriptListNode v8, Token v9, ASTSubstringRangeNode v10)
        {
            return null;
        }
    }
    public static final Productions.Production555Production PRODUCTION555 = Production555Production.getInstance();

    public static class Production556Production extends Production
    {
        private Production556Production() {;} // Singleton
        private static Production556Production singletonInstance = null;
        public static final Production556Production getInstance() { if (singletonInstance == null) singletonInstance = new Production556Production(); return singletonInstance; }

        public String getDescription() { return "<UFPrimary> ::= tlparen:T_LPAREN UFExpr:<UFExpr> trparen:T_RPAREN  :production556"; }

        /**
         * Reduce by <UFPrimary> ::= tlparen:T_LPAREN UFExpr:<UFExpr> trparen:T_RPAREN  :production556
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UFPrimary> ::= tlparen:T_LPAREN UFExpr:<UFExpr> trparen:T_RPAREN  :production556
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTUFExprNode v2 = (ASTUFExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTUFPrimaryNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.UFPrimaryNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("UFExpr"))
                    return 1;
                else
                    if (name.equals("trparen"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <UFPrimary> ::= tlparen:T_LPAREN UFExpr:<UFExpr> trparen:T_RPAREN  :production556
         */
        protected ASTUFPrimaryNode userAction(Token v1, ASTUFExprNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production556Production PRODUCTION556 = Production556Production.getInstance();

    public static class Production557Production extends Production
    {
        private Production557Production() {;} // Singleton
        private static Production557Production singletonInstance = null;
        public static final Production557Production getInstance() { if (singletonInstance == null) singletonInstance = new Production557Production(); return singletonInstance; }

        public String getDescription() { return "<Level1Expr> ::= Primary:<Primary>  :production557"; }

        /**
         * Reduce by <Level1Expr> ::= Primary:<Primary>  :production557
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Level1Expr> ::= Primary:<Primary>  :production557
            ASTPrimaryNode v1 = (ASTPrimaryNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTLevel1ExprNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.Level1ExprNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Primary"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Level1Expr> ::= Primary:<Primary>  :production557
         */
        protected ASTLevel1ExprNode userAction(ASTPrimaryNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production557Production PRODUCTION557 = Production557Production.getInstance();

    public static class Production558Production extends Production
    {
        private Production558Production() {;} // Singleton
        private static Production558Production singletonInstance = null;
        public static final Production558Production getInstance() { if (singletonInstance == null) singletonInstance = new Production558Production(); return singletonInstance; }

        public String getDescription() { return "<Level1Expr> ::= DefinedUnaryOp:<DefinedUnaryOp> Primary:<Primary>  :production558"; }

        /**
         * Reduce by <Level1Expr> ::= DefinedUnaryOp:<DefinedUnaryOp> Primary:<Primary>  :production558
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Level1Expr> ::= DefinedUnaryOp:<DefinedUnaryOp> Primary:<Primary>  :production558
            ASTPrimaryNode v2 = (ASTPrimaryNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDefinedUnaryOpNode v1 = (ASTDefinedUnaryOpNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTLevel1ExprNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.Level1ExprNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("DefinedUnaryOp"))
                return 0;
            else
                if (name.equals("Primary"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Level1Expr> ::= DefinedUnaryOp:<DefinedUnaryOp> Primary:<Primary>  :production558
         */
        protected ASTLevel1ExprNode userAction(ASTDefinedUnaryOpNode v1, ASTPrimaryNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production558Production PRODUCTION558 = Production558Production.getInstance();

    public static class Production559Production extends Production
    {
        private Production559Production() {;} // Singleton
        private static Production559Production singletonInstance = null;
        public static final Production559Production getInstance() { if (singletonInstance == null) singletonInstance = new Production559Production(); return singletonInstance; }

        public String getDescription() { return "<MultOperand> ::= Level1Expr:<Level1Expr>  :production559"; }

        /**
         * Reduce by <MultOperand> ::= Level1Expr:<Level1Expr>  :production559
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <MultOperand> ::= Level1Expr:<Level1Expr>  :production559
            ASTLevel1ExprNode v1 = (ASTLevel1ExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTMultOperandNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.MultOperandNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Level1Expr"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <MultOperand> ::= Level1Expr:<Level1Expr>  :production559
         */
        protected ASTMultOperandNode userAction(ASTLevel1ExprNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production559Production PRODUCTION559 = Production559Production.getInstance();

    public static class Production560Production extends Production
    {
        private Production560Production() {;} // Singleton
        private static Production560Production singletonInstance = null;
        public static final Production560Production getInstance() { if (singletonInstance == null) singletonInstance = new Production560Production(); return singletonInstance; }

        public String getDescription() { return "<MultOperand> ::= Level1Expr:<Level1Expr> <MultOperand@36>  :production560"; }

        /**
         * Reduce by <MultOperand> ::= Level1Expr:<Level1Expr> <MultOperand@36>  :production560
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <MultOperand> ::= Level1Expr:<Level1Expr> <MultOperand@36>  :production560
            ASTMultOperandNode v3 = (ASTMultOperandNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTPowerOpNode v2 = (ASTPowerOpNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLevel1ExprNode v1 = (ASTLevel1ExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTMultOperandNode userValue = userAction(v1, v2, v3);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.MultOperandNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Level1Expr"))
                return 0;
            else
                if (name.equals("PowerOp"))
                    return 1;
                else
                    if (name.equals("MultOperand"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <MultOperand> ::= Level1Expr:<Level1Expr> <MultOperand@36>  :production560
         */
        protected ASTMultOperandNode userAction(ASTLevel1ExprNode v1, ASTPowerOpNode v2, ASTMultOperandNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production560Production PRODUCTION560 = Production560Production.getInstance();

    public static class Production561Production extends Production
    {
        private Production561Production() {;} // Singleton
        private static Production561Production singletonInstance = null;
        public static final Production561Production getInstance() { if (singletonInstance == null) singletonInstance = new Production561Production(); return singletonInstance; }

        public String getDescription() { return "<UFFactor> ::= UFPrimary:<UFPrimary>  :production561"; }

        /**
         * Reduce by <UFFactor> ::= UFPrimary:<UFPrimary>  :production561
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UFFactor> ::= UFPrimary:<UFPrimary>  :production561
            ASTUFPrimaryNode v1 = (ASTUFPrimaryNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTUFFactorNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.UFFactorNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("UFPrimary"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <UFFactor> ::= UFPrimary:<UFPrimary>  :production561
         */
        protected ASTUFFactorNode userAction(ASTUFPrimaryNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production561Production PRODUCTION561 = Production561Production.getInstance();

    public static class Production562Production extends Production
    {
        private Production562Production() {;} // Singleton
        private static Production562Production singletonInstance = null;
        public static final Production562Production getInstance() { if (singletonInstance == null) singletonInstance = new Production562Production(); return singletonInstance; }

        public String getDescription() { return "<UFFactor> ::= UFPrimary:<UFPrimary> <UFFactor@37>  :production562"; }

        /**
         * Reduce by <UFFactor> ::= UFPrimary:<UFPrimary> <UFFactor@37>  :production562
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UFFactor> ::= UFPrimary:<UFPrimary> <UFFactor@37>  :production562
            ASTUFFactorNode v3 = (ASTUFFactorNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTPowerOpNode v2 = (ASTPowerOpNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTUFPrimaryNode v1 = (ASTUFPrimaryNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTUFFactorNode userValue = userAction(v1, v2, v3);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.UFFactorNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("UFPrimary"))
                return 0;
            else
                if (name.equals("PowerOp"))
                    return 1;
                else
                    if (name.equals("UFFactor"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <UFFactor> ::= UFPrimary:<UFPrimary> <UFFactor@37>  :production562
         */
        protected ASTUFFactorNode userAction(ASTUFPrimaryNode v1, ASTPowerOpNode v2, ASTUFFactorNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production562Production PRODUCTION562 = Production562Production.getInstance();

    public static class Production563Production extends Production
    {
        private Production563Production() {;} // Singleton
        private static Production563Production singletonInstance = null;
        public static final Production563Production getInstance() { if (singletonInstance == null) singletonInstance = new Production563Production(); return singletonInstance; }

        public String getDescription() { return "<AddOperand> ::= MultOperand:<MultOperand>  :production563"; }

        /**
         * Reduce by <AddOperand> ::= MultOperand:<MultOperand>  :production563
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AddOperand> ::= MultOperand:<MultOperand>  :production563
            ASTMultOperandNode v1 = (ASTMultOperandNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAddOperandNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.AddOperandNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("MultOperand"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AddOperand> ::= MultOperand:<MultOperand>  :production563
         */
        protected ASTAddOperandNode userAction(ASTMultOperandNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production563Production PRODUCTION563 = Production563Production.getInstance();

    public static class Production564Production extends Production
    {
        private Production564Production() {;} // Singleton
        private static Production564Production singletonInstance = null;
        public static final Production564Production getInstance() { if (singletonInstance == null) singletonInstance = new Production564Production(); return singletonInstance; }

        public String getDescription() { return "<AddOperand> ::= <AddOperand@38> MultOperand:<MultOperand>  :production564"; }

        /**
         * Reduce by <AddOperand> ::= <AddOperand@38> MultOperand:<MultOperand>  :production564
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AddOperand> ::= <AddOperand@38> MultOperand:<MultOperand>  :production564
            ASTMultOperandNode v3 = (ASTMultOperandNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTMultOpNode v2 = (ASTMultOpNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTAddOperandNode v1 = (ASTAddOperandNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAddOperandNode userValue = userAction(v1, v2, v3);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.AddOperandNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("AddOperand"))
                return 0;
            else
                if (name.equals("MultOp"))
                    return 1;
                else
                    if (name.equals("MultOperand"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AddOperand> ::= <AddOperand@38> MultOperand:<MultOperand>  :production564
         */
        protected ASTAddOperandNode userAction(ASTAddOperandNode v1, ASTMultOpNode v2, ASTMultOperandNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production564Production PRODUCTION564 = Production564Production.getInstance();

    public static class Production565Production extends Production
    {
        private Production565Production() {;} // Singleton
        private static Production565Production singletonInstance = null;
        public static final Production565Production getInstance() { if (singletonInstance == null) singletonInstance = new Production565Production(); return singletonInstance; }

        public String getDescription() { return "<UFTerm> ::= UFFactor:<UFFactor>  :production565"; }

        /**
         * Reduce by <UFTerm> ::= UFFactor:<UFFactor>  :production565
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UFTerm> ::= UFFactor:<UFFactor>  :production565
            ASTUFFactorNode v1 = (ASTUFFactorNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTUFTermNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.UFTermNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("UFFactor"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <UFTerm> ::= UFFactor:<UFFactor>  :production565
         */
        protected ASTUFTermNode userAction(ASTUFFactorNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production565Production PRODUCTION565 = Production565Production.getInstance();

    public static class Production566Production extends Production
    {
        private Production566Production() {;} // Singleton
        private static Production566Production singletonInstance = null;
        public static final Production566Production getInstance() { if (singletonInstance == null) singletonInstance = new Production566Production(); return singletonInstance; }

        public String getDescription() { return "<UFTerm> ::= UFTerm:<UFTerm> MultOp:<MultOp> UFFactor:<UFFactor>  :production566"; }

        /**
         * Reduce by <UFTerm> ::= UFTerm:<UFTerm> MultOp:<MultOp> UFFactor:<UFFactor>  :production566
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UFTerm> ::= UFTerm:<UFTerm> MultOp:<MultOp> UFFactor:<UFFactor>  :production566
            ASTUFFactorNode v3 = (ASTUFFactorNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTMultOpNode v2 = (ASTMultOpNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTUFTermNode v1 = (ASTUFTermNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTUFTermNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.UFTermNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("UFTerm"))
                return 0;
            else
                if (name.equals("MultOp"))
                    return 1;
                else
                    if (name.equals("UFFactor"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <UFTerm> ::= UFTerm:<UFTerm> MultOp:<MultOp> UFFactor:<UFFactor>  :production566
         */
        protected ASTUFTermNode userAction(ASTUFTermNode v1, ASTMultOpNode v2, ASTUFFactorNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production566Production PRODUCTION566 = Production566Production.getInstance();

    public static class Production567Production extends Production
    {
        private Production567Production() {;} // Singleton
        private static Production567Production singletonInstance = null;
        public static final Production567Production getInstance() { if (singletonInstance == null) singletonInstance = new Production567Production(); return singletonInstance; }

        public String getDescription() { return "<UFTerm> ::= UFTerm:<UFTerm> ConcatOp:<ConcatOp> UFPrimary:<UFPrimary>  :production567"; }

        /**
         * Reduce by <UFTerm> ::= UFTerm:<UFTerm> ConcatOp:<ConcatOp> UFPrimary:<UFPrimary>  :production567
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UFTerm> ::= UFTerm:<UFTerm> ConcatOp:<ConcatOp> UFPrimary:<UFPrimary>  :production567
            ASTUFPrimaryNode v3 = (ASTUFPrimaryNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTConcatOpNode v2 = (ASTConcatOpNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTUFTermNode v1 = (ASTUFTermNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTUFTermNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.UFTermNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("UFTerm"))
                return 0;
            else
                if (name.equals("ConcatOp"))
                    return 1;
                else
                    if (name.equals("UFPrimary"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <UFTerm> ::= UFTerm:<UFTerm> ConcatOp:<ConcatOp> UFPrimary:<UFPrimary>  :production567
         */
        protected ASTUFTermNode userAction(ASTUFTermNode v1, ASTConcatOpNode v2, ASTUFPrimaryNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production567Production PRODUCTION567 = Production567Production.getInstance();

    public static class Production568Production extends Production
    {
        private Production568Production() {;} // Singleton
        private static Production568Production singletonInstance = null;
        public static final Production568Production getInstance() { if (singletonInstance == null) singletonInstance = new Production568Production(); return singletonInstance; }

        public String getDescription() { return "<Level2Expr> ::= AddOperand:<AddOperand>  :production568"; }

        /**
         * Reduce by <Level2Expr> ::= AddOperand:<AddOperand>  :production568
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Level2Expr> ::= AddOperand:<AddOperand>  :production568
            ASTAddOperandNode v1 = (ASTAddOperandNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTLevel2ExprNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.Level2ExprNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("AddOperand"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Level2Expr> ::= AddOperand:<AddOperand>  :production568
         */
        protected ASTLevel2ExprNode userAction(ASTAddOperandNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production568Production PRODUCTION568 = Production568Production.getInstance();

    public static class Production569Production extends Production
    {
        private Production569Production() {;} // Singleton
        private static Production569Production singletonInstance = null;
        public static final Production569Production getInstance() { if (singletonInstance == null) singletonInstance = new Production569Production(); return singletonInstance; }

        public String getDescription() { return "<Level2Expr> ::= <Level2Expr@39> AddOperand:<AddOperand>  :production569"; }

        /**
         * Reduce by <Level2Expr> ::= <Level2Expr@39> AddOperand:<AddOperand>  :production569
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Level2Expr> ::= <Level2Expr@39> AddOperand:<AddOperand>  :production569
            ASTAddOperandNode v3 = (ASTAddOperandNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTAddOpNode v2 = (ASTAddOpNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLevel2ExprNode v1 = (ASTLevel2ExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTLevel2ExprNode userValue = userAction(v1, v2, v3);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.Level2ExprNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Level2Expr"))
                return 0;
            else
                if (name.equals("AddOp"))
                    return 1;
                else
                    if (name.equals("AddOperand"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Level2Expr> ::= <Level2Expr@39> AddOperand:<AddOperand>  :production569
         */
        protected ASTLevel2ExprNode userAction(ASTLevel2ExprNode v1, ASTAddOpNode v2, ASTAddOperandNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production569Production PRODUCTION569 = Production569Production.getInstance();

    public static class Production570Production extends Production
    {
        private Production570Production() {;} // Singleton
        private static Production570Production singletonInstance = null;
        public static final Production570Production getInstance() { if (singletonInstance == null) singletonInstance = new Production570Production(); return singletonInstance; }

        public String getDescription() { return "<Level2Expr> ::= Sign:<Sign> AddOperand:<AddOperand>  :production570"; }

        /**
         * Reduce by <Level2Expr> ::= Sign:<Sign> AddOperand:<AddOperand>  :production570
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Level2Expr> ::= Sign:<Sign> AddOperand:<AddOperand>  :production570
            ASTAddOperandNode v2 = (ASTAddOperandNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSignNode v1 = (ASTSignNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTLevel2ExprNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.Level2ExprNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Sign"))
                return 0;
            else
                if (name.equals("AddOperand"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Level2Expr> ::= Sign:<Sign> AddOperand:<AddOperand>  :production570
         */
        protected ASTLevel2ExprNode userAction(ASTSignNode v1, ASTAddOperandNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production570Production PRODUCTION570 = Production570Production.getInstance();

    public static class Production571Production extends Production
    {
        private Production571Production() {;} // Singleton
        private static Production571Production singletonInstance = null;
        public static final Production571Production getInstance() { if (singletonInstance == null) singletonInstance = new Production571Production(); return singletonInstance; }

        public String getDescription() { return "<UFExpr> ::= UFTerm:<UFTerm>  :production571"; }

        /**
         * Reduce by <UFExpr> ::= UFTerm:<UFTerm>  :production571
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UFExpr> ::= UFTerm:<UFTerm>  :production571
            ASTUFTermNode v1 = (ASTUFTermNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTUFExprNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.UFExprNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("UFTerm"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <UFExpr> ::= UFTerm:<UFTerm>  :production571
         */
        protected ASTUFExprNode userAction(ASTUFTermNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production571Production PRODUCTION571 = Production571Production.getInstance();

    public static class Production572Production extends Production
    {
        private Production572Production() {;} // Singleton
        private static Production572Production singletonInstance = null;
        public static final Production572Production getInstance() { if (singletonInstance == null) singletonInstance = new Production572Production(); return singletonInstance; }

        public String getDescription() { return "<UFExpr> ::= Sign:<Sign> UFTerm:<UFTerm>  :production572"; }

        /**
         * Reduce by <UFExpr> ::= Sign:<Sign> UFTerm:<UFTerm>  :production572
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UFExpr> ::= Sign:<Sign> UFTerm:<UFTerm>  :production572
            ASTUFTermNode v2 = (ASTUFTermNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSignNode v1 = (ASTSignNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTUFExprNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.UFExprNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Sign"))
                return 0;
            else
                if (name.equals("UFTerm"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <UFExpr> ::= Sign:<Sign> UFTerm:<UFTerm>  :production572
         */
        protected ASTUFExprNode userAction(ASTSignNode v1, ASTUFTermNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production572Production PRODUCTION572 = Production572Production.getInstance();

    public static class Production573Production extends Production
    {
        private Production573Production() {;} // Singleton
        private static Production573Production singletonInstance = null;
        public static final Production573Production getInstance() { if (singletonInstance == null) singletonInstance = new Production573Production(); return singletonInstance; }

        public String getDescription() { return "<UFExpr> ::= UFExpr:<UFExpr> AddOp:<AddOp> UFTerm:<UFTerm>  :production573"; }

        /**
         * Reduce by <UFExpr> ::= UFExpr:<UFExpr> AddOp:<AddOp> UFTerm:<UFTerm>  :production573
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UFExpr> ::= UFExpr:<UFExpr> AddOp:<AddOp> UFTerm:<UFTerm>  :production573
            ASTUFTermNode v3 = (ASTUFTermNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTAddOpNode v2 = (ASTAddOpNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTUFExprNode v1 = (ASTUFExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTUFExprNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.UFExprNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("UFExpr"))
                return 0;
            else
                if (name.equals("AddOp"))
                    return 1;
                else
                    if (name.equals("UFTerm"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <UFExpr> ::= UFExpr:<UFExpr> AddOp:<AddOp> UFTerm:<UFTerm>  :production573
         */
        protected ASTUFExprNode userAction(ASTUFExprNode v1, ASTAddOpNode v2, ASTUFTermNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production573Production PRODUCTION573 = Production573Production.getInstance();

    public static class Production574Production extends Production
    {
        private Production574Production() {;} // Singleton
        private static Production574Production singletonInstance = null;
        public static final Production574Production getInstance() { if (singletonInstance == null) singletonInstance = new Production574Production(); return singletonInstance; }

        public String getDescription() { return "<Level3Expr> ::= Level2Expr:<Level2Expr>  :production574"; }

        /**
         * Reduce by <Level3Expr> ::= Level2Expr:<Level2Expr>  :production574
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Level3Expr> ::= Level2Expr:<Level2Expr>  :production574
            ASTLevel2ExprNode v1 = (ASTLevel2ExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTLevel3ExprNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.Level3ExprNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Level2Expr"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Level3Expr> ::= Level2Expr:<Level2Expr>  :production574
         */
        protected ASTLevel3ExprNode userAction(ASTLevel2ExprNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production574Production PRODUCTION574 = Production574Production.getInstance();

    public static class Production575Production extends Production
    {
        private Production575Production() {;} // Singleton
        private static Production575Production singletonInstance = null;
        public static final Production575Production getInstance() { if (singletonInstance == null) singletonInstance = new Production575Production(); return singletonInstance; }

        public String getDescription() { return "<Level3Expr> ::= <Level3Expr@40> Level2Expr:<Level2Expr>  :production575"; }

        /**
         * Reduce by <Level3Expr> ::= <Level3Expr@40> Level2Expr:<Level2Expr>  :production575
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Level3Expr> ::= <Level3Expr@40> Level2Expr:<Level2Expr>  :production575
            ASTLevel2ExprNode v3 = (ASTLevel2ExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTConcatOpNode v2 = (ASTConcatOpNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLevel3ExprNode v1 = (ASTLevel3ExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTLevel3ExprNode userValue = userAction(v1, v2, v3);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.Level3ExprNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Level3Expr"))
                return 0;
            else
                if (name.equals("ConcatOp"))
                    return 1;
                else
                    if (name.equals("Level2Expr"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Level3Expr> ::= <Level3Expr@40> Level2Expr:<Level2Expr>  :production575
         */
        protected ASTLevel3ExprNode userAction(ASTLevel3ExprNode v1, ASTConcatOpNode v2, ASTLevel2ExprNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production575Production PRODUCTION575 = Production575Production.getInstance();

    public static class Production576Production extends Production
    {
        private Production576Production() {;} // Singleton
        private static Production576Production singletonInstance = null;
        public static final Production576Production getInstance() { if (singletonInstance == null) singletonInstance = new Production576Production(); return singletonInstance; }

        public String getDescription() { return "<CExpr> ::= CPrimary:<CPrimary>  :production576"; }

        /**
         * Reduce by <CExpr> ::= CPrimary:<CPrimary>  :production576
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CExpr> ::= CPrimary:<CPrimary>  :production576
            ASTCPrimaryNode v1 = (ASTCPrimaryNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCExprNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.CExprNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("CPrimary"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CExpr> ::= CPrimary:<CPrimary>  :production576
         */
        protected ASTCExprNode userAction(ASTCPrimaryNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production576Production PRODUCTION576 = Production576Production.getInstance();

    public static class Production577Production extends Production
    {
        private Production577Production() {;} // Singleton
        private static Production577Production singletonInstance = null;
        public static final Production577Production getInstance() { if (singletonInstance == null) singletonInstance = new Production577Production(); return singletonInstance; }

        public String getDescription() { return "<CExpr> ::= <CExpr@41> CPrimary:<CPrimary>  :production577"; }

        /**
         * Reduce by <CExpr> ::= <CExpr@41> CPrimary:<CPrimary>  :production577
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CExpr> ::= <CExpr@41> CPrimary:<CPrimary>  :production577
            ASTCPrimaryNode v3 = (ASTCPrimaryNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTConcatOpNode v2 = (ASTConcatOpNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTCExprNode v1 = (ASTCExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCExprNode userValue = userAction(v1, v2, v3);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.CExprNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("CExpr"))
                return 0;
            else
                if (name.equals("ConcatOp"))
                    return 1;
                else
                    if (name.equals("CPrimary"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CExpr> ::= <CExpr@41> CPrimary:<CPrimary>  :production577
         */
        protected ASTCExprNode userAction(ASTCExprNode v1, ASTConcatOpNode v2, ASTCPrimaryNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production577Production PRODUCTION577 = Production577Production.getInstance();

    public static class Production578Production extends Production
    {
        private Production578Production() {;} // Singleton
        private static Production578Production singletonInstance = null;
        public static final Production578Production getInstance() { if (singletonInstance == null) singletonInstance = new Production578Production(); return singletonInstance; }

        public String getDescription() { return "<Level4Expr> ::= Level3Expr2:<Level3Expr>  :production578"; }

        /**
         * Reduce by <Level4Expr> ::= Level3Expr2:<Level3Expr>  :production578
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Level4Expr> ::= Level3Expr2:<Level3Expr>  :production578
            ASTLevel3ExprNode v1 = (ASTLevel3ExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTLevel4ExprNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.Level4ExprNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Level3Expr2"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Level4Expr> ::= Level3Expr2:<Level3Expr>  :production578
         */
        protected ASTLevel4ExprNode userAction(ASTLevel3ExprNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production578Production PRODUCTION578 = Production578Production.getInstance();

    public static class Production579Production extends Production
    {
        private Production579Production() {;} // Singleton
        private static Production579Production singletonInstance = null;
        public static final Production579Production getInstance() { if (singletonInstance == null) singletonInstance = new Production579Production(); return singletonInstance; }

        public String getDescription() { return "<Level4Expr> ::= <Level4Expr@42> Level3Expr2:<Level3Expr>  :production579"; }

        /**
         * Reduce by <Level4Expr> ::= <Level4Expr@42> Level3Expr2:<Level3Expr>  :production579
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Level4Expr> ::= <Level4Expr@42> Level3Expr2:<Level3Expr>  :production579
            ASTLevel3ExprNode v3 = (ASTLevel3ExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTRelOpNode v2 = (ASTRelOpNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLevel3ExprNode v1 = (ASTLevel3ExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTLevel4ExprNode userValue = userAction(v1, v2, v3);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.Level4ExprNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Level3Expr"))
                return 0;
            else
                if (name.equals("RelOp"))
                    return 1;
                else
                    if (name.equals("Level3Expr2"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Level4Expr> ::= <Level4Expr@42> Level3Expr2:<Level3Expr>  :production579
         */
        protected ASTLevel4ExprNode userAction(ASTLevel3ExprNode v1, ASTRelOpNode v2, ASTLevel3ExprNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production579Production PRODUCTION579 = Production579Production.getInstance();

    public static class Production580Production extends Production
    {
        private Production580Production() {;} // Singleton
        private static Production580Production singletonInstance = null;
        public static final Production580Production getInstance() { if (singletonInstance == null) singletonInstance = new Production580Production(); return singletonInstance; }

        public String getDescription() { return "<AndOperand> ::= Level4Expr:<Level4Expr>  :production580"; }

        /**
         * Reduce by <AndOperand> ::= Level4Expr:<Level4Expr>  :production580
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AndOperand> ::= Level4Expr:<Level4Expr>  :production580
            ASTLevel4ExprNode v1 = (ASTLevel4ExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAndOperandNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.AndOperandNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Level4Expr"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AndOperand> ::= Level4Expr:<Level4Expr>  :production580
         */
        protected ASTAndOperandNode userAction(ASTLevel4ExprNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production580Production PRODUCTION580 = Production580Production.getInstance();

    public static class Production581Production extends Production
    {
        private Production581Production() {;} // Singleton
        private static Production581Production singletonInstance = null;
        public static final Production581Production getInstance() { if (singletonInstance == null) singletonInstance = new Production581Production(); return singletonInstance; }

        public String getDescription() { return "<AndOperand> ::= <AndOperand@43> Level4Expr:<Level4Expr>  :production581"; }

        /**
         * Reduce by <AndOperand> ::= <AndOperand@43> Level4Expr:<Level4Expr>  :production581
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AndOperand> ::= <AndOperand@43> Level4Expr:<Level4Expr>  :production581
            ASTLevel4ExprNode v2 = (ASTLevel4ExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNotOpNode v1 = (ASTNotOpNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAndOperandNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.AndOperandNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("NotOp"))
                return 0;
            else
                if (name.equals("Level4Expr"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AndOperand> ::= <AndOperand@43> Level4Expr:<Level4Expr>  :production581
         */
        protected ASTAndOperandNode userAction(ASTNotOpNode v1, ASTLevel4ExprNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production581Production PRODUCTION581 = Production581Production.getInstance();

    public static class Production582Production extends Production
    {
        private Production582Production() {;} // Singleton
        private static Production582Production singletonInstance = null;
        public static final Production582Production getInstance() { if (singletonInstance == null) singletonInstance = new Production582Production(); return singletonInstance; }

        public String getDescription() { return "<OrOperand> ::= AndOperand:<AndOperand>  :production582"; }

        /**
         * Reduce by <OrOperand> ::= AndOperand:<AndOperand>  :production582
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <OrOperand> ::= AndOperand:<AndOperand>  :production582
            ASTAndOperandNode v1 = (ASTAndOperandNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTOrOperandNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.OrOperandNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("AndOperand"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <OrOperand> ::= AndOperand:<AndOperand>  :production582
         */
        protected ASTOrOperandNode userAction(ASTAndOperandNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production582Production PRODUCTION582 = Production582Production.getInstance();

    public static class Production583Production extends Production
    {
        private Production583Production() {;} // Singleton
        private static Production583Production singletonInstance = null;
        public static final Production583Production getInstance() { if (singletonInstance == null) singletonInstance = new Production583Production(); return singletonInstance; }

        public String getDescription() { return "<OrOperand> ::= <OrOperand@44> AndOperand:<AndOperand>  :production583"; }

        /**
         * Reduce by <OrOperand> ::= <OrOperand@44> AndOperand:<AndOperand>  :production583
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <OrOperand> ::= <OrOperand@44> AndOperand:<AndOperand>  :production583
            ASTAndOperandNode v3 = (ASTAndOperandNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTAndOpNode v2 = (ASTAndOpNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTOrOperandNode v1 = (ASTOrOperandNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTOrOperandNode userValue = userAction(v1, v2, v3);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.OrOperandNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("OrOperand"))
                return 0;
            else
                if (name.equals("AndOp"))
                    return 1;
                else
                    if (name.equals("AndOperand"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <OrOperand> ::= <OrOperand@44> AndOperand:<AndOperand>  :production583
         */
        protected ASTOrOperandNode userAction(ASTOrOperandNode v1, ASTAndOpNode v2, ASTAndOperandNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production583Production PRODUCTION583 = Production583Production.getInstance();

    public static class Production584Production extends Production
    {
        private Production584Production() {;} // Singleton
        private static Production584Production singletonInstance = null;
        public static final Production584Production getInstance() { if (singletonInstance == null) singletonInstance = new Production584Production(); return singletonInstance; }

        public String getDescription() { return "<EquivOperand> ::= OrOperand:<OrOperand>  :production584"; }

        /**
         * Reduce by <EquivOperand> ::= OrOperand:<OrOperand>  :production584
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EquivOperand> ::= OrOperand:<OrOperand>  :production584
            ASTOrOperandNode v1 = (ASTOrOperandNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEquivOperandNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.EquivOperandNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("OrOperand"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EquivOperand> ::= OrOperand:<OrOperand>  :production584
         */
        protected ASTEquivOperandNode userAction(ASTOrOperandNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production584Production PRODUCTION584 = Production584Production.getInstance();

    public static class Production585Production extends Production
    {
        private Production585Production() {;} // Singleton
        private static Production585Production singletonInstance = null;
        public static final Production585Production getInstance() { if (singletonInstance == null) singletonInstance = new Production585Production(); return singletonInstance; }

        public String getDescription() { return "<EquivOperand> ::= <EquivOperand@45> OrOperand:<OrOperand>  :production585"; }

        /**
         * Reduce by <EquivOperand> ::= <EquivOperand@45> OrOperand:<OrOperand>  :production585
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EquivOperand> ::= <EquivOperand@45> OrOperand:<OrOperand>  :production585
            ASTOrOperandNode v3 = (ASTOrOperandNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTOrOpNode v2 = (ASTOrOpNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEquivOperandNode v1 = (ASTEquivOperandNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEquivOperandNode userValue = userAction(v1, v2, v3);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.EquivOperandNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EquivOperand"))
                return 0;
            else
                if (name.equals("OrOp"))
                    return 1;
                else
                    if (name.equals("OrOperand"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EquivOperand> ::= <EquivOperand@45> OrOperand:<OrOperand>  :production585
         */
        protected ASTEquivOperandNode userAction(ASTEquivOperandNode v1, ASTOrOpNode v2, ASTOrOperandNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production585Production PRODUCTION585 = Production585Production.getInstance();

    public static class Production586Production extends Production
    {
        private Production586Production() {;} // Singleton
        private static Production586Production singletonInstance = null;
        public static final Production586Production getInstance() { if (singletonInstance == null) singletonInstance = new Production586Production(); return singletonInstance; }

        public String getDescription() { return "<Level5Expr> ::= EquivOperand:<EquivOperand>  :production586"; }

        /**
         * Reduce by <Level5Expr> ::= EquivOperand:<EquivOperand>  :production586
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Level5Expr> ::= EquivOperand:<EquivOperand>  :production586
            ASTEquivOperandNode v1 = (ASTEquivOperandNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTLevel5ExprNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.Level5ExprNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EquivOperand"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Level5Expr> ::= EquivOperand:<EquivOperand>  :production586
         */
        protected ASTLevel5ExprNode userAction(ASTEquivOperandNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production586Production PRODUCTION586 = Production586Production.getInstance();

    public static class Production587Production extends Production
    {
        private Production587Production() {;} // Singleton
        private static Production587Production singletonInstance = null;
        public static final Production587Production getInstance() { if (singletonInstance == null) singletonInstance = new Production587Production(); return singletonInstance; }

        public String getDescription() { return "<Level5Expr> ::= <Level5Expr@46> EquivOperand:<EquivOperand>  :production587"; }

        /**
         * Reduce by <Level5Expr> ::= <Level5Expr@46> EquivOperand:<EquivOperand>  :production587
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Level5Expr> ::= <Level5Expr@46> EquivOperand:<EquivOperand>  :production587
            ASTEquivOperandNode v3 = (ASTEquivOperandNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEquivOpNode v2 = (ASTEquivOpNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLevel5ExprNode v1 = (ASTLevel5ExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTLevel5ExprNode userValue = userAction(v1, v2, v3);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.Level5ExprNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Level5Expr"))
                return 0;
            else
                if (name.equals("EquivOp"))
                    return 1;
                else
                    if (name.equals("EquivOperand"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Level5Expr> ::= <Level5Expr@46> EquivOperand:<EquivOperand>  :production587
         */
        protected ASTLevel5ExprNode userAction(ASTLevel5ExprNode v1, ASTEquivOpNode v2, ASTEquivOperandNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production587Production PRODUCTION587 = Production587Production.getInstance();

    public static class Production588Production extends Production
    {
        private Production588Production() {;} // Singleton
        private static Production588Production singletonInstance = null;
        public static final Production588Production getInstance() { if (singletonInstance == null) singletonInstance = new Production588Production(); return singletonInstance; }

        public String getDescription() { return "<Expr> ::= Level5Expr:<Level5Expr>  :production588"; }

        /**
         * Reduce by <Expr> ::= Level5Expr:<Level5Expr>  :production588
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Expr> ::= Level5Expr:<Level5Expr>  :production588
            ASTLevel5ExprNode v1 = (ASTLevel5ExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTExprNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ExprNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Level5Expr"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Expr> ::= Level5Expr:<Level5Expr>  :production588
         */
        protected ASTExprNode userAction(ASTLevel5ExprNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production588Production PRODUCTION588 = Production588Production.getInstance();

    public static class Production589Production extends Production
    {
        private Production589Production() {;} // Singleton
        private static Production589Production singletonInstance = null;
        public static final Production589Production getInstance() { if (singletonInstance == null) singletonInstance = new Production589Production(); return singletonInstance; }

        public String getDescription() { return "<Expr> ::= Expr:<Expr> DefinedBinaryOp:<DefinedBinaryOp> Level5Expr:<Level5Expr>  :production589"; }

        /**
         * Reduce by <Expr> ::= Expr:<Expr> DefinedBinaryOp:<DefinedBinaryOp> Level5Expr:<Level5Expr>  :production589
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Expr> ::= Expr:<Expr> DefinedBinaryOp:<DefinedBinaryOp> Level5Expr:<Level5Expr>  :production589
            ASTLevel5ExprNode v3 = (ASTLevel5ExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDefinedBinaryOpNode v2 = (ASTDefinedBinaryOpNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v1 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTExprNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.ExprNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Expr"))
                return 0;
            else
                if (name.equals("DefinedBinaryOp"))
                    return 1;
                else
                    if (name.equals("Level5Expr"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Expr> ::= Expr:<Expr> DefinedBinaryOp:<DefinedBinaryOp> Level5Expr:<Level5Expr>  :production589
         */
        protected ASTExprNode userAction(ASTExprNode v1, ASTDefinedBinaryOpNode v2, ASTLevel5ExprNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production589Production PRODUCTION589 = Production589Production.getInstance();

    public static class Production590Production extends Production
    {
        private Production590Production() {;} // Singleton
        private static Production590Production singletonInstance = null;
        public static final Production590Production getInstance() { if (singletonInstance == null) singletonInstance = new Production590Production(); return singletonInstance; }

        public String getDescription() { return "<SFExprList> ::= SFExpr:<SFExpr> tcolon:T_COLON Expr:<Expr> tcolon2:T_COLON Expr2:<Expr>  :production590"; }

        /**
         * Reduce by <SFExprList> ::= SFExpr:<SFExpr> tcolon:T_COLON Expr:<Expr> tcolon2:T_COLON Expr2:<Expr>  :production590
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SFExprList> ::= SFExpr:<SFExpr> tcolon:T_COLON Expr:<Expr> tcolon2:T_COLON Expr2:<Expr>  :production590
            ASTExprNode v5 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v3 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSFExprNode v1 = (ASTSFExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSFExprListNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.SFExprListNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SFExpr"))
                return 0;
            else
                if (name.equals("tcolon"))
                    return 1;
                else
                    if (name.equals("Expr"))
                        return 2;
                    else
                        if (name.equals("tcolon2"))
                            return 3;
                        else
                            if (name.equals("Expr2"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SFExprList> ::= SFExpr:<SFExpr> tcolon:T_COLON Expr:<Expr> tcolon2:T_COLON Expr2:<Expr>  :production590
         */
        protected ASTSFExprListNode userAction(ASTSFExprNode v1, Token v2, ASTExprNode v3, Token v4, ASTExprNode v5)
        {
            return null;
        }
    }
    public static final Productions.Production590Production PRODUCTION590 = Production590Production.getInstance();

    public static class Production591Production extends Production
    {
        private Production591Production() {;} // Singleton
        private static Production591Production singletonInstance = null;
        public static final Production591Production getInstance() { if (singletonInstance == null) singletonInstance = new Production591Production(); return singletonInstance; }

        public String getDescription() { return "<SFExprList> ::= SFExpr:<SFExpr> tcolon:T_COLON tcolon2:T_COLON Expr:<Expr>  :production591"; }

        /**
         * Reduce by <SFExprList> ::= SFExpr:<SFExpr> tcolon:T_COLON tcolon2:T_COLON Expr:<Expr>  :production591
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SFExprList> ::= SFExpr:<SFExpr> tcolon:T_COLON tcolon2:T_COLON Expr:<Expr>  :production591
            ASTExprNode v4 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSFExprNode v1 = (ASTSFExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSFExprListNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.SFExprListNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SFExpr"))
                return 0;
            else
                if (name.equals("tcolon"))
                    return 1;
                else
                    if (name.equals("tcolon2"))
                        return 2;
                    else
                        if (name.equals("Expr"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SFExprList> ::= SFExpr:<SFExpr> tcolon:T_COLON tcolon2:T_COLON Expr:<Expr>  :production591
         */
        protected ASTSFExprListNode userAction(ASTSFExprNode v1, Token v2, Token v3, ASTExprNode v4)
        {
            return null;
        }
    }
    public static final Productions.Production591Production PRODUCTION591 = Production591Production.getInstance();

    public static class Production592Production extends Production
    {
        private Production592Production() {;} // Singleton
        private static Production592Production singletonInstance = null;
        public static final Production592Production getInstance() { if (singletonInstance == null) singletonInstance = new Production592Production(); return singletonInstance; }

        public String getDescription() { return "<SFExprList> ::= tcolon:T_COLON Expr:<Expr> tcolon2:T_COLON Expr2:<Expr>  :production592"; }

        /**
         * Reduce by <SFExprList> ::= tcolon:T_COLON Expr:<Expr> tcolon2:T_COLON Expr2:<Expr>  :production592
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SFExprList> ::= tcolon:T_COLON Expr:<Expr> tcolon2:T_COLON Expr2:<Expr>  :production592
            ASTExprNode v4 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v2 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSFExprListNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.SFExprListNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tcolon"))
                return 0;
            else
                if (name.equals("Expr"))
                    return 1;
                else
                    if (name.equals("tcolon2"))
                        return 2;
                    else
                        if (name.equals("Expr2"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SFExprList> ::= tcolon:T_COLON Expr:<Expr> tcolon2:T_COLON Expr2:<Expr>  :production592
         */
        protected ASTSFExprListNode userAction(Token v1, ASTExprNode v2, Token v3, ASTExprNode v4)
        {
            return null;
        }
    }
    public static final Productions.Production592Production PRODUCTION592 = Production592Production.getInstance();

    public static class Production593Production extends Production
    {
        private Production593Production() {;} // Singleton
        private static Production593Production singletonInstance = null;
        public static final Production593Production getInstance() { if (singletonInstance == null) singletonInstance = new Production593Production(); return singletonInstance; }

        public String getDescription() { return "<SFExprList> ::= tcolon:T_COLON tcolon2:T_COLON Expr:<Expr>  :production593"; }

        /**
         * Reduce by <SFExprList> ::= tcolon:T_COLON tcolon2:T_COLON Expr:<Expr>  :production593
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SFExprList> ::= tcolon:T_COLON tcolon2:T_COLON Expr:<Expr>  :production593
            ASTExprNode v3 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSFExprListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.SFExprListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tcolon"))
                return 0;
            else
                if (name.equals("tcolon2"))
                    return 1;
                else
                    if (name.equals("Expr"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SFExprList> ::= tcolon:T_COLON tcolon2:T_COLON Expr:<Expr>  :production593
         */
        protected ASTSFExprListNode userAction(Token v1, Token v2, ASTExprNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production593Production PRODUCTION593 = Production593Production.getInstance();

    public static class Production594Production extends Production
    {
        private Production594Production() {;} // Singleton
        private static Production594Production singletonInstance = null;
        public static final Production594Production getInstance() { if (singletonInstance == null) singletonInstance = new Production594Production(); return singletonInstance; }

        public String getDescription() { return "<AssignmentStmt> ::= Name:<Name> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production594"; }

        /**
         * Reduce by <AssignmentStmt> ::= Name:<Name> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production594
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssignmentStmt> ::= Name:<Name> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production594
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v3 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAssignmentStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.AssignmentStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tequals"))
                    return 1;
                else
                    if (name.equals("Expr"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AssignmentStmt> ::= Name:<Name> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production594
         */
        protected ASTAssignmentStmtNode userAction(ASTNameNode v1, Token v2, ASTExprNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production594Production PRODUCTION594 = Production594Production.getInstance();

    public static class Production595Production extends Production
    {
        private Production595Production() {;} // Singleton
        private static Production595Production singletonInstance = null;
        public static final Production595Production getInstance() { if (singletonInstance == null) singletonInstance = new Production595Production(); return singletonInstance; }

        public String getDescription() { return "<AssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production595"; }

        /**
         * Reduce by <AssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production595
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production595
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v4 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v2 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAssignmentStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.AssignmentStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("Name"))
                    return 1;
                else
                    if (name.equals("tequals"))
                        return 2;
                    else
                        if (name.equals("Expr"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production595
         */
        protected ASTAssignmentStmtNode userAction(ASTLblDefNode v1, ASTNameNode v2, Token v3, ASTExprNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production595Production PRODUCTION595 = Production595Production.getInstance();

    public static class Production596Production extends Production
    {
        private Production596Production() {;} // Singleton
        private static Production596Production singletonInstance = null;
        public static final Production596Production getInstance() { if (singletonInstance == null) singletonInstance = new Production596Production(); return singletonInstance; }

        public String getDescription() { return "<AssignmentStmt> ::= Name:<Name> tlparen:T_LPAREN SFExprList:<SFExprList> trparen:T_RPAREN tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production596"; }

        /**
         * Reduce by <AssignmentStmt> ::= Name:<Name> tlparen:T_LPAREN SFExprList:<SFExprList> trparen:T_RPAREN tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production596
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssignmentStmt> ::= Name:<Name> tlparen:T_LPAREN SFExprList:<SFExprList> trparen:T_RPAREN tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production596
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v6 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSFExprListNode v3 = (ASTSFExprListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAssignmentStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7);

            // The production has 7 symbols on its RHS
            parser.reduce(Nonterminal.AssignmentStmtNonterminal.getInstance(), 7, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("SFExprList"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("tequals"))
                                return 4;
                            else
                                if (name.equals("Expr"))
                                    return 5;
                                else
                                    if (name.equals("teos"))
                                        return 6;
                                    else
                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AssignmentStmt> ::= Name:<Name> tlparen:T_LPAREN SFExprList:<SFExprList> trparen:T_RPAREN tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production596
         */
        protected ASTAssignmentStmtNode userAction(ASTNameNode v1, Token v2, ASTSFExprListNode v3, Token v4, Token v5, ASTExprNode v6, Token v7)
        {
            return null;
        }
    }
    public static final Productions.Production596Production PRODUCTION596 = Production596Production.getInstance();

    public static class Production597Production extends Production
    {
        private Production597Production() {;} // Singleton
        private static Production597Production singletonInstance = null;
        public static final Production597Production getInstance() { if (singletonInstance == null) singletonInstance = new Production597Production(); return singletonInstance; }

        public String getDescription() { return "<AssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tlparen:T_LPAREN SFExprList:<SFExprList> trparen:T_RPAREN tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production597"; }

        /**
         * Reduce by <AssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tlparen:T_LPAREN SFExprList:<SFExprList> trparen:T_RPAREN tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production597
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tlparen:T_LPAREN SFExprList:<SFExprList> trparen:T_RPAREN tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production597
            Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v7 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSFExprListNode v4 = (ASTSFExprListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v2 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAssignmentStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8);

            // The production has 8 symbols on its RHS
            parser.reduce(Nonterminal.AssignmentStmtNonterminal.getInstance(), 8, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("Name"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("SFExprList"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("tequals"))
                                    return 5;
                                else
                                    if (name.equals("Expr"))
                                        return 6;
                                    else
                                        if (name.equals("teos"))
                                            return 7;
                                        else
                                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tlparen:T_LPAREN SFExprList:<SFExprList> trparen:T_RPAREN tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production597
         */
        protected ASTAssignmentStmtNode userAction(ASTLblDefNode v1, ASTNameNode v2, Token v3, ASTSFExprListNode v4, Token v5, Token v6, ASTExprNode v7, Token v8)
        {
            return null;
        }
    }
    public static final Productions.Production597Production PRODUCTION597 = Production597Production.getInstance();

    public static class Production598Production extends Production
    {
        private Production598Production() {;} // Singleton
        private static Production598Production singletonInstance = null;
        public static final Production598Production getInstance() { if (singletonInstance == null) singletonInstance = new Production598Production(); return singletonInstance; }

        public String getDescription() { return "<AssignmentStmt> ::= Name:<Name> tlparen:T_LPAREN SFExprList:<SFExprList> trparen:T_RPAREN SubstringRange:<SubstringRange> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production598"; }

        /**
         * Reduce by <AssignmentStmt> ::= Name:<Name> tlparen:T_LPAREN SFExprList:<SFExprList> trparen:T_RPAREN SubstringRange:<SubstringRange> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production598
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssignmentStmt> ::= Name:<Name> tlparen:T_LPAREN SFExprList:<SFExprList> trparen:T_RPAREN SubstringRange:<SubstringRange> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production598
            Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v7 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubstringRangeNode v5 = (ASTSubstringRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSFExprListNode v3 = (ASTSFExprListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAssignmentStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8);

            // The production has 8 symbols on its RHS
            parser.reduce(Nonterminal.AssignmentStmtNonterminal.getInstance(), 8, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("SFExprList"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("SubstringRange"))
                                return 4;
                            else
                                if (name.equals("tequals"))
                                    return 5;
                                else
                                    if (name.equals("Expr"))
                                        return 6;
                                    else
                                        if (name.equals("teos"))
                                            return 7;
                                        else
                                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AssignmentStmt> ::= Name:<Name> tlparen:T_LPAREN SFExprList:<SFExprList> trparen:T_RPAREN SubstringRange:<SubstringRange> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production598
         */
        protected ASTAssignmentStmtNode userAction(ASTNameNode v1, Token v2, ASTSFExprListNode v3, Token v4, ASTSubstringRangeNode v5, Token v6, ASTExprNode v7, Token v8)
        {
            return null;
        }
    }
    public static final Productions.Production598Production PRODUCTION598 = Production598Production.getInstance();

    public static class Production599Production extends Production
    {
        private Production599Production() {;} // Singleton
        private static Production599Production singletonInstance = null;
        public static final Production599Production getInstance() { if (singletonInstance == null) singletonInstance = new Production599Production(); return singletonInstance; }

        public String getDescription() { return "<AssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tlparen:T_LPAREN SFExprList:<SFExprList> trparen:T_RPAREN SubstringRange:<SubstringRange> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production599"; }

        /**
         * Reduce by <AssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tlparen:T_LPAREN SFExprList:<SFExprList> trparen:T_RPAREN SubstringRange:<SubstringRange> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production599
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tlparen:T_LPAREN SFExprList:<SFExprList> trparen:T_RPAREN SubstringRange:<SubstringRange> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production599
            Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v8 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubstringRangeNode v6 = (ASTSubstringRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSFExprListNode v4 = (ASTSFExprListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v2 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAssignmentStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8, v9);

            // The production has 9 symbols on its RHS
            parser.reduce(Nonterminal.AssignmentStmtNonterminal.getInstance(), 9, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("Name"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("SFExprList"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("SubstringRange"))
                                    return 5;
                                else
                                    if (name.equals("tequals"))
                                        return 6;
                                    else
                                        if (name.equals("Expr"))
                                            return 7;
                                        else
                                            if (name.equals("teos"))
                                                return 8;
                                            else
                                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tlparen:T_LPAREN SFExprList:<SFExprList> trparen:T_RPAREN SubstringRange:<SubstringRange> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production599
         */
        protected ASTAssignmentStmtNode userAction(ASTLblDefNode v1, ASTNameNode v2, Token v3, ASTSFExprListNode v4, Token v5, ASTSubstringRangeNode v6, Token v7, ASTExprNode v8, Token v9)
        {
            return null;
        }
    }
    public static final Productions.Production599Production PRODUCTION599 = Production599Production.getInstance();

    public static class Production600Production extends Production
    {
        private Production600Production() {;} // Singleton
        private static Production600Production singletonInstance = null;
        public static final Production600Production getInstance() { if (singletonInstance == null) singletonInstance = new Production600Production(); return singletonInstance; }

        public String getDescription() { return "<AssignmentStmt> ::= Name:<Name> tlparen:T_LPAREN SFDummyArgNameList:<SFDummyArgNameList> trparen:T_RPAREN SubstringRange:<SubstringRange> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production600"; }

        /**
         * Reduce by <AssignmentStmt> ::= Name:<Name> tlparen:T_LPAREN SFDummyArgNameList:<SFDummyArgNameList> trparen:T_RPAREN SubstringRange:<SubstringRange> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production600
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssignmentStmt> ::= Name:<Name> tlparen:T_LPAREN SFDummyArgNameList:<SFDummyArgNameList> trparen:T_RPAREN SubstringRange:<SubstringRange> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production600
            Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v7 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubstringRangeNode v5 = (ASTSubstringRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSFDummyArgNameListNode v3 = (ASTSFDummyArgNameListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAssignmentStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8);

            // The production has 8 symbols on its RHS
            parser.reduce(Nonterminal.AssignmentStmtNonterminal.getInstance(), 8, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("SFDummyArgNameList"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("SubstringRange"))
                                return 4;
                            else
                                if (name.equals("tequals"))
                                    return 5;
                                else
                                    if (name.equals("Expr"))
                                        return 6;
                                    else
                                        if (name.equals("teos"))
                                            return 7;
                                        else
                                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AssignmentStmt> ::= Name:<Name> tlparen:T_LPAREN SFDummyArgNameList:<SFDummyArgNameList> trparen:T_RPAREN SubstringRange:<SubstringRange> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production600
         */
        protected ASTAssignmentStmtNode userAction(ASTNameNode v1, Token v2, ASTSFDummyArgNameListNode v3, Token v4, ASTSubstringRangeNode v5, Token v6, ASTExprNode v7, Token v8)
        {
            return null;
        }
    }
    public static final Productions.Production600Production PRODUCTION600 = Production600Production.getInstance();

    public static class Production601Production extends Production
    {
        private Production601Production() {;} // Singleton
        private static Production601Production singletonInstance = null;
        public static final Production601Production getInstance() { if (singletonInstance == null) singletonInstance = new Production601Production(); return singletonInstance; }

        public String getDescription() { return "<AssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tlparen:T_LPAREN SFDummyArgNameList:<SFDummyArgNameList> trparen:T_RPAREN SubstringRange:<SubstringRange> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production601"; }

        /**
         * Reduce by <AssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tlparen:T_LPAREN SFDummyArgNameList:<SFDummyArgNameList> trparen:T_RPAREN SubstringRange:<SubstringRange> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production601
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tlparen:T_LPAREN SFDummyArgNameList:<SFDummyArgNameList> trparen:T_RPAREN SubstringRange:<SubstringRange> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production601
            Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v8 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubstringRangeNode v6 = (ASTSubstringRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSFDummyArgNameListNode v4 = (ASTSFDummyArgNameListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v2 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAssignmentStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8, v9);

            // The production has 9 symbols on its RHS
            parser.reduce(Nonterminal.AssignmentStmtNonterminal.getInstance(), 9, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("Name"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("SFDummyArgNameList"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("SubstringRange"))
                                    return 5;
                                else
                                    if (name.equals("tequals"))
                                        return 6;
                                    else
                                        if (name.equals("Expr"))
                                            return 7;
                                        else
                                            if (name.equals("teos"))
                                                return 8;
                                            else
                                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tlparen:T_LPAREN SFDummyArgNameList:<SFDummyArgNameList> trparen:T_RPAREN SubstringRange:<SubstringRange> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production601
         */
        protected ASTAssignmentStmtNode userAction(ASTLblDefNode v1, ASTNameNode v2, Token v3, ASTSFDummyArgNameListNode v4, Token v5, ASTSubstringRangeNode v6, Token v7, ASTExprNode v8, Token v9)
        {
            return null;
        }
    }
    public static final Productions.Production601Production PRODUCTION601 = Production601Production.getInstance();

    public static class Production602Production extends Production
    {
        private Production602Production() {;} // Singleton
        private static Production602Production singletonInstance = null;
        public static final Production602Production getInstance() { if (singletonInstance == null) singletonInstance = new Production602Production(); return singletonInstance; }

        public String getDescription() { return "<AssignmentStmt> ::= Name:<Name> tpercent:T_PERCENT DataRef:<DataRef> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production602"; }

        /**
         * Reduce by <AssignmentStmt> ::= Name:<Name> tpercent:T_PERCENT DataRef:<DataRef> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production602
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssignmentStmt> ::= Name:<Name> tpercent:T_PERCENT DataRef:<DataRef> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production602
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v5 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDataRefNode v3 = (ASTDataRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAssignmentStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.AssignmentStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tpercent"))
                    return 1;
                else
                    if (name.equals("DataRef"))
                        return 2;
                    else
                        if (name.equals("tequals"))
                            return 3;
                        else
                            if (name.equals("Expr"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AssignmentStmt> ::= Name:<Name> tpercent:T_PERCENT DataRef:<DataRef> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production602
         */
        protected ASTAssignmentStmtNode userAction(ASTNameNode v1, Token v2, ASTDataRefNode v3, Token v4, ASTExprNode v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production602Production PRODUCTION602 = Production602Production.getInstance();

    public static class Production603Production extends Production
    {
        private Production603Production() {;} // Singleton
        private static Production603Production singletonInstance = null;
        public static final Production603Production getInstance() { if (singletonInstance == null) singletonInstance = new Production603Production(); return singletonInstance; }

        public String getDescription() { return "<AssignmentStmt> ::= Name:<Name> tpercent:T_PERCENT DataRef:<DataRef> <AssignmentStmt@47> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production603"; }

        /**
         * Reduce by <AssignmentStmt> ::= Name:<Name> tpercent:T_PERCENT DataRef:<DataRef> <AssignmentStmt@47> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production603
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssignmentStmt> ::= Name:<Name> tpercent:T_PERCENT DataRef:<DataRef> <AssignmentStmt@47> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production603
            Token v10 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v9 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubstringRangeNode v7 = (ASTSubstringRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v5 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDataRefNode v3 = (ASTDataRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAssignmentStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);

            // The production has 7 symbols on its RHS
            parser.reduce(Nonterminal.AssignmentStmtNonterminal.getInstance(), 7, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tpercent"))
                    return 1;
                else
                    if (name.equals("DataRef"))
                        return 2;
                    else
                        if (name.equals("tlparen"))
                            return 3;
                        else
                            if (name.equals("SectionSubscriptList"))
                                return 4;
                            else
                                if (name.equals("trparen"))
                                    return 5;
                                else
                                    if (name.equals("SubstringRange"))
                                        return 6;
                                    else
                                        if (name.equals("tequals"))
                                            return 7;
                                        else
                                            if (name.equals("Expr"))
                                                return 8;
                                            else
                                                if (name.equals("teos"))
                                                    return 9;
                                                else
                                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AssignmentStmt> ::= Name:<Name> tpercent:T_PERCENT DataRef:<DataRef> <AssignmentStmt@47> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production603
         */
        protected ASTAssignmentStmtNode userAction(ASTNameNode v1, Token v2, ASTDataRefNode v3, Token v4, ASTSectionSubscriptListNode v5, Token v6, ASTSubstringRangeNode v7, Token v8, ASTExprNode v9, Token v10)
        {
            return null;
        }
    }
    public static final Productions.Production603Production PRODUCTION603 = Production603Production.getInstance();

    public static class Production604Production extends Production
    {
        private Production604Production() {;} // Singleton
        private static Production604Production singletonInstance = null;
        public static final Production604Production getInstance() { if (singletonInstance == null) singletonInstance = new Production604Production(); return singletonInstance; }

        public String getDescription() { return "<AssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tpercent:T_PERCENT DataRef:<DataRef> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production604"; }

        /**
         * Reduce by <AssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tpercent:T_PERCENT DataRef:<DataRef> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production604
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tpercent:T_PERCENT DataRef:<DataRef> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production604
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v6 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDataRefNode v4 = (ASTDataRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v2 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAssignmentStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7);

            // The production has 7 symbols on its RHS
            parser.reduce(Nonterminal.AssignmentStmtNonterminal.getInstance(), 7, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("Name"))
                    return 1;
                else
                    if (name.equals("tpercent"))
                        return 2;
                    else
                        if (name.equals("DataRef"))
                            return 3;
                        else
                            if (name.equals("tequals"))
                                return 4;
                            else
                                if (name.equals("Expr"))
                                    return 5;
                                else
                                    if (name.equals("teos"))
                                        return 6;
                                    else
                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tpercent:T_PERCENT DataRef:<DataRef> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production604
         */
        protected ASTAssignmentStmtNode userAction(ASTLblDefNode v1, ASTNameNode v2, Token v3, ASTDataRefNode v4, Token v5, ASTExprNode v6, Token v7)
        {
            return null;
        }
    }
    public static final Productions.Production604Production PRODUCTION604 = Production604Production.getInstance();

    public static class Production605Production extends Production
    {
        private Production605Production() {;} // Singleton
        private static Production605Production singletonInstance = null;
        public static final Production605Production getInstance() { if (singletonInstance == null) singletonInstance = new Production605Production(); return singletonInstance; }

        public String getDescription() { return "<AssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tpercent:T_PERCENT DataRef:<DataRef> <AssignmentStmt@47> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production605"; }

        /**
         * Reduce by <AssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tpercent:T_PERCENT DataRef:<DataRef> <AssignmentStmt@47> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production605
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tpercent:T_PERCENT DataRef:<DataRef> <AssignmentStmt@47> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production605
            Token v11 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v10 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubstringRangeNode v8 = (ASTSubstringRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v6 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDataRefNode v4 = (ASTDataRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v2 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAssignmentStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);

            // The production has 8 symbols on its RHS
            parser.reduce(Nonterminal.AssignmentStmtNonterminal.getInstance(), 8, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("Name"))
                    return 1;
                else
                    if (name.equals("tpercent"))
                        return 2;
                    else
                        if (name.equals("DataRef"))
                            return 3;
                        else
                            if (name.equals("tlparen"))
                                return 4;
                            else
                                if (name.equals("SectionSubscriptList"))
                                    return 5;
                                else
                                    if (name.equals("trparen"))
                                        return 6;
                                    else
                                        if (name.equals("SubstringRange"))
                                            return 7;
                                        else
                                            if (name.equals("tequals"))
                                                return 8;
                                            else
                                                if (name.equals("Expr"))
                                                    return 9;
                                                else
                                                    if (name.equals("teos"))
                                                        return 10;
                                                    else
                                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tpercent:T_PERCENT DataRef:<DataRef> <AssignmentStmt@47> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production605
         */
        protected ASTAssignmentStmtNode userAction(ASTLblDefNode v1, ASTNameNode v2, Token v3, ASTDataRefNode v4, Token v5, ASTSectionSubscriptListNode v6, Token v7, ASTSubstringRangeNode v8, Token v9, ASTExprNode v10, Token v11)
        {
            return null;
        }
    }
    public static final Productions.Production605Production PRODUCTION605 = Production605Production.getInstance();

    public static class Production606Production extends Production
    {
        private Production606Production() {;} // Singleton
        private static Production606Production singletonInstance = null;
        public static final Production606Production getInstance() { if (singletonInstance == null) singletonInstance = new Production606Production(); return singletonInstance; }

        public String getDescription() { return "<AssignmentStmt> ::= Name:<Name> tlparen:T_LPAREN SFExprList:<SFExprList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production606"; }

        /**
         * Reduce by <AssignmentStmt> ::= Name:<Name> tlparen:T_LPAREN SFExprList:<SFExprList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production606
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssignmentStmt> ::= Name:<Name> tlparen:T_LPAREN SFExprList:<SFExprList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production606
            Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v8 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDataRefNode v6 = (ASTDataRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSFExprListNode v3 = (ASTSFExprListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAssignmentStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8, v9);

            // The production has 9 symbols on its RHS
            parser.reduce(Nonterminal.AssignmentStmtNonterminal.getInstance(), 9, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("SFExprList"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("tpercent"))
                                return 4;
                            else
                                if (name.equals("DataRef"))
                                    return 5;
                                else
                                    if (name.equals("tequals"))
                                        return 6;
                                    else
                                        if (name.equals("Expr"))
                                            return 7;
                                        else
                                            if (name.equals("teos"))
                                                return 8;
                                            else
                                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AssignmentStmt> ::= Name:<Name> tlparen:T_LPAREN SFExprList:<SFExprList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production606
         */
        protected ASTAssignmentStmtNode userAction(ASTNameNode v1, Token v2, ASTSFExprListNode v3, Token v4, Token v5, ASTDataRefNode v6, Token v7, ASTExprNode v8, Token v9)
        {
            return null;
        }
    }
    public static final Productions.Production606Production PRODUCTION606 = Production606Production.getInstance();

    public static class Production607Production extends Production
    {
        private Production607Production() {;} // Singleton
        private static Production607Production singletonInstance = null;
        public static final Production607Production getInstance() { if (singletonInstance == null) singletonInstance = new Production607Production(); return singletonInstance; }

        public String getDescription() { return "<AssignmentStmt> ::= Name:<Name> tlparen:T_LPAREN SFExprList:<SFExprList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> <AssignmentStmt@49> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production607"; }

        /**
         * Reduce by <AssignmentStmt> ::= Name:<Name> tlparen:T_LPAREN SFExprList:<SFExprList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> <AssignmentStmt@49> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production607
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssignmentStmt> ::= Name:<Name> tlparen:T_LPAREN SFExprList:<SFExprList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> <AssignmentStmt@49> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production607
            Token v13 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v12 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v11 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubstringRangeNode v10 = (ASTSubstringRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v8 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDataRefNode v6 = (ASTDataRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSFExprListNode v3 = (ASTSFExprListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAssignmentStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13);

            // The production has 10 symbols on its RHS
            parser.reduce(Nonterminal.AssignmentStmtNonterminal.getInstance(), 10, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("SFExprList"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("tpercent"))
                                return 4;
                            else
                                if (name.equals("DataRef"))
                                    return 5;
                                else
                                    if (name.equals("tlparen2"))
                                        return 6;
                                    else
                                        if (name.equals("SectionSubscriptList"))
                                            return 7;
                                        else
                                            if (name.equals("trparen2"))
                                                return 8;
                                            else
                                                if (name.equals("SubstringRange"))
                                                    return 9;
                                                else
                                                    if (name.equals("tequals"))
                                                        return 10;
                                                    else
                                                        if (name.equals("Expr"))
                                                            return 11;
                                                        else
                                                            if (name.equals("teos"))
                                                                return 12;
                                                            else
                                                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AssignmentStmt> ::= Name:<Name> tlparen:T_LPAREN SFExprList:<SFExprList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> <AssignmentStmt@49> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production607
         */
        protected ASTAssignmentStmtNode userAction(ASTNameNode v1, Token v2, ASTSFExprListNode v3, Token v4, Token v5, ASTDataRefNode v6, Token v7, ASTSectionSubscriptListNode v8, Token v9, ASTSubstringRangeNode v10, Token v11, ASTExprNode v12, Token v13)
        {
            return null;
        }
    }
    public static final Productions.Production607Production PRODUCTION607 = Production607Production.getInstance();

    public static class Production608Production extends Production
    {
        private Production608Production() {;} // Singleton
        private static Production608Production singletonInstance = null;
        public static final Production608Production getInstance() { if (singletonInstance == null) singletonInstance = new Production608Production(); return singletonInstance; }

        public String getDescription() { return "<AssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tlparen:T_LPAREN SFExprList:<SFExprList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production608"; }

        /**
         * Reduce by <AssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tlparen:T_LPAREN SFExprList:<SFExprList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production608
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tlparen:T_LPAREN SFExprList:<SFExprList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production608
            Token v10 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v9 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDataRefNode v7 = (ASTDataRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSFExprListNode v4 = (ASTSFExprListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v2 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAssignmentStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);

            // The production has 10 symbols on its RHS
            parser.reduce(Nonterminal.AssignmentStmtNonterminal.getInstance(), 10, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("Name"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("SFExprList"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("tpercent"))
                                    return 5;
                                else
                                    if (name.equals("DataRef"))
                                        return 6;
                                    else
                                        if (name.equals("tequals"))
                                            return 7;
                                        else
                                            if (name.equals("Expr"))
                                                return 8;
                                            else
                                                if (name.equals("teos"))
                                                    return 9;
                                                else
                                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tlparen:T_LPAREN SFExprList:<SFExprList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production608
         */
        protected ASTAssignmentStmtNode userAction(ASTLblDefNode v1, ASTNameNode v2, Token v3, ASTSFExprListNode v4, Token v5, Token v6, ASTDataRefNode v7, Token v8, ASTExprNode v9, Token v10)
        {
            return null;
        }
    }
    public static final Productions.Production608Production PRODUCTION608 = Production608Production.getInstance();

    public static class Production609Production extends Production
    {
        private Production609Production() {;} // Singleton
        private static Production609Production singletonInstance = null;
        public static final Production609Production getInstance() { if (singletonInstance == null) singletonInstance = new Production609Production(); return singletonInstance; }

        public String getDescription() { return "<AssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tlparen:T_LPAREN SFExprList:<SFExprList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> <AssignmentStmt@49> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production609"; }

        /**
         * Reduce by <AssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tlparen:T_LPAREN SFExprList:<SFExprList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> <AssignmentStmt@49> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production609
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tlparen:T_LPAREN SFExprList:<SFExprList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> <AssignmentStmt@49> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production609
            Token v14 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v13 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v12 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubstringRangeNode v11 = (ASTSubstringRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v10 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v9 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDataRefNode v7 = (ASTDataRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSFExprListNode v4 = (ASTSFExprListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v2 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAssignmentStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14);

            // The production has 11 symbols on its RHS
            parser.reduce(Nonterminal.AssignmentStmtNonterminal.getInstance(), 11, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("Name"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("SFExprList"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("tpercent"))
                                    return 5;
                                else
                                    if (name.equals("DataRef"))
                                        return 6;
                                    else
                                        if (name.equals("tlparen2"))
                                            return 7;
                                        else
                                            if (name.equals("SectionSubscriptList"))
                                                return 8;
                                            else
                                                if (name.equals("trparen2"))
                                                    return 9;
                                                else
                                                    if (name.equals("SubstringRange"))
                                                        return 10;
                                                    else
                                                        if (name.equals("tequals"))
                                                            return 11;
                                                        else
                                                            if (name.equals("Expr"))
                                                                return 12;
                                                            else
                                                                if (name.equals("teos"))
                                                                    return 13;
                                                                else
                                                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tlparen:T_LPAREN SFExprList:<SFExprList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> <AssignmentStmt@49> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production609
         */
        protected ASTAssignmentStmtNode userAction(ASTLblDefNode v1, ASTNameNode v2, Token v3, ASTSFExprListNode v4, Token v5, Token v6, ASTDataRefNode v7, Token v8, ASTSectionSubscriptListNode v9, Token v10, ASTSubstringRangeNode v11, Token v12, ASTExprNode v13, Token v14)
        {
            return null;
        }
    }
    public static final Productions.Production609Production PRODUCTION609 = Production609Production.getInstance();

    public static class Production610Production extends Production
    {
        private Production610Production() {;} // Singleton
        private static Production610Production singletonInstance = null;
        public static final Production610Production getInstance() { if (singletonInstance == null) singletonInstance = new Production610Production(); return singletonInstance; }

        public String getDescription() { return "<AssignmentStmt> ::= Name:<Name> tlparen:T_LPAREN SFDummyArgNameList:<SFDummyArgNameList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production610"; }

        /**
         * Reduce by <AssignmentStmt> ::= Name:<Name> tlparen:T_LPAREN SFDummyArgNameList:<SFDummyArgNameList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production610
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssignmentStmt> ::= Name:<Name> tlparen:T_LPAREN SFDummyArgNameList:<SFDummyArgNameList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production610
            Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v8 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDataRefNode v6 = (ASTDataRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSFDummyArgNameListNode v3 = (ASTSFDummyArgNameListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAssignmentStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8, v9);

            // The production has 9 symbols on its RHS
            parser.reduce(Nonterminal.AssignmentStmtNonterminal.getInstance(), 9, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("SFDummyArgNameList"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("tpercent"))
                                return 4;
                            else
                                if (name.equals("DataRef"))
                                    return 5;
                                else
                                    if (name.equals("tequals"))
                                        return 6;
                                    else
                                        if (name.equals("Expr"))
                                            return 7;
                                        else
                                            if (name.equals("teos"))
                                                return 8;
                                            else
                                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AssignmentStmt> ::= Name:<Name> tlparen:T_LPAREN SFDummyArgNameList:<SFDummyArgNameList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production610
         */
        protected ASTAssignmentStmtNode userAction(ASTNameNode v1, Token v2, ASTSFDummyArgNameListNode v3, Token v4, Token v5, ASTDataRefNode v6, Token v7, ASTExprNode v8, Token v9)
        {
            return null;
        }
    }
    public static final Productions.Production610Production PRODUCTION610 = Production610Production.getInstance();

    public static class Production611Production extends Production
    {
        private Production611Production() {;} // Singleton
        private static Production611Production singletonInstance = null;
        public static final Production611Production getInstance() { if (singletonInstance == null) singletonInstance = new Production611Production(); return singletonInstance; }

        public String getDescription() { return "<AssignmentStmt> ::= Name:<Name> tlparen:T_LPAREN SFDummyArgNameList:<SFDummyArgNameList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> <AssignmentStmt@51> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production611"; }

        /**
         * Reduce by <AssignmentStmt> ::= Name:<Name> tlparen:T_LPAREN SFDummyArgNameList:<SFDummyArgNameList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> <AssignmentStmt@51> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production611
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssignmentStmt> ::= Name:<Name> tlparen:T_LPAREN SFDummyArgNameList:<SFDummyArgNameList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> <AssignmentStmt@51> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production611
            Token v13 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v12 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v11 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubstringRangeNode v10 = (ASTSubstringRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v8 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDataRefNode v6 = (ASTDataRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSFDummyArgNameListNode v3 = (ASTSFDummyArgNameListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAssignmentStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13);

            // The production has 10 symbols on its RHS
            parser.reduce(Nonterminal.AssignmentStmtNonterminal.getInstance(), 10, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("SFDummyArgNameList"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("tpercent"))
                                return 4;
                            else
                                if (name.equals("DataRef"))
                                    return 5;
                                else
                                    if (name.equals("tlparen2"))
                                        return 6;
                                    else
                                        if (name.equals("SectionSubscriptList"))
                                            return 7;
                                        else
                                            if (name.equals("trparen2"))
                                                return 8;
                                            else
                                                if (name.equals("SubstringRange"))
                                                    return 9;
                                                else
                                                    if (name.equals("tequals"))
                                                        return 10;
                                                    else
                                                        if (name.equals("Expr"))
                                                            return 11;
                                                        else
                                                            if (name.equals("teos"))
                                                                return 12;
                                                            else
                                                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AssignmentStmt> ::= Name:<Name> tlparen:T_LPAREN SFDummyArgNameList:<SFDummyArgNameList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> <AssignmentStmt@51> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production611
         */
        protected ASTAssignmentStmtNode userAction(ASTNameNode v1, Token v2, ASTSFDummyArgNameListNode v3, Token v4, Token v5, ASTDataRefNode v6, Token v7, ASTSectionSubscriptListNode v8, Token v9, ASTSubstringRangeNode v10, Token v11, ASTExprNode v12, Token v13)
        {
            return null;
        }
    }
    public static final Productions.Production611Production PRODUCTION611 = Production611Production.getInstance();

    public static class Production612Production extends Production
    {
        private Production612Production() {;} // Singleton
        private static Production612Production singletonInstance = null;
        public static final Production612Production getInstance() { if (singletonInstance == null) singletonInstance = new Production612Production(); return singletonInstance; }

        public String getDescription() { return "<AssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tlparen:T_LPAREN SFDummyArgNameList:<SFDummyArgNameList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production612"; }

        /**
         * Reduce by <AssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tlparen:T_LPAREN SFDummyArgNameList:<SFDummyArgNameList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production612
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tlparen:T_LPAREN SFDummyArgNameList:<SFDummyArgNameList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production612
            Token v10 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v9 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDataRefNode v7 = (ASTDataRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSFDummyArgNameListNode v4 = (ASTSFDummyArgNameListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v2 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAssignmentStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);

            // The production has 10 symbols on its RHS
            parser.reduce(Nonterminal.AssignmentStmtNonterminal.getInstance(), 10, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("Name"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("SFDummyArgNameList"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("tpercent"))
                                    return 5;
                                else
                                    if (name.equals("DataRef"))
                                        return 6;
                                    else
                                        if (name.equals("tequals"))
                                            return 7;
                                        else
                                            if (name.equals("Expr"))
                                                return 8;
                                            else
                                                if (name.equals("teos"))
                                                    return 9;
                                                else
                                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tlparen:T_LPAREN SFDummyArgNameList:<SFDummyArgNameList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production612
         */
        protected ASTAssignmentStmtNode userAction(ASTLblDefNode v1, ASTNameNode v2, Token v3, ASTSFDummyArgNameListNode v4, Token v5, Token v6, ASTDataRefNode v7, Token v8, ASTExprNode v9, Token v10)
        {
            return null;
        }
    }
    public static final Productions.Production612Production PRODUCTION612 = Production612Production.getInstance();

    public static class Production613Production extends Production
    {
        private Production613Production() {;} // Singleton
        private static Production613Production singletonInstance = null;
        public static final Production613Production getInstance() { if (singletonInstance == null) singletonInstance = new Production613Production(); return singletonInstance; }

        public String getDescription() { return "<AssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tlparen:T_LPAREN SFDummyArgNameList:<SFDummyArgNameList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> <AssignmentStmt@51> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production613"; }

        /**
         * Reduce by <AssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tlparen:T_LPAREN SFDummyArgNameList:<SFDummyArgNameList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> <AssignmentStmt@51> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production613
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tlparen:T_LPAREN SFDummyArgNameList:<SFDummyArgNameList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> <AssignmentStmt@51> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production613
            Token v14 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v13 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v12 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubstringRangeNode v11 = (ASTSubstringRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v10 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v9 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDataRefNode v7 = (ASTDataRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSFDummyArgNameListNode v4 = (ASTSFDummyArgNameListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v2 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAssignmentStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14);

            // The production has 11 symbols on its RHS
            parser.reduce(Nonterminal.AssignmentStmtNonterminal.getInstance(), 11, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("Name"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("SFDummyArgNameList"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("tpercent"))
                                    return 5;
                                else
                                    if (name.equals("DataRef"))
                                        return 6;
                                    else
                                        if (name.equals("tlparen2"))
                                            return 7;
                                        else
                                            if (name.equals("SectionSubscriptList"))
                                                return 8;
                                            else
                                                if (name.equals("trparen2"))
                                                    return 9;
                                                else
                                                    if (name.equals("SubstringRange"))
                                                        return 10;
                                                    else
                                                        if (name.equals("tequals"))
                                                            return 11;
                                                        else
                                                            if (name.equals("Expr"))
                                                                return 12;
                                                            else
                                                                if (name.equals("teos"))
                                                                    return 13;
                                                                else
                                                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tlparen:T_LPAREN SFDummyArgNameList:<SFDummyArgNameList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> <AssignmentStmt@51> tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production613
         */
        protected ASTAssignmentStmtNode userAction(ASTLblDefNode v1, ASTNameNode v2, Token v3, ASTSFDummyArgNameListNode v4, Token v5, Token v6, ASTDataRefNode v7, Token v8, ASTSectionSubscriptListNode v9, Token v10, ASTSubstringRangeNode v11, Token v12, ASTExprNode v13, Token v14)
        {
            return null;
        }
    }
    public static final Productions.Production613Production PRODUCTION613 = Production613Production.getInstance();

    public static class Production614Production extends Production
    {
        private Production614Production() {;} // Singleton
        private static Production614Production singletonInstance = null;
        public static final Production614Production getInstance() { if (singletonInstance == null) singletonInstance = new Production614Production(); return singletonInstance; }

        public String getDescription() { return "<SFExprList> ::= tcolon:T_COLON  :production614"; }

        /**
         * Reduce by <SFExprList> ::= tcolon:T_COLON  :production614
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SFExprList> ::= tcolon:T_COLON  :production614
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSFExprListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SFExprListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tcolon"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SFExprList> ::= tcolon:T_COLON  :production614
         */
        protected ASTSFExprListNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production614Production PRODUCTION614 = Production614Production.getInstance();

    public static class Production615Production extends Production
    {
        private Production615Production() {;} // Singleton
        private static Production615Production singletonInstance = null;
        public static final Production615Production getInstance() { if (singletonInstance == null) singletonInstance = new Production615Production(); return singletonInstance; }

        public String getDescription() { return "<SFExprList> ::= tcolon:T_COLON Expr:<Expr>  :production615"; }

        /**
         * Reduce by <SFExprList> ::= tcolon:T_COLON Expr:<Expr>  :production615
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SFExprList> ::= tcolon:T_COLON Expr:<Expr>  :production615
            ASTExprNode v2 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSFExprListNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.SFExprListNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tcolon"))
                return 0;
            else
                if (name.equals("Expr"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SFExprList> ::= tcolon:T_COLON Expr:<Expr>  :production615
         */
        protected ASTSFExprListNode userAction(Token v1, ASTExprNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production615Production PRODUCTION615 = Production615Production.getInstance();

    public static class Production616Production extends Production
    {
        private Production616Production() {;} // Singleton
        private static Production616Production singletonInstance = null;
        public static final Production616Production getInstance() { if (singletonInstance == null) singletonInstance = new Production616Production(); return singletonInstance; }

        public String getDescription() { return "<SFExprList> ::= SFExpr:<SFExpr>  :production616"; }

        /**
         * Reduce by <SFExprList> ::= SFExpr:<SFExpr>  :production616
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SFExprList> ::= SFExpr:<SFExpr>  :production616
            ASTSFExprNode v1 = (ASTSFExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSFExprListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SFExprListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SFExpr"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SFExprList> ::= SFExpr:<SFExpr>  :production616
         */
        protected ASTSFExprListNode userAction(ASTSFExprNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production616Production PRODUCTION616 = Production616Production.getInstance();

    public static class Production617Production extends Production
    {
        private Production617Production() {;} // Singleton
        private static Production617Production singletonInstance = null;
        public static final Production617Production getInstance() { if (singletonInstance == null) singletonInstance = new Production617Production(); return singletonInstance; }

        public String getDescription() { return "<SFExprList> ::= SFExpr:<SFExpr> tcolon:T_COLON  :production617"; }

        /**
         * Reduce by <SFExprList> ::= SFExpr:<SFExpr> tcolon:T_COLON  :production617
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SFExprList> ::= SFExpr:<SFExpr> tcolon:T_COLON  :production617
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSFExprNode v1 = (ASTSFExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSFExprListNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.SFExprListNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SFExpr"))
                return 0;
            else
                if (name.equals("tcolon"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SFExprList> ::= SFExpr:<SFExpr> tcolon:T_COLON  :production617
         */
        protected ASTSFExprListNode userAction(ASTSFExprNode v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production617Production PRODUCTION617 = Production617Production.getInstance();

    public static class Production618Production extends Production
    {
        private Production618Production() {;} // Singleton
        private static Production618Production singletonInstance = null;
        public static final Production618Production getInstance() { if (singletonInstance == null) singletonInstance = new Production618Production(); return singletonInstance; }

        public String getDescription() { return "<SFExprList> ::= SFExpr:<SFExpr> tcolon:T_COLON Expr:<Expr>  :production618"; }

        /**
         * Reduce by <SFExprList> ::= SFExpr:<SFExpr> tcolon:T_COLON Expr:<Expr>  :production618
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SFExprList> ::= SFExpr:<SFExpr> tcolon:T_COLON Expr:<Expr>  :production618
            ASTExprNode v3 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSFExprNode v1 = (ASTSFExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSFExprListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.SFExprListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SFExpr"))
                return 0;
            else
                if (name.equals("tcolon"))
                    return 1;
                else
                    if (name.equals("Expr"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SFExprList> ::= SFExpr:<SFExpr> tcolon:T_COLON Expr:<Expr>  :production618
         */
        protected ASTSFExprListNode userAction(ASTSFExprNode v1, Token v2, ASTExprNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production618Production PRODUCTION618 = Production618Production.getInstance();

    public static class Production619Production extends Production
    {
        private Production619Production() {;} // Singleton
        private static Production619Production singletonInstance = null;
        public static final Production619Production getInstance() { if (singletonInstance == null) singletonInstance = new Production619Production(); return singletonInstance; }

        public String getDescription() { return "<SFExprList> ::= SFExprList:<SFExprList> tcomma:T_COMMA SectionSubscript:<SectionSubscript>  :production619"; }

        /**
         * Reduce by <SFExprList> ::= SFExprList:<SFExprList> tcomma:T_COMMA SectionSubscript:<SectionSubscript>  :production619
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SFExprList> ::= SFExprList:<SFExprList> tcomma:T_COMMA SectionSubscript:<SectionSubscript>  :production619
            ASTSectionSubscriptNode v3 = (ASTSectionSubscriptNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSFExprListNode v1 = (ASTSFExprListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSFExprListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.SFExprListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SFExprList"))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("SectionSubscript"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SFExprList> ::= SFExprList:<SFExprList> tcomma:T_COMMA SectionSubscript:<SectionSubscript>  :production619
         */
        protected ASTSFExprListNode userAction(ASTSFExprListNode v1, Token v2, ASTSectionSubscriptNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production619Production PRODUCTION619 = Production619Production.getInstance();

    public static class Production620Production extends Production
    {
        private Production620Production() {;} // Singleton
        private static Production620Production singletonInstance = null;
        public static final Production620Production getInstance() { if (singletonInstance == null) singletonInstance = new Production620Production(); return singletonInstance; }

        public String getDescription() { return "<SFExprList> ::= SFDummyArgNameList:<SFDummyArgNameList> tcomma:T_COMMA tcolon:T_COLON  :production620"; }

        /**
         * Reduce by <SFExprList> ::= SFDummyArgNameList:<SFDummyArgNameList> tcomma:T_COMMA tcolon:T_COLON  :production620
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SFExprList> ::= SFDummyArgNameList:<SFDummyArgNameList> tcomma:T_COMMA tcolon:T_COLON  :production620
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSFDummyArgNameListNode v1 = (ASTSFDummyArgNameListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSFExprListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.SFExprListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SFDummyArgNameList"))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("tcolon"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SFExprList> ::= SFDummyArgNameList:<SFDummyArgNameList> tcomma:T_COMMA tcolon:T_COLON  :production620
         */
        protected ASTSFExprListNode userAction(ASTSFDummyArgNameListNode v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production620Production PRODUCTION620 = Production620Production.getInstance();

    public static class Production621Production extends Production
    {
        private Production621Production() {;} // Singleton
        private static Production621Production singletonInstance = null;
        public static final Production621Production getInstance() { if (singletonInstance == null) singletonInstance = new Production621Production(); return singletonInstance; }

        public String getDescription() { return "<SFExprList> ::= SFDummyArgNameList:<SFDummyArgNameList> tcomma:T_COMMA tcolon:T_COLON Expr:<Expr>  :production621"; }

        /**
         * Reduce by <SFExprList> ::= SFDummyArgNameList:<SFDummyArgNameList> tcomma:T_COMMA tcolon:T_COLON Expr:<Expr>  :production621
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SFExprList> ::= SFDummyArgNameList:<SFDummyArgNameList> tcomma:T_COMMA tcolon:T_COLON Expr:<Expr>  :production621
            ASTExprNode v4 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSFDummyArgNameListNode v1 = (ASTSFDummyArgNameListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSFExprListNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.SFExprListNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SFDummyArgNameList"))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("tcolon"))
                        return 2;
                    else
                        if (name.equals("Expr"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SFExprList> ::= SFDummyArgNameList:<SFDummyArgNameList> tcomma:T_COMMA tcolon:T_COLON Expr:<Expr>  :production621
         */
        protected ASTSFExprListNode userAction(ASTSFDummyArgNameListNode v1, Token v2, Token v3, ASTExprNode v4)
        {
            return null;
        }
    }
    public static final Productions.Production621Production PRODUCTION621 = Production621Production.getInstance();

    public static class Production622Production extends Production
    {
        private Production622Production() {;} // Singleton
        private static Production622Production singletonInstance = null;
        public static final Production622Production getInstance() { if (singletonInstance == null) singletonInstance = new Production622Production(); return singletonInstance; }

        public String getDescription() { return "<SFExprList> ::= SFDummyArgNameList:<SFDummyArgNameList> tcomma:T_COMMA SFExpr:<SFExpr>  :production622"; }

        /**
         * Reduce by <SFExprList> ::= SFDummyArgNameList:<SFDummyArgNameList> tcomma:T_COMMA SFExpr:<SFExpr>  :production622
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SFExprList> ::= SFDummyArgNameList:<SFDummyArgNameList> tcomma:T_COMMA SFExpr:<SFExpr>  :production622
            ASTSFExprNode v3 = (ASTSFExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSFDummyArgNameListNode v1 = (ASTSFDummyArgNameListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSFExprListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.SFExprListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SFDummyArgNameList"))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("SFExpr"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SFExprList> ::= SFDummyArgNameList:<SFDummyArgNameList> tcomma:T_COMMA SFExpr:<SFExpr>  :production622
         */
        protected ASTSFExprListNode userAction(ASTSFDummyArgNameListNode v1, Token v2, ASTSFExprNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production622Production PRODUCTION622 = Production622Production.getInstance();

    public static class Production623Production extends Production
    {
        private Production623Production() {;} // Singleton
        private static Production623Production singletonInstance = null;
        public static final Production623Production getInstance() { if (singletonInstance == null) singletonInstance = new Production623Production(); return singletonInstance; }

        public String getDescription() { return "<SFExprList> ::= SFDummyArgNameList:<SFDummyArgNameList> tcomma:T_COMMA SFExpr:<SFExpr> tcolon:T_COLON  :production623"; }

        /**
         * Reduce by <SFExprList> ::= SFDummyArgNameList:<SFDummyArgNameList> tcomma:T_COMMA SFExpr:<SFExpr> tcolon:T_COLON  :production623
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SFExprList> ::= SFDummyArgNameList:<SFDummyArgNameList> tcomma:T_COMMA SFExpr:<SFExpr> tcolon:T_COLON  :production623
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSFExprNode v3 = (ASTSFExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSFDummyArgNameListNode v1 = (ASTSFDummyArgNameListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSFExprListNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.SFExprListNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SFDummyArgNameList"))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("SFExpr"))
                        return 2;
                    else
                        if (name.equals("tcolon"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SFExprList> ::= SFDummyArgNameList:<SFDummyArgNameList> tcomma:T_COMMA SFExpr:<SFExpr> tcolon:T_COLON  :production623
         */
        protected ASTSFExprListNode userAction(ASTSFDummyArgNameListNode v1, Token v2, ASTSFExprNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production623Production PRODUCTION623 = Production623Production.getInstance();

    public static class Production624Production extends Production
    {
        private Production624Production() {;} // Singleton
        private static Production624Production singletonInstance = null;
        public static final Production624Production getInstance() { if (singletonInstance == null) singletonInstance = new Production624Production(); return singletonInstance; }

        public String getDescription() { return "<SFExprList> ::= SFDummyArgNameList:<SFDummyArgNameList> tcomma:T_COMMA SFExpr:<SFExpr> tcolon:T_COLON Expr:<Expr>  :production624"; }

        /**
         * Reduce by <SFExprList> ::= SFDummyArgNameList:<SFDummyArgNameList> tcomma:T_COMMA SFExpr:<SFExpr> tcolon:T_COLON Expr:<Expr>  :production624
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SFExprList> ::= SFDummyArgNameList:<SFDummyArgNameList> tcomma:T_COMMA SFExpr:<SFExpr> tcolon:T_COLON Expr:<Expr>  :production624
            ASTExprNode v5 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSFExprNode v3 = (ASTSFExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSFDummyArgNameListNode v1 = (ASTSFDummyArgNameListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSFExprListNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.SFExprListNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SFDummyArgNameList"))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("SFExpr"))
                        return 2;
                    else
                        if (name.equals("tcolon"))
                            return 3;
                        else
                            if (name.equals("Expr"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SFExprList> ::= SFDummyArgNameList:<SFDummyArgNameList> tcomma:T_COMMA SFExpr:<SFExpr> tcolon:T_COLON Expr:<Expr>  :production624
         */
        protected ASTSFExprListNode userAction(ASTSFDummyArgNameListNode v1, Token v2, ASTSFExprNode v3, Token v4, ASTExprNode v5)
        {
            return null;
        }
    }
    public static final Productions.Production624Production PRODUCTION624 = Production624Production.getInstance();

    public static class Production625Production extends Production
    {
        private Production625Production() {;} // Singleton
        private static Production625Production singletonInstance = null;
        public static final Production625Production getInstance() { if (singletonInstance == null) singletonInstance = new Production625Production(); return singletonInstance; }

        public String getDescription() { return "<SFExpr> ::= SFTerm:<SFTerm>  :production625"; }

        /**
         * Reduce by <SFExpr> ::= SFTerm:<SFTerm>  :production625
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SFExpr> ::= SFTerm:<SFTerm>  :production625
            ASTSFTermNode v1 = (ASTSFTermNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSFExprNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SFExprNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SFTerm"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SFExpr> ::= SFTerm:<SFTerm>  :production625
         */
        protected ASTSFExprNode userAction(ASTSFTermNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production625Production PRODUCTION625 = Production625Production.getInstance();

    public static class Production626Production extends Production
    {
        private Production626Production() {;} // Singleton
        private static Production626Production singletonInstance = null;
        public static final Production626Production getInstance() { if (singletonInstance == null) singletonInstance = new Production626Production(); return singletonInstance; }

        public String getDescription() { return "<SFExpr> ::= Sign:<Sign> AddOperand:<AddOperand>  :production626"; }

        /**
         * Reduce by <SFExpr> ::= Sign:<Sign> AddOperand:<AddOperand>  :production626
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SFExpr> ::= Sign:<Sign> AddOperand:<AddOperand>  :production626
            ASTAddOperandNode v2 = (ASTAddOperandNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSignNode v1 = (ASTSignNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSFExprNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.SFExprNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Sign"))
                return 0;
            else
                if (name.equals("AddOperand"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SFExpr> ::= Sign:<Sign> AddOperand:<AddOperand>  :production626
         */
        protected ASTSFExprNode userAction(ASTSignNode v1, ASTAddOperandNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production626Production PRODUCTION626 = Production626Production.getInstance();

    public static class Production627Production extends Production
    {
        private Production627Production() {;} // Singleton
        private static Production627Production singletonInstance = null;
        public static final Production627Production getInstance() { if (singletonInstance == null) singletonInstance = new Production627Production(); return singletonInstance; }

        public String getDescription() { return "<SFExpr> ::= SFExpr:<SFExpr> AddOp:<AddOp> AddOperand:<AddOperand>  :production627"; }

        /**
         * Reduce by <SFExpr> ::= SFExpr:<SFExpr> AddOp:<AddOp> AddOperand:<AddOperand>  :production627
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SFExpr> ::= SFExpr:<SFExpr> AddOp:<AddOp> AddOperand:<AddOperand>  :production627
            ASTAddOperandNode v3 = (ASTAddOperandNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTAddOpNode v2 = (ASTAddOpNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSFExprNode v1 = (ASTSFExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSFExprNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.SFExprNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SFExpr"))
                return 0;
            else
                if (name.equals("AddOp"))
                    return 1;
                else
                    if (name.equals("AddOperand"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SFExpr> ::= SFExpr:<SFExpr> AddOp:<AddOp> AddOperand:<AddOperand>  :production627
         */
        protected ASTSFExprNode userAction(ASTSFExprNode v1, ASTAddOpNode v2, ASTAddOperandNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production627Production PRODUCTION627 = Production627Production.getInstance();

    public static class Production628Production extends Production
    {
        private Production628Production() {;} // Singleton
        private static Production628Production singletonInstance = null;
        public static final Production628Production getInstance() { if (singletonInstance == null) singletonInstance = new Production628Production(); return singletonInstance; }

        public String getDescription() { return "<SFTerm> ::= SFFactor:<SFFactor>  :production628"; }

        /**
         * Reduce by <SFTerm> ::= SFFactor:<SFFactor>  :production628
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SFTerm> ::= SFFactor:<SFFactor>  :production628
            ASTSFFactorNode v1 = (ASTSFFactorNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSFTermNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SFTermNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SFFactor"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SFTerm> ::= SFFactor:<SFFactor>  :production628
         */
        protected ASTSFTermNode userAction(ASTSFFactorNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production628Production PRODUCTION628 = Production628Production.getInstance();

    public static class Production629Production extends Production
    {
        private Production629Production() {;} // Singleton
        private static Production629Production singletonInstance = null;
        public static final Production629Production getInstance() { if (singletonInstance == null) singletonInstance = new Production629Production(); return singletonInstance; }

        public String getDescription() { return "<SFTerm> ::= SFTerm:<SFTerm> MultOp:<MultOp> MultOperand:<MultOperand>  :production629"; }

        /**
         * Reduce by <SFTerm> ::= SFTerm:<SFTerm> MultOp:<MultOp> MultOperand:<MultOperand>  :production629
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SFTerm> ::= SFTerm:<SFTerm> MultOp:<MultOp> MultOperand:<MultOperand>  :production629
            ASTMultOperandNode v3 = (ASTMultOperandNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTMultOpNode v2 = (ASTMultOpNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSFTermNode v1 = (ASTSFTermNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSFTermNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.SFTermNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SFTerm"))
                return 0;
            else
                if (name.equals("MultOp"))
                    return 1;
                else
                    if (name.equals("MultOperand"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SFTerm> ::= SFTerm:<SFTerm> MultOp:<MultOp> MultOperand:<MultOperand>  :production629
         */
        protected ASTSFTermNode userAction(ASTSFTermNode v1, ASTMultOpNode v2, ASTMultOperandNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production629Production PRODUCTION629 = Production629Production.getInstance();

    public static class Production630Production extends Production
    {
        private Production630Production() {;} // Singleton
        private static Production630Production singletonInstance = null;
        public static final Production630Production getInstance() { if (singletonInstance == null) singletonInstance = new Production630Production(); return singletonInstance; }

        public String getDescription() { return "<SFFactor> ::= SFPrimary:<SFPrimary>  :production630"; }

        /**
         * Reduce by <SFFactor> ::= SFPrimary:<SFPrimary>  :production630
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SFFactor> ::= SFPrimary:<SFPrimary>  :production630
            ASTSFPrimaryNode v1 = (ASTSFPrimaryNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSFFactorNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SFFactorNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SFPrimary"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SFFactor> ::= SFPrimary:<SFPrimary>  :production630
         */
        protected ASTSFFactorNode userAction(ASTSFPrimaryNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production630Production PRODUCTION630 = Production630Production.getInstance();

    public static class Production631Production extends Production
    {
        private Production631Production() {;} // Singleton
        private static Production631Production singletonInstance = null;
        public static final Production631Production getInstance() { if (singletonInstance == null) singletonInstance = new Production631Production(); return singletonInstance; }

        public String getDescription() { return "<SFFactor> ::= SFPrimary:<SFPrimary> PowerOp:<PowerOp> MultOperand:<MultOperand>  :production631"; }

        /**
         * Reduce by <SFFactor> ::= SFPrimary:<SFPrimary> PowerOp:<PowerOp> MultOperand:<MultOperand>  :production631
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SFFactor> ::= SFPrimary:<SFPrimary> PowerOp:<PowerOp> MultOperand:<MultOperand>  :production631
            ASTMultOperandNode v3 = (ASTMultOperandNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTPowerOpNode v2 = (ASTPowerOpNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSFPrimaryNode v1 = (ASTSFPrimaryNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSFFactorNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.SFFactorNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SFPrimary"))
                return 0;
            else
                if (name.equals("PowerOp"))
                    return 1;
                else
                    if (name.equals("MultOperand"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SFFactor> ::= SFPrimary:<SFPrimary> PowerOp:<PowerOp> MultOperand:<MultOperand>  :production631
         */
        protected ASTSFFactorNode userAction(ASTSFPrimaryNode v1, ASTPowerOpNode v2, ASTMultOperandNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production631Production PRODUCTION631 = Production631Production.getInstance();

    public static class Production632Production extends Production
    {
        private Production632Production() {;} // Singleton
        private static Production632Production singletonInstance = null;
        public static final Production632Production getInstance() { if (singletonInstance == null) singletonInstance = new Production632Production(); return singletonInstance; }

        public String getDescription() { return "<SFPrimary> ::= ArrayConstructor:<ArrayConstructor>  :production632"; }

        /**
         * Reduce by <SFPrimary> ::= ArrayConstructor:<ArrayConstructor>  :production632
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SFPrimary> ::= ArrayConstructor:<ArrayConstructor>  :production632
            ASTArrayConstructorNode v1 = (ASTArrayConstructorNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSFPrimaryNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SFPrimaryNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ArrayConstructor"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SFPrimary> ::= ArrayConstructor:<ArrayConstructor>  :production632
         */
        protected ASTSFPrimaryNode userAction(ASTArrayConstructorNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production632Production PRODUCTION632 = Production632Production.getInstance();

    public static class Production633Production extends Production
    {
        private Production633Production() {;} // Singleton
        private static Production633Production singletonInstance = null;
        public static final Production633Production getInstance() { if (singletonInstance == null) singletonInstance = new Production633Production(); return singletonInstance; }

        public String getDescription() { return "<SFPrimary> ::= ticon:T_ICON  :production633"; }

        /**
         * Reduce by <SFPrimary> ::= ticon:T_ICON  :production633
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SFPrimary> ::= ticon:T_ICON  :production633
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSFPrimaryNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SFPrimaryNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ticon"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SFPrimary> ::= ticon:T_ICON  :production633
         */
        protected ASTSFPrimaryNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production633Production PRODUCTION633 = Production633Production.getInstance();

    public static class Production634Production extends Production
    {
        private Production634Production() {;} // Singleton
        private static Production634Production singletonInstance = null;
        public static final Production634Production getInstance() { if (singletonInstance == null) singletonInstance = new Production634Production(); return singletonInstance; }

        public String getDescription() { return "<SFPrimary> ::= SFVarName:<SFVarName>  :production634"; }

        /**
         * Reduce by <SFPrimary> ::= SFVarName:<SFVarName>  :production634
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SFPrimary> ::= SFVarName:<SFVarName>  :production634
            ASTSFVarNameNode v1 = (ASTSFVarNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSFPrimaryNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SFPrimaryNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SFVarName"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SFPrimary> ::= SFVarName:<SFVarName>  :production634
         */
        protected ASTSFPrimaryNode userAction(ASTSFVarNameNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production634Production PRODUCTION634 = Production634Production.getInstance();

    public static class Production635Production extends Production
    {
        private Production635Production() {;} // Singleton
        private static Production635Production singletonInstance = null;
        public static final Production635Production getInstance() { if (singletonInstance == null) singletonInstance = new Production635Production(); return singletonInstance; }

        public String getDescription() { return "<SFPrimary> ::= SFDataRef:<SFDataRef>  :production635"; }

        /**
         * Reduce by <SFPrimary> ::= SFDataRef:<SFDataRef>  :production635
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SFPrimary> ::= SFDataRef:<SFDataRef>  :production635
            ASTSFDataRefNode v1 = (ASTSFDataRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSFPrimaryNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SFPrimaryNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SFDataRef"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SFPrimary> ::= SFDataRef:<SFDataRef>  :production635
         */
        protected ASTSFPrimaryNode userAction(ASTSFDataRefNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production635Production PRODUCTION635 = Production635Production.getInstance();

    public static class Production636Production extends Production
    {
        private Production636Production() {;} // Singleton
        private static Production636Production singletonInstance = null;
        public static final Production636Production getInstance() { if (singletonInstance == null) singletonInstance = new Production636Production(); return singletonInstance; }

        public String getDescription() { return "<SFPrimary> ::= FunctionReference:<FunctionReference>  :production636"; }

        /**
         * Reduce by <SFPrimary> ::= FunctionReference:<FunctionReference>  :production636
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SFPrimary> ::= FunctionReference:<FunctionReference>  :production636
            ASTFunctionReferenceNode v1 = (ASTFunctionReferenceNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSFPrimaryNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SFPrimaryNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("FunctionReference"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SFPrimary> ::= FunctionReference:<FunctionReference>  :production636
         */
        protected ASTSFPrimaryNode userAction(ASTFunctionReferenceNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production636Production PRODUCTION636 = Production636Production.getInstance();

    public static class Production637Production extends Production
    {
        private Production637Production() {;} // Singleton
        private static Production637Production singletonInstance = null;
        public static final Production637Production getInstance() { if (singletonInstance == null) singletonInstance = new Production637Production(); return singletonInstance; }

        public String getDescription() { return "<SFPrimary> ::= tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN  :production637"; }

        /**
         * Reduce by <SFPrimary> ::= tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN  :production637
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SFPrimary> ::= tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN  :production637
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v2 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSFPrimaryNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.SFPrimaryNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("Expr"))
                    return 1;
                else
                    if (name.equals("trparen"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SFPrimary> ::= tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN  :production637
         */
        protected ASTSFPrimaryNode userAction(Token v1, ASTExprNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production637Production PRODUCTION637 = Production637Production.getInstance();

    public static class Production638Production extends Production
    {
        private Production638Production() {;} // Singleton
        private static Production638Production singletonInstance = null;
        public static final Production638Production getInstance() { if (singletonInstance == null) singletonInstance = new Production638Production(); return singletonInstance; }

        public String getDescription() { return "<PointerAssignmentStmt> ::= Name:<Name> teqgreaterthan:T_EQGREATERTHAN Target:<Target> teos:T_EOS  :production638"; }

        /**
         * Reduce by <PointerAssignmentStmt> ::= Name:<Name> teqgreaterthan:T_EQGREATERTHAN Target:<Target> teos:T_EOS  :production638
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PointerAssignmentStmt> ::= Name:<Name> teqgreaterthan:T_EQGREATERTHAN Target:<Target> teos:T_EOS  :production638
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTTargetNode v3 = (ASTTargetNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPointerAssignmentStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.PointerAssignmentStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("teqgreaterthan"))
                    return 1;
                else
                    if (name.equals("Target"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PointerAssignmentStmt> ::= Name:<Name> teqgreaterthan:T_EQGREATERTHAN Target:<Target> teos:T_EOS  :production638
         */
        protected ASTPointerAssignmentStmtNode userAction(ASTNameNode v1, Token v2, ASTTargetNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production638Production PRODUCTION638 = Production638Production.getInstance();

    public static class Production639Production extends Production
    {
        private Production639Production() {;} // Singleton
        private static Production639Production singletonInstance = null;
        public static final Production639Production getInstance() { if (singletonInstance == null) singletonInstance = new Production639Production(); return singletonInstance; }

        public String getDescription() { return "<PointerAssignmentStmt> ::= LblDef:<LblDef> Name:<Name> teqgreaterthan:T_EQGREATERTHAN Target:<Target> teos:T_EOS  :production639"; }

        /**
         * Reduce by <PointerAssignmentStmt> ::= LblDef:<LblDef> Name:<Name> teqgreaterthan:T_EQGREATERTHAN Target:<Target> teos:T_EOS  :production639
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PointerAssignmentStmt> ::= LblDef:<LblDef> Name:<Name> teqgreaterthan:T_EQGREATERTHAN Target:<Target> teos:T_EOS  :production639
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTTargetNode v4 = (ASTTargetNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v2 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPointerAssignmentStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.PointerAssignmentStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("Name"))
                    return 1;
                else
                    if (name.equals("teqgreaterthan"))
                        return 2;
                    else
                        if (name.equals("Target"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PointerAssignmentStmt> ::= LblDef:<LblDef> Name:<Name> teqgreaterthan:T_EQGREATERTHAN Target:<Target> teos:T_EOS  :production639
         */
        protected ASTPointerAssignmentStmtNode userAction(ASTLblDefNode v1, ASTNameNode v2, Token v3, ASTTargetNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production639Production PRODUCTION639 = Production639Production.getInstance();

    public static class Production640Production extends Production
    {
        private Production640Production() {;} // Singleton
        private static Production640Production singletonInstance = null;
        public static final Production640Production getInstance() { if (singletonInstance == null) singletonInstance = new Production640Production(); return singletonInstance; }

        public String getDescription() { return "<PointerAssignmentStmt> ::= Name:<Name> tpercent:T_PERCENT DataRef:<DataRef> teqgreaterthan:T_EQGREATERTHAN Target:<Target> teos:T_EOS  :production640"; }

        /**
         * Reduce by <PointerAssignmentStmt> ::= Name:<Name> tpercent:T_PERCENT DataRef:<DataRef> teqgreaterthan:T_EQGREATERTHAN Target:<Target> teos:T_EOS  :production640
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PointerAssignmentStmt> ::= Name:<Name> tpercent:T_PERCENT DataRef:<DataRef> teqgreaterthan:T_EQGREATERTHAN Target:<Target> teos:T_EOS  :production640
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTTargetNode v5 = (ASTTargetNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDataRefNode v3 = (ASTDataRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPointerAssignmentStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.PointerAssignmentStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tpercent"))
                    return 1;
                else
                    if (name.equals("DataRef"))
                        return 2;
                    else
                        if (name.equals("teqgreaterthan"))
                            return 3;
                        else
                            if (name.equals("Target"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PointerAssignmentStmt> ::= Name:<Name> tpercent:T_PERCENT DataRef:<DataRef> teqgreaterthan:T_EQGREATERTHAN Target:<Target> teos:T_EOS  :production640
         */
        protected ASTPointerAssignmentStmtNode userAction(ASTNameNode v1, Token v2, ASTDataRefNode v3, Token v4, ASTTargetNode v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production640Production PRODUCTION640 = Production640Production.getInstance();

    public static class Production641Production extends Production
    {
        private Production641Production() {;} // Singleton
        private static Production641Production singletonInstance = null;
        public static final Production641Production getInstance() { if (singletonInstance == null) singletonInstance = new Production641Production(); return singletonInstance; }

        public String getDescription() { return "<PointerAssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tpercent:T_PERCENT DataRef:<DataRef> teqgreaterthan:T_EQGREATERTHAN Target:<Target> teos:T_EOS  :production641"; }

        /**
         * Reduce by <PointerAssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tpercent:T_PERCENT DataRef:<DataRef> teqgreaterthan:T_EQGREATERTHAN Target:<Target> teos:T_EOS  :production641
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PointerAssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tpercent:T_PERCENT DataRef:<DataRef> teqgreaterthan:T_EQGREATERTHAN Target:<Target> teos:T_EOS  :production641
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTTargetNode v6 = (ASTTargetNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDataRefNode v4 = (ASTDataRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v2 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPointerAssignmentStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7);

            // The production has 7 symbols on its RHS
            parser.reduce(Nonterminal.PointerAssignmentStmtNonterminal.getInstance(), 7, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("Name"))
                    return 1;
                else
                    if (name.equals("tpercent"))
                        return 2;
                    else
                        if (name.equals("DataRef"))
                            return 3;
                        else
                            if (name.equals("teqgreaterthan"))
                                return 4;
                            else
                                if (name.equals("Target"))
                                    return 5;
                                else
                                    if (name.equals("teos"))
                                        return 6;
                                    else
                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PointerAssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tpercent:T_PERCENT DataRef:<DataRef> teqgreaterthan:T_EQGREATERTHAN Target:<Target> teos:T_EOS  :production641
         */
        protected ASTPointerAssignmentStmtNode userAction(ASTLblDefNode v1, ASTNameNode v2, Token v3, ASTDataRefNode v4, Token v5, ASTTargetNode v6, Token v7)
        {
            return null;
        }
    }
    public static final Productions.Production641Production PRODUCTION641 = Production641Production.getInstance();

    public static class Production642Production extends Production
    {
        private Production642Production() {;} // Singleton
        private static Production642Production singletonInstance = null;
        public static final Production642Production getInstance() { if (singletonInstance == null) singletonInstance = new Production642Production(); return singletonInstance; }

        public String getDescription() { return "<PointerAssignmentStmt> ::= Name:<Name> tlparen:T_LPAREN SFExprList:<SFExprList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> teqgreaterthan:T_EQGREATERTHAN Target:<Target> teos:T_EOS  :production642"; }

        /**
         * Reduce by <PointerAssignmentStmt> ::= Name:<Name> tlparen:T_LPAREN SFExprList:<SFExprList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> teqgreaterthan:T_EQGREATERTHAN Target:<Target> teos:T_EOS  :production642
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PointerAssignmentStmt> ::= Name:<Name> tlparen:T_LPAREN SFExprList:<SFExprList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> teqgreaterthan:T_EQGREATERTHAN Target:<Target> teos:T_EOS  :production642
            Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTTargetNode v8 = (ASTTargetNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDataRefNode v6 = (ASTDataRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSFExprListNode v3 = (ASTSFExprListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPointerAssignmentStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8, v9);

            // The production has 9 symbols on its RHS
            parser.reduce(Nonterminal.PointerAssignmentStmtNonterminal.getInstance(), 9, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("SFExprList"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("tpercent"))
                                return 4;
                            else
                                if (name.equals("DataRef"))
                                    return 5;
                                else
                                    if (name.equals("teqgreaterthan"))
                                        return 6;
                                    else
                                        if (name.equals("Target"))
                                            return 7;
                                        else
                                            if (name.equals("teos"))
                                                return 8;
                                            else
                                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PointerAssignmentStmt> ::= Name:<Name> tlparen:T_LPAREN SFExprList:<SFExprList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> teqgreaterthan:T_EQGREATERTHAN Target:<Target> teos:T_EOS  :production642
         */
        protected ASTPointerAssignmentStmtNode userAction(ASTNameNode v1, Token v2, ASTSFExprListNode v3, Token v4, Token v5, ASTDataRefNode v6, Token v7, ASTTargetNode v8, Token v9)
        {
            return null;
        }
    }
    public static final Productions.Production642Production PRODUCTION642 = Production642Production.getInstance();

    public static class Production643Production extends Production
    {
        private Production643Production() {;} // Singleton
        private static Production643Production singletonInstance = null;
        public static final Production643Production getInstance() { if (singletonInstance == null) singletonInstance = new Production643Production(); return singletonInstance; }

        public String getDescription() { return "<PointerAssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tlparen:T_LPAREN SFExprList:<SFExprList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> teqgreaterthan:T_EQGREATERTHAN Target:<Target> teos:T_EOS  :production643"; }

        /**
         * Reduce by <PointerAssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tlparen:T_LPAREN SFExprList:<SFExprList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> teqgreaterthan:T_EQGREATERTHAN Target:<Target> teos:T_EOS  :production643
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PointerAssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tlparen:T_LPAREN SFExprList:<SFExprList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> teqgreaterthan:T_EQGREATERTHAN Target:<Target> teos:T_EOS  :production643
            Token v10 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTTargetNode v9 = (ASTTargetNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDataRefNode v7 = (ASTDataRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSFExprListNode v4 = (ASTSFExprListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v2 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPointerAssignmentStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);

            // The production has 10 symbols on its RHS
            parser.reduce(Nonterminal.PointerAssignmentStmtNonterminal.getInstance(), 10, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("Name"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("SFExprList"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("tpercent"))
                                    return 5;
                                else
                                    if (name.equals("DataRef"))
                                        return 6;
                                    else
                                        if (name.equals("teqgreaterthan"))
                                            return 7;
                                        else
                                            if (name.equals("Target"))
                                                return 8;
                                            else
                                                if (name.equals("teos"))
                                                    return 9;
                                                else
                                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PointerAssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tlparen:T_LPAREN SFExprList:<SFExprList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> teqgreaterthan:T_EQGREATERTHAN Target:<Target> teos:T_EOS  :production643
         */
        protected ASTPointerAssignmentStmtNode userAction(ASTLblDefNode v1, ASTNameNode v2, Token v3, ASTSFExprListNode v4, Token v5, Token v6, ASTDataRefNode v7, Token v8, ASTTargetNode v9, Token v10)
        {
            return null;
        }
    }
    public static final Productions.Production643Production PRODUCTION643 = Production643Production.getInstance();

    public static class Production644Production extends Production
    {
        private Production644Production() {;} // Singleton
        private static Production644Production singletonInstance = null;
        public static final Production644Production getInstance() { if (singletonInstance == null) singletonInstance = new Production644Production(); return singletonInstance; }

        public String getDescription() { return "<PointerAssignmentStmt> ::= Name:<Name> tlparen:T_LPAREN SFDummyArgNameList:<SFDummyArgNameList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> teqgreaterthan:T_EQGREATERTHAN Target:<Target> teos:T_EOS  :production644"; }

        /**
         * Reduce by <PointerAssignmentStmt> ::= Name:<Name> tlparen:T_LPAREN SFDummyArgNameList:<SFDummyArgNameList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> teqgreaterthan:T_EQGREATERTHAN Target:<Target> teos:T_EOS  :production644
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PointerAssignmentStmt> ::= Name:<Name> tlparen:T_LPAREN SFDummyArgNameList:<SFDummyArgNameList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> teqgreaterthan:T_EQGREATERTHAN Target:<Target> teos:T_EOS  :production644
            Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTTargetNode v8 = (ASTTargetNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDataRefNode v6 = (ASTDataRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSFDummyArgNameListNode v3 = (ASTSFDummyArgNameListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPointerAssignmentStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8, v9);

            // The production has 9 symbols on its RHS
            parser.reduce(Nonterminal.PointerAssignmentStmtNonterminal.getInstance(), 9, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("SFDummyArgNameList"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("tpercent"))
                                return 4;
                            else
                                if (name.equals("DataRef"))
                                    return 5;
                                else
                                    if (name.equals("teqgreaterthan"))
                                        return 6;
                                    else
                                        if (name.equals("Target"))
                                            return 7;
                                        else
                                            if (name.equals("teos"))
                                                return 8;
                                            else
                                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PointerAssignmentStmt> ::= Name:<Name> tlparen:T_LPAREN SFDummyArgNameList:<SFDummyArgNameList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> teqgreaterthan:T_EQGREATERTHAN Target:<Target> teos:T_EOS  :production644
         */
        protected ASTPointerAssignmentStmtNode userAction(ASTNameNode v1, Token v2, ASTSFDummyArgNameListNode v3, Token v4, Token v5, ASTDataRefNode v6, Token v7, ASTTargetNode v8, Token v9)
        {
            return null;
        }
    }
    public static final Productions.Production644Production PRODUCTION644 = Production644Production.getInstance();

    public static class Production645Production extends Production
    {
        private Production645Production() {;} // Singleton
        private static Production645Production singletonInstance = null;
        public static final Production645Production getInstance() { if (singletonInstance == null) singletonInstance = new Production645Production(); return singletonInstance; }

        public String getDescription() { return "<PointerAssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tlparen:T_LPAREN SFDummyArgNameList:<SFDummyArgNameList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> teqgreaterthan:T_EQGREATERTHAN Target:<Target> teos:T_EOS  :production645"; }

        /**
         * Reduce by <PointerAssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tlparen:T_LPAREN SFDummyArgNameList:<SFDummyArgNameList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> teqgreaterthan:T_EQGREATERTHAN Target:<Target> teos:T_EOS  :production645
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PointerAssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tlparen:T_LPAREN SFDummyArgNameList:<SFDummyArgNameList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> teqgreaterthan:T_EQGREATERTHAN Target:<Target> teos:T_EOS  :production645
            Token v10 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTTargetNode v9 = (ASTTargetNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDataRefNode v7 = (ASTDataRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSFDummyArgNameListNode v4 = (ASTSFDummyArgNameListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v2 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPointerAssignmentStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);

            // The production has 10 symbols on its RHS
            parser.reduce(Nonterminal.PointerAssignmentStmtNonterminal.getInstance(), 10, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("Name"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("SFDummyArgNameList"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("tpercent"))
                                    return 5;
                                else
                                    if (name.equals("DataRef"))
                                        return 6;
                                    else
                                        if (name.equals("teqgreaterthan"))
                                            return 7;
                                        else
                                            if (name.equals("Target"))
                                                return 8;
                                            else
                                                if (name.equals("teos"))
                                                    return 9;
                                                else
                                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PointerAssignmentStmt> ::= LblDef:<LblDef> Name:<Name> tlparen:T_LPAREN SFDummyArgNameList:<SFDummyArgNameList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> teqgreaterthan:T_EQGREATERTHAN Target:<Target> teos:T_EOS  :production645
         */
        protected ASTPointerAssignmentStmtNode userAction(ASTLblDefNode v1, ASTNameNode v2, Token v3, ASTSFDummyArgNameListNode v4, Token v5, Token v6, ASTDataRefNode v7, Token v8, ASTTargetNode v9, Token v10)
        {
            return null;
        }
    }
    public static final Productions.Production645Production PRODUCTION645 = Production645Production.getInstance();

    public static class Production646Production extends Production
    {
        private Production646Production() {;} // Singleton
        private static Production646Production singletonInstance = null;
        public static final Production646Production getInstance() { if (singletonInstance == null) singletonInstance = new Production646Production(); return singletonInstance; }

        public String getDescription() { return "<Target> ::= Expr:<Expr>  :production646"; }

        /**
         * Reduce by <Target> ::= Expr:<Expr>  :production646
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Target> ::= Expr:<Expr>  :production646
            ASTExprNode v1 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTTargetNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.TargetNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Expr"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Target> ::= Expr:<Expr>  :production646
         */
        protected ASTTargetNode userAction(ASTExprNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production646Production PRODUCTION646 = Production646Production.getInstance();

    public static class Production647Production extends Production
    {
        private Production647Production() {;} // Singleton
        private static Production647Production singletonInstance = null;
        public static final Production647Production getInstance() { if (singletonInstance == null) singletonInstance = new Production647Production(); return singletonInstance; }

        public String getDescription() { return "<WhereStmt> ::= twhere:T_WHERE tlparen:T_LPAREN MaskExpr:<MaskExpr> trparen:T_RPAREN AssignmentStmt:<AssignmentStmt>  :production647"; }

        /**
         * Reduce by <WhereStmt> ::= twhere:T_WHERE tlparen:T_LPAREN MaskExpr:<MaskExpr> trparen:T_RPAREN AssignmentStmt:<AssignmentStmt>  :production647
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <WhereStmt> ::= twhere:T_WHERE tlparen:T_LPAREN MaskExpr:<MaskExpr> trparen:T_RPAREN AssignmentStmt:<AssignmentStmt>  :production647
            ASTAssignmentStmtNode v5 = (ASTAssignmentStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTMaskExprNode v3 = (ASTMaskExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTWhereStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.WhereStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("twhere"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("MaskExpr"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("AssignmentStmt"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <WhereStmt> ::= twhere:T_WHERE tlparen:T_LPAREN MaskExpr:<MaskExpr> trparen:T_RPAREN AssignmentStmt:<AssignmentStmt>  :production647
         */
        protected ASTWhereStmtNode userAction(Token v1, Token v2, ASTMaskExprNode v3, Token v4, ASTAssignmentStmtNode v5)
        {
            return null;
        }
    }
    public static final Productions.Production647Production PRODUCTION647 = Production647Production.getInstance();

    public static class Production648Production extends Production
    {
        private Production648Production() {;} // Singleton
        private static Production648Production singletonInstance = null;
        public static final Production648Production getInstance() { if (singletonInstance == null) singletonInstance = new Production648Production(); return singletonInstance; }

        public String getDescription() { return "<WhereStmt> ::= LblDef:<LblDef> twhere:T_WHERE tlparen:T_LPAREN MaskExpr:<MaskExpr> trparen:T_RPAREN AssignmentStmt:<AssignmentStmt>  :production648"; }

        /**
         * Reduce by <WhereStmt> ::= LblDef:<LblDef> twhere:T_WHERE tlparen:T_LPAREN MaskExpr:<MaskExpr> trparen:T_RPAREN AssignmentStmt:<AssignmentStmt>  :production648
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <WhereStmt> ::= LblDef:<LblDef> twhere:T_WHERE tlparen:T_LPAREN MaskExpr:<MaskExpr> trparen:T_RPAREN AssignmentStmt:<AssignmentStmt>  :production648
            ASTAssignmentStmtNode v6 = (ASTAssignmentStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTMaskExprNode v4 = (ASTMaskExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTWhereStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.WhereStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("twhere"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("MaskExpr"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("AssignmentStmt"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <WhereStmt> ::= LblDef:<LblDef> twhere:T_WHERE tlparen:T_LPAREN MaskExpr:<MaskExpr> trparen:T_RPAREN AssignmentStmt:<AssignmentStmt>  :production648
         */
        protected ASTWhereStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, ASTMaskExprNode v4, Token v5, ASTAssignmentStmtNode v6)
        {
            return null;
        }
    }
    public static final Productions.Production648Production PRODUCTION648 = Production648Production.getInstance();

    public static class Production649Production extends Production
    {
        private Production649Production() {;} // Singleton
        private static Production649Production singletonInstance = null;
        public static final Production649Production getInstance() { if (singletonInstance == null) singletonInstance = new Production649Production(); return singletonInstance; }

        public String getDescription() { return "<WhereConstruct> ::= WhereConstructStmt:<WhereConstructStmt> WhereRange:<WhereRange>  :production649"; }

        /**
         * Reduce by <WhereConstruct> ::= WhereConstructStmt:<WhereConstructStmt> WhereRange:<WhereRange>  :production649
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <WhereConstruct> ::= WhereConstructStmt:<WhereConstructStmt> WhereRange:<WhereRange>  :production649
            ASTWhereRangeNode v2 = (ASTWhereRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTWhereConstructStmtNode v1 = (ASTWhereConstructStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTWhereConstructNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.WhereConstructNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("WhereConstructStmt"))
                return 0;
            else
                if (name.equals("WhereRange"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <WhereConstruct> ::= WhereConstructStmt:<WhereConstructStmt> WhereRange:<WhereRange>  :production649
         */
        protected ASTWhereConstructNode userAction(ASTWhereConstructStmtNode v1, ASTWhereRangeNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production649Production PRODUCTION649 = Production649Production.getInstance();

    public static class Production650Production extends Production
    {
        private Production650Production() {;} // Singleton
        private static Production650Production singletonInstance = null;
        public static final Production650Production getInstance() { if (singletonInstance == null) singletonInstance = new Production650Production(); return singletonInstance; }

        public String getDescription() { return "<WhereRange> ::= EndWhereStmt:<EndWhereStmt>  :production650"; }

        /**
         * Reduce by <WhereRange> ::= EndWhereStmt:<EndWhereStmt>  :production650
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <WhereRange> ::= EndWhereStmt:<EndWhereStmt>  :production650
            ASTEndWhereStmtNode v1 = (ASTEndWhereStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTWhereRangeNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.WhereRangeNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EndWhereStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <WhereRange> ::= EndWhereStmt:<EndWhereStmt>  :production650
         */
        protected ASTWhereRangeNode userAction(ASTEndWhereStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production650Production PRODUCTION650 = Production650Production.getInstance();

    public static class Production651Production extends Production
    {
        private Production651Production() {;} // Singleton
        private static Production651Production singletonInstance = null;
        public static final Production651Production getInstance() { if (singletonInstance == null) singletonInstance = new Production651Production(); return singletonInstance; }

        public String getDescription() { return "<WhereRange> ::= WhereBodyConstructBlock:<WhereBodyConstructBlock> EndWhereStmt:<EndWhereStmt>  :production651"; }

        /**
         * Reduce by <WhereRange> ::= WhereBodyConstructBlock:<WhereBodyConstructBlock> EndWhereStmt:<EndWhereStmt>  :production651
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <WhereRange> ::= WhereBodyConstructBlock:<WhereBodyConstructBlock> EndWhereStmt:<EndWhereStmt>  :production651
            ASTEndWhereStmtNode v2 = (ASTEndWhereStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTWhereBodyConstructBlockNode v1 = (ASTWhereBodyConstructBlockNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTWhereRangeNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.WhereRangeNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("WhereBodyConstructBlock"))
                return 0;
            else
                if (name.equals("EndWhereStmt"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <WhereRange> ::= WhereBodyConstructBlock:<WhereBodyConstructBlock> EndWhereStmt:<EndWhereStmt>  :production651
         */
        protected ASTWhereRangeNode userAction(ASTWhereBodyConstructBlockNode v1, ASTEndWhereStmtNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production651Production PRODUCTION651 = Production651Production.getInstance();

    public static class Production652Production extends Production
    {
        private Production652Production() {;} // Singleton
        private static Production652Production singletonInstance = null;
        public static final Production652Production getInstance() { if (singletonInstance == null) singletonInstance = new Production652Production(); return singletonInstance; }

        public String getDescription() { return "<WhereRange> ::= MaskedElsewhereConstruct:<MaskedElsewhereConstruct>  :production652"; }

        /**
         * Reduce by <WhereRange> ::= MaskedElsewhereConstruct:<MaskedElsewhereConstruct>  :production652
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <WhereRange> ::= MaskedElsewhereConstruct:<MaskedElsewhereConstruct>  :production652
            ASTMaskedElsewhereConstructNode v1 = (ASTMaskedElsewhereConstructNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTWhereRangeNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.WhereRangeNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("MaskedElsewhereConstruct"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <WhereRange> ::= MaskedElsewhereConstruct:<MaskedElsewhereConstruct>  :production652
         */
        protected ASTWhereRangeNode userAction(ASTMaskedElsewhereConstructNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production652Production PRODUCTION652 = Production652Production.getInstance();

    public static class Production653Production extends Production
    {
        private Production653Production() {;} // Singleton
        private static Production653Production singletonInstance = null;
        public static final Production653Production getInstance() { if (singletonInstance == null) singletonInstance = new Production653Production(); return singletonInstance; }

        public String getDescription() { return "<WhereRange> ::= WhereBodyConstructBlock:<WhereBodyConstructBlock> MaskedElsewhereConstruct:<MaskedElsewhereConstruct>  :production653"; }

        /**
         * Reduce by <WhereRange> ::= WhereBodyConstructBlock:<WhereBodyConstructBlock> MaskedElsewhereConstruct:<MaskedElsewhereConstruct>  :production653
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <WhereRange> ::= WhereBodyConstructBlock:<WhereBodyConstructBlock> MaskedElsewhereConstruct:<MaskedElsewhereConstruct>  :production653
            ASTMaskedElsewhereConstructNode v2 = (ASTMaskedElsewhereConstructNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTWhereBodyConstructBlockNode v1 = (ASTWhereBodyConstructBlockNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTWhereRangeNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.WhereRangeNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("WhereBodyConstructBlock"))
                return 0;
            else
                if (name.equals("MaskedElsewhereConstruct"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <WhereRange> ::= WhereBodyConstructBlock:<WhereBodyConstructBlock> MaskedElsewhereConstruct:<MaskedElsewhereConstruct>  :production653
         */
        protected ASTWhereRangeNode userAction(ASTWhereBodyConstructBlockNode v1, ASTMaskedElsewhereConstructNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production653Production PRODUCTION653 = Production653Production.getInstance();

    public static class Production654Production extends Production
    {
        private Production654Production() {;} // Singleton
        private static Production654Production singletonInstance = null;
        public static final Production654Production getInstance() { if (singletonInstance == null) singletonInstance = new Production654Production(); return singletonInstance; }

        public String getDescription() { return "<WhereRange> ::= ElsewhereConstruct:<ElsewhereConstruct>  :production654"; }

        /**
         * Reduce by <WhereRange> ::= ElsewhereConstruct:<ElsewhereConstruct>  :production654
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <WhereRange> ::= ElsewhereConstruct:<ElsewhereConstruct>  :production654
            ASTElsewhereConstructNode v1 = (ASTElsewhereConstructNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTWhereRangeNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.WhereRangeNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ElsewhereConstruct"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <WhereRange> ::= ElsewhereConstruct:<ElsewhereConstruct>  :production654
         */
        protected ASTWhereRangeNode userAction(ASTElsewhereConstructNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production654Production PRODUCTION654 = Production654Production.getInstance();

    public static class Production655Production extends Production
    {
        private Production655Production() {;} // Singleton
        private static Production655Production singletonInstance = null;
        public static final Production655Production getInstance() { if (singletonInstance == null) singletonInstance = new Production655Production(); return singletonInstance; }

        public String getDescription() { return "<WhereRange> ::= WhereBodyConstructBlock:<WhereBodyConstructBlock> ElsewhereConstruct:<ElsewhereConstruct>  :production655"; }

        /**
         * Reduce by <WhereRange> ::= WhereBodyConstructBlock:<WhereBodyConstructBlock> ElsewhereConstruct:<ElsewhereConstruct>  :production655
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <WhereRange> ::= WhereBodyConstructBlock:<WhereBodyConstructBlock> ElsewhereConstruct:<ElsewhereConstruct>  :production655
            ASTElsewhereConstructNode v2 = (ASTElsewhereConstructNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTWhereBodyConstructBlockNode v1 = (ASTWhereBodyConstructBlockNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTWhereRangeNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.WhereRangeNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("WhereBodyConstructBlock"))
                return 0;
            else
                if (name.equals("ElsewhereConstruct"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <WhereRange> ::= WhereBodyConstructBlock:<WhereBodyConstructBlock> ElsewhereConstruct:<ElsewhereConstruct>  :production655
         */
        protected ASTWhereRangeNode userAction(ASTWhereBodyConstructBlockNode v1, ASTElsewhereConstructNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production655Production PRODUCTION655 = Production655Production.getInstance();

    public static class Production656Production extends Production
    {
        private Production656Production() {;} // Singleton
        private static Production656Production singletonInstance = null;
        public static final Production656Production getInstance() { if (singletonInstance == null) singletonInstance = new Production656Production(); return singletonInstance; }

        public String getDescription() { return "<MaskedElsewhereConstruct> ::= MaskedElsewhereStmt:<MaskedElsewhereStmt> WhereRange:<WhereRange>  :production656"; }

        /**
         * Reduce by <MaskedElsewhereConstruct> ::= MaskedElsewhereStmt:<MaskedElsewhereStmt> WhereRange:<WhereRange>  :production656
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <MaskedElsewhereConstruct> ::= MaskedElsewhereStmt:<MaskedElsewhereStmt> WhereRange:<WhereRange>  :production656
            ASTWhereRangeNode v2 = (ASTWhereRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTMaskedElsewhereStmtNode v1 = (ASTMaskedElsewhereStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTMaskedElsewhereConstructNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.MaskedElsewhereConstructNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("MaskedElsewhereStmt"))
                return 0;
            else
                if (name.equals("WhereRange"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <MaskedElsewhereConstruct> ::= MaskedElsewhereStmt:<MaskedElsewhereStmt> WhereRange:<WhereRange>  :production656
         */
        protected ASTMaskedElsewhereConstructNode userAction(ASTMaskedElsewhereStmtNode v1, ASTWhereRangeNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production656Production PRODUCTION656 = Production656Production.getInstance();

    public static class Production657Production extends Production
    {
        private Production657Production() {;} // Singleton
        private static Production657Production singletonInstance = null;
        public static final Production657Production getInstance() { if (singletonInstance == null) singletonInstance = new Production657Production(); return singletonInstance; }

        public String getDescription() { return "<ElsewhereConstruct> ::= ElsewhereStmt:<ElsewhereStmt> ElsewherePart:<ElsewherePart>  :production657"; }

        /**
         * Reduce by <ElsewhereConstruct> ::= ElsewhereStmt:<ElsewhereStmt> ElsewherePart:<ElsewherePart>  :production657
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ElsewhereConstruct> ::= ElsewhereStmt:<ElsewhereStmt> ElsewherePart:<ElsewherePart>  :production657
            ASTElsewherePartNode v2 = (ASTElsewherePartNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTElsewhereStmtNode v1 = (ASTElsewhereStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTElsewhereConstructNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.ElsewhereConstructNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ElsewhereStmt"))
                return 0;
            else
                if (name.equals("ElsewherePart"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ElsewhereConstruct> ::= ElsewhereStmt:<ElsewhereStmt> ElsewherePart:<ElsewherePart>  :production657
         */
        protected ASTElsewhereConstructNode userAction(ASTElsewhereStmtNode v1, ASTElsewherePartNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production657Production PRODUCTION657 = Production657Production.getInstance();

    public static class Production658Production extends Production
    {
        private Production658Production() {;} // Singleton
        private static Production658Production singletonInstance = null;
        public static final Production658Production getInstance() { if (singletonInstance == null) singletonInstance = new Production658Production(); return singletonInstance; }

        public String getDescription() { return "<ElsewherePart> ::= EndWhereStmt:<EndWhereStmt>  :production658"; }

        /**
         * Reduce by <ElsewherePart> ::= EndWhereStmt:<EndWhereStmt>  :production658
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ElsewherePart> ::= EndWhereStmt:<EndWhereStmt>  :production658
            ASTEndWhereStmtNode v1 = (ASTEndWhereStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTElsewherePartNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ElsewherePartNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EndWhereStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ElsewherePart> ::= EndWhereStmt:<EndWhereStmt>  :production658
         */
        protected ASTElsewherePartNode userAction(ASTEndWhereStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production658Production PRODUCTION658 = Production658Production.getInstance();

    public static class Production659Production extends Production
    {
        private Production659Production() {;} // Singleton
        private static Production659Production singletonInstance = null;
        public static final Production659Production getInstance() { if (singletonInstance == null) singletonInstance = new Production659Production(); return singletonInstance; }

        public String getDescription() { return "<ElsewherePart> ::= WhereBodyConstructBlock:<WhereBodyConstructBlock> EndWhereStmt:<EndWhereStmt>  :production659"; }

        /**
         * Reduce by <ElsewherePart> ::= WhereBodyConstructBlock:<WhereBodyConstructBlock> EndWhereStmt:<EndWhereStmt>  :production659
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ElsewherePart> ::= WhereBodyConstructBlock:<WhereBodyConstructBlock> EndWhereStmt:<EndWhereStmt>  :production659
            ASTEndWhereStmtNode v2 = (ASTEndWhereStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTWhereBodyConstructBlockNode v1 = (ASTWhereBodyConstructBlockNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTElsewherePartNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.ElsewherePartNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("WhereBodyConstructBlock"))
                return 0;
            else
                if (name.equals("EndWhereStmt"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ElsewherePart> ::= WhereBodyConstructBlock:<WhereBodyConstructBlock> EndWhereStmt:<EndWhereStmt>  :production659
         */
        protected ASTElsewherePartNode userAction(ASTWhereBodyConstructBlockNode v1, ASTEndWhereStmtNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production659Production PRODUCTION659 = Production659Production.getInstance();

    public static class Production660Production extends Production
    {
        private Production660Production() {;} // Singleton
        private static Production660Production singletonInstance = null;
        public static final Production660Production getInstance() { if (singletonInstance == null) singletonInstance = new Production660Production(); return singletonInstance; }

        public String getDescription() { return "<WhereBodyConstructBlock> ::= WhereBodyConstruct:<WhereBodyConstruct>  :production660"; }

        /**
         * Reduce by <WhereBodyConstructBlock> ::= WhereBodyConstruct:<WhereBodyConstruct>  :production660
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <WhereBodyConstructBlock> ::= WhereBodyConstruct:<WhereBodyConstruct>  :production660
            ASTWhereBodyConstructNode v1 = (ASTWhereBodyConstructNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTWhereBodyConstructBlockNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.WhereBodyConstructBlockNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("WhereBodyConstruct"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <WhereBodyConstructBlock> ::= WhereBodyConstruct:<WhereBodyConstruct>  :production660
         */
        protected ASTWhereBodyConstructBlockNode userAction(ASTWhereBodyConstructNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production660Production PRODUCTION660 = Production660Production.getInstance();

    public static class Production661Production extends Production
    {
        private Production661Production() {;} // Singleton
        private static Production661Production singletonInstance = null;
        public static final Production661Production getInstance() { if (singletonInstance == null) singletonInstance = new Production661Production(); return singletonInstance; }

        public String getDescription() { return "<WhereBodyConstructBlock> ::= WhereBodyConstructBlock:<WhereBodyConstructBlock> WhereBodyConstruct:<WhereBodyConstruct>  :production661"; }

        /**
         * Reduce by <WhereBodyConstructBlock> ::= WhereBodyConstructBlock:<WhereBodyConstructBlock> WhereBodyConstruct:<WhereBodyConstruct>  :production661
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <WhereBodyConstructBlock> ::= WhereBodyConstructBlock:<WhereBodyConstructBlock> WhereBodyConstruct:<WhereBodyConstruct>  :production661
            ASTWhereBodyConstructNode v2 = (ASTWhereBodyConstructNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTWhereBodyConstructBlockNode v1 = (ASTWhereBodyConstructBlockNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTWhereBodyConstructBlockNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.WhereBodyConstructBlockNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("WhereBodyConstructBlock"))
                return 0;
            else
                if (name.equals("WhereBodyConstruct"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <WhereBodyConstructBlock> ::= WhereBodyConstructBlock:<WhereBodyConstructBlock> WhereBodyConstruct:<WhereBodyConstruct>  :production661
         */
        protected ASTWhereBodyConstructBlockNode userAction(ASTWhereBodyConstructBlockNode v1, ASTWhereBodyConstructNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production661Production PRODUCTION661 = Production661Production.getInstance();

    public static class Production662Production extends Production
    {
        private Production662Production() {;} // Singleton
        private static Production662Production singletonInstance = null;
        public static final Production662Production getInstance() { if (singletonInstance == null) singletonInstance = new Production662Production(); return singletonInstance; }

        public String getDescription() { return "<WhereConstructStmt> ::= Name:<Name> tcolon:T_COLON twhere:T_WHERE tlparen:T_LPAREN MaskExpr:<MaskExpr> trparen:T_RPAREN teos:T_EOS  :production662"; }

        /**
         * Reduce by <WhereConstructStmt> ::= Name:<Name> tcolon:T_COLON twhere:T_WHERE tlparen:T_LPAREN MaskExpr:<MaskExpr> trparen:T_RPAREN teos:T_EOS  :production662
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <WhereConstructStmt> ::= Name:<Name> tcolon:T_COLON twhere:T_WHERE tlparen:T_LPAREN MaskExpr:<MaskExpr> trparen:T_RPAREN teos:T_EOS  :production662
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTMaskExprNode v5 = (ASTMaskExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTWhereConstructStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7);

            // The production has 7 symbols on its RHS
            parser.reduce(Nonterminal.WhereConstructStmtNonterminal.getInstance(), 7, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tcolon"))
                    return 1;
                else
                    if (name.equals("twhere"))
                        return 2;
                    else
                        if (name.equals("tlparen"))
                            return 3;
                        else
                            if (name.equals("MaskExpr"))
                                return 4;
                            else
                                if (name.equals("trparen"))
                                    return 5;
                                else
                                    if (name.equals("teos"))
                                        return 6;
                                    else
                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <WhereConstructStmt> ::= Name:<Name> tcolon:T_COLON twhere:T_WHERE tlparen:T_LPAREN MaskExpr:<MaskExpr> trparen:T_RPAREN teos:T_EOS  :production662
         */
        protected ASTWhereConstructStmtNode userAction(ASTNameNode v1, Token v2, Token v3, Token v4, ASTMaskExprNode v5, Token v6, Token v7)
        {
            return null;
        }
    }
    public static final Productions.Production662Production PRODUCTION662 = Production662Production.getInstance();

    public static class Production663Production extends Production
    {
        private Production663Production() {;} // Singleton
        private static Production663Production singletonInstance = null;
        public static final Production663Production getInstance() { if (singletonInstance == null) singletonInstance = new Production663Production(); return singletonInstance; }

        public String getDescription() { return "<WhereConstructStmt> ::= LblDef:<LblDef> Name:<Name> tcolon:T_COLON twhere:T_WHERE tlparen:T_LPAREN MaskExpr:<MaskExpr> trparen:T_RPAREN teos:T_EOS  :production663"; }

        /**
         * Reduce by <WhereConstructStmt> ::= LblDef:<LblDef> Name:<Name> tcolon:T_COLON twhere:T_WHERE tlparen:T_LPAREN MaskExpr:<MaskExpr> trparen:T_RPAREN teos:T_EOS  :production663
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <WhereConstructStmt> ::= LblDef:<LblDef> Name:<Name> tcolon:T_COLON twhere:T_WHERE tlparen:T_LPAREN MaskExpr:<MaskExpr> trparen:T_RPAREN teos:T_EOS  :production663
            Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTMaskExprNode v6 = (ASTMaskExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v2 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTWhereConstructStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8);

            // The production has 8 symbols on its RHS
            parser.reduce(Nonterminal.WhereConstructStmtNonterminal.getInstance(), 8, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("Name"))
                    return 1;
                else
                    if (name.equals("tcolon"))
                        return 2;
                    else
                        if (name.equals("twhere"))
                            return 3;
                        else
                            if (name.equals("tlparen"))
                                return 4;
                            else
                                if (name.equals("MaskExpr"))
                                    return 5;
                                else
                                    if (name.equals("trparen"))
                                        return 6;
                                    else
                                        if (name.equals("teos"))
                                            return 7;
                                        else
                                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <WhereConstructStmt> ::= LblDef:<LblDef> Name:<Name> tcolon:T_COLON twhere:T_WHERE tlparen:T_LPAREN MaskExpr:<MaskExpr> trparen:T_RPAREN teos:T_EOS  :production663
         */
        protected ASTWhereConstructStmtNode userAction(ASTLblDefNode v1, ASTNameNode v2, Token v3, Token v4, Token v5, ASTMaskExprNode v6, Token v7, Token v8)
        {
            return null;
        }
    }
    public static final Productions.Production663Production PRODUCTION663 = Production663Production.getInstance();

    public static class Production664Production extends Production
    {
        private Production664Production() {;} // Singleton
        private static Production664Production singletonInstance = null;
        public static final Production664Production getInstance() { if (singletonInstance == null) singletonInstance = new Production664Production(); return singletonInstance; }

        public String getDescription() { return "<WhereConstructStmt> ::= twhere:T_WHERE tlparen:T_LPAREN MaskExpr:<MaskExpr> trparen:T_RPAREN teos:T_EOS  :production664"; }

        /**
         * Reduce by <WhereConstructStmt> ::= twhere:T_WHERE tlparen:T_LPAREN MaskExpr:<MaskExpr> trparen:T_RPAREN teos:T_EOS  :production664
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <WhereConstructStmt> ::= twhere:T_WHERE tlparen:T_LPAREN MaskExpr:<MaskExpr> trparen:T_RPAREN teos:T_EOS  :production664
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTMaskExprNode v3 = (ASTMaskExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTWhereConstructStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.WhereConstructStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("twhere"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("MaskExpr"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <WhereConstructStmt> ::= twhere:T_WHERE tlparen:T_LPAREN MaskExpr:<MaskExpr> trparen:T_RPAREN teos:T_EOS  :production664
         */
        protected ASTWhereConstructStmtNode userAction(Token v1, Token v2, ASTMaskExprNode v3, Token v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production664Production PRODUCTION664 = Production664Production.getInstance();

    public static class Production665Production extends Production
    {
        private Production665Production() {;} // Singleton
        private static Production665Production singletonInstance = null;
        public static final Production665Production getInstance() { if (singletonInstance == null) singletonInstance = new Production665Production(); return singletonInstance; }

        public String getDescription() { return "<WhereConstructStmt> ::= LblDef:<LblDef> twhere:T_WHERE tlparen:T_LPAREN MaskExpr:<MaskExpr> trparen:T_RPAREN teos:T_EOS  :production665"; }

        /**
         * Reduce by <WhereConstructStmt> ::= LblDef:<LblDef> twhere:T_WHERE tlparen:T_LPAREN MaskExpr:<MaskExpr> trparen:T_RPAREN teos:T_EOS  :production665
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <WhereConstructStmt> ::= LblDef:<LblDef> twhere:T_WHERE tlparen:T_LPAREN MaskExpr:<MaskExpr> trparen:T_RPAREN teos:T_EOS  :production665
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTMaskExprNode v4 = (ASTMaskExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTWhereConstructStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.WhereConstructStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("twhere"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("MaskExpr"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <WhereConstructStmt> ::= LblDef:<LblDef> twhere:T_WHERE tlparen:T_LPAREN MaskExpr:<MaskExpr> trparen:T_RPAREN teos:T_EOS  :production665
         */
        protected ASTWhereConstructStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, ASTMaskExprNode v4, Token v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production665Production PRODUCTION665 = Production665Production.getInstance();

    public static class Production666Production extends Production
    {
        private Production666Production() {;} // Singleton
        private static Production666Production singletonInstance = null;
        public static final Production666Production getInstance() { if (singletonInstance == null) singletonInstance = new Production666Production(); return singletonInstance; }

        public String getDescription() { return "<WhereBodyConstruct> ::= AssignmentStmt:<AssignmentStmt>  :production666"; }

        /**
         * Reduce by <WhereBodyConstruct> ::= AssignmentStmt:<AssignmentStmt>  :production666
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <WhereBodyConstruct> ::= AssignmentStmt:<AssignmentStmt>  :production666
            ASTAssignmentStmtNode v1 = (ASTAssignmentStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTWhereBodyConstructNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.WhereBodyConstructNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("AssignmentStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <WhereBodyConstruct> ::= AssignmentStmt:<AssignmentStmt>  :production666
         */
        protected ASTWhereBodyConstructNode userAction(ASTAssignmentStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production666Production PRODUCTION666 = Production666Production.getInstance();

    public static class Production667Production extends Production
    {
        private Production667Production() {;} // Singleton
        private static Production667Production singletonInstance = null;
        public static final Production667Production getInstance() { if (singletonInstance == null) singletonInstance = new Production667Production(); return singletonInstance; }

        public String getDescription() { return "<WhereBodyConstruct> ::= WhereStmt:<WhereStmt>  :production667"; }

        /**
         * Reduce by <WhereBodyConstruct> ::= WhereStmt:<WhereStmt>  :production667
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <WhereBodyConstruct> ::= WhereStmt:<WhereStmt>  :production667
            ASTWhereStmtNode v1 = (ASTWhereStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTWhereBodyConstructNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.WhereBodyConstructNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("WhereStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <WhereBodyConstruct> ::= WhereStmt:<WhereStmt>  :production667
         */
        protected ASTWhereBodyConstructNode userAction(ASTWhereStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production667Production PRODUCTION667 = Production667Production.getInstance();

    public static class Production668Production extends Production
    {
        private Production668Production() {;} // Singleton
        private static Production668Production singletonInstance = null;
        public static final Production668Production getInstance() { if (singletonInstance == null) singletonInstance = new Production668Production(); return singletonInstance; }

        public String getDescription() { return "<WhereBodyConstruct> ::= WhereConstruct:<WhereConstruct>  :production668"; }

        /**
         * Reduce by <WhereBodyConstruct> ::= WhereConstruct:<WhereConstruct>  :production668
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <WhereBodyConstruct> ::= WhereConstruct:<WhereConstruct>  :production668
            ASTWhereConstructNode v1 = (ASTWhereConstructNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTWhereBodyConstructNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.WhereBodyConstructNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("WhereConstruct"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <WhereBodyConstruct> ::= WhereConstruct:<WhereConstruct>  :production668
         */
        protected ASTWhereBodyConstructNode userAction(ASTWhereConstructNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production668Production PRODUCTION668 = Production668Production.getInstance();

    public static class Production669Production extends Production
    {
        private Production669Production() {;} // Singleton
        private static Production669Production singletonInstance = null;
        public static final Production669Production getInstance() { if (singletonInstance == null) singletonInstance = new Production669Production(); return singletonInstance; }

        public String getDescription() { return "<MaskExpr> ::= Expr:<Expr>  :production669"; }

        /**
         * Reduce by <MaskExpr> ::= Expr:<Expr>  :production669
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <MaskExpr> ::= Expr:<Expr>  :production669
            ASTExprNode v1 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTMaskExprNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.MaskExprNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Expr"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <MaskExpr> ::= Expr:<Expr>  :production669
         */
        protected ASTMaskExprNode userAction(ASTExprNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production669Production PRODUCTION669 = Production669Production.getInstance();

    public static class Production670Production extends Production
    {
        private Production670Production() {;} // Singleton
        private static Production670Production singletonInstance = null;
        public static final Production670Production getInstance() { if (singletonInstance == null) singletonInstance = new Production670Production(); return singletonInstance; }

        public String getDescription() { return "<MaskedElsewhereStmt> ::= telsewhere:T_ELSEWHERE tlparen:T_LPAREN MaskExpr:<MaskExpr> trparen:T_RPAREN teos:T_EOS  :production670"; }

        /**
         * Reduce by <MaskedElsewhereStmt> ::= telsewhere:T_ELSEWHERE tlparen:T_LPAREN MaskExpr:<MaskExpr> trparen:T_RPAREN teos:T_EOS  :production670
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <MaskedElsewhereStmt> ::= telsewhere:T_ELSEWHERE tlparen:T_LPAREN MaskExpr:<MaskExpr> trparen:T_RPAREN teos:T_EOS  :production670
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTMaskExprNode v3 = (ASTMaskExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTMaskedElsewhereStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.MaskedElsewhereStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("telsewhere"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("MaskExpr"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <MaskedElsewhereStmt> ::= telsewhere:T_ELSEWHERE tlparen:T_LPAREN MaskExpr:<MaskExpr> trparen:T_RPAREN teos:T_EOS  :production670
         */
        protected ASTMaskedElsewhereStmtNode userAction(Token v1, Token v2, ASTMaskExprNode v3, Token v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production670Production PRODUCTION670 = Production670Production.getInstance();

    public static class Production671Production extends Production
    {
        private Production671Production() {;} // Singleton
        private static Production671Production singletonInstance = null;
        public static final Production671Production getInstance() { if (singletonInstance == null) singletonInstance = new Production671Production(); return singletonInstance; }

        public String getDescription() { return "<MaskedElsewhereStmt> ::= telsewhere:T_ELSEWHERE tlparen:T_LPAREN MaskExpr:<MaskExpr> trparen:T_RPAREN <MaskedElsewhereStmt@53> teos:T_EOS  :production671"; }

        /**
         * Reduce by <MaskedElsewhereStmt> ::= telsewhere:T_ELSEWHERE tlparen:T_LPAREN MaskExpr:<MaskExpr> trparen:T_RPAREN <MaskedElsewhereStmt@53> teos:T_EOS  :production671
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <MaskedElsewhereStmt> ::= telsewhere:T_ELSEWHERE tlparen:T_LPAREN MaskExpr:<MaskExpr> trparen:T_RPAREN <MaskedElsewhereStmt@53> teos:T_EOS  :production671
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v5 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTMaskExprNode v3 = (ASTMaskExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTMaskedElsewhereStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.MaskedElsewhereStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("telsewhere"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("MaskExpr"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("EndName"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <MaskedElsewhereStmt> ::= telsewhere:T_ELSEWHERE tlparen:T_LPAREN MaskExpr:<MaskExpr> trparen:T_RPAREN <MaskedElsewhereStmt@53> teos:T_EOS  :production671
         */
        protected ASTMaskedElsewhereStmtNode userAction(Token v1, Token v2, ASTMaskExprNode v3, Token v4, ASTEndNameNode v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production671Production PRODUCTION671 = Production671Production.getInstance();

    public static class Production672Production extends Production
    {
        private Production672Production() {;} // Singleton
        private static Production672Production singletonInstance = null;
        public static final Production672Production getInstance() { if (singletonInstance == null) singletonInstance = new Production672Production(); return singletonInstance; }

        public String getDescription() { return "<MaskedElsewhereStmt> ::= LblDef:<LblDef> telsewhere:T_ELSEWHERE tlparen:T_LPAREN MaskExpr:<MaskExpr> trparen:T_RPAREN teos:T_EOS  :production672"; }

        /**
         * Reduce by <MaskedElsewhereStmt> ::= LblDef:<LblDef> telsewhere:T_ELSEWHERE tlparen:T_LPAREN MaskExpr:<MaskExpr> trparen:T_RPAREN teos:T_EOS  :production672
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <MaskedElsewhereStmt> ::= LblDef:<LblDef> telsewhere:T_ELSEWHERE tlparen:T_LPAREN MaskExpr:<MaskExpr> trparen:T_RPAREN teos:T_EOS  :production672
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTMaskExprNode v4 = (ASTMaskExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTMaskedElsewhereStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.MaskedElsewhereStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("telsewhere"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("MaskExpr"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <MaskedElsewhereStmt> ::= LblDef:<LblDef> telsewhere:T_ELSEWHERE tlparen:T_LPAREN MaskExpr:<MaskExpr> trparen:T_RPAREN teos:T_EOS  :production672
         */
        protected ASTMaskedElsewhereStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, ASTMaskExprNode v4, Token v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production672Production PRODUCTION672 = Production672Production.getInstance();

    public static class Production673Production extends Production
    {
        private Production673Production() {;} // Singleton
        private static Production673Production singletonInstance = null;
        public static final Production673Production getInstance() { if (singletonInstance == null) singletonInstance = new Production673Production(); return singletonInstance; }

        public String getDescription() { return "<MaskedElsewhereStmt> ::= LblDef:<LblDef> telsewhere:T_ELSEWHERE tlparen:T_LPAREN MaskExpr:<MaskExpr> trparen:T_RPAREN <MaskedElsewhereStmt@53> teos:T_EOS  :production673"; }

        /**
         * Reduce by <MaskedElsewhereStmt> ::= LblDef:<LblDef> telsewhere:T_ELSEWHERE tlparen:T_LPAREN MaskExpr:<MaskExpr> trparen:T_RPAREN <MaskedElsewhereStmt@53> teos:T_EOS  :production673
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <MaskedElsewhereStmt> ::= LblDef:<LblDef> telsewhere:T_ELSEWHERE tlparen:T_LPAREN MaskExpr:<MaskExpr> trparen:T_RPAREN <MaskedElsewhereStmt@53> teos:T_EOS  :production673
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v6 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTMaskExprNode v4 = (ASTMaskExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTMaskedElsewhereStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7);

            // The production has 7 symbols on its RHS
            parser.reduce(Nonterminal.MaskedElsewhereStmtNonterminal.getInstance(), 7, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("telsewhere"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("MaskExpr"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("EndName"))
                                    return 5;
                                else
                                    if (name.equals("teos"))
                                        return 6;
                                    else
                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <MaskedElsewhereStmt> ::= LblDef:<LblDef> telsewhere:T_ELSEWHERE tlparen:T_LPAREN MaskExpr:<MaskExpr> trparen:T_RPAREN <MaskedElsewhereStmt@53> teos:T_EOS  :production673
         */
        protected ASTMaskedElsewhereStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, ASTMaskExprNode v4, Token v5, ASTEndNameNode v6, Token v7)
        {
            return null;
        }
    }
    public static final Productions.Production673Production PRODUCTION673 = Production673Production.getInstance();

    public static class Production674Production extends Production
    {
        private Production674Production() {;} // Singleton
        private static Production674Production singletonInstance = null;
        public static final Production674Production getInstance() { if (singletonInstance == null) singletonInstance = new Production674Production(); return singletonInstance; }

        public String getDescription() { return "<ElsewhereStmt> ::= telsewhere:T_ELSEWHERE teos:T_EOS  :production674"; }

        /**
         * Reduce by <ElsewhereStmt> ::= telsewhere:T_ELSEWHERE teos:T_EOS  :production674
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ElsewhereStmt> ::= telsewhere:T_ELSEWHERE teos:T_EOS  :production674
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTElsewhereStmtNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.ElsewhereStmtNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("telsewhere"))
                return 0;
            else
                if (name.equals("teos"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ElsewhereStmt> ::= telsewhere:T_ELSEWHERE teos:T_EOS  :production674
         */
        protected ASTElsewhereStmtNode userAction(Token v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production674Production PRODUCTION674 = Production674Production.getInstance();

    public static class Production675Production extends Production
    {
        private Production675Production() {;} // Singleton
        private static Production675Production singletonInstance = null;
        public static final Production675Production getInstance() { if (singletonInstance == null) singletonInstance = new Production675Production(); return singletonInstance; }

        public String getDescription() { return "<ElsewhereStmt> ::= telsewhere:T_ELSEWHERE <ElsewhereStmt@54> teos:T_EOS  :production675"; }

        /**
         * Reduce by <ElsewhereStmt> ::= telsewhere:T_ELSEWHERE <ElsewhereStmt@54> teos:T_EOS  :production675
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ElsewhereStmt> ::= telsewhere:T_ELSEWHERE <ElsewhereStmt@54> teos:T_EOS  :production675
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v2 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTElsewhereStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.ElsewhereStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("telsewhere"))
                return 0;
            else
                if (name.equals("EndName"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ElsewhereStmt> ::= telsewhere:T_ELSEWHERE <ElsewhereStmt@54> teos:T_EOS  :production675
         */
        protected ASTElsewhereStmtNode userAction(Token v1, ASTEndNameNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production675Production PRODUCTION675 = Production675Production.getInstance();

    public static class Production676Production extends Production
    {
        private Production676Production() {;} // Singleton
        private static Production676Production singletonInstance = null;
        public static final Production676Production getInstance() { if (singletonInstance == null) singletonInstance = new Production676Production(); return singletonInstance; }

        public String getDescription() { return "<ElsewhereStmt> ::= LblDef:<LblDef> telsewhere:T_ELSEWHERE teos:T_EOS  :production676"; }

        /**
         * Reduce by <ElsewhereStmt> ::= LblDef:<LblDef> telsewhere:T_ELSEWHERE teos:T_EOS  :production676
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ElsewhereStmt> ::= LblDef:<LblDef> telsewhere:T_ELSEWHERE teos:T_EOS  :production676
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTElsewhereStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.ElsewhereStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("telsewhere"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ElsewhereStmt> ::= LblDef:<LblDef> telsewhere:T_ELSEWHERE teos:T_EOS  :production676
         */
        protected ASTElsewhereStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production676Production PRODUCTION676 = Production676Production.getInstance();

    public static class Production677Production extends Production
    {
        private Production677Production() {;} // Singleton
        private static Production677Production singletonInstance = null;
        public static final Production677Production getInstance() { if (singletonInstance == null) singletonInstance = new Production677Production(); return singletonInstance; }

        public String getDescription() { return "<ElsewhereStmt> ::= LblDef:<LblDef> telsewhere:T_ELSEWHERE <ElsewhereStmt@54> teos:T_EOS  :production677"; }

        /**
         * Reduce by <ElsewhereStmt> ::= LblDef:<LblDef> telsewhere:T_ELSEWHERE <ElsewhereStmt@54> teos:T_EOS  :production677
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ElsewhereStmt> ::= LblDef:<LblDef> telsewhere:T_ELSEWHERE <ElsewhereStmt@54> teos:T_EOS  :production677
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v3 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTElsewhereStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.ElsewhereStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("telsewhere"))
                    return 1;
                else
                    if (name.equals("EndName"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ElsewhereStmt> ::= LblDef:<LblDef> telsewhere:T_ELSEWHERE <ElsewhereStmt@54> teos:T_EOS  :production677
         */
        protected ASTElsewhereStmtNode userAction(ASTLblDefNode v1, Token v2, ASTEndNameNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production677Production PRODUCTION677 = Production677Production.getInstance();

    public static class Production678Production extends Production
    {
        private Production678Production() {;} // Singleton
        private static Production678Production singletonInstance = null;
        public static final Production678Production getInstance() { if (singletonInstance == null) singletonInstance = new Production678Production(); return singletonInstance; }

        public String getDescription() { return "<EndWhereStmt> ::= tendwhere:T_ENDWHERE teos:T_EOS  :production678"; }

        /**
         * Reduce by <EndWhereStmt> ::= tendwhere:T_ENDWHERE teos:T_EOS  :production678
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndWhereStmt> ::= tendwhere:T_ENDWHERE teos:T_EOS  :production678
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndWhereStmtNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.EndWhereStmtNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tendwhere"))
                return 0;
            else
                if (name.equals("teos"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndWhereStmt> ::= tendwhere:T_ENDWHERE teos:T_EOS  :production678
         */
        protected ASTEndWhereStmtNode userAction(Token v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production678Production PRODUCTION678 = Production678Production.getInstance();

    public static class Production679Production extends Production
    {
        private Production679Production() {;} // Singleton
        private static Production679Production singletonInstance = null;
        public static final Production679Production getInstance() { if (singletonInstance == null) singletonInstance = new Production679Production(); return singletonInstance; }

        public String getDescription() { return "<EndWhereStmt> ::= tendwhere:T_ENDWHERE <EndWhereStmt@55> teos:T_EOS  :production679"; }

        /**
         * Reduce by <EndWhereStmt> ::= tendwhere:T_ENDWHERE <EndWhereStmt@55> teos:T_EOS  :production679
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndWhereStmt> ::= tendwhere:T_ENDWHERE <EndWhereStmt@55> teos:T_EOS  :production679
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v2 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndWhereStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EndWhereStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tendwhere"))
                return 0;
            else
                if (name.equals("EndName"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndWhereStmt> ::= tendwhere:T_ENDWHERE <EndWhereStmt@55> teos:T_EOS  :production679
         */
        protected ASTEndWhereStmtNode userAction(Token v1, ASTEndNameNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production679Production PRODUCTION679 = Production679Production.getInstance();

    public static class Production680Production extends Production
    {
        private Production680Production() {;} // Singleton
        private static Production680Production singletonInstance = null;
        public static final Production680Production getInstance() { if (singletonInstance == null) singletonInstance = new Production680Production(); return singletonInstance; }

        public String getDescription() { return "<EndWhereStmt> ::= LblDef:<LblDef> tendwhere:T_ENDWHERE teos:T_EOS  :production680"; }

        /**
         * Reduce by <EndWhereStmt> ::= LblDef:<LblDef> tendwhere:T_ENDWHERE teos:T_EOS  :production680
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndWhereStmt> ::= LblDef:<LblDef> tendwhere:T_ENDWHERE teos:T_EOS  :production680
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndWhereStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EndWhereStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tendwhere"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndWhereStmt> ::= LblDef:<LblDef> tendwhere:T_ENDWHERE teos:T_EOS  :production680
         */
        protected ASTEndWhereStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production680Production PRODUCTION680 = Production680Production.getInstance();

    public static class Production681Production extends Production
    {
        private Production681Production() {;} // Singleton
        private static Production681Production singletonInstance = null;
        public static final Production681Production getInstance() { if (singletonInstance == null) singletonInstance = new Production681Production(); return singletonInstance; }

        public String getDescription() { return "<EndWhereStmt> ::= LblDef:<LblDef> tendwhere:T_ENDWHERE <EndWhereStmt@55> teos:T_EOS  :production681"; }

        /**
         * Reduce by <EndWhereStmt> ::= LblDef:<LblDef> tendwhere:T_ENDWHERE <EndWhereStmt@55> teos:T_EOS  :production681
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndWhereStmt> ::= LblDef:<LblDef> tendwhere:T_ENDWHERE <EndWhereStmt@55> teos:T_EOS  :production681
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v3 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndWhereStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EndWhereStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tendwhere"))
                    return 1;
                else
                    if (name.equals("EndName"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndWhereStmt> ::= LblDef:<LblDef> tendwhere:T_ENDWHERE <EndWhereStmt@55> teos:T_EOS  :production681
         */
        protected ASTEndWhereStmtNode userAction(ASTLblDefNode v1, Token v2, ASTEndNameNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production681Production PRODUCTION681 = Production681Production.getInstance();

    public static class Production682Production extends Production
    {
        private Production682Production() {;} // Singleton
        private static Production682Production singletonInstance = null;
        public static final Production682Production getInstance() { if (singletonInstance == null) singletonInstance = new Production682Production(); return singletonInstance; }

        public String getDescription() { return "<EndWhereStmt> ::= tend:T_END twhere:T_WHERE teos:T_EOS  :production682"; }

        /**
         * Reduce by <EndWhereStmt> ::= tend:T_END twhere:T_WHERE teos:T_EOS  :production682
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndWhereStmt> ::= tend:T_END twhere:T_WHERE teos:T_EOS  :production682
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndWhereStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EndWhereStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tend"))
                return 0;
            else
                if (name.equals("twhere"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndWhereStmt> ::= tend:T_END twhere:T_WHERE teos:T_EOS  :production682
         */
        protected ASTEndWhereStmtNode userAction(Token v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production682Production PRODUCTION682 = Production682Production.getInstance();

    public static class Production683Production extends Production
    {
        private Production683Production() {;} // Singleton
        private static Production683Production singletonInstance = null;
        public static final Production683Production getInstance() { if (singletonInstance == null) singletonInstance = new Production683Production(); return singletonInstance; }

        public String getDescription() { return "<EndWhereStmt> ::= tend:T_END twhere:T_WHERE <EndWhereStmt@56> teos:T_EOS  :production683"; }

        /**
         * Reduce by <EndWhereStmt> ::= tend:T_END twhere:T_WHERE <EndWhereStmt@56> teos:T_EOS  :production683
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndWhereStmt> ::= tend:T_END twhere:T_WHERE <EndWhereStmt@56> teos:T_EOS  :production683
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v3 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndWhereStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EndWhereStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tend"))
                return 0;
            else
                if (name.equals("twhere"))
                    return 1;
                else
                    if (name.equals("EndName"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndWhereStmt> ::= tend:T_END twhere:T_WHERE <EndWhereStmt@56> teos:T_EOS  :production683
         */
        protected ASTEndWhereStmtNode userAction(Token v1, Token v2, ASTEndNameNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production683Production PRODUCTION683 = Production683Production.getInstance();

    public static class Production684Production extends Production
    {
        private Production684Production() {;} // Singleton
        private static Production684Production singletonInstance = null;
        public static final Production684Production getInstance() { if (singletonInstance == null) singletonInstance = new Production684Production(); return singletonInstance; }

        public String getDescription() { return "<EndWhereStmt> ::= LblDef:<LblDef> tend:T_END twhere:T_WHERE teos:T_EOS  :production684"; }

        /**
         * Reduce by <EndWhereStmt> ::= LblDef:<LblDef> tend:T_END twhere:T_WHERE teos:T_EOS  :production684
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndWhereStmt> ::= LblDef:<LblDef> tend:T_END twhere:T_WHERE teos:T_EOS  :production684
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndWhereStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EndWhereStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tend"))
                    return 1;
                else
                    if (name.equals("twhere"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndWhereStmt> ::= LblDef:<LblDef> tend:T_END twhere:T_WHERE teos:T_EOS  :production684
         */
        protected ASTEndWhereStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production684Production PRODUCTION684 = Production684Production.getInstance();

    public static class Production685Production extends Production
    {
        private Production685Production() {;} // Singleton
        private static Production685Production singletonInstance = null;
        public static final Production685Production getInstance() { if (singletonInstance == null) singletonInstance = new Production685Production(); return singletonInstance; }

        public String getDescription() { return "<EndWhereStmt> ::= LblDef:<LblDef> tend:T_END twhere:T_WHERE <EndWhereStmt@56> teos:T_EOS  :production685"; }

        /**
         * Reduce by <EndWhereStmt> ::= LblDef:<LblDef> tend:T_END twhere:T_WHERE <EndWhereStmt@56> teos:T_EOS  :production685
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndWhereStmt> ::= LblDef:<LblDef> tend:T_END twhere:T_WHERE <EndWhereStmt@56> teos:T_EOS  :production685
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v4 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndWhereStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.EndWhereStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tend"))
                    return 1;
                else
                    if (name.equals("twhere"))
                        return 2;
                    else
                        if (name.equals("EndName"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndWhereStmt> ::= LblDef:<LblDef> tend:T_END twhere:T_WHERE <EndWhereStmt@56> teos:T_EOS  :production685
         */
        protected ASTEndWhereStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, ASTEndNameNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production685Production PRODUCTION685 = Production685Production.getInstance();

    public static class Production686Production extends Production
    {
        private Production686Production() {;} // Singleton
        private static Production686Production singletonInstance = null;
        public static final Production686Production getInstance() { if (singletonInstance == null) singletonInstance = new Production686Production(); return singletonInstance; }

        public String getDescription() { return "<ForallConstruct> ::= ForallConstructStmt:<ForallConstructStmt> EndForallStmt:<EndForallStmt>  :production686"; }

        /**
         * Reduce by <ForallConstruct> ::= ForallConstructStmt:<ForallConstructStmt> EndForallStmt:<EndForallStmt>  :production686
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ForallConstruct> ::= ForallConstructStmt:<ForallConstructStmt> EndForallStmt:<EndForallStmt>  :production686
            ASTEndForallStmtNode v2 = (ASTEndForallStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTForallConstructStmtNode v1 = (ASTForallConstructStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTForallConstructNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.ForallConstructNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ForallConstructStmt"))
                return 0;
            else
                if (name.equals("EndForallStmt"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ForallConstruct> ::= ForallConstructStmt:<ForallConstructStmt> EndForallStmt:<EndForallStmt>  :production686
         */
        protected ASTForallConstructNode userAction(ASTForallConstructStmtNode v1, ASTEndForallStmtNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production686Production PRODUCTION686 = Production686Production.getInstance();

    public static class Production687Production extends Production
    {
        private Production687Production() {;} // Singleton
        private static Production687Production singletonInstance = null;
        public static final Production687Production getInstance() { if (singletonInstance == null) singletonInstance = new Production687Production(); return singletonInstance; }

        public String getDescription() { return "<ForallConstruct> ::= ForallConstructStmt:<ForallConstructStmt> ForallBody:<ForallBody> EndForallStmt:<EndForallStmt>  :production687"; }

        /**
         * Reduce by <ForallConstruct> ::= ForallConstructStmt:<ForallConstructStmt> ForallBody:<ForallBody> EndForallStmt:<EndForallStmt>  :production687
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ForallConstruct> ::= ForallConstructStmt:<ForallConstructStmt> ForallBody:<ForallBody> EndForallStmt:<EndForallStmt>  :production687
            ASTEndForallStmtNode v3 = (ASTEndForallStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTForallBodyNode v2 = (ASTForallBodyNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTForallConstructStmtNode v1 = (ASTForallConstructStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTForallConstructNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.ForallConstructNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ForallConstructStmt"))
                return 0;
            else
                if (name.equals("ForallBody"))
                    return 1;
                else
                    if (name.equals("EndForallStmt"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ForallConstruct> ::= ForallConstructStmt:<ForallConstructStmt> ForallBody:<ForallBody> EndForallStmt:<EndForallStmt>  :production687
         */
        protected ASTForallConstructNode userAction(ASTForallConstructStmtNode v1, ASTForallBodyNode v2, ASTEndForallStmtNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production687Production PRODUCTION687 = Production687Production.getInstance();

    public static class Production688Production extends Production
    {
        private Production688Production() {;} // Singleton
        private static Production688Production singletonInstance = null;
        public static final Production688Production getInstance() { if (singletonInstance == null) singletonInstance = new Production688Production(); return singletonInstance; }

        public String getDescription() { return "<ForallBody> ::= ForallBodyConstruct:<ForallBodyConstruct>  :production688"; }

        /**
         * Reduce by <ForallBody> ::= ForallBodyConstruct:<ForallBodyConstruct>  :production688
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ForallBody> ::= ForallBodyConstruct:<ForallBodyConstruct>  :production688
            ASTForallBodyConstructNode v1 = (ASTForallBodyConstructNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTForallBodyNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ForallBodyNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ForallBodyConstruct"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ForallBody> ::= ForallBodyConstruct:<ForallBodyConstruct>  :production688
         */
        protected ASTForallBodyNode userAction(ASTForallBodyConstructNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production688Production PRODUCTION688 = Production688Production.getInstance();

    public static class Production689Production extends Production
    {
        private Production689Production() {;} // Singleton
        private static Production689Production singletonInstance = null;
        public static final Production689Production getInstance() { if (singletonInstance == null) singletonInstance = new Production689Production(); return singletonInstance; }

        public String getDescription() { return "<ForallBody> ::= ForallBody:<ForallBody> ForallBodyConstruct:<ForallBodyConstruct>  :production689"; }

        /**
         * Reduce by <ForallBody> ::= ForallBody:<ForallBody> ForallBodyConstruct:<ForallBodyConstruct>  :production689
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ForallBody> ::= ForallBody:<ForallBody> ForallBodyConstruct:<ForallBodyConstruct>  :production689
            ASTForallBodyConstructNode v2 = (ASTForallBodyConstructNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTForallBodyNode v1 = (ASTForallBodyNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTForallBodyNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.ForallBodyNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ForallBody"))
                return 0;
            else
                if (name.equals("ForallBodyConstruct"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ForallBody> ::= ForallBody:<ForallBody> ForallBodyConstruct:<ForallBodyConstruct>  :production689
         */
        protected ASTForallBodyNode userAction(ASTForallBodyNode v1, ASTForallBodyConstructNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production689Production PRODUCTION689 = Production689Production.getInstance();

    public static class Production690Production extends Production
    {
        private Production690Production() {;} // Singleton
        private static Production690Production singletonInstance = null;
        public static final Production690Production getInstance() { if (singletonInstance == null) singletonInstance = new Production690Production(); return singletonInstance; }

        public String getDescription() { return "<ForallConstructStmt> ::= tforall:T_FORALL ForallHeader:<ForallHeader> teos:T_EOS  :production690"; }

        /**
         * Reduce by <ForallConstructStmt> ::= tforall:T_FORALL ForallHeader:<ForallHeader> teos:T_EOS  :production690
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ForallConstructStmt> ::= tforall:T_FORALL ForallHeader:<ForallHeader> teos:T_EOS  :production690
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTForallHeaderNode v2 = (ASTForallHeaderNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTForallConstructStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.ForallConstructStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tforall"))
                return 0;
            else
                if (name.equals("ForallHeader"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ForallConstructStmt> ::= tforall:T_FORALL ForallHeader:<ForallHeader> teos:T_EOS  :production690
         */
        protected ASTForallConstructStmtNode userAction(Token v1, ASTForallHeaderNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production690Production PRODUCTION690 = Production690Production.getInstance();

    public static class Production691Production extends Production
    {
        private Production691Production() {;} // Singleton
        private static Production691Production singletonInstance = null;
        public static final Production691Production getInstance() { if (singletonInstance == null) singletonInstance = new Production691Production(); return singletonInstance; }

        public String getDescription() { return "<ForallConstructStmt> ::= LblDef:<LblDef> tforall:T_FORALL ForallHeader:<ForallHeader> teos:T_EOS  :production691"; }

        /**
         * Reduce by <ForallConstructStmt> ::= LblDef:<LblDef> tforall:T_FORALL ForallHeader:<ForallHeader> teos:T_EOS  :production691
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ForallConstructStmt> ::= LblDef:<LblDef> tforall:T_FORALL ForallHeader:<ForallHeader> teos:T_EOS  :production691
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTForallHeaderNode v3 = (ASTForallHeaderNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTForallConstructStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.ForallConstructStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tforall"))
                    return 1;
                else
                    if (name.equals("ForallHeader"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ForallConstructStmt> ::= LblDef:<LblDef> tforall:T_FORALL ForallHeader:<ForallHeader> teos:T_EOS  :production691
         */
        protected ASTForallConstructStmtNode userAction(ASTLblDefNode v1, Token v2, ASTForallHeaderNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production691Production PRODUCTION691 = Production691Production.getInstance();

    public static class Production692Production extends Production
    {
        private Production692Production() {;} // Singleton
        private static Production692Production singletonInstance = null;
        public static final Production692Production getInstance() { if (singletonInstance == null) singletonInstance = new Production692Production(); return singletonInstance; }

        public String getDescription() { return "<ForallConstructStmt> ::= Name:<Name> tcolon:T_COLON tforall:T_FORALL ForallHeader:<ForallHeader> teos:T_EOS  :production692"; }

        /**
         * Reduce by <ForallConstructStmt> ::= Name:<Name> tcolon:T_COLON tforall:T_FORALL ForallHeader:<ForallHeader> teos:T_EOS  :production692
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ForallConstructStmt> ::= Name:<Name> tcolon:T_COLON tforall:T_FORALL ForallHeader:<ForallHeader> teos:T_EOS  :production692
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTForallHeaderNode v4 = (ASTForallHeaderNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTForallConstructStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.ForallConstructStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tcolon"))
                    return 1;
                else
                    if (name.equals("tforall"))
                        return 2;
                    else
                        if (name.equals("ForallHeader"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ForallConstructStmt> ::= Name:<Name> tcolon:T_COLON tforall:T_FORALL ForallHeader:<ForallHeader> teos:T_EOS  :production692
         */
        protected ASTForallConstructStmtNode userAction(ASTNameNode v1, Token v2, Token v3, ASTForallHeaderNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production692Production PRODUCTION692 = Production692Production.getInstance();

    public static class Production693Production extends Production
    {
        private Production693Production() {;} // Singleton
        private static Production693Production singletonInstance = null;
        public static final Production693Production getInstance() { if (singletonInstance == null) singletonInstance = new Production693Production(); return singletonInstance; }

        public String getDescription() { return "<ForallConstructStmt> ::= LblDef:<LblDef> Name:<Name> tcolon:T_COLON tforall:T_FORALL ForallHeader:<ForallHeader> teos:T_EOS  :production693"; }

        /**
         * Reduce by <ForallConstructStmt> ::= LblDef:<LblDef> Name:<Name> tcolon:T_COLON tforall:T_FORALL ForallHeader:<ForallHeader> teos:T_EOS  :production693
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ForallConstructStmt> ::= LblDef:<LblDef> Name:<Name> tcolon:T_COLON tforall:T_FORALL ForallHeader:<ForallHeader> teos:T_EOS  :production693
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTForallHeaderNode v5 = (ASTForallHeaderNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v2 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTForallConstructStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.ForallConstructStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("Name"))
                    return 1;
                else
                    if (name.equals("tcolon"))
                        return 2;
                    else
                        if (name.equals("tforall"))
                            return 3;
                        else
                            if (name.equals("ForallHeader"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ForallConstructStmt> ::= LblDef:<LblDef> Name:<Name> tcolon:T_COLON tforall:T_FORALL ForallHeader:<ForallHeader> teos:T_EOS  :production693
         */
        protected ASTForallConstructStmtNode userAction(ASTLblDefNode v1, ASTNameNode v2, Token v3, Token v4, ASTForallHeaderNode v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production693Production PRODUCTION693 = Production693Production.getInstance();

    public static class Production694Production extends Production
    {
        private Production694Production() {;} // Singleton
        private static Production694Production singletonInstance = null;
        public static final Production694Production getInstance() { if (singletonInstance == null) singletonInstance = new Production694Production(); return singletonInstance; }

        public String getDescription() { return "<ForallHeader> ::= tlparen:T_LPAREN ForallTripletSpecList:<ForallTripletSpecList> trparen:T_RPAREN  :production694"; }

        /**
         * Reduce by <ForallHeader> ::= tlparen:T_LPAREN ForallTripletSpecList:<ForallTripletSpecList> trparen:T_RPAREN  :production694
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ForallHeader> ::= tlparen:T_LPAREN ForallTripletSpecList:<ForallTripletSpecList> trparen:T_RPAREN  :production694
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTForallTripletSpecListNode v2 = (ASTForallTripletSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTForallHeaderNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.ForallHeaderNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("ForallTripletSpecList"))
                    return 1;
                else
                    if (name.equals("trparen"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ForallHeader> ::= tlparen:T_LPAREN ForallTripletSpecList:<ForallTripletSpecList> trparen:T_RPAREN  :production694
         */
        protected ASTForallHeaderNode userAction(Token v1, ASTForallTripletSpecListNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production694Production PRODUCTION694 = Production694Production.getInstance();

    public static class Production695Production extends Production
    {
        private Production695Production() {;} // Singleton
        private static Production695Production singletonInstance = null;
        public static final Production695Production getInstance() { if (singletonInstance == null) singletonInstance = new Production695Production(); return singletonInstance; }

        public String getDescription() { return "<ForallHeader> ::= tlparen:T_LPAREN ForallTripletSpecList:<ForallTripletSpecList> tcomma:T_COMMA ScalarMaskExpr:<ScalarMaskExpr> trparen:T_RPAREN  :production695"; }

        /**
         * Reduce by <ForallHeader> ::= tlparen:T_LPAREN ForallTripletSpecList:<ForallTripletSpecList> tcomma:T_COMMA ScalarMaskExpr:<ScalarMaskExpr> trparen:T_RPAREN  :production695
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ForallHeader> ::= tlparen:T_LPAREN ForallTripletSpecList:<ForallTripletSpecList> tcomma:T_COMMA ScalarMaskExpr:<ScalarMaskExpr> trparen:T_RPAREN  :production695
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTScalarMaskExprNode v4 = (ASTScalarMaskExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTForallTripletSpecListNode v2 = (ASTForallTripletSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTForallHeaderNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.ForallHeaderNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("ForallTripletSpecList"))
                    return 1;
                else
                    if (name.equals("tcomma"))
                        return 2;
                    else
                        if (name.equals("ScalarMaskExpr"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ForallHeader> ::= tlparen:T_LPAREN ForallTripletSpecList:<ForallTripletSpecList> tcomma:T_COMMA ScalarMaskExpr:<ScalarMaskExpr> trparen:T_RPAREN  :production695
         */
        protected ASTForallHeaderNode userAction(Token v1, ASTForallTripletSpecListNode v2, Token v3, ASTScalarMaskExprNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production695Production PRODUCTION695 = Production695Production.getInstance();

    public static class Production696Production extends Production
    {
        private Production696Production() {;} // Singleton
        private static Production696Production singletonInstance = null;
        public static final Production696Production getInstance() { if (singletonInstance == null) singletonInstance = new Production696Production(); return singletonInstance; }

        public String getDescription() { return "<ScalarMaskExpr> ::= MaskExpr:<MaskExpr>  :production696"; }

        /**
         * Reduce by <ScalarMaskExpr> ::= MaskExpr:<MaskExpr>  :production696
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ScalarMaskExpr> ::= MaskExpr:<MaskExpr>  :production696
            ASTMaskExprNode v1 = (ASTMaskExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTScalarMaskExprNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ScalarMaskExprNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("MaskExpr"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ScalarMaskExpr> ::= MaskExpr:<MaskExpr>  :production696
         */
        protected ASTScalarMaskExprNode userAction(ASTMaskExprNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production696Production PRODUCTION696 = Production696Production.getInstance();

    public static class Production697Production extends Production
    {
        private Production697Production() {;} // Singleton
        private static Production697Production singletonInstance = null;
        public static final Production697Production getInstance() { if (singletonInstance == null) singletonInstance = new Production697Production(); return singletonInstance; }

        public String getDescription() { return "<ForallTripletSpecList> ::= Name:<Name> tequals:T_EQUALS Subscript:<Subscript> tcolon:T_COLON Subscript2:<Subscript>  :production697"; }

        /**
         * Reduce by <ForallTripletSpecList> ::= Name:<Name> tequals:T_EQUALS Subscript:<Subscript> tcolon:T_COLON Subscript2:<Subscript>  :production697
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ForallTripletSpecList> ::= Name:<Name> tequals:T_EQUALS Subscript:<Subscript> tcolon:T_COLON Subscript2:<Subscript>  :production697
            ASTSubscriptNode v5 = (ASTSubscriptNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubscriptNode v3 = (ASTSubscriptNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTForallTripletSpecListNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.ForallTripletSpecListNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tequals"))
                    return 1;
                else
                    if (name.equals("Subscript"))
                        return 2;
                    else
                        if (name.equals("tcolon"))
                            return 3;
                        else
                            if (name.equals("Subscript2"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ForallTripletSpecList> ::= Name:<Name> tequals:T_EQUALS Subscript:<Subscript> tcolon:T_COLON Subscript2:<Subscript>  :production697
         */
        protected ASTForallTripletSpecListNode userAction(ASTNameNode v1, Token v2, ASTSubscriptNode v3, Token v4, ASTSubscriptNode v5)
        {
            return null;
        }
    }
    public static final Productions.Production697Production PRODUCTION697 = Production697Production.getInstance();

    public static class Production698Production extends Production
    {
        private Production698Production() {;} // Singleton
        private static Production698Production singletonInstance = null;
        public static final Production698Production getInstance() { if (singletonInstance == null) singletonInstance = new Production698Production(); return singletonInstance; }

        public String getDescription() { return "<ForallTripletSpecList> ::= Name:<Name> tequals:T_EQUALS Subscript:<Subscript> tcolon:T_COLON Subscript2:<Subscript> tcolon2:T_COLON Expr:<Expr>  :production698"; }

        /**
         * Reduce by <ForallTripletSpecList> ::= Name:<Name> tequals:T_EQUALS Subscript:<Subscript> tcolon:T_COLON Subscript2:<Subscript> tcolon2:T_COLON Expr:<Expr>  :production698
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ForallTripletSpecList> ::= Name:<Name> tequals:T_EQUALS Subscript:<Subscript> tcolon:T_COLON Subscript2:<Subscript> tcolon2:T_COLON Expr:<Expr>  :production698
            ASTExprNode v7 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubscriptNode v5 = (ASTSubscriptNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubscriptNode v3 = (ASTSubscriptNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTForallTripletSpecListNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7);

            // The production has 7 symbols on its RHS
            parser.reduce(Nonterminal.ForallTripletSpecListNonterminal.getInstance(), 7, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tequals"))
                    return 1;
                else
                    if (name.equals("Subscript"))
                        return 2;
                    else
                        if (name.equals("tcolon"))
                            return 3;
                        else
                            if (name.equals("Subscript2"))
                                return 4;
                            else
                                if (name.equals("tcolon2"))
                                    return 5;
                                else
                                    if (name.equals("Expr"))
                                        return 6;
                                    else
                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ForallTripletSpecList> ::= Name:<Name> tequals:T_EQUALS Subscript:<Subscript> tcolon:T_COLON Subscript2:<Subscript> tcolon2:T_COLON Expr:<Expr>  :production698
         */
        protected ASTForallTripletSpecListNode userAction(ASTNameNode v1, Token v2, ASTSubscriptNode v3, Token v4, ASTSubscriptNode v5, Token v6, ASTExprNode v7)
        {
            return null;
        }
    }
    public static final Productions.Production698Production PRODUCTION698 = Production698Production.getInstance();

    public static class Production699Production extends Production
    {
        private Production699Production() {;} // Singleton
        private static Production699Production singletonInstance = null;
        public static final Production699Production getInstance() { if (singletonInstance == null) singletonInstance = new Production699Production(); return singletonInstance; }

        public String getDescription() { return "<ForallBodyConstruct> ::= AssignmentStmt:<AssignmentStmt>  :production699"; }

        /**
         * Reduce by <ForallBodyConstruct> ::= AssignmentStmt:<AssignmentStmt>  :production699
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ForallBodyConstruct> ::= AssignmentStmt:<AssignmentStmt>  :production699
            ASTAssignmentStmtNode v1 = (ASTAssignmentStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTForallBodyConstructNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ForallBodyConstructNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("AssignmentStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ForallBodyConstruct> ::= AssignmentStmt:<AssignmentStmt>  :production699
         */
        protected ASTForallBodyConstructNode userAction(ASTAssignmentStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production699Production PRODUCTION699 = Production699Production.getInstance();

    public static class Production700Production extends Production
    {
        private Production700Production() {;} // Singleton
        private static Production700Production singletonInstance = null;
        public static final Production700Production getInstance() { if (singletonInstance == null) singletonInstance = new Production700Production(); return singletonInstance; }

        public String getDescription() { return "<ForallBodyConstruct> ::= PointerAssignmentStmt:<PointerAssignmentStmt>  :production700"; }

        /**
         * Reduce by <ForallBodyConstruct> ::= PointerAssignmentStmt:<PointerAssignmentStmt>  :production700
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ForallBodyConstruct> ::= PointerAssignmentStmt:<PointerAssignmentStmt>  :production700
            ASTPointerAssignmentStmtNode v1 = (ASTPointerAssignmentStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTForallBodyConstructNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ForallBodyConstructNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("PointerAssignmentStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ForallBodyConstruct> ::= PointerAssignmentStmt:<PointerAssignmentStmt>  :production700
         */
        protected ASTForallBodyConstructNode userAction(ASTPointerAssignmentStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production700Production PRODUCTION700 = Production700Production.getInstance();

    public static class Production701Production extends Production
    {
        private Production701Production() {;} // Singleton
        private static Production701Production singletonInstance = null;
        public static final Production701Production getInstance() { if (singletonInstance == null) singletonInstance = new Production701Production(); return singletonInstance; }

        public String getDescription() { return "<ForallBodyConstruct> ::= WhereStmt:<WhereStmt>  :production701"; }

        /**
         * Reduce by <ForallBodyConstruct> ::= WhereStmt:<WhereStmt>  :production701
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ForallBodyConstruct> ::= WhereStmt:<WhereStmt>  :production701
            ASTWhereStmtNode v1 = (ASTWhereStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTForallBodyConstructNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ForallBodyConstructNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("WhereStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ForallBodyConstruct> ::= WhereStmt:<WhereStmt>  :production701
         */
        protected ASTForallBodyConstructNode userAction(ASTWhereStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production701Production PRODUCTION701 = Production701Production.getInstance();

    public static class Production702Production extends Production
    {
        private Production702Production() {;} // Singleton
        private static Production702Production singletonInstance = null;
        public static final Production702Production getInstance() { if (singletonInstance == null) singletonInstance = new Production702Production(); return singletonInstance; }

        public String getDescription() { return "<ForallBodyConstruct> ::= WhereConstruct:<WhereConstruct>  :production702"; }

        /**
         * Reduce by <ForallBodyConstruct> ::= WhereConstruct:<WhereConstruct>  :production702
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ForallBodyConstruct> ::= WhereConstruct:<WhereConstruct>  :production702
            ASTWhereConstructNode v1 = (ASTWhereConstructNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTForallBodyConstructNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ForallBodyConstructNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("WhereConstruct"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ForallBodyConstruct> ::= WhereConstruct:<WhereConstruct>  :production702
         */
        protected ASTForallBodyConstructNode userAction(ASTWhereConstructNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production702Production PRODUCTION702 = Production702Production.getInstance();

    public static class Production703Production extends Production
    {
        private Production703Production() {;} // Singleton
        private static Production703Production singletonInstance = null;
        public static final Production703Production getInstance() { if (singletonInstance == null) singletonInstance = new Production703Production(); return singletonInstance; }

        public String getDescription() { return "<ForallBodyConstruct> ::= ForallConstruct:<ForallConstruct>  :production703"; }

        /**
         * Reduce by <ForallBodyConstruct> ::= ForallConstruct:<ForallConstruct>  :production703
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ForallBodyConstruct> ::= ForallConstruct:<ForallConstruct>  :production703
            ASTForallConstructNode v1 = (ASTForallConstructNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTForallBodyConstructNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ForallBodyConstructNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ForallConstruct"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ForallBodyConstruct> ::= ForallConstruct:<ForallConstruct>  :production703
         */
        protected ASTForallBodyConstructNode userAction(ASTForallConstructNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production703Production PRODUCTION703 = Production703Production.getInstance();

    public static class Production704Production extends Production
    {
        private Production704Production() {;} // Singleton
        private static Production704Production singletonInstance = null;
        public static final Production704Production getInstance() { if (singletonInstance == null) singletonInstance = new Production704Production(); return singletonInstance; }

        public String getDescription() { return "<ForallBodyConstruct> ::= ForallStmt:<ForallStmt>  :production704"; }

        /**
         * Reduce by <ForallBodyConstruct> ::= ForallStmt:<ForallStmt>  :production704
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ForallBodyConstruct> ::= ForallStmt:<ForallStmt>  :production704
            ASTForallStmtNode v1 = (ASTForallStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTForallBodyConstructNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ForallBodyConstructNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ForallStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ForallBodyConstruct> ::= ForallStmt:<ForallStmt>  :production704
         */
        protected ASTForallBodyConstructNode userAction(ASTForallStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production704Production PRODUCTION704 = Production704Production.getInstance();

    public static class Production705Production extends Production
    {
        private Production705Production() {;} // Singleton
        private static Production705Production singletonInstance = null;
        public static final Production705Production getInstance() { if (singletonInstance == null) singletonInstance = new Production705Production(); return singletonInstance; }

        public String getDescription() { return "<EndForallStmt> ::= tend:T_END tforall:T_FORALL teos:T_EOS  :production705"; }

        /**
         * Reduce by <EndForallStmt> ::= tend:T_END tforall:T_FORALL teos:T_EOS  :production705
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndForallStmt> ::= tend:T_END tforall:T_FORALL teos:T_EOS  :production705
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndForallStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EndForallStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tend"))
                return 0;
            else
                if (name.equals("tforall"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndForallStmt> ::= tend:T_END tforall:T_FORALL teos:T_EOS  :production705
         */
        protected ASTEndForallStmtNode userAction(Token v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production705Production PRODUCTION705 = Production705Production.getInstance();

    public static class Production706Production extends Production
    {
        private Production706Production() {;} // Singleton
        private static Production706Production singletonInstance = null;
        public static final Production706Production getInstance() { if (singletonInstance == null) singletonInstance = new Production706Production(); return singletonInstance; }

        public String getDescription() { return "<EndForallStmt> ::= tend:T_END tforall:T_FORALL <EndForallStmt@57> teos:T_EOS  :production706"; }

        /**
         * Reduce by <EndForallStmt> ::= tend:T_END tforall:T_FORALL <EndForallStmt@57> teos:T_EOS  :production706
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndForallStmt> ::= tend:T_END tforall:T_FORALL <EndForallStmt@57> teos:T_EOS  :production706
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v3 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndForallStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EndForallStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tend"))
                return 0;
            else
                if (name.equals("tforall"))
                    return 1;
                else
                    if (name.equals("EndName"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndForallStmt> ::= tend:T_END tforall:T_FORALL <EndForallStmt@57> teos:T_EOS  :production706
         */
        protected ASTEndForallStmtNode userAction(Token v1, Token v2, ASTEndNameNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production706Production PRODUCTION706 = Production706Production.getInstance();

    public static class Production707Production extends Production
    {
        private Production707Production() {;} // Singleton
        private static Production707Production singletonInstance = null;
        public static final Production707Production getInstance() { if (singletonInstance == null) singletonInstance = new Production707Production(); return singletonInstance; }

        public String getDescription() { return "<EndForallStmt> ::= LblDef:<LblDef> tend:T_END tforall:T_FORALL teos:T_EOS  :production707"; }

        /**
         * Reduce by <EndForallStmt> ::= LblDef:<LblDef> tend:T_END tforall:T_FORALL teos:T_EOS  :production707
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndForallStmt> ::= LblDef:<LblDef> tend:T_END tforall:T_FORALL teos:T_EOS  :production707
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndForallStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EndForallStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tend"))
                    return 1;
                else
                    if (name.equals("tforall"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndForallStmt> ::= LblDef:<LblDef> tend:T_END tforall:T_FORALL teos:T_EOS  :production707
         */
        protected ASTEndForallStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production707Production PRODUCTION707 = Production707Production.getInstance();

    public static class Production708Production extends Production
    {
        private Production708Production() {;} // Singleton
        private static Production708Production singletonInstance = null;
        public static final Production708Production getInstance() { if (singletonInstance == null) singletonInstance = new Production708Production(); return singletonInstance; }

        public String getDescription() { return "<EndForallStmt> ::= LblDef:<LblDef> tend:T_END tforall:T_FORALL <EndForallStmt@57> teos:T_EOS  :production708"; }

        /**
         * Reduce by <EndForallStmt> ::= LblDef:<LblDef> tend:T_END tforall:T_FORALL <EndForallStmt@57> teos:T_EOS  :production708
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndForallStmt> ::= LblDef:<LblDef> tend:T_END tforall:T_FORALL <EndForallStmt@57> teos:T_EOS  :production708
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v4 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndForallStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.EndForallStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tend"))
                    return 1;
                else
                    if (name.equals("tforall"))
                        return 2;
                    else
                        if (name.equals("EndName"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndForallStmt> ::= LblDef:<LblDef> tend:T_END tforall:T_FORALL <EndForallStmt@57> teos:T_EOS  :production708
         */
        protected ASTEndForallStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, ASTEndNameNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production708Production PRODUCTION708 = Production708Production.getInstance();

    public static class Production709Production extends Production
    {
        private Production709Production() {;} // Singleton
        private static Production709Production singletonInstance = null;
        public static final Production709Production getInstance() { if (singletonInstance == null) singletonInstance = new Production709Production(); return singletonInstance; }

        public String getDescription() { return "<EndForallStmt> ::= tendforall:T_ENDFORALL teos:T_EOS  :production709"; }

        /**
         * Reduce by <EndForallStmt> ::= tendforall:T_ENDFORALL teos:T_EOS  :production709
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndForallStmt> ::= tendforall:T_ENDFORALL teos:T_EOS  :production709
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndForallStmtNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.EndForallStmtNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tendforall"))
                return 0;
            else
                if (name.equals("teos"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndForallStmt> ::= tendforall:T_ENDFORALL teos:T_EOS  :production709
         */
        protected ASTEndForallStmtNode userAction(Token v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production709Production PRODUCTION709 = Production709Production.getInstance();

    public static class Production710Production extends Production
    {
        private Production710Production() {;} // Singleton
        private static Production710Production singletonInstance = null;
        public static final Production710Production getInstance() { if (singletonInstance == null) singletonInstance = new Production710Production(); return singletonInstance; }

        public String getDescription() { return "<EndForallStmt> ::= tendforall:T_ENDFORALL <EndForallStmt@58> teos:T_EOS  :production710"; }

        /**
         * Reduce by <EndForallStmt> ::= tendforall:T_ENDFORALL <EndForallStmt@58> teos:T_EOS  :production710
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndForallStmt> ::= tendforall:T_ENDFORALL <EndForallStmt@58> teos:T_EOS  :production710
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v2 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndForallStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EndForallStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tendforall"))
                return 0;
            else
                if (name.equals("EndName"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndForallStmt> ::= tendforall:T_ENDFORALL <EndForallStmt@58> teos:T_EOS  :production710
         */
        protected ASTEndForallStmtNode userAction(Token v1, ASTEndNameNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production710Production PRODUCTION710 = Production710Production.getInstance();

    public static class Production711Production extends Production
    {
        private Production711Production() {;} // Singleton
        private static Production711Production singletonInstance = null;
        public static final Production711Production getInstance() { if (singletonInstance == null) singletonInstance = new Production711Production(); return singletonInstance; }

        public String getDescription() { return "<EndForallStmt> ::= LblDef:<LblDef> tendforall:T_ENDFORALL teos:T_EOS  :production711"; }

        /**
         * Reduce by <EndForallStmt> ::= LblDef:<LblDef> tendforall:T_ENDFORALL teos:T_EOS  :production711
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndForallStmt> ::= LblDef:<LblDef> tendforall:T_ENDFORALL teos:T_EOS  :production711
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndForallStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EndForallStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tendforall"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndForallStmt> ::= LblDef:<LblDef> tendforall:T_ENDFORALL teos:T_EOS  :production711
         */
        protected ASTEndForallStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production711Production PRODUCTION711 = Production711Production.getInstance();

    public static class Production712Production extends Production
    {
        private Production712Production() {;} // Singleton
        private static Production712Production singletonInstance = null;
        public static final Production712Production getInstance() { if (singletonInstance == null) singletonInstance = new Production712Production(); return singletonInstance; }

        public String getDescription() { return "<EndForallStmt> ::= LblDef:<LblDef> tendforall:T_ENDFORALL <EndForallStmt@58> teos:T_EOS  :production712"; }

        /**
         * Reduce by <EndForallStmt> ::= LblDef:<LblDef> tendforall:T_ENDFORALL <EndForallStmt@58> teos:T_EOS  :production712
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndForallStmt> ::= LblDef:<LblDef> tendforall:T_ENDFORALL <EndForallStmt@58> teos:T_EOS  :production712
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v3 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndForallStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EndForallStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tendforall"))
                    return 1;
                else
                    if (name.equals("EndName"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndForallStmt> ::= LblDef:<LblDef> tendforall:T_ENDFORALL <EndForallStmt@58> teos:T_EOS  :production712
         */
        protected ASTEndForallStmtNode userAction(ASTLblDefNode v1, Token v2, ASTEndNameNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production712Production PRODUCTION712 = Production712Production.getInstance();

    public static class Production713Production extends Production
    {
        private Production713Production() {;} // Singleton
        private static Production713Production singletonInstance = null;
        public static final Production713Production getInstance() { if (singletonInstance == null) singletonInstance = new Production713Production(); return singletonInstance; }

        public String getDescription() { return "<ForallStmt> ::= tforall:T_FORALL ForallHeader:<ForallHeader> AssignmentStmt:<AssignmentStmt> teos:T_EOS  :production713"; }

        /**
         * Reduce by <ForallStmt> ::= tforall:T_FORALL ForallHeader:<ForallHeader> AssignmentStmt:<AssignmentStmt> teos:T_EOS  :production713
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ForallStmt> ::= tforall:T_FORALL ForallHeader:<ForallHeader> AssignmentStmt:<AssignmentStmt> teos:T_EOS  :production713
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTAssignmentStmtNode v3 = (ASTAssignmentStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTForallHeaderNode v2 = (ASTForallHeaderNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTForallStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.ForallStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tforall"))
                return 0;
            else
                if (name.equals("ForallHeader"))
                    return 1;
                else
                    if (name.equals("AssignmentStmt"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ForallStmt> ::= tforall:T_FORALL ForallHeader:<ForallHeader> AssignmentStmt:<AssignmentStmt> teos:T_EOS  :production713
         */
        protected ASTForallStmtNode userAction(Token v1, ASTForallHeaderNode v2, ASTAssignmentStmtNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production713Production PRODUCTION713 = Production713Production.getInstance();

    public static class Production714Production extends Production
    {
        private Production714Production() {;} // Singleton
        private static Production714Production singletonInstance = null;
        public static final Production714Production getInstance() { if (singletonInstance == null) singletonInstance = new Production714Production(); return singletonInstance; }

        public String getDescription() { return "<ForallStmt> ::= LblDef:<LblDef> tforall:T_FORALL ForallHeader:<ForallHeader> AssignmentStmt:<AssignmentStmt> teos:T_EOS  :production714"; }

        /**
         * Reduce by <ForallStmt> ::= LblDef:<LblDef> tforall:T_FORALL ForallHeader:<ForallHeader> AssignmentStmt:<AssignmentStmt> teos:T_EOS  :production714
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ForallStmt> ::= LblDef:<LblDef> tforall:T_FORALL ForallHeader:<ForallHeader> AssignmentStmt:<AssignmentStmt> teos:T_EOS  :production714
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTAssignmentStmtNode v4 = (ASTAssignmentStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTForallHeaderNode v3 = (ASTForallHeaderNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTForallStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.ForallStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tforall"))
                    return 1;
                else
                    if (name.equals("ForallHeader"))
                        return 2;
                    else
                        if (name.equals("AssignmentStmt"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ForallStmt> ::= LblDef:<LblDef> tforall:T_FORALL ForallHeader:<ForallHeader> AssignmentStmt:<AssignmentStmt> teos:T_EOS  :production714
         */
        protected ASTForallStmtNode userAction(ASTLblDefNode v1, Token v2, ASTForallHeaderNode v3, ASTAssignmentStmtNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production714Production PRODUCTION714 = Production714Production.getInstance();

    public static class Production715Production extends Production
    {
        private Production715Production() {;} // Singleton
        private static Production715Production singletonInstance = null;
        public static final Production715Production getInstance() { if (singletonInstance == null) singletonInstance = new Production715Production(); return singletonInstance; }

        public String getDescription() { return "<ForallStmt> ::= tforall:T_FORALL ForallHeader:<ForallHeader> PointerAssignmentStmt:<PointerAssignmentStmt> teos:T_EOS  :production715"; }

        /**
         * Reduce by <ForallStmt> ::= tforall:T_FORALL ForallHeader:<ForallHeader> PointerAssignmentStmt:<PointerAssignmentStmt> teos:T_EOS  :production715
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ForallStmt> ::= tforall:T_FORALL ForallHeader:<ForallHeader> PointerAssignmentStmt:<PointerAssignmentStmt> teos:T_EOS  :production715
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTPointerAssignmentStmtNode v3 = (ASTPointerAssignmentStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTForallHeaderNode v2 = (ASTForallHeaderNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTForallStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.ForallStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tforall"))
                return 0;
            else
                if (name.equals("ForallHeader"))
                    return 1;
                else
                    if (name.equals("PointerAssignmentStmt"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ForallStmt> ::= tforall:T_FORALL ForallHeader:<ForallHeader> PointerAssignmentStmt:<PointerAssignmentStmt> teos:T_EOS  :production715
         */
        protected ASTForallStmtNode userAction(Token v1, ASTForallHeaderNode v2, ASTPointerAssignmentStmtNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production715Production PRODUCTION715 = Production715Production.getInstance();

    public static class Production716Production extends Production
    {
        private Production716Production() {;} // Singleton
        private static Production716Production singletonInstance = null;
        public static final Production716Production getInstance() { if (singletonInstance == null) singletonInstance = new Production716Production(); return singletonInstance; }

        public String getDescription() { return "<ForallStmt> ::= LblDef:<LblDef> tforall:T_FORALL ForallHeader:<ForallHeader> PointerAssignmentStmt:<PointerAssignmentStmt> teos:T_EOS  :production716"; }

        /**
         * Reduce by <ForallStmt> ::= LblDef:<LblDef> tforall:T_FORALL ForallHeader:<ForallHeader> PointerAssignmentStmt:<PointerAssignmentStmt> teos:T_EOS  :production716
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ForallStmt> ::= LblDef:<LblDef> tforall:T_FORALL ForallHeader:<ForallHeader> PointerAssignmentStmt:<PointerAssignmentStmt> teos:T_EOS  :production716
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTPointerAssignmentStmtNode v4 = (ASTPointerAssignmentStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTForallHeaderNode v3 = (ASTForallHeaderNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTForallStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.ForallStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tforall"))
                    return 1;
                else
                    if (name.equals("ForallHeader"))
                        return 2;
                    else
                        if (name.equals("PointerAssignmentStmt"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ForallStmt> ::= LblDef:<LblDef> tforall:T_FORALL ForallHeader:<ForallHeader> PointerAssignmentStmt:<PointerAssignmentStmt> teos:T_EOS  :production716
         */
        protected ASTForallStmtNode userAction(ASTLblDefNode v1, Token v2, ASTForallHeaderNode v3, ASTPointerAssignmentStmtNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production716Production PRODUCTION716 = Production716Production.getInstance();

    public static class Production717Production extends Production
    {
        private Production717Production() {;} // Singleton
        private static Production717Production singletonInstance = null;
        public static final Production717Production getInstance() { if (singletonInstance == null) singletonInstance = new Production717Production(); return singletonInstance; }

        public String getDescription() { return "<IfConstruct> ::= IfThenStmt:<IfThenStmt> ThenPart:<ThenPart>  :production717"; }

        /**
         * Reduce by <IfConstruct> ::= IfThenStmt:<IfThenStmt> ThenPart:<ThenPart>  :production717
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <IfConstruct> ::= IfThenStmt:<IfThenStmt> ThenPart:<ThenPart>  :production717
            ASTThenPartNode v2 = (ASTThenPartNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTIfThenStmtNode v1 = (ASTIfThenStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTIfConstructNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.IfConstructNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("IfThenStmt"))
                return 0;
            else
                if (name.equals("ThenPart"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <IfConstruct> ::= IfThenStmt:<IfThenStmt> ThenPart:<ThenPart>  :production717
         */
        protected ASTIfConstructNode userAction(ASTIfThenStmtNode v1, ASTThenPartNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production717Production PRODUCTION717 = Production717Production.getInstance();

    public static class Production718Production extends Production
    {
        private Production718Production() {;} // Singleton
        private static Production718Production singletonInstance = null;
        public static final Production718Production getInstance() { if (singletonInstance == null) singletonInstance = new Production718Production(); return singletonInstance; }

        public String getDescription() { return "<ThenPart> ::= EndIfStmt:<EndIfStmt>  :production718"; }

        /**
         * Reduce by <ThenPart> ::= EndIfStmt:<EndIfStmt>  :production718
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ThenPart> ::= EndIfStmt:<EndIfStmt>  :production718
            ASTEndIfStmtNode v1 = (ASTEndIfStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTThenPartNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ThenPartNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EndIfStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ThenPart> ::= EndIfStmt:<EndIfStmt>  :production718
         */
        protected ASTThenPartNode userAction(ASTEndIfStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production718Production PRODUCTION718 = Production718Production.getInstance();

    public static class Production719Production extends Production
    {
        private Production719Production() {;} // Singleton
        private static Production719Production singletonInstance = null;
        public static final Production719Production getInstance() { if (singletonInstance == null) singletonInstance = new Production719Production(); return singletonInstance; }

        public String getDescription() { return "<ThenPart> ::= ConditionalBody:<ConditionalBody> EndIfStmt:<EndIfStmt>  :production719"; }

        /**
         * Reduce by <ThenPart> ::= ConditionalBody:<ConditionalBody> EndIfStmt:<EndIfStmt>  :production719
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ThenPart> ::= ConditionalBody:<ConditionalBody> EndIfStmt:<EndIfStmt>  :production719
            ASTEndIfStmtNode v2 = (ASTEndIfStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTConditionalBodyNode v1 = (ASTConditionalBodyNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTThenPartNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.ThenPartNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ConditionalBody"))
                return 0;
            else
                if (name.equals("EndIfStmt"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ThenPart> ::= ConditionalBody:<ConditionalBody> EndIfStmt:<EndIfStmt>  :production719
         */
        protected ASTThenPartNode userAction(ASTConditionalBodyNode v1, ASTEndIfStmtNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production719Production PRODUCTION719 = Production719Production.getInstance();

    public static class Production720Production extends Production
    {
        private Production720Production() {;} // Singleton
        private static Production720Production singletonInstance = null;
        public static final Production720Production getInstance() { if (singletonInstance == null) singletonInstance = new Production720Production(); return singletonInstance; }

        public String getDescription() { return "<ThenPart> ::= ElseIfConstruct:<ElseIfConstruct>  :production720"; }

        /**
         * Reduce by <ThenPart> ::= ElseIfConstruct:<ElseIfConstruct>  :production720
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ThenPart> ::= ElseIfConstruct:<ElseIfConstruct>  :production720
            ASTElseIfConstructNode v1 = (ASTElseIfConstructNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTThenPartNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ThenPartNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ElseIfConstruct"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ThenPart> ::= ElseIfConstruct:<ElseIfConstruct>  :production720
         */
        protected ASTThenPartNode userAction(ASTElseIfConstructNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production720Production PRODUCTION720 = Production720Production.getInstance();

    public static class Production721Production extends Production
    {
        private Production721Production() {;} // Singleton
        private static Production721Production singletonInstance = null;
        public static final Production721Production getInstance() { if (singletonInstance == null) singletonInstance = new Production721Production(); return singletonInstance; }

        public String getDescription() { return "<ThenPart> ::= ConditionalBody:<ConditionalBody> ElseIfConstruct:<ElseIfConstruct>  :production721"; }

        /**
         * Reduce by <ThenPart> ::= ConditionalBody:<ConditionalBody> ElseIfConstruct:<ElseIfConstruct>  :production721
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ThenPart> ::= ConditionalBody:<ConditionalBody> ElseIfConstruct:<ElseIfConstruct>  :production721
            ASTElseIfConstructNode v2 = (ASTElseIfConstructNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTConditionalBodyNode v1 = (ASTConditionalBodyNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTThenPartNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.ThenPartNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ConditionalBody"))
                return 0;
            else
                if (name.equals("ElseIfConstruct"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ThenPart> ::= ConditionalBody:<ConditionalBody> ElseIfConstruct:<ElseIfConstruct>  :production721
         */
        protected ASTThenPartNode userAction(ASTConditionalBodyNode v1, ASTElseIfConstructNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production721Production PRODUCTION721 = Production721Production.getInstance();

    public static class Production722Production extends Production
    {
        private Production722Production() {;} // Singleton
        private static Production722Production singletonInstance = null;
        public static final Production722Production getInstance() { if (singletonInstance == null) singletonInstance = new Production722Production(); return singletonInstance; }

        public String getDescription() { return "<ThenPart> ::= ElseConstruct:<ElseConstruct>  :production722"; }

        /**
         * Reduce by <ThenPart> ::= ElseConstruct:<ElseConstruct>  :production722
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ThenPart> ::= ElseConstruct:<ElseConstruct>  :production722
            ASTElseConstructNode v1 = (ASTElseConstructNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTThenPartNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ThenPartNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ElseConstruct"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ThenPart> ::= ElseConstruct:<ElseConstruct>  :production722
         */
        protected ASTThenPartNode userAction(ASTElseConstructNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production722Production PRODUCTION722 = Production722Production.getInstance();

    public static class Production723Production extends Production
    {
        private Production723Production() {;} // Singleton
        private static Production723Production singletonInstance = null;
        public static final Production723Production getInstance() { if (singletonInstance == null) singletonInstance = new Production723Production(); return singletonInstance; }

        public String getDescription() { return "<ThenPart> ::= ConditionalBody:<ConditionalBody> ElseConstruct:<ElseConstruct>  :production723"; }

        /**
         * Reduce by <ThenPart> ::= ConditionalBody:<ConditionalBody> ElseConstruct:<ElseConstruct>  :production723
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ThenPart> ::= ConditionalBody:<ConditionalBody> ElseConstruct:<ElseConstruct>  :production723
            ASTElseConstructNode v2 = (ASTElseConstructNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTConditionalBodyNode v1 = (ASTConditionalBodyNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTThenPartNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.ThenPartNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ConditionalBody"))
                return 0;
            else
                if (name.equals("ElseConstruct"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ThenPart> ::= ConditionalBody:<ConditionalBody> ElseConstruct:<ElseConstruct>  :production723
         */
        protected ASTThenPartNode userAction(ASTConditionalBodyNode v1, ASTElseConstructNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production723Production PRODUCTION723 = Production723Production.getInstance();

    public static class Production724Production extends Production
    {
        private Production724Production() {;} // Singleton
        private static Production724Production singletonInstance = null;
        public static final Production724Production getInstance() { if (singletonInstance == null) singletonInstance = new Production724Production(); return singletonInstance; }

        public String getDescription() { return "<ElseIfConstruct> ::= ElseIfStmt:<ElseIfStmt> ThenPart:<ThenPart>  :production724"; }

        /**
         * Reduce by <ElseIfConstruct> ::= ElseIfStmt:<ElseIfStmt> ThenPart:<ThenPart>  :production724
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ElseIfConstruct> ::= ElseIfStmt:<ElseIfStmt> ThenPart:<ThenPart>  :production724
            ASTThenPartNode v2 = (ASTThenPartNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTElseIfStmtNode v1 = (ASTElseIfStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTElseIfConstructNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.ElseIfConstructNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ElseIfStmt"))
                return 0;
            else
                if (name.equals("ThenPart"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ElseIfConstruct> ::= ElseIfStmt:<ElseIfStmt> ThenPart:<ThenPart>  :production724
         */
        protected ASTElseIfConstructNode userAction(ASTElseIfStmtNode v1, ASTThenPartNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production724Production PRODUCTION724 = Production724Production.getInstance();

    public static class Production725Production extends Production
    {
        private Production725Production() {;} // Singleton
        private static Production725Production singletonInstance = null;
        public static final Production725Production getInstance() { if (singletonInstance == null) singletonInstance = new Production725Production(); return singletonInstance; }

        public String getDescription() { return "<ElseConstruct> ::= ElseStmt:<ElseStmt> ElsePart:<ElsePart>  :production725"; }

        /**
         * Reduce by <ElseConstruct> ::= ElseStmt:<ElseStmt> ElsePart:<ElsePart>  :production725
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ElseConstruct> ::= ElseStmt:<ElseStmt> ElsePart:<ElsePart>  :production725
            ASTElsePartNode v2 = (ASTElsePartNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTElseStmtNode v1 = (ASTElseStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTElseConstructNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.ElseConstructNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ElseStmt"))
                return 0;
            else
                if (name.equals("ElsePart"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ElseConstruct> ::= ElseStmt:<ElseStmt> ElsePart:<ElsePart>  :production725
         */
        protected ASTElseConstructNode userAction(ASTElseStmtNode v1, ASTElsePartNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production725Production PRODUCTION725 = Production725Production.getInstance();

    public static class Production726Production extends Production
    {
        private Production726Production() {;} // Singleton
        private static Production726Production singletonInstance = null;
        public static final Production726Production getInstance() { if (singletonInstance == null) singletonInstance = new Production726Production(); return singletonInstance; }

        public String getDescription() { return "<ElsePart> ::= EndIfStmt:<EndIfStmt>  :production726"; }

        /**
         * Reduce by <ElsePart> ::= EndIfStmt:<EndIfStmt>  :production726
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ElsePart> ::= EndIfStmt:<EndIfStmt>  :production726
            ASTEndIfStmtNode v1 = (ASTEndIfStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTElsePartNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ElsePartNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EndIfStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ElsePart> ::= EndIfStmt:<EndIfStmt>  :production726
         */
        protected ASTElsePartNode userAction(ASTEndIfStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production726Production PRODUCTION726 = Production726Production.getInstance();

    public static class Production727Production extends Production
    {
        private Production727Production() {;} // Singleton
        private static Production727Production singletonInstance = null;
        public static final Production727Production getInstance() { if (singletonInstance == null) singletonInstance = new Production727Production(); return singletonInstance; }

        public String getDescription() { return "<ElsePart> ::= ConditionalBody:<ConditionalBody> EndIfStmt:<EndIfStmt>  :production727"; }

        /**
         * Reduce by <ElsePart> ::= ConditionalBody:<ConditionalBody> EndIfStmt:<EndIfStmt>  :production727
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ElsePart> ::= ConditionalBody:<ConditionalBody> EndIfStmt:<EndIfStmt>  :production727
            ASTEndIfStmtNode v2 = (ASTEndIfStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTConditionalBodyNode v1 = (ASTConditionalBodyNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTElsePartNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.ElsePartNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ConditionalBody"))
                return 0;
            else
                if (name.equals("EndIfStmt"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ElsePart> ::= ConditionalBody:<ConditionalBody> EndIfStmt:<EndIfStmt>  :production727
         */
        protected ASTElsePartNode userAction(ASTConditionalBodyNode v1, ASTEndIfStmtNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production727Production PRODUCTION727 = Production727Production.getInstance();

    public static class Production728Production extends Production
    {
        private Production728Production() {;} // Singleton
        private static Production728Production singletonInstance = null;
        public static final Production728Production getInstance() { if (singletonInstance == null) singletonInstance = new Production728Production(); return singletonInstance; }

        public String getDescription() { return "<ConditionalBody> ::= ExecutionPartConstruct:<ExecutionPartConstruct>  :production728"; }

        /**
         * Reduce by <ConditionalBody> ::= ExecutionPartConstruct:<ExecutionPartConstruct>  :production728
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ConditionalBody> ::= ExecutionPartConstruct:<ExecutionPartConstruct>  :production728
            ASTExecutionPartConstructNode v1 = (ASTExecutionPartConstructNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTConditionalBodyNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ConditionalBodyNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ExecutionPartConstruct"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ConditionalBody> ::= ExecutionPartConstruct:<ExecutionPartConstruct>  :production728
         */
        protected ASTConditionalBodyNode userAction(ASTExecutionPartConstructNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production728Production PRODUCTION728 = Production728Production.getInstance();

    public static class Production729Production extends Production
    {
        private Production729Production() {;} // Singleton
        private static Production729Production singletonInstance = null;
        public static final Production729Production getInstance() { if (singletonInstance == null) singletonInstance = new Production729Production(); return singletonInstance; }

        public String getDescription() { return "<ConditionalBody> ::= ConditionalBody:<ConditionalBody> ExecutionPartConstruct:<ExecutionPartConstruct>  :production729"; }

        /**
         * Reduce by <ConditionalBody> ::= ConditionalBody:<ConditionalBody> ExecutionPartConstruct:<ExecutionPartConstruct>  :production729
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ConditionalBody> ::= ConditionalBody:<ConditionalBody> ExecutionPartConstruct:<ExecutionPartConstruct>  :production729
            ASTExecutionPartConstructNode v2 = (ASTExecutionPartConstructNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTConditionalBodyNode v1 = (ASTConditionalBodyNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTConditionalBodyNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.ConditionalBodyNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ConditionalBody"))
                return 0;
            else
                if (name.equals("ExecutionPartConstruct"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ConditionalBody> ::= ConditionalBody:<ConditionalBody> ExecutionPartConstruct:<ExecutionPartConstruct>  :production729
         */
        protected ASTConditionalBodyNode userAction(ASTConditionalBodyNode v1, ASTExecutionPartConstructNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production729Production PRODUCTION729 = Production729Production.getInstance();

    public static class Production730Production extends Production
    {
        private Production730Production() {;} // Singleton
        private static Production730Production singletonInstance = null;
        public static final Production730Production getInstance() { if (singletonInstance == null) singletonInstance = new Production730Production(); return singletonInstance; }

        public String getDescription() { return "<IfThenStmt> ::= tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN teos:T_EOS  :production730"; }

        /**
         * Reduce by <IfThenStmt> ::= tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN teos:T_EOS  :production730
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <IfThenStmt> ::= tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN teos:T_EOS  :production730
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v3 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTIfThenStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.IfThenStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tif"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("Expr"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("tthen"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <IfThenStmt> ::= tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN teos:T_EOS  :production730
         */
        protected ASTIfThenStmtNode userAction(Token v1, Token v2, ASTExprNode v3, Token v4, Token v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production730Production PRODUCTION730 = Production730Production.getInstance();

    public static class Production731Production extends Production
    {
        private Production731Production() {;} // Singleton
        private static Production731Production singletonInstance = null;
        public static final Production731Production getInstance() { if (singletonInstance == null) singletonInstance = new Production731Production(); return singletonInstance; }

        public String getDescription() { return "<IfThenStmt> ::= LblDef:<LblDef> tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN teos:T_EOS  :production731"; }

        /**
         * Reduce by <IfThenStmt> ::= LblDef:<LblDef> tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN teos:T_EOS  :production731
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <IfThenStmt> ::= LblDef:<LblDef> tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN teos:T_EOS  :production731
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v4 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTIfThenStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7);

            // The production has 7 symbols on its RHS
            parser.reduce(Nonterminal.IfThenStmtNonterminal.getInstance(), 7, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tif"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("Expr"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("tthen"))
                                    return 5;
                                else
                                    if (name.equals("teos"))
                                        return 6;
                                    else
                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <IfThenStmt> ::= LblDef:<LblDef> tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN teos:T_EOS  :production731
         */
        protected ASTIfThenStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, ASTExprNode v4, Token v5, Token v6, Token v7)
        {
            return null;
        }
    }
    public static final Productions.Production731Production PRODUCTION731 = Production731Production.getInstance();

    public static class Production732Production extends Production
    {
        private Production732Production() {;} // Singleton
        private static Production732Production singletonInstance = null;
        public static final Production732Production getInstance() { if (singletonInstance == null) singletonInstance = new Production732Production(); return singletonInstance; }

        public String getDescription() { return "<IfThenStmt> ::= Name:<Name> tcolon:T_COLON tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN teos:T_EOS  :production732"; }

        /**
         * Reduce by <IfThenStmt> ::= Name:<Name> tcolon:T_COLON tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN teos:T_EOS  :production732
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <IfThenStmt> ::= Name:<Name> tcolon:T_COLON tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN teos:T_EOS  :production732
            Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v5 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTIfThenStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8);

            // The production has 8 symbols on its RHS
            parser.reduce(Nonterminal.IfThenStmtNonterminal.getInstance(), 8, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tcolon"))
                    return 1;
                else
                    if (name.equals("tif"))
                        return 2;
                    else
                        if (name.equals("tlparen"))
                            return 3;
                        else
                            if (name.equals("Expr"))
                                return 4;
                            else
                                if (name.equals("trparen"))
                                    return 5;
                                else
                                    if (name.equals("tthen"))
                                        return 6;
                                    else
                                        if (name.equals("teos"))
                                            return 7;
                                        else
                                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <IfThenStmt> ::= Name:<Name> tcolon:T_COLON tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN teos:T_EOS  :production732
         */
        protected ASTIfThenStmtNode userAction(ASTNameNode v1, Token v2, Token v3, Token v4, ASTExprNode v5, Token v6, Token v7, Token v8)
        {
            return null;
        }
    }
    public static final Productions.Production732Production PRODUCTION732 = Production732Production.getInstance();

    public static class Production733Production extends Production
    {
        private Production733Production() {;} // Singleton
        private static Production733Production singletonInstance = null;
        public static final Production733Production getInstance() { if (singletonInstance == null) singletonInstance = new Production733Production(); return singletonInstance; }

        public String getDescription() { return "<IfThenStmt> ::= LblDef:<LblDef> Name:<Name> tcolon:T_COLON tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN teos:T_EOS  :production733"; }

        /**
         * Reduce by <IfThenStmt> ::= LblDef:<LblDef> Name:<Name> tcolon:T_COLON tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN teos:T_EOS  :production733
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <IfThenStmt> ::= LblDef:<LblDef> Name:<Name> tcolon:T_COLON tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN teos:T_EOS  :production733
            Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v6 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v2 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTIfThenStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8, v9);

            // The production has 9 symbols on its RHS
            parser.reduce(Nonterminal.IfThenStmtNonterminal.getInstance(), 9, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("Name"))
                    return 1;
                else
                    if (name.equals("tcolon"))
                        return 2;
                    else
                        if (name.equals("tif"))
                            return 3;
                        else
                            if (name.equals("tlparen"))
                                return 4;
                            else
                                if (name.equals("Expr"))
                                    return 5;
                                else
                                    if (name.equals("trparen"))
                                        return 6;
                                    else
                                        if (name.equals("tthen"))
                                            return 7;
                                        else
                                            if (name.equals("teos"))
                                                return 8;
                                            else
                                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <IfThenStmt> ::= LblDef:<LblDef> Name:<Name> tcolon:T_COLON tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN teos:T_EOS  :production733
         */
        protected ASTIfThenStmtNode userAction(ASTLblDefNode v1, ASTNameNode v2, Token v3, Token v4, Token v5, ASTExprNode v6, Token v7, Token v8, Token v9)
        {
            return null;
        }
    }
    public static final Productions.Production733Production PRODUCTION733 = Production733Production.getInstance();

    public static class Production734Production extends Production
    {
        private Production734Production() {;} // Singleton
        private static Production734Production singletonInstance = null;
        public static final Production734Production getInstance() { if (singletonInstance == null) singletonInstance = new Production734Production(); return singletonInstance; }

        public String getDescription() { return "<ElseIfStmt> ::= telseif:T_ELSEIF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN teos:T_EOS  :production734"; }

        /**
         * Reduce by <ElseIfStmt> ::= telseif:T_ELSEIF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN teos:T_EOS  :production734
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ElseIfStmt> ::= telseif:T_ELSEIF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN teos:T_EOS  :production734
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v3 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTElseIfStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.ElseIfStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("telseif"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("Expr"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("tthen"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ElseIfStmt> ::= telseif:T_ELSEIF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN teos:T_EOS  :production734
         */
        protected ASTElseIfStmtNode userAction(Token v1, Token v2, ASTExprNode v3, Token v4, Token v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production734Production PRODUCTION734 = Production734Production.getInstance();

    public static class Production735Production extends Production
    {
        private Production735Production() {;} // Singleton
        private static Production735Production singletonInstance = null;
        public static final Production735Production getInstance() { if (singletonInstance == null) singletonInstance = new Production735Production(); return singletonInstance; }

        public String getDescription() { return "<ElseIfStmt> ::= LblDef:<LblDef> telseif:T_ELSEIF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN teos:T_EOS  :production735"; }

        /**
         * Reduce by <ElseIfStmt> ::= LblDef:<LblDef> telseif:T_ELSEIF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN teos:T_EOS  :production735
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ElseIfStmt> ::= LblDef:<LblDef> telseif:T_ELSEIF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN teos:T_EOS  :production735
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v4 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTElseIfStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7);

            // The production has 7 symbols on its RHS
            parser.reduce(Nonterminal.ElseIfStmtNonterminal.getInstance(), 7, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("telseif"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("Expr"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("tthen"))
                                    return 5;
                                else
                                    if (name.equals("teos"))
                                        return 6;
                                    else
                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ElseIfStmt> ::= LblDef:<LblDef> telseif:T_ELSEIF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN teos:T_EOS  :production735
         */
        protected ASTElseIfStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, ASTExprNode v4, Token v5, Token v6, Token v7)
        {
            return null;
        }
    }
    public static final Productions.Production735Production PRODUCTION735 = Production735Production.getInstance();

    public static class Production736Production extends Production
    {
        private Production736Production() {;} // Singleton
        private static Production736Production singletonInstance = null;
        public static final Production736Production getInstance() { if (singletonInstance == null) singletonInstance = new Production736Production(); return singletonInstance; }

        public String getDescription() { return "<ElseIfStmt> ::= telseif:T_ELSEIF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN EndName:<EndName> teos:T_EOS  :production736"; }

        /**
         * Reduce by <ElseIfStmt> ::= telseif:T_ELSEIF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN EndName:<EndName> teos:T_EOS  :production736
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ElseIfStmt> ::= telseif:T_ELSEIF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN EndName:<EndName> teos:T_EOS  :production736
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v6 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v3 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTElseIfStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7);

            // The production has 7 symbols on its RHS
            parser.reduce(Nonterminal.ElseIfStmtNonterminal.getInstance(), 7, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("telseif"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("Expr"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("tthen"))
                                return 4;
                            else
                                if (name.equals("EndName"))
                                    return 5;
                                else
                                    if (name.equals("teos"))
                                        return 6;
                                    else
                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ElseIfStmt> ::= telseif:T_ELSEIF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN EndName:<EndName> teos:T_EOS  :production736
         */
        protected ASTElseIfStmtNode userAction(Token v1, Token v2, ASTExprNode v3, Token v4, Token v5, ASTEndNameNode v6, Token v7)
        {
            return null;
        }
    }
    public static final Productions.Production736Production PRODUCTION736 = Production736Production.getInstance();

    public static class Production737Production extends Production
    {
        private Production737Production() {;} // Singleton
        private static Production737Production singletonInstance = null;
        public static final Production737Production getInstance() { if (singletonInstance == null) singletonInstance = new Production737Production(); return singletonInstance; }

        public String getDescription() { return "<ElseIfStmt> ::= LblDef:<LblDef> telseif:T_ELSEIF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN EndName:<EndName> teos:T_EOS  :production737"; }

        /**
         * Reduce by <ElseIfStmt> ::= LblDef:<LblDef> telseif:T_ELSEIF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN EndName:<EndName> teos:T_EOS  :production737
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ElseIfStmt> ::= LblDef:<LblDef> telseif:T_ELSEIF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN EndName:<EndName> teos:T_EOS  :production737
            Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v7 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v4 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTElseIfStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8);

            // The production has 8 symbols on its RHS
            parser.reduce(Nonterminal.ElseIfStmtNonterminal.getInstance(), 8, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("telseif"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("Expr"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("tthen"))
                                    return 5;
                                else
                                    if (name.equals("EndName"))
                                        return 6;
                                    else
                                        if (name.equals("teos"))
                                            return 7;
                                        else
                                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ElseIfStmt> ::= LblDef:<LblDef> telseif:T_ELSEIF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN EndName:<EndName> teos:T_EOS  :production737
         */
        protected ASTElseIfStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, ASTExprNode v4, Token v5, Token v6, ASTEndNameNode v7, Token v8)
        {
            return null;
        }
    }
    public static final Productions.Production737Production PRODUCTION737 = Production737Production.getInstance();

    public static class Production738Production extends Production
    {
        private Production738Production() {;} // Singleton
        private static Production738Production singletonInstance = null;
        public static final Production738Production getInstance() { if (singletonInstance == null) singletonInstance = new Production738Production(); return singletonInstance; }

        public String getDescription() { return "<ElseIfStmt> ::= telse:T_ELSE tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN teos:T_EOS  :production738"; }

        /**
         * Reduce by <ElseIfStmt> ::= telse:T_ELSE tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN teos:T_EOS  :production738
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ElseIfStmt> ::= telse:T_ELSE tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN teos:T_EOS  :production738
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v4 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTElseIfStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7);

            // The production has 7 symbols on its RHS
            parser.reduce(Nonterminal.ElseIfStmtNonterminal.getInstance(), 7, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("telse"))
                return 0;
            else
                if (name.equals("tif"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("Expr"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("tthen"))
                                    return 5;
                                else
                                    if (name.equals("teos"))
                                        return 6;
                                    else
                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ElseIfStmt> ::= telse:T_ELSE tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN teos:T_EOS  :production738
         */
        protected ASTElseIfStmtNode userAction(Token v1, Token v2, Token v3, ASTExprNode v4, Token v5, Token v6, Token v7)
        {
            return null;
        }
    }
    public static final Productions.Production738Production PRODUCTION738 = Production738Production.getInstance();

    public static class Production739Production extends Production
    {
        private Production739Production() {;} // Singleton
        private static Production739Production singletonInstance = null;
        public static final Production739Production getInstance() { if (singletonInstance == null) singletonInstance = new Production739Production(); return singletonInstance; }

        public String getDescription() { return "<ElseIfStmt> ::= LblDef:<LblDef> telse:T_ELSE tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN teos:T_EOS  :production739"; }

        /**
         * Reduce by <ElseIfStmt> ::= LblDef:<LblDef> telse:T_ELSE tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN teos:T_EOS  :production739
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ElseIfStmt> ::= LblDef:<LblDef> telse:T_ELSE tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN teos:T_EOS  :production739
            Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v5 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTElseIfStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8);

            // The production has 8 symbols on its RHS
            parser.reduce(Nonterminal.ElseIfStmtNonterminal.getInstance(), 8, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("telse"))
                    return 1;
                else
                    if (name.equals("tif"))
                        return 2;
                    else
                        if (name.equals("tlparen"))
                            return 3;
                        else
                            if (name.equals("Expr"))
                                return 4;
                            else
                                if (name.equals("trparen"))
                                    return 5;
                                else
                                    if (name.equals("tthen"))
                                        return 6;
                                    else
                                        if (name.equals("teos"))
                                            return 7;
                                        else
                                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ElseIfStmt> ::= LblDef:<LblDef> telse:T_ELSE tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN teos:T_EOS  :production739
         */
        protected ASTElseIfStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, Token v4, ASTExprNode v5, Token v6, Token v7, Token v8)
        {
            return null;
        }
    }
    public static final Productions.Production739Production PRODUCTION739 = Production739Production.getInstance();

    public static class Production740Production extends Production
    {
        private Production740Production() {;} // Singleton
        private static Production740Production singletonInstance = null;
        public static final Production740Production getInstance() { if (singletonInstance == null) singletonInstance = new Production740Production(); return singletonInstance; }

        public String getDescription() { return "<ElseIfStmt> ::= telse:T_ELSE tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN EndName:<EndName> teos:T_EOS  :production740"; }

        /**
         * Reduce by <ElseIfStmt> ::= telse:T_ELSE tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN EndName:<EndName> teos:T_EOS  :production740
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ElseIfStmt> ::= telse:T_ELSE tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN EndName:<EndName> teos:T_EOS  :production740
            Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v7 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v4 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTElseIfStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8);

            // The production has 8 symbols on its RHS
            parser.reduce(Nonterminal.ElseIfStmtNonterminal.getInstance(), 8, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("telse"))
                return 0;
            else
                if (name.equals("tif"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("Expr"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("tthen"))
                                    return 5;
                                else
                                    if (name.equals("EndName"))
                                        return 6;
                                    else
                                        if (name.equals("teos"))
                                            return 7;
                                        else
                                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ElseIfStmt> ::= telse:T_ELSE tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN EndName:<EndName> teos:T_EOS  :production740
         */
        protected ASTElseIfStmtNode userAction(Token v1, Token v2, Token v3, ASTExprNode v4, Token v5, Token v6, ASTEndNameNode v7, Token v8)
        {
            return null;
        }
    }
    public static final Productions.Production740Production PRODUCTION740 = Production740Production.getInstance();

    public static class Production741Production extends Production
    {
        private Production741Production() {;} // Singleton
        private static Production741Production singletonInstance = null;
        public static final Production741Production getInstance() { if (singletonInstance == null) singletonInstance = new Production741Production(); return singletonInstance; }

        public String getDescription() { return "<ElseIfStmt> ::= LblDef:<LblDef> telse:T_ELSE tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN EndName:<EndName> teos:T_EOS  :production741"; }

        /**
         * Reduce by <ElseIfStmt> ::= LblDef:<LblDef> telse:T_ELSE tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN EndName:<EndName> teos:T_EOS  :production741
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ElseIfStmt> ::= LblDef:<LblDef> telse:T_ELSE tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN EndName:<EndName> teos:T_EOS  :production741
            Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v8 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v5 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTElseIfStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8, v9);

            // The production has 9 symbols on its RHS
            parser.reduce(Nonterminal.ElseIfStmtNonterminal.getInstance(), 9, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("telse"))
                    return 1;
                else
                    if (name.equals("tif"))
                        return 2;
                    else
                        if (name.equals("tlparen"))
                            return 3;
                        else
                            if (name.equals("Expr"))
                                return 4;
                            else
                                if (name.equals("trparen"))
                                    return 5;
                                else
                                    if (name.equals("tthen"))
                                        return 6;
                                    else
                                        if (name.equals("EndName"))
                                            return 7;
                                        else
                                            if (name.equals("teos"))
                                                return 8;
                                            else
                                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ElseIfStmt> ::= LblDef:<LblDef> telse:T_ELSE tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN EndName:<EndName> teos:T_EOS  :production741
         */
        protected ASTElseIfStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, Token v4, ASTExprNode v5, Token v6, Token v7, ASTEndNameNode v8, Token v9)
        {
            return null;
        }
    }
    public static final Productions.Production741Production PRODUCTION741 = Production741Production.getInstance();

    public static class Production742Production extends Production
    {
        private Production742Production() {;} // Singleton
        private static Production742Production singletonInstance = null;
        public static final Production742Production getInstance() { if (singletonInstance == null) singletonInstance = new Production742Production(); return singletonInstance; }

        public String getDescription() { return "<ElseStmt> ::= telse:T_ELSE teos:T_EOS  :production742"; }

        /**
         * Reduce by <ElseStmt> ::= telse:T_ELSE teos:T_EOS  :production742
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ElseStmt> ::= telse:T_ELSE teos:T_EOS  :production742
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTElseStmtNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.ElseStmtNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("telse"))
                return 0;
            else
                if (name.equals("teos"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ElseStmt> ::= telse:T_ELSE teos:T_EOS  :production742
         */
        protected ASTElseStmtNode userAction(Token v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production742Production PRODUCTION742 = Production742Production.getInstance();

    public static class Production743Production extends Production
    {
        private Production743Production() {;} // Singleton
        private static Production743Production singletonInstance = null;
        public static final Production743Production getInstance() { if (singletonInstance == null) singletonInstance = new Production743Production(); return singletonInstance; }

        public String getDescription() { return "<ElseStmt> ::= LblDef:<LblDef> telse:T_ELSE teos:T_EOS  :production743"; }

        /**
         * Reduce by <ElseStmt> ::= LblDef:<LblDef> telse:T_ELSE teos:T_EOS  :production743
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ElseStmt> ::= LblDef:<LblDef> telse:T_ELSE teos:T_EOS  :production743
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTElseStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.ElseStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("telse"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ElseStmt> ::= LblDef:<LblDef> telse:T_ELSE teos:T_EOS  :production743
         */
        protected ASTElseStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production743Production PRODUCTION743 = Production743Production.getInstance();

    public static class Production744Production extends Production
    {
        private Production744Production() {;} // Singleton
        private static Production744Production singletonInstance = null;
        public static final Production744Production getInstance() { if (singletonInstance == null) singletonInstance = new Production744Production(); return singletonInstance; }

        public String getDescription() { return "<ElseStmt> ::= telse:T_ELSE EndName:<EndName> teos:T_EOS  :production744"; }

        /**
         * Reduce by <ElseStmt> ::= telse:T_ELSE EndName:<EndName> teos:T_EOS  :production744
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ElseStmt> ::= telse:T_ELSE EndName:<EndName> teos:T_EOS  :production744
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v2 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTElseStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.ElseStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("telse"))
                return 0;
            else
                if (name.equals("EndName"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ElseStmt> ::= telse:T_ELSE EndName:<EndName> teos:T_EOS  :production744
         */
        protected ASTElseStmtNode userAction(Token v1, ASTEndNameNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production744Production PRODUCTION744 = Production744Production.getInstance();

    public static class Production745Production extends Production
    {
        private Production745Production() {;} // Singleton
        private static Production745Production singletonInstance = null;
        public static final Production745Production getInstance() { if (singletonInstance == null) singletonInstance = new Production745Production(); return singletonInstance; }

        public String getDescription() { return "<ElseStmt> ::= LblDef:<LblDef> telse:T_ELSE EndName:<EndName> teos:T_EOS  :production745"; }

        /**
         * Reduce by <ElseStmt> ::= LblDef:<LblDef> telse:T_ELSE EndName:<EndName> teos:T_EOS  :production745
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ElseStmt> ::= LblDef:<LblDef> telse:T_ELSE EndName:<EndName> teos:T_EOS  :production745
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v3 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTElseStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.ElseStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("telse"))
                    return 1;
                else
                    if (name.equals("EndName"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ElseStmt> ::= LblDef:<LblDef> telse:T_ELSE EndName:<EndName> teos:T_EOS  :production745
         */
        protected ASTElseStmtNode userAction(ASTLblDefNode v1, Token v2, ASTEndNameNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production745Production PRODUCTION745 = Production745Production.getInstance();

    public static class Production746Production extends Production
    {
        private Production746Production() {;} // Singleton
        private static Production746Production singletonInstance = null;
        public static final Production746Production getInstance() { if (singletonInstance == null) singletonInstance = new Production746Production(); return singletonInstance; }

        public String getDescription() { return "<EndIfStmt> ::= tendif:T_ENDIF teos:T_EOS  :production746"; }

        /**
         * Reduce by <EndIfStmt> ::= tendif:T_ENDIF teos:T_EOS  :production746
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndIfStmt> ::= tendif:T_ENDIF teos:T_EOS  :production746
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndIfStmtNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.EndIfStmtNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tendif"))
                return 0;
            else
                if (name.equals("teos"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndIfStmt> ::= tendif:T_ENDIF teos:T_EOS  :production746
         */
        protected ASTEndIfStmtNode userAction(Token v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production746Production PRODUCTION746 = Production746Production.getInstance();

    public static class Production747Production extends Production
    {
        private Production747Production() {;} // Singleton
        private static Production747Production singletonInstance = null;
        public static final Production747Production getInstance() { if (singletonInstance == null) singletonInstance = new Production747Production(); return singletonInstance; }

        public String getDescription() { return "<EndIfStmt> ::= tendif:T_ENDIF <EndIfStmt@59> teos:T_EOS  :production747"; }

        /**
         * Reduce by <EndIfStmt> ::= tendif:T_ENDIF <EndIfStmt@59> teos:T_EOS  :production747
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndIfStmt> ::= tendif:T_ENDIF <EndIfStmt@59> teos:T_EOS  :production747
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v2 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndIfStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EndIfStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tendif"))
                return 0;
            else
                if (name.equals("EndName"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndIfStmt> ::= tendif:T_ENDIF <EndIfStmt@59> teos:T_EOS  :production747
         */
        protected ASTEndIfStmtNode userAction(Token v1, ASTEndNameNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production747Production PRODUCTION747 = Production747Production.getInstance();

    public static class Production748Production extends Production
    {
        private Production748Production() {;} // Singleton
        private static Production748Production singletonInstance = null;
        public static final Production748Production getInstance() { if (singletonInstance == null) singletonInstance = new Production748Production(); return singletonInstance; }

        public String getDescription() { return "<EndIfStmt> ::= LblDef:<LblDef> tendif:T_ENDIF teos:T_EOS  :production748"; }

        /**
         * Reduce by <EndIfStmt> ::= LblDef:<LblDef> tendif:T_ENDIF teos:T_EOS  :production748
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndIfStmt> ::= LblDef:<LblDef> tendif:T_ENDIF teos:T_EOS  :production748
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndIfStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EndIfStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tendif"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndIfStmt> ::= LblDef:<LblDef> tendif:T_ENDIF teos:T_EOS  :production748
         */
        protected ASTEndIfStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production748Production PRODUCTION748 = Production748Production.getInstance();

    public static class Production749Production extends Production
    {
        private Production749Production() {;} // Singleton
        private static Production749Production singletonInstance = null;
        public static final Production749Production getInstance() { if (singletonInstance == null) singletonInstance = new Production749Production(); return singletonInstance; }

        public String getDescription() { return "<EndIfStmt> ::= LblDef:<LblDef> tendif:T_ENDIF <EndIfStmt@59> teos:T_EOS  :production749"; }

        /**
         * Reduce by <EndIfStmt> ::= LblDef:<LblDef> tendif:T_ENDIF <EndIfStmt@59> teos:T_EOS  :production749
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndIfStmt> ::= LblDef:<LblDef> tendif:T_ENDIF <EndIfStmt@59> teos:T_EOS  :production749
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v3 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndIfStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EndIfStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tendif"))
                    return 1;
                else
                    if (name.equals("EndName"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndIfStmt> ::= LblDef:<LblDef> tendif:T_ENDIF <EndIfStmt@59> teos:T_EOS  :production749
         */
        protected ASTEndIfStmtNode userAction(ASTLblDefNode v1, Token v2, ASTEndNameNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production749Production PRODUCTION749 = Production749Production.getInstance();

    public static class Production750Production extends Production
    {
        private Production750Production() {;} // Singleton
        private static Production750Production singletonInstance = null;
        public static final Production750Production getInstance() { if (singletonInstance == null) singletonInstance = new Production750Production(); return singletonInstance; }

        public String getDescription() { return "<EndIfStmt> ::= tend:T_END tif:T_IF teos:T_EOS  :production750"; }

        /**
         * Reduce by <EndIfStmt> ::= tend:T_END tif:T_IF teos:T_EOS  :production750
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndIfStmt> ::= tend:T_END tif:T_IF teos:T_EOS  :production750
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndIfStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EndIfStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tend"))
                return 0;
            else
                if (name.equals("tif"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndIfStmt> ::= tend:T_END tif:T_IF teos:T_EOS  :production750
         */
        protected ASTEndIfStmtNode userAction(Token v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production750Production PRODUCTION750 = Production750Production.getInstance();

    public static class Production751Production extends Production
    {
        private Production751Production() {;} // Singleton
        private static Production751Production singletonInstance = null;
        public static final Production751Production getInstance() { if (singletonInstance == null) singletonInstance = new Production751Production(); return singletonInstance; }

        public String getDescription() { return "<EndIfStmt> ::= tend:T_END tif:T_IF <EndIfStmt@60> teos:T_EOS  :production751"; }

        /**
         * Reduce by <EndIfStmt> ::= tend:T_END tif:T_IF <EndIfStmt@60> teos:T_EOS  :production751
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndIfStmt> ::= tend:T_END tif:T_IF <EndIfStmt@60> teos:T_EOS  :production751
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v3 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndIfStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EndIfStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tend"))
                return 0;
            else
                if (name.equals("tif"))
                    return 1;
                else
                    if (name.equals("EndName"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndIfStmt> ::= tend:T_END tif:T_IF <EndIfStmt@60> teos:T_EOS  :production751
         */
        protected ASTEndIfStmtNode userAction(Token v1, Token v2, ASTEndNameNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production751Production PRODUCTION751 = Production751Production.getInstance();

    public static class Production752Production extends Production
    {
        private Production752Production() {;} // Singleton
        private static Production752Production singletonInstance = null;
        public static final Production752Production getInstance() { if (singletonInstance == null) singletonInstance = new Production752Production(); return singletonInstance; }

        public String getDescription() { return "<EndIfStmt> ::= LblDef:<LblDef> tend:T_END tif:T_IF teos:T_EOS  :production752"; }

        /**
         * Reduce by <EndIfStmt> ::= LblDef:<LblDef> tend:T_END tif:T_IF teos:T_EOS  :production752
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndIfStmt> ::= LblDef:<LblDef> tend:T_END tif:T_IF teos:T_EOS  :production752
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndIfStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EndIfStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tend"))
                    return 1;
                else
                    if (name.equals("tif"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndIfStmt> ::= LblDef:<LblDef> tend:T_END tif:T_IF teos:T_EOS  :production752
         */
        protected ASTEndIfStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production752Production PRODUCTION752 = Production752Production.getInstance();

    public static class Production753Production extends Production
    {
        private Production753Production() {;} // Singleton
        private static Production753Production singletonInstance = null;
        public static final Production753Production getInstance() { if (singletonInstance == null) singletonInstance = new Production753Production(); return singletonInstance; }

        public String getDescription() { return "<EndIfStmt> ::= LblDef:<LblDef> tend:T_END tif:T_IF <EndIfStmt@60> teos:T_EOS  :production753"; }

        /**
         * Reduce by <EndIfStmt> ::= LblDef:<LblDef> tend:T_END tif:T_IF <EndIfStmt@60> teos:T_EOS  :production753
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndIfStmt> ::= LblDef:<LblDef> tend:T_END tif:T_IF <EndIfStmt@60> teos:T_EOS  :production753
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v4 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndIfStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.EndIfStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tend"))
                    return 1;
                else
                    if (name.equals("tif"))
                        return 2;
                    else
                        if (name.equals("EndName"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndIfStmt> ::= LblDef:<LblDef> tend:T_END tif:T_IF <EndIfStmt@60> teos:T_EOS  :production753
         */
        protected ASTEndIfStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, ASTEndNameNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production753Production PRODUCTION753 = Production753Production.getInstance();

    public static class Production754Production extends Production
    {
        private Production754Production() {;} // Singleton
        private static Production754Production singletonInstance = null;
        public static final Production754Production getInstance() { if (singletonInstance == null) singletonInstance = new Production754Production(); return singletonInstance; }

        public String getDescription() { return "<IfStmt> ::= tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN ActionStmt:<ActionStmt>  :production754"; }

        /**
         * Reduce by <IfStmt> ::= tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN ActionStmt:<ActionStmt>  :production754
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <IfStmt> ::= tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN ActionStmt:<ActionStmt>  :production754
            ASTActionStmtNode v5 = (ASTActionStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v3 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTIfStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.IfStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tif"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("Expr"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("ActionStmt"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <IfStmt> ::= tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN ActionStmt:<ActionStmt>  :production754
         */
        protected ASTIfStmtNode userAction(Token v1, Token v2, ASTExprNode v3, Token v4, ASTActionStmtNode v5)
        {
            return null;
        }
    }
    public static final Productions.Production754Production PRODUCTION754 = Production754Production.getInstance();

    public static class Production755Production extends Production
    {
        private Production755Production() {;} // Singleton
        private static Production755Production singletonInstance = null;
        public static final Production755Production getInstance() { if (singletonInstance == null) singletonInstance = new Production755Production(); return singletonInstance; }

        public String getDescription() { return "<IfStmt> ::= LblDef:<LblDef> tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN ActionStmt:<ActionStmt>  :production755"; }

        /**
         * Reduce by <IfStmt> ::= LblDef:<LblDef> tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN ActionStmt:<ActionStmt>  :production755
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <IfStmt> ::= LblDef:<LblDef> tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN ActionStmt:<ActionStmt>  :production755
            ASTActionStmtNode v6 = (ASTActionStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v4 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTIfStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.IfStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tif"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("Expr"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("ActionStmt"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <IfStmt> ::= LblDef:<LblDef> tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN ActionStmt:<ActionStmt>  :production755
         */
        protected ASTIfStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, ASTExprNode v4, Token v5, ASTActionStmtNode v6)
        {
            return null;
        }
    }
    public static final Productions.Production755Production PRODUCTION755 = Production755Production.getInstance();

    public static class Production756Production extends Production
    {
        private Production756Production() {;} // Singleton
        private static Production756Production singletonInstance = null;
        public static final Production756Production getInstance() { if (singletonInstance == null) singletonInstance = new Production756Production(); return singletonInstance; }

        public String getDescription() { return "<CaseConstruct> ::= SelectCaseStmt:<SelectCaseStmt> SelectCaseRange:<SelectCaseRange>  :production756"; }

        /**
         * Reduce by <CaseConstruct> ::= SelectCaseStmt:<SelectCaseStmt> SelectCaseRange:<SelectCaseRange>  :production756
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CaseConstruct> ::= SelectCaseStmt:<SelectCaseStmt> SelectCaseRange:<SelectCaseRange>  :production756
            ASTSelectCaseRangeNode v2 = (ASTSelectCaseRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSelectCaseStmtNode v1 = (ASTSelectCaseStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCaseConstructNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.CaseConstructNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SelectCaseStmt"))
                return 0;
            else
                if (name.equals("SelectCaseRange"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CaseConstruct> ::= SelectCaseStmt:<SelectCaseStmt> SelectCaseRange:<SelectCaseRange>  :production756
         */
        protected ASTCaseConstructNode userAction(ASTSelectCaseStmtNode v1, ASTSelectCaseRangeNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production756Production PRODUCTION756 = Production756Production.getInstance();

    public static class Production757Production extends Production
    {
        private Production757Production() {;} // Singleton
        private static Production757Production singletonInstance = null;
        public static final Production757Production getInstance() { if (singletonInstance == null) singletonInstance = new Production757Production(); return singletonInstance; }

        public String getDescription() { return "<SelectCaseRange> ::= SelectCaseBody:<SelectCaseBody> EndSelectStmt:<EndSelectStmt>  :production757"; }

        /**
         * Reduce by <SelectCaseRange> ::= SelectCaseBody:<SelectCaseBody> EndSelectStmt:<EndSelectStmt>  :production757
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SelectCaseRange> ::= SelectCaseBody:<SelectCaseBody> EndSelectStmt:<EndSelectStmt>  :production757
            ASTEndSelectStmtNode v2 = (ASTEndSelectStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSelectCaseBodyNode v1 = (ASTSelectCaseBodyNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSelectCaseRangeNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.SelectCaseRangeNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SelectCaseBody"))
                return 0;
            else
                if (name.equals("EndSelectStmt"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SelectCaseRange> ::= SelectCaseBody:<SelectCaseBody> EndSelectStmt:<EndSelectStmt>  :production757
         */
        protected ASTSelectCaseRangeNode userAction(ASTSelectCaseBodyNode v1, ASTEndSelectStmtNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production757Production PRODUCTION757 = Production757Production.getInstance();

    public static class Production758Production extends Production
    {
        private Production758Production() {;} // Singleton
        private static Production758Production singletonInstance = null;
        public static final Production758Production getInstance() { if (singletonInstance == null) singletonInstance = new Production758Production(); return singletonInstance; }

        public String getDescription() { return "<SelectCaseRange> ::= EndSelectStmt:<EndSelectStmt>  :production758"; }

        /**
         * Reduce by <SelectCaseRange> ::= EndSelectStmt:<EndSelectStmt>  :production758
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SelectCaseRange> ::= EndSelectStmt:<EndSelectStmt>  :production758
            ASTEndSelectStmtNode v1 = (ASTEndSelectStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSelectCaseRangeNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SelectCaseRangeNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EndSelectStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SelectCaseRange> ::= EndSelectStmt:<EndSelectStmt>  :production758
         */
        protected ASTSelectCaseRangeNode userAction(ASTEndSelectStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production758Production PRODUCTION758 = Production758Production.getInstance();

    public static class Production759Production extends Production
    {
        private Production759Production() {;} // Singleton
        private static Production759Production singletonInstance = null;
        public static final Production759Production getInstance() { if (singletonInstance == null) singletonInstance = new Production759Production(); return singletonInstance; }

        public String getDescription() { return "<SelectCaseBody> ::= CaseStmt:<CaseStmt>  :production759"; }

        /**
         * Reduce by <SelectCaseBody> ::= CaseStmt:<CaseStmt>  :production759
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SelectCaseBody> ::= CaseStmt:<CaseStmt>  :production759
            ASTCaseStmtNode v1 = (ASTCaseStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSelectCaseBodyNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SelectCaseBodyNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("CaseStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SelectCaseBody> ::= CaseStmt:<CaseStmt>  :production759
         */
        protected ASTSelectCaseBodyNode userAction(ASTCaseStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production759Production PRODUCTION759 = Production759Production.getInstance();

    public static class Production760Production extends Production
    {
        private Production760Production() {;} // Singleton
        private static Production760Production singletonInstance = null;
        public static final Production760Production getInstance() { if (singletonInstance == null) singletonInstance = new Production760Production(); return singletonInstance; }

        public String getDescription() { return "<SelectCaseBody> ::= SelectCaseBody:<SelectCaseBody> CaseBodyConstruct:<CaseBodyConstruct>  :production760"; }

        /**
         * Reduce by <SelectCaseBody> ::= SelectCaseBody:<SelectCaseBody> CaseBodyConstruct:<CaseBodyConstruct>  :production760
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SelectCaseBody> ::= SelectCaseBody:<SelectCaseBody> CaseBodyConstruct:<CaseBodyConstruct>  :production760
            ASTCaseBodyConstructNode v2 = (ASTCaseBodyConstructNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSelectCaseBodyNode v1 = (ASTSelectCaseBodyNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSelectCaseBodyNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.SelectCaseBodyNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SelectCaseBody"))
                return 0;
            else
                if (name.equals("CaseBodyConstruct"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SelectCaseBody> ::= SelectCaseBody:<SelectCaseBody> CaseBodyConstruct:<CaseBodyConstruct>  :production760
         */
        protected ASTSelectCaseBodyNode userAction(ASTSelectCaseBodyNode v1, ASTCaseBodyConstructNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production760Production PRODUCTION760 = Production760Production.getInstance();

    public static class Production761Production extends Production
    {
        private Production761Production() {;} // Singleton
        private static Production761Production singletonInstance = null;
        public static final Production761Production getInstance() { if (singletonInstance == null) singletonInstance = new Production761Production(); return singletonInstance; }

        public String getDescription() { return "<CaseBodyConstruct> ::= CaseStmt:<CaseStmt>  :production761"; }

        /**
         * Reduce by <CaseBodyConstruct> ::= CaseStmt:<CaseStmt>  :production761
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CaseBodyConstruct> ::= CaseStmt:<CaseStmt>  :production761
            ASTCaseStmtNode v1 = (ASTCaseStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCaseBodyConstructNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.CaseBodyConstructNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("CaseStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CaseBodyConstruct> ::= CaseStmt:<CaseStmt>  :production761
         */
        protected ASTCaseBodyConstructNode userAction(ASTCaseStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production761Production PRODUCTION761 = Production761Production.getInstance();

    public static class Production762Production extends Production
    {
        private Production762Production() {;} // Singleton
        private static Production762Production singletonInstance = null;
        public static final Production762Production getInstance() { if (singletonInstance == null) singletonInstance = new Production762Production(); return singletonInstance; }

        public String getDescription() { return "<CaseBodyConstruct> ::= ExecutionPartConstruct:<ExecutionPartConstruct>  :production762"; }

        /**
         * Reduce by <CaseBodyConstruct> ::= ExecutionPartConstruct:<ExecutionPartConstruct>  :production762
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CaseBodyConstruct> ::= ExecutionPartConstruct:<ExecutionPartConstruct>  :production762
            ASTExecutionPartConstructNode v1 = (ASTExecutionPartConstructNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCaseBodyConstructNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.CaseBodyConstructNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ExecutionPartConstruct"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CaseBodyConstruct> ::= ExecutionPartConstruct:<ExecutionPartConstruct>  :production762
         */
        protected ASTCaseBodyConstructNode userAction(ASTExecutionPartConstructNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production762Production PRODUCTION762 = Production762Production.getInstance();

    public static class Production763Production extends Production
    {
        private Production763Production() {;} // Singleton
        private static Production763Production singletonInstance = null;
        public static final Production763Production getInstance() { if (singletonInstance == null) singletonInstance = new Production763Production(); return singletonInstance; }

        public String getDescription() { return "<SelectCaseStmt> ::= Name:<Name> tcolon:T_COLON tselectcase:T_SELECTCASE tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN teos:T_EOS  :production763"; }

        /**
         * Reduce by <SelectCaseStmt> ::= Name:<Name> tcolon:T_COLON tselectcase:T_SELECTCASE tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN teos:T_EOS  :production763
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SelectCaseStmt> ::= Name:<Name> tcolon:T_COLON tselectcase:T_SELECTCASE tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN teos:T_EOS  :production763
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v5 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSelectCaseStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7);

            // The production has 7 symbols on its RHS
            parser.reduce(Nonterminal.SelectCaseStmtNonterminal.getInstance(), 7, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tcolon"))
                    return 1;
                else
                    if (name.equals("tselectcase"))
                        return 2;
                    else
                        if (name.equals("tlparen"))
                            return 3;
                        else
                            if (name.equals("Expr"))
                                return 4;
                            else
                                if (name.equals("trparen"))
                                    return 5;
                                else
                                    if (name.equals("teos"))
                                        return 6;
                                    else
                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SelectCaseStmt> ::= Name:<Name> tcolon:T_COLON tselectcase:T_SELECTCASE tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN teos:T_EOS  :production763
         */
        protected ASTSelectCaseStmtNode userAction(ASTNameNode v1, Token v2, Token v3, Token v4, ASTExprNode v5, Token v6, Token v7)
        {
            return null;
        }
    }
    public static final Productions.Production763Production PRODUCTION763 = Production763Production.getInstance();

    public static class Production764Production extends Production
    {
        private Production764Production() {;} // Singleton
        private static Production764Production singletonInstance = null;
        public static final Production764Production getInstance() { if (singletonInstance == null) singletonInstance = new Production764Production(); return singletonInstance; }

        public String getDescription() { return "<SelectCaseStmt> ::= LblDef:<LblDef> Name:<Name> tcolon:T_COLON tselectcase:T_SELECTCASE tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN teos:T_EOS  :production764"; }

        /**
         * Reduce by <SelectCaseStmt> ::= LblDef:<LblDef> Name:<Name> tcolon:T_COLON tselectcase:T_SELECTCASE tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN teos:T_EOS  :production764
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SelectCaseStmt> ::= LblDef:<LblDef> Name:<Name> tcolon:T_COLON tselectcase:T_SELECTCASE tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN teos:T_EOS  :production764
            Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v6 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v2 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSelectCaseStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8);

            // The production has 8 symbols on its RHS
            parser.reduce(Nonterminal.SelectCaseStmtNonterminal.getInstance(), 8, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("Name"))
                    return 1;
                else
                    if (name.equals("tcolon"))
                        return 2;
                    else
                        if (name.equals("tselectcase"))
                            return 3;
                        else
                            if (name.equals("tlparen"))
                                return 4;
                            else
                                if (name.equals("Expr"))
                                    return 5;
                                else
                                    if (name.equals("trparen"))
                                        return 6;
                                    else
                                        if (name.equals("teos"))
                                            return 7;
                                        else
                                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SelectCaseStmt> ::= LblDef:<LblDef> Name:<Name> tcolon:T_COLON tselectcase:T_SELECTCASE tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN teos:T_EOS  :production764
         */
        protected ASTSelectCaseStmtNode userAction(ASTLblDefNode v1, ASTNameNode v2, Token v3, Token v4, Token v5, ASTExprNode v6, Token v7, Token v8)
        {
            return null;
        }
    }
    public static final Productions.Production764Production PRODUCTION764 = Production764Production.getInstance();

    public static class Production765Production extends Production
    {
        private Production765Production() {;} // Singleton
        private static Production765Production singletonInstance = null;
        public static final Production765Production getInstance() { if (singletonInstance == null) singletonInstance = new Production765Production(); return singletonInstance; }

        public String getDescription() { return "<SelectCaseStmt> ::= tselectcase:T_SELECTCASE tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN teos:T_EOS  :production765"; }

        /**
         * Reduce by <SelectCaseStmt> ::= tselectcase:T_SELECTCASE tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN teos:T_EOS  :production765
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SelectCaseStmt> ::= tselectcase:T_SELECTCASE tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN teos:T_EOS  :production765
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v3 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSelectCaseStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.SelectCaseStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tselectcase"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("Expr"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SelectCaseStmt> ::= tselectcase:T_SELECTCASE tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN teos:T_EOS  :production765
         */
        protected ASTSelectCaseStmtNode userAction(Token v1, Token v2, ASTExprNode v3, Token v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production765Production PRODUCTION765 = Production765Production.getInstance();

    public static class Production766Production extends Production
    {
        private Production766Production() {;} // Singleton
        private static Production766Production singletonInstance = null;
        public static final Production766Production getInstance() { if (singletonInstance == null) singletonInstance = new Production766Production(); return singletonInstance; }

        public String getDescription() { return "<SelectCaseStmt> ::= LblDef:<LblDef> tselectcase:T_SELECTCASE tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN teos:T_EOS  :production766"; }

        /**
         * Reduce by <SelectCaseStmt> ::= LblDef:<LblDef> tselectcase:T_SELECTCASE tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN teos:T_EOS  :production766
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SelectCaseStmt> ::= LblDef:<LblDef> tselectcase:T_SELECTCASE tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN teos:T_EOS  :production766
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v4 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSelectCaseStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.SelectCaseStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tselectcase"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("Expr"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SelectCaseStmt> ::= LblDef:<LblDef> tselectcase:T_SELECTCASE tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN teos:T_EOS  :production766
         */
        protected ASTSelectCaseStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, ASTExprNode v4, Token v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production766Production PRODUCTION766 = Production766Production.getInstance();

    public static class Production767Production extends Production
    {
        private Production767Production() {;} // Singleton
        private static Production767Production singletonInstance = null;
        public static final Production767Production getInstance() { if (singletonInstance == null) singletonInstance = new Production767Production(); return singletonInstance; }

        public String getDescription() { return "<SelectCaseStmt> ::= Name:<Name> tcolon:T_COLON tselect:T_SELECT tcase:T_CASE tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN teos:T_EOS  :production767"; }

        /**
         * Reduce by <SelectCaseStmt> ::= Name:<Name> tcolon:T_COLON tselect:T_SELECT tcase:T_CASE tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN teos:T_EOS  :production767
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SelectCaseStmt> ::= Name:<Name> tcolon:T_COLON tselect:T_SELECT tcase:T_CASE tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN teos:T_EOS  :production767
            Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v6 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSelectCaseStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8);

            // The production has 8 symbols on its RHS
            parser.reduce(Nonterminal.SelectCaseStmtNonterminal.getInstance(), 8, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tcolon"))
                    return 1;
                else
                    if (name.equals("tselect"))
                        return 2;
                    else
                        if (name.equals("tcase"))
                            return 3;
                        else
                            if (name.equals("tlparen"))
                                return 4;
                            else
                                if (name.equals("Expr"))
                                    return 5;
                                else
                                    if (name.equals("trparen"))
                                        return 6;
                                    else
                                        if (name.equals("teos"))
                                            return 7;
                                        else
                                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SelectCaseStmt> ::= Name:<Name> tcolon:T_COLON tselect:T_SELECT tcase:T_CASE tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN teos:T_EOS  :production767
         */
        protected ASTSelectCaseStmtNode userAction(ASTNameNode v1, Token v2, Token v3, Token v4, Token v5, ASTExprNode v6, Token v7, Token v8)
        {
            return null;
        }
    }
    public static final Productions.Production767Production PRODUCTION767 = Production767Production.getInstance();

    public static class Production768Production extends Production
    {
        private Production768Production() {;} // Singleton
        private static Production768Production singletonInstance = null;
        public static final Production768Production getInstance() { if (singletonInstance == null) singletonInstance = new Production768Production(); return singletonInstance; }

        public String getDescription() { return "<SelectCaseStmt> ::= LblDef:<LblDef> Name:<Name> tcolon:T_COLON tselect:T_SELECT tcase:T_CASE tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN teos:T_EOS  :production768"; }

        /**
         * Reduce by <SelectCaseStmt> ::= LblDef:<LblDef> Name:<Name> tcolon:T_COLON tselect:T_SELECT tcase:T_CASE tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN teos:T_EOS  :production768
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SelectCaseStmt> ::= LblDef:<LblDef> Name:<Name> tcolon:T_COLON tselect:T_SELECT tcase:T_CASE tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN teos:T_EOS  :production768
            Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v7 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v2 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSelectCaseStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8, v9);

            // The production has 9 symbols on its RHS
            parser.reduce(Nonterminal.SelectCaseStmtNonterminal.getInstance(), 9, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("Name"))
                    return 1;
                else
                    if (name.equals("tcolon"))
                        return 2;
                    else
                        if (name.equals("tselect"))
                            return 3;
                        else
                            if (name.equals("tcase"))
                                return 4;
                            else
                                if (name.equals("tlparen"))
                                    return 5;
                                else
                                    if (name.equals("Expr"))
                                        return 6;
                                    else
                                        if (name.equals("trparen"))
                                            return 7;
                                        else
                                            if (name.equals("teos"))
                                                return 8;
                                            else
                                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SelectCaseStmt> ::= LblDef:<LblDef> Name:<Name> tcolon:T_COLON tselect:T_SELECT tcase:T_CASE tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN teos:T_EOS  :production768
         */
        protected ASTSelectCaseStmtNode userAction(ASTLblDefNode v1, ASTNameNode v2, Token v3, Token v4, Token v5, Token v6, ASTExprNode v7, Token v8, Token v9)
        {
            return null;
        }
    }
    public static final Productions.Production768Production PRODUCTION768 = Production768Production.getInstance();

    public static class Production769Production extends Production
    {
        private Production769Production() {;} // Singleton
        private static Production769Production singletonInstance = null;
        public static final Production769Production getInstance() { if (singletonInstance == null) singletonInstance = new Production769Production(); return singletonInstance; }

        public String getDescription() { return "<SelectCaseStmt> ::= tselect:T_SELECT tcase:T_CASE tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN teos:T_EOS  :production769"; }

        /**
         * Reduce by <SelectCaseStmt> ::= tselect:T_SELECT tcase:T_CASE tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN teos:T_EOS  :production769
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SelectCaseStmt> ::= tselect:T_SELECT tcase:T_CASE tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN teos:T_EOS  :production769
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v4 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSelectCaseStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.SelectCaseStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tselect"))
                return 0;
            else
                if (name.equals("tcase"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("Expr"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SelectCaseStmt> ::= tselect:T_SELECT tcase:T_CASE tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN teos:T_EOS  :production769
         */
        protected ASTSelectCaseStmtNode userAction(Token v1, Token v2, Token v3, ASTExprNode v4, Token v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production769Production PRODUCTION769 = Production769Production.getInstance();

    public static class Production770Production extends Production
    {
        private Production770Production() {;} // Singleton
        private static Production770Production singletonInstance = null;
        public static final Production770Production getInstance() { if (singletonInstance == null) singletonInstance = new Production770Production(); return singletonInstance; }

        public String getDescription() { return "<SelectCaseStmt> ::= LblDef:<LblDef> tselect:T_SELECT tcase:T_CASE tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN teos:T_EOS  :production770"; }

        /**
         * Reduce by <SelectCaseStmt> ::= LblDef:<LblDef> tselect:T_SELECT tcase:T_CASE tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN teos:T_EOS  :production770
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SelectCaseStmt> ::= LblDef:<LblDef> tselect:T_SELECT tcase:T_CASE tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN teos:T_EOS  :production770
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v5 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSelectCaseStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7);

            // The production has 7 symbols on its RHS
            parser.reduce(Nonterminal.SelectCaseStmtNonterminal.getInstance(), 7, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tselect"))
                    return 1;
                else
                    if (name.equals("tcase"))
                        return 2;
                    else
                        if (name.equals("tlparen"))
                            return 3;
                        else
                            if (name.equals("Expr"))
                                return 4;
                            else
                                if (name.equals("trparen"))
                                    return 5;
                                else
                                    if (name.equals("teos"))
                                        return 6;
                                    else
                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SelectCaseStmt> ::= LblDef:<LblDef> tselect:T_SELECT tcase:T_CASE tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN teos:T_EOS  :production770
         */
        protected ASTSelectCaseStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, Token v4, ASTExprNode v5, Token v6, Token v7)
        {
            return null;
        }
    }
    public static final Productions.Production770Production PRODUCTION770 = Production770Production.getInstance();

    public static class Production771Production extends Production
    {
        private Production771Production() {;} // Singleton
        private static Production771Production singletonInstance = null;
        public static final Production771Production getInstance() { if (singletonInstance == null) singletonInstance = new Production771Production(); return singletonInstance; }

        public String getDescription() { return "<CaseStmt> ::= tcase:T_CASE CaseSelector:<CaseSelector> teos:T_EOS  :production771"; }

        /**
         * Reduce by <CaseStmt> ::= tcase:T_CASE CaseSelector:<CaseSelector> teos:T_EOS  :production771
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CaseStmt> ::= tcase:T_CASE CaseSelector:<CaseSelector> teos:T_EOS  :production771
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTCaseSelectorNode v2 = (ASTCaseSelectorNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCaseStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.CaseStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tcase"))
                return 0;
            else
                if (name.equals("CaseSelector"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CaseStmt> ::= tcase:T_CASE CaseSelector:<CaseSelector> teos:T_EOS  :production771
         */
        protected ASTCaseStmtNode userAction(Token v1, ASTCaseSelectorNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production771Production PRODUCTION771 = Production771Production.getInstance();

    public static class Production772Production extends Production
    {
        private Production772Production() {;} // Singleton
        private static Production772Production singletonInstance = null;
        public static final Production772Production getInstance() { if (singletonInstance == null) singletonInstance = new Production772Production(); return singletonInstance; }

        public String getDescription() { return "<CaseStmt> ::= LblDef:<LblDef> tcase:T_CASE CaseSelector:<CaseSelector> teos:T_EOS  :production772"; }

        /**
         * Reduce by <CaseStmt> ::= LblDef:<LblDef> tcase:T_CASE CaseSelector:<CaseSelector> teos:T_EOS  :production772
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CaseStmt> ::= LblDef:<LblDef> tcase:T_CASE CaseSelector:<CaseSelector> teos:T_EOS  :production772
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTCaseSelectorNode v3 = (ASTCaseSelectorNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCaseStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.CaseStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tcase"))
                    return 1;
                else
                    if (name.equals("CaseSelector"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CaseStmt> ::= LblDef:<LblDef> tcase:T_CASE CaseSelector:<CaseSelector> teos:T_EOS  :production772
         */
        protected ASTCaseStmtNode userAction(ASTLblDefNode v1, Token v2, ASTCaseSelectorNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production772Production PRODUCTION772 = Production772Production.getInstance();

    public static class Production773Production extends Production
    {
        private Production773Production() {;} // Singleton
        private static Production773Production singletonInstance = null;
        public static final Production773Production getInstance() { if (singletonInstance == null) singletonInstance = new Production773Production(); return singletonInstance; }

        public String getDescription() { return "<CaseStmt> ::= tcase:T_CASE CaseSelector:<CaseSelector> Name:<Name> teos:T_EOS  :production773"; }

        /**
         * Reduce by <CaseStmt> ::= tcase:T_CASE CaseSelector:<CaseSelector> Name:<Name> teos:T_EOS  :production773
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CaseStmt> ::= tcase:T_CASE CaseSelector:<CaseSelector> Name:<Name> teos:T_EOS  :production773
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v3 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTCaseSelectorNode v2 = (ASTCaseSelectorNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCaseStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.CaseStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tcase"))
                return 0;
            else
                if (name.equals("CaseSelector"))
                    return 1;
                else
                    if (name.equals("Name"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CaseStmt> ::= tcase:T_CASE CaseSelector:<CaseSelector> Name:<Name> teos:T_EOS  :production773
         */
        protected ASTCaseStmtNode userAction(Token v1, ASTCaseSelectorNode v2, ASTNameNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production773Production PRODUCTION773 = Production773Production.getInstance();

    public static class Production774Production extends Production
    {
        private Production774Production() {;} // Singleton
        private static Production774Production singletonInstance = null;
        public static final Production774Production getInstance() { if (singletonInstance == null) singletonInstance = new Production774Production(); return singletonInstance; }

        public String getDescription() { return "<CaseStmt> ::= LblDef:<LblDef> tcase:T_CASE CaseSelector:<CaseSelector> Name:<Name> teos:T_EOS  :production774"; }

        /**
         * Reduce by <CaseStmt> ::= LblDef:<LblDef> tcase:T_CASE CaseSelector:<CaseSelector> Name:<Name> teos:T_EOS  :production774
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CaseStmt> ::= LblDef:<LblDef> tcase:T_CASE CaseSelector:<CaseSelector> Name:<Name> teos:T_EOS  :production774
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v4 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTCaseSelectorNode v3 = (ASTCaseSelectorNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCaseStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.CaseStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tcase"))
                    return 1;
                else
                    if (name.equals("CaseSelector"))
                        return 2;
                    else
                        if (name.equals("Name"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CaseStmt> ::= LblDef:<LblDef> tcase:T_CASE CaseSelector:<CaseSelector> Name:<Name> teos:T_EOS  :production774
         */
        protected ASTCaseStmtNode userAction(ASTLblDefNode v1, Token v2, ASTCaseSelectorNode v3, ASTNameNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production774Production PRODUCTION774 = Production774Production.getInstance();

    public static class Production775Production extends Production
    {
        private Production775Production() {;} // Singleton
        private static Production775Production singletonInstance = null;
        public static final Production775Production getInstance() { if (singletonInstance == null) singletonInstance = new Production775Production(); return singletonInstance; }

        public String getDescription() { return "<EndSelectStmt> ::= tendselect:T_ENDSELECT teos:T_EOS  :production775"; }

        /**
         * Reduce by <EndSelectStmt> ::= tendselect:T_ENDSELECT teos:T_EOS  :production775
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndSelectStmt> ::= tendselect:T_ENDSELECT teos:T_EOS  :production775
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndSelectStmtNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.EndSelectStmtNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tendselect"))
                return 0;
            else
                if (name.equals("teos"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndSelectStmt> ::= tendselect:T_ENDSELECT teos:T_EOS  :production775
         */
        protected ASTEndSelectStmtNode userAction(Token v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production775Production PRODUCTION775 = Production775Production.getInstance();

    public static class Production776Production extends Production
    {
        private Production776Production() {;} // Singleton
        private static Production776Production singletonInstance = null;
        public static final Production776Production getInstance() { if (singletonInstance == null) singletonInstance = new Production776Production(); return singletonInstance; }

        public String getDescription() { return "<EndSelectStmt> ::= tendselect:T_ENDSELECT <EndSelectStmt@61> teos:T_EOS  :production776"; }

        /**
         * Reduce by <EndSelectStmt> ::= tendselect:T_ENDSELECT <EndSelectStmt@61> teos:T_EOS  :production776
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndSelectStmt> ::= tendselect:T_ENDSELECT <EndSelectStmt@61> teos:T_EOS  :production776
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v2 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndSelectStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EndSelectStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tendselect"))
                return 0;
            else
                if (name.equals("EndName"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndSelectStmt> ::= tendselect:T_ENDSELECT <EndSelectStmt@61> teos:T_EOS  :production776
         */
        protected ASTEndSelectStmtNode userAction(Token v1, ASTEndNameNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production776Production PRODUCTION776 = Production776Production.getInstance();

    public static class Production777Production extends Production
    {
        private Production777Production() {;} // Singleton
        private static Production777Production singletonInstance = null;
        public static final Production777Production getInstance() { if (singletonInstance == null) singletonInstance = new Production777Production(); return singletonInstance; }

        public String getDescription() { return "<EndSelectStmt> ::= LblDef:<LblDef> tendselect:T_ENDSELECT teos:T_EOS  :production777"; }

        /**
         * Reduce by <EndSelectStmt> ::= LblDef:<LblDef> tendselect:T_ENDSELECT teos:T_EOS  :production777
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndSelectStmt> ::= LblDef:<LblDef> tendselect:T_ENDSELECT teos:T_EOS  :production777
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndSelectStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EndSelectStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tendselect"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndSelectStmt> ::= LblDef:<LblDef> tendselect:T_ENDSELECT teos:T_EOS  :production777
         */
        protected ASTEndSelectStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production777Production PRODUCTION777 = Production777Production.getInstance();

    public static class Production778Production extends Production
    {
        private Production778Production() {;} // Singleton
        private static Production778Production singletonInstance = null;
        public static final Production778Production getInstance() { if (singletonInstance == null) singletonInstance = new Production778Production(); return singletonInstance; }

        public String getDescription() { return "<EndSelectStmt> ::= LblDef:<LblDef> tendselect:T_ENDSELECT <EndSelectStmt@61> teos:T_EOS  :production778"; }

        /**
         * Reduce by <EndSelectStmt> ::= LblDef:<LblDef> tendselect:T_ENDSELECT <EndSelectStmt@61> teos:T_EOS  :production778
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndSelectStmt> ::= LblDef:<LblDef> tendselect:T_ENDSELECT <EndSelectStmt@61> teos:T_EOS  :production778
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v3 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndSelectStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EndSelectStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tendselect"))
                    return 1;
                else
                    if (name.equals("EndName"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndSelectStmt> ::= LblDef:<LblDef> tendselect:T_ENDSELECT <EndSelectStmt@61> teos:T_EOS  :production778
         */
        protected ASTEndSelectStmtNode userAction(ASTLblDefNode v1, Token v2, ASTEndNameNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production778Production PRODUCTION778 = Production778Production.getInstance();

    public static class Production779Production extends Production
    {
        private Production779Production() {;} // Singleton
        private static Production779Production singletonInstance = null;
        public static final Production779Production getInstance() { if (singletonInstance == null) singletonInstance = new Production779Production(); return singletonInstance; }

        public String getDescription() { return "<EndSelectStmt> ::= tend:T_END tselect:T_SELECT teos:T_EOS  :production779"; }

        /**
         * Reduce by <EndSelectStmt> ::= tend:T_END tselect:T_SELECT teos:T_EOS  :production779
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndSelectStmt> ::= tend:T_END tselect:T_SELECT teos:T_EOS  :production779
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndSelectStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EndSelectStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tend"))
                return 0;
            else
                if (name.equals("tselect"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndSelectStmt> ::= tend:T_END tselect:T_SELECT teos:T_EOS  :production779
         */
        protected ASTEndSelectStmtNode userAction(Token v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production779Production PRODUCTION779 = Production779Production.getInstance();

    public static class Production780Production extends Production
    {
        private Production780Production() {;} // Singleton
        private static Production780Production singletonInstance = null;
        public static final Production780Production getInstance() { if (singletonInstance == null) singletonInstance = new Production780Production(); return singletonInstance; }

        public String getDescription() { return "<EndSelectStmt> ::= tend:T_END tselect:T_SELECT <EndSelectStmt@62> teos:T_EOS  :production780"; }

        /**
         * Reduce by <EndSelectStmt> ::= tend:T_END tselect:T_SELECT <EndSelectStmt@62> teos:T_EOS  :production780
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndSelectStmt> ::= tend:T_END tselect:T_SELECT <EndSelectStmt@62> teos:T_EOS  :production780
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v3 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndSelectStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EndSelectStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tend"))
                return 0;
            else
                if (name.equals("tselect"))
                    return 1;
                else
                    if (name.equals("EndName"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndSelectStmt> ::= tend:T_END tselect:T_SELECT <EndSelectStmt@62> teos:T_EOS  :production780
         */
        protected ASTEndSelectStmtNode userAction(Token v1, Token v2, ASTEndNameNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production780Production PRODUCTION780 = Production780Production.getInstance();

    public static class Production781Production extends Production
    {
        private Production781Production() {;} // Singleton
        private static Production781Production singletonInstance = null;
        public static final Production781Production getInstance() { if (singletonInstance == null) singletonInstance = new Production781Production(); return singletonInstance; }

        public String getDescription() { return "<EndSelectStmt> ::= LblDef:<LblDef> tend:T_END tselect:T_SELECT teos:T_EOS  :production781"; }

        /**
         * Reduce by <EndSelectStmt> ::= LblDef:<LblDef> tend:T_END tselect:T_SELECT teos:T_EOS  :production781
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndSelectStmt> ::= LblDef:<LblDef> tend:T_END tselect:T_SELECT teos:T_EOS  :production781
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndSelectStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EndSelectStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tend"))
                    return 1;
                else
                    if (name.equals("tselect"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndSelectStmt> ::= LblDef:<LblDef> tend:T_END tselect:T_SELECT teos:T_EOS  :production781
         */
        protected ASTEndSelectStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production781Production PRODUCTION781 = Production781Production.getInstance();

    public static class Production782Production extends Production
    {
        private Production782Production() {;} // Singleton
        private static Production782Production singletonInstance = null;
        public static final Production782Production getInstance() { if (singletonInstance == null) singletonInstance = new Production782Production(); return singletonInstance; }

        public String getDescription() { return "<EndSelectStmt> ::= LblDef:<LblDef> tend:T_END tselect:T_SELECT <EndSelectStmt@62> teos:T_EOS  :production782"; }

        /**
         * Reduce by <EndSelectStmt> ::= LblDef:<LblDef> tend:T_END tselect:T_SELECT <EndSelectStmt@62> teos:T_EOS  :production782
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndSelectStmt> ::= LblDef:<LblDef> tend:T_END tselect:T_SELECT <EndSelectStmt@62> teos:T_EOS  :production782
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v4 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndSelectStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.EndSelectStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tend"))
                    return 1;
                else
                    if (name.equals("tselect"))
                        return 2;
                    else
                        if (name.equals("EndName"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndSelectStmt> ::= LblDef:<LblDef> tend:T_END tselect:T_SELECT <EndSelectStmt@62> teos:T_EOS  :production782
         */
        protected ASTEndSelectStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, ASTEndNameNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production782Production PRODUCTION782 = Production782Production.getInstance();

    public static class Production783Production extends Production
    {
        private Production783Production() {;} // Singleton
        private static Production783Production singletonInstance = null;
        public static final Production783Production getInstance() { if (singletonInstance == null) singletonInstance = new Production783Production(); return singletonInstance; }

        public String getDescription() { return "<CaseSelector> ::= tlparen:T_LPAREN CaseValueRangeList:<CaseValueRangeList> trparen:T_RPAREN  :production783"; }

        /**
         * Reduce by <CaseSelector> ::= tlparen:T_LPAREN CaseValueRangeList:<CaseValueRangeList> trparen:T_RPAREN  :production783
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CaseSelector> ::= tlparen:T_LPAREN CaseValueRangeList:<CaseValueRangeList> trparen:T_RPAREN  :production783
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTCaseValueRangeListNode v2 = (ASTCaseValueRangeListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCaseSelectorNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.CaseSelectorNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("CaseValueRangeList"))
                    return 1;
                else
                    if (name.equals("trparen"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CaseSelector> ::= tlparen:T_LPAREN CaseValueRangeList:<CaseValueRangeList> trparen:T_RPAREN  :production783
         */
        protected ASTCaseSelectorNode userAction(Token v1, ASTCaseValueRangeListNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production783Production PRODUCTION783 = Production783Production.getInstance();

    public static class Production784Production extends Production
    {
        private Production784Production() {;} // Singleton
        private static Production784Production singletonInstance = null;
        public static final Production784Production getInstance() { if (singletonInstance == null) singletonInstance = new Production784Production(); return singletonInstance; }

        public String getDescription() { return "<CaseSelector> ::= tdefault:T_DEFAULT  :production784"; }

        /**
         * Reduce by <CaseSelector> ::= tdefault:T_DEFAULT  :production784
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CaseSelector> ::= tdefault:T_DEFAULT  :production784
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCaseSelectorNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.CaseSelectorNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tdefault"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CaseSelector> ::= tdefault:T_DEFAULT  :production784
         */
        protected ASTCaseSelectorNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production784Production PRODUCTION784 = Production784Production.getInstance();

    public static class Production785Production extends Production
    {
        private Production785Production() {;} // Singleton
        private static Production785Production singletonInstance = null;
        public static final Production785Production getInstance() { if (singletonInstance == null) singletonInstance = new Production785Production(); return singletonInstance; }

        public String getDescription() { return "<CaseValueRangeList> ::= CaseValueRange:<CaseValueRange>  :production785"; }

        /**
         * Reduce by <CaseValueRangeList> ::= CaseValueRange:<CaseValueRange>  :production785
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CaseValueRangeList> ::= CaseValueRange:<CaseValueRange>  :production785
            ASTCaseValueRangeNode v1 = (ASTCaseValueRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCaseValueRangeListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.CaseValueRangeListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("CaseValueRange"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CaseValueRangeList> ::= CaseValueRange:<CaseValueRange>  :production785
         */
        protected ASTCaseValueRangeListNode userAction(ASTCaseValueRangeNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production785Production PRODUCTION785 = Production785Production.getInstance();

    public static class Production786Production extends Production
    {
        private Production786Production() {;} // Singleton
        private static Production786Production singletonInstance = null;
        public static final Production786Production getInstance() { if (singletonInstance == null) singletonInstance = new Production786Production(); return singletonInstance; }

        public String getDescription() { return "<CaseValueRangeList> ::= @:<CaseValueRangeList> tcomma:T_COMMA CaseValueRange:<CaseValueRange>  :production786"; }

        /**
         * Reduce by <CaseValueRangeList> ::= @:<CaseValueRangeList> tcomma:T_COMMA CaseValueRange:<CaseValueRange>  :production786
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CaseValueRangeList> ::= @:<CaseValueRangeList> tcomma:T_COMMA CaseValueRange:<CaseValueRange>  :production786
            ASTCaseValueRangeNode v3 = (ASTCaseValueRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTCaseValueRangeListNode v1 = (ASTCaseValueRangeListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCaseValueRangeListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.CaseValueRangeListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("CaseValueRange"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CaseValueRangeList> ::= @:<CaseValueRangeList> tcomma:T_COMMA CaseValueRange:<CaseValueRange>  :production786
         */
        protected ASTCaseValueRangeListNode userAction(ASTCaseValueRangeListNode v1, Token v2, ASTCaseValueRangeNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production786Production PRODUCTION786 = Production786Production.getInstance();

    public static class Production787Production extends Production
    {
        private Production787Production() {;} // Singleton
        private static Production787Production singletonInstance = null;
        public static final Production787Production getInstance() { if (singletonInstance == null) singletonInstance = new Production787Production(); return singletonInstance; }

        public String getDescription() { return "<CaseValueRange> ::= Expr:<Expr>  :production787"; }

        /**
         * Reduce by <CaseValueRange> ::= Expr:<Expr>  :production787
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CaseValueRange> ::= Expr:<Expr>  :production787
            ASTExprNode v1 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCaseValueRangeNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.CaseValueRangeNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Expr"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CaseValueRange> ::= Expr:<Expr>  :production787
         */
        protected ASTCaseValueRangeNode userAction(ASTExprNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production787Production PRODUCTION787 = Production787Production.getInstance();

    public static class Production788Production extends Production
    {
        private Production788Production() {;} // Singleton
        private static Production788Production singletonInstance = null;
        public static final Production788Production getInstance() { if (singletonInstance == null) singletonInstance = new Production788Production(); return singletonInstance; }

        public String getDescription() { return "<CaseValueRange> ::= Expr:<Expr> tcolon:T_COLON  :production788"; }

        /**
         * Reduce by <CaseValueRange> ::= Expr:<Expr> tcolon:T_COLON  :production788
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CaseValueRange> ::= Expr:<Expr> tcolon:T_COLON  :production788
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v1 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCaseValueRangeNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.CaseValueRangeNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Expr"))
                return 0;
            else
                if (name.equals("tcolon"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CaseValueRange> ::= Expr:<Expr> tcolon:T_COLON  :production788
         */
        protected ASTCaseValueRangeNode userAction(ASTExprNode v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production788Production PRODUCTION788 = Production788Production.getInstance();

    public static class Production789Production extends Production
    {
        private Production789Production() {;} // Singleton
        private static Production789Production singletonInstance = null;
        public static final Production789Production getInstance() { if (singletonInstance == null) singletonInstance = new Production789Production(); return singletonInstance; }

        public String getDescription() { return "<CaseValueRange> ::= tcolon:T_COLON Expr:<Expr>  :production789"; }

        /**
         * Reduce by <CaseValueRange> ::= tcolon:T_COLON Expr:<Expr>  :production789
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CaseValueRange> ::= tcolon:T_COLON Expr:<Expr>  :production789
            ASTExprNode v2 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCaseValueRangeNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.CaseValueRangeNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tcolon"))
                return 0;
            else
                if (name.equals("Expr"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CaseValueRange> ::= tcolon:T_COLON Expr:<Expr>  :production789
         */
        protected ASTCaseValueRangeNode userAction(Token v1, ASTExprNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production789Production PRODUCTION789 = Production789Production.getInstance();

    public static class Production790Production extends Production
    {
        private Production790Production() {;} // Singleton
        private static Production790Production singletonInstance = null;
        public static final Production790Production getInstance() { if (singletonInstance == null) singletonInstance = new Production790Production(); return singletonInstance; }

        public String getDescription() { return "<CaseValueRange> ::= Expr:<Expr> tcolon:T_COLON Expr2:<Expr>  :production790"; }

        /**
         * Reduce by <CaseValueRange> ::= Expr:<Expr> tcolon:T_COLON Expr2:<Expr>  :production790
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CaseValueRange> ::= Expr:<Expr> tcolon:T_COLON Expr2:<Expr>  :production790
            ASTExprNode v3 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v1 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCaseValueRangeNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.CaseValueRangeNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Expr"))
                return 0;
            else
                if (name.equals("tcolon"))
                    return 1;
                else
                    if (name.equals("Expr2"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CaseValueRange> ::= Expr:<Expr> tcolon:T_COLON Expr2:<Expr>  :production790
         */
        protected ASTCaseValueRangeNode userAction(ASTExprNode v1, Token v2, ASTExprNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production790Production PRODUCTION790 = Production790Production.getInstance();

    public static class Production791Production extends Production
    {
        private Production791Production() {;} // Singleton
        private static Production791Production singletonInstance = null;
        public static final Production791Production getInstance() { if (singletonInstance == null) singletonInstance = new Production791Production(); return singletonInstance; }

        public String getDescription() { return "<DoConstruct> ::= BlockDoConstruct:<BlockDoConstruct>  :production791"; }

        /**
         * Reduce by <DoConstruct> ::= BlockDoConstruct:<BlockDoConstruct>  :production791
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DoConstruct> ::= BlockDoConstruct:<BlockDoConstruct>  :production791
            ASTBlockDoConstructNode v1 = (ASTBlockDoConstructNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDoConstructNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.DoConstructNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("BlockDoConstruct"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DoConstruct> ::= BlockDoConstruct:<BlockDoConstruct>  :production791
         */
        protected ASTDoConstructNode userAction(ASTBlockDoConstructNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production791Production PRODUCTION791 = Production791Production.getInstance();

    public static class Production792Production extends Production
    {
        private Production792Production() {;} // Singleton
        private static Production792Production singletonInstance = null;
        public static final Production792Production getInstance() { if (singletonInstance == null) singletonInstance = new Production792Production(); return singletonInstance; }

        public String getDescription() { return "<BlockDoConstruct> ::= LabelDoStmt:<LabelDoStmt>  :production792"; }

        /**
         * Reduce by <BlockDoConstruct> ::= LabelDoStmt:<LabelDoStmt>  :production792
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <BlockDoConstruct> ::= LabelDoStmt:<LabelDoStmt>  :production792
            ASTLabelDoStmtNode v1 = (ASTLabelDoStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTBlockDoConstructNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.BlockDoConstructNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LabelDoStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <BlockDoConstruct> ::= LabelDoStmt:<LabelDoStmt>  :production792
         */
        protected ASTBlockDoConstructNode userAction(ASTLabelDoStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production792Production PRODUCTION792 = Production792Production.getInstance();

    public static class Production793Production extends Production
    {
        private Production793Production() {;} // Singleton
        private static Production793Production singletonInstance = null;
        public static final Production793Production getInstance() { if (singletonInstance == null) singletonInstance = new Production793Production(); return singletonInstance; }

        public String getDescription() { return "<LabelDoStmt> ::= tdo:T_DO LblRef:<LblRef> CommaLoopControl:<CommaLoopControl> teos:T_EOS  :production793"; }

        /**
         * Reduce by <LabelDoStmt> ::= tdo:T_DO LblRef:<LblRef> CommaLoopControl:<CommaLoopControl> teos:T_EOS  :production793
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <LabelDoStmt> ::= tdo:T_DO LblRef:<LblRef> CommaLoopControl:<CommaLoopControl> teos:T_EOS  :production793
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTCommaLoopControlNode v3 = (ASTCommaLoopControlNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblRefNode v2 = (ASTLblRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTLabelDoStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.LabelDoStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tdo"))
                return 0;
            else
                if (name.equals("LblRef"))
                    return 1;
                else
                    if (name.equals("CommaLoopControl"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <LabelDoStmt> ::= tdo:T_DO LblRef:<LblRef> CommaLoopControl:<CommaLoopControl> teos:T_EOS  :production793
         */
        protected ASTLabelDoStmtNode userAction(Token v1, ASTLblRefNode v2, ASTCommaLoopControlNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production793Production PRODUCTION793 = Production793Production.getInstance();

    public static class Production794Production extends Production
    {
        private Production794Production() {;} // Singleton
        private static Production794Production singletonInstance = null;
        public static final Production794Production getInstance() { if (singletonInstance == null) singletonInstance = new Production794Production(); return singletonInstance; }

        public String getDescription() { return "<LabelDoStmt> ::= LblDef:<LblDef> tdo:T_DO LblRef:<LblRef> CommaLoopControl:<CommaLoopControl> teos:T_EOS  :production794"; }

        /**
         * Reduce by <LabelDoStmt> ::= LblDef:<LblDef> tdo:T_DO LblRef:<LblRef> CommaLoopControl:<CommaLoopControl> teos:T_EOS  :production794
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <LabelDoStmt> ::= LblDef:<LblDef> tdo:T_DO LblRef:<LblRef> CommaLoopControl:<CommaLoopControl> teos:T_EOS  :production794
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTCommaLoopControlNode v4 = (ASTCommaLoopControlNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblRefNode v3 = (ASTLblRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTLabelDoStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.LabelDoStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tdo"))
                    return 1;
                else
                    if (name.equals("LblRef"))
                        return 2;
                    else
                        if (name.equals("CommaLoopControl"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <LabelDoStmt> ::= LblDef:<LblDef> tdo:T_DO LblRef:<LblRef> CommaLoopControl:<CommaLoopControl> teos:T_EOS  :production794
         */
        protected ASTLabelDoStmtNode userAction(ASTLblDefNode v1, Token v2, ASTLblRefNode v3, ASTCommaLoopControlNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production794Production PRODUCTION794 = Production794Production.getInstance();

    public static class Production795Production extends Production
    {
        private Production795Production() {;} // Singleton
        private static Production795Production singletonInstance = null;
        public static final Production795Production getInstance() { if (singletonInstance == null) singletonInstance = new Production795Production(); return singletonInstance; }

        public String getDescription() { return "<LabelDoStmt> ::= tdo:T_DO LblRef:<LblRef> teos:T_EOS  :production795"; }

        /**
         * Reduce by <LabelDoStmt> ::= tdo:T_DO LblRef:<LblRef> teos:T_EOS  :production795
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <LabelDoStmt> ::= tdo:T_DO LblRef:<LblRef> teos:T_EOS  :production795
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblRefNode v2 = (ASTLblRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTLabelDoStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.LabelDoStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tdo"))
                return 0;
            else
                if (name.equals("LblRef"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <LabelDoStmt> ::= tdo:T_DO LblRef:<LblRef> teos:T_EOS  :production795
         */
        protected ASTLabelDoStmtNode userAction(Token v1, ASTLblRefNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production795Production PRODUCTION795 = Production795Production.getInstance();

    public static class Production796Production extends Production
    {
        private Production796Production() {;} // Singleton
        private static Production796Production singletonInstance = null;
        public static final Production796Production getInstance() { if (singletonInstance == null) singletonInstance = new Production796Production(); return singletonInstance; }

        public String getDescription() { return "<LabelDoStmt> ::= LblDef:<LblDef> tdo:T_DO LblRef:<LblRef> teos:T_EOS  :production796"; }

        /**
         * Reduce by <LabelDoStmt> ::= LblDef:<LblDef> tdo:T_DO LblRef:<LblRef> teos:T_EOS  :production796
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <LabelDoStmt> ::= LblDef:<LblDef> tdo:T_DO LblRef:<LblRef> teos:T_EOS  :production796
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblRefNode v3 = (ASTLblRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTLabelDoStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.LabelDoStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tdo"))
                    return 1;
                else
                    if (name.equals("LblRef"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <LabelDoStmt> ::= LblDef:<LblDef> tdo:T_DO LblRef:<LblRef> teos:T_EOS  :production796
         */
        protected ASTLabelDoStmtNode userAction(ASTLblDefNode v1, Token v2, ASTLblRefNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production796Production PRODUCTION796 = Production796Production.getInstance();

    public static class Production797Production extends Production
    {
        private Production797Production() {;} // Singleton
        private static Production797Production singletonInstance = null;
        public static final Production797Production getInstance() { if (singletonInstance == null) singletonInstance = new Production797Production(); return singletonInstance; }

        public String getDescription() { return "<LabelDoStmt> ::= tdo:T_DO CommaLoopControl:<CommaLoopControl> teos:T_EOS  :production797"; }

        /**
         * Reduce by <LabelDoStmt> ::= tdo:T_DO CommaLoopControl:<CommaLoopControl> teos:T_EOS  :production797
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <LabelDoStmt> ::= tdo:T_DO CommaLoopControl:<CommaLoopControl> teos:T_EOS  :production797
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTCommaLoopControlNode v2 = (ASTCommaLoopControlNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTLabelDoStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.LabelDoStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tdo"))
                return 0;
            else
                if (name.equals("CommaLoopControl"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <LabelDoStmt> ::= tdo:T_DO CommaLoopControl:<CommaLoopControl> teos:T_EOS  :production797
         */
        protected ASTLabelDoStmtNode userAction(Token v1, ASTCommaLoopControlNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production797Production PRODUCTION797 = Production797Production.getInstance();

    public static class Production798Production extends Production
    {
        private Production798Production() {;} // Singleton
        private static Production798Production singletonInstance = null;
        public static final Production798Production getInstance() { if (singletonInstance == null) singletonInstance = new Production798Production(); return singletonInstance; }

        public String getDescription() { return "<LabelDoStmt> ::= LblDef:<LblDef> tdo:T_DO CommaLoopControl:<CommaLoopControl> teos:T_EOS  :production798"; }

        /**
         * Reduce by <LabelDoStmt> ::= LblDef:<LblDef> tdo:T_DO CommaLoopControl:<CommaLoopControl> teos:T_EOS  :production798
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <LabelDoStmt> ::= LblDef:<LblDef> tdo:T_DO CommaLoopControl:<CommaLoopControl> teos:T_EOS  :production798
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTCommaLoopControlNode v3 = (ASTCommaLoopControlNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTLabelDoStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.LabelDoStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tdo"))
                    return 1;
                else
                    if (name.equals("CommaLoopControl"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <LabelDoStmt> ::= LblDef:<LblDef> tdo:T_DO CommaLoopControl:<CommaLoopControl> teos:T_EOS  :production798
         */
        protected ASTLabelDoStmtNode userAction(ASTLblDefNode v1, Token v2, ASTCommaLoopControlNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production798Production PRODUCTION798 = Production798Production.getInstance();

    public static class Production799Production extends Production
    {
        private Production799Production() {;} // Singleton
        private static Production799Production singletonInstance = null;
        public static final Production799Production getInstance() { if (singletonInstance == null) singletonInstance = new Production799Production(); return singletonInstance; }

        public String getDescription() { return "<LabelDoStmt> ::= tdo:T_DO teos:T_EOS  :production799"; }

        /**
         * Reduce by <LabelDoStmt> ::= tdo:T_DO teos:T_EOS  :production799
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <LabelDoStmt> ::= tdo:T_DO teos:T_EOS  :production799
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTLabelDoStmtNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.LabelDoStmtNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tdo"))
                return 0;
            else
                if (name.equals("teos"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <LabelDoStmt> ::= tdo:T_DO teos:T_EOS  :production799
         */
        protected ASTLabelDoStmtNode userAction(Token v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production799Production PRODUCTION799 = Production799Production.getInstance();

    public static class Production800Production extends Production
    {
        private Production800Production() {;} // Singleton
        private static Production800Production singletonInstance = null;
        public static final Production800Production getInstance() { if (singletonInstance == null) singletonInstance = new Production800Production(); return singletonInstance; }

        public String getDescription() { return "<LabelDoStmt> ::= LblDef:<LblDef> tdo:T_DO teos:T_EOS  :production800"; }

        /**
         * Reduce by <LabelDoStmt> ::= LblDef:<LblDef> tdo:T_DO teos:T_EOS  :production800
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <LabelDoStmt> ::= LblDef:<LblDef> tdo:T_DO teos:T_EOS  :production800
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTLabelDoStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.LabelDoStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tdo"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <LabelDoStmt> ::= LblDef:<LblDef> tdo:T_DO teos:T_EOS  :production800
         */
        protected ASTLabelDoStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production800Production PRODUCTION800 = Production800Production.getInstance();

    public static class Production801Production extends Production
    {
        private Production801Production() {;} // Singleton
        private static Production801Production singletonInstance = null;
        public static final Production801Production getInstance() { if (singletonInstance == null) singletonInstance = new Production801Production(); return singletonInstance; }

        public String getDescription() { return "<LabelDoStmt> ::= Name:<Name> tcolon:T_COLON tdo:T_DO LblRef:<LblRef> CommaLoopControl:<CommaLoopControl> teos:T_EOS  :production801"; }

        /**
         * Reduce by <LabelDoStmt> ::= Name:<Name> tcolon:T_COLON tdo:T_DO LblRef:<LblRef> CommaLoopControl:<CommaLoopControl> teos:T_EOS  :production801
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <LabelDoStmt> ::= Name:<Name> tcolon:T_COLON tdo:T_DO LblRef:<LblRef> CommaLoopControl:<CommaLoopControl> teos:T_EOS  :production801
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTCommaLoopControlNode v5 = (ASTCommaLoopControlNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblRefNode v4 = (ASTLblRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTLabelDoStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.LabelDoStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tcolon"))
                    return 1;
                else
                    if (name.equals("tdo"))
                        return 2;
                    else
                        if (name.equals("LblRef"))
                            return 3;
                        else
                            if (name.equals("CommaLoopControl"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <LabelDoStmt> ::= Name:<Name> tcolon:T_COLON tdo:T_DO LblRef:<LblRef> CommaLoopControl:<CommaLoopControl> teos:T_EOS  :production801
         */
        protected ASTLabelDoStmtNode userAction(ASTNameNode v1, Token v2, Token v3, ASTLblRefNode v4, ASTCommaLoopControlNode v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production801Production PRODUCTION801 = Production801Production.getInstance();

    public static class Production802Production extends Production
    {
        private Production802Production() {;} // Singleton
        private static Production802Production singletonInstance = null;
        public static final Production802Production getInstance() { if (singletonInstance == null) singletonInstance = new Production802Production(); return singletonInstance; }

        public String getDescription() { return "<LabelDoStmt> ::= LblDef:<LblDef> Name:<Name> tcolon:T_COLON tdo:T_DO LblRef:<LblRef> CommaLoopControl:<CommaLoopControl> teos:T_EOS  :production802"; }

        /**
         * Reduce by <LabelDoStmt> ::= LblDef:<LblDef> Name:<Name> tcolon:T_COLON tdo:T_DO LblRef:<LblRef> CommaLoopControl:<CommaLoopControl> teos:T_EOS  :production802
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <LabelDoStmt> ::= LblDef:<LblDef> Name:<Name> tcolon:T_COLON tdo:T_DO LblRef:<LblRef> CommaLoopControl:<CommaLoopControl> teos:T_EOS  :production802
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTCommaLoopControlNode v6 = (ASTCommaLoopControlNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblRefNode v5 = (ASTLblRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v2 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTLabelDoStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7);

            // The production has 7 symbols on its RHS
            parser.reduce(Nonterminal.LabelDoStmtNonterminal.getInstance(), 7, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("Name"))
                    return 1;
                else
                    if (name.equals("tcolon"))
                        return 2;
                    else
                        if (name.equals("tdo"))
                            return 3;
                        else
                            if (name.equals("LblRef"))
                                return 4;
                            else
                                if (name.equals("CommaLoopControl"))
                                    return 5;
                                else
                                    if (name.equals("teos"))
                                        return 6;
                                    else
                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <LabelDoStmt> ::= LblDef:<LblDef> Name:<Name> tcolon:T_COLON tdo:T_DO LblRef:<LblRef> CommaLoopControl:<CommaLoopControl> teos:T_EOS  :production802
         */
        protected ASTLabelDoStmtNode userAction(ASTLblDefNode v1, ASTNameNode v2, Token v3, Token v4, ASTLblRefNode v5, ASTCommaLoopControlNode v6, Token v7)
        {
            return null;
        }
    }
    public static final Productions.Production802Production PRODUCTION802 = Production802Production.getInstance();

    public static class Production803Production extends Production
    {
        private Production803Production() {;} // Singleton
        private static Production803Production singletonInstance = null;
        public static final Production803Production getInstance() { if (singletonInstance == null) singletonInstance = new Production803Production(); return singletonInstance; }

        public String getDescription() { return "<LabelDoStmt> ::= Name:<Name> tcolon:T_COLON tdo:T_DO LblRef:<LblRef> teos:T_EOS  :production803"; }

        /**
         * Reduce by <LabelDoStmt> ::= Name:<Name> tcolon:T_COLON tdo:T_DO LblRef:<LblRef> teos:T_EOS  :production803
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <LabelDoStmt> ::= Name:<Name> tcolon:T_COLON tdo:T_DO LblRef:<LblRef> teos:T_EOS  :production803
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblRefNode v4 = (ASTLblRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTLabelDoStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.LabelDoStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tcolon"))
                    return 1;
                else
                    if (name.equals("tdo"))
                        return 2;
                    else
                        if (name.equals("LblRef"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <LabelDoStmt> ::= Name:<Name> tcolon:T_COLON tdo:T_DO LblRef:<LblRef> teos:T_EOS  :production803
         */
        protected ASTLabelDoStmtNode userAction(ASTNameNode v1, Token v2, Token v3, ASTLblRefNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production803Production PRODUCTION803 = Production803Production.getInstance();

    public static class Production804Production extends Production
    {
        private Production804Production() {;} // Singleton
        private static Production804Production singletonInstance = null;
        public static final Production804Production getInstance() { if (singletonInstance == null) singletonInstance = new Production804Production(); return singletonInstance; }

        public String getDescription() { return "<LabelDoStmt> ::= LblDef:<LblDef> Name:<Name> tcolon:T_COLON tdo:T_DO LblRef:<LblRef> teos:T_EOS  :production804"; }

        /**
         * Reduce by <LabelDoStmt> ::= LblDef:<LblDef> Name:<Name> tcolon:T_COLON tdo:T_DO LblRef:<LblRef> teos:T_EOS  :production804
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <LabelDoStmt> ::= LblDef:<LblDef> Name:<Name> tcolon:T_COLON tdo:T_DO LblRef:<LblRef> teos:T_EOS  :production804
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblRefNode v5 = (ASTLblRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v2 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTLabelDoStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.LabelDoStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("Name"))
                    return 1;
                else
                    if (name.equals("tcolon"))
                        return 2;
                    else
                        if (name.equals("tdo"))
                            return 3;
                        else
                            if (name.equals("LblRef"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <LabelDoStmt> ::= LblDef:<LblDef> Name:<Name> tcolon:T_COLON tdo:T_DO LblRef:<LblRef> teos:T_EOS  :production804
         */
        protected ASTLabelDoStmtNode userAction(ASTLblDefNode v1, ASTNameNode v2, Token v3, Token v4, ASTLblRefNode v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production804Production PRODUCTION804 = Production804Production.getInstance();

    public static class Production805Production extends Production
    {
        private Production805Production() {;} // Singleton
        private static Production805Production singletonInstance = null;
        public static final Production805Production getInstance() { if (singletonInstance == null) singletonInstance = new Production805Production(); return singletonInstance; }

        public String getDescription() { return "<LabelDoStmt> ::= Name:<Name> tcolon:T_COLON tdo:T_DO CommaLoopControl:<CommaLoopControl> teos:T_EOS  :production805"; }

        /**
         * Reduce by <LabelDoStmt> ::= Name:<Name> tcolon:T_COLON tdo:T_DO CommaLoopControl:<CommaLoopControl> teos:T_EOS  :production805
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <LabelDoStmt> ::= Name:<Name> tcolon:T_COLON tdo:T_DO CommaLoopControl:<CommaLoopControl> teos:T_EOS  :production805
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTCommaLoopControlNode v4 = (ASTCommaLoopControlNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTLabelDoStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.LabelDoStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tcolon"))
                    return 1;
                else
                    if (name.equals("tdo"))
                        return 2;
                    else
                        if (name.equals("CommaLoopControl"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <LabelDoStmt> ::= Name:<Name> tcolon:T_COLON tdo:T_DO CommaLoopControl:<CommaLoopControl> teos:T_EOS  :production805
         */
        protected ASTLabelDoStmtNode userAction(ASTNameNode v1, Token v2, Token v3, ASTCommaLoopControlNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production805Production PRODUCTION805 = Production805Production.getInstance();

    public static class Production806Production extends Production
    {
        private Production806Production() {;} // Singleton
        private static Production806Production singletonInstance = null;
        public static final Production806Production getInstance() { if (singletonInstance == null) singletonInstance = new Production806Production(); return singletonInstance; }

        public String getDescription() { return "<LabelDoStmt> ::= LblDef:<LblDef> Name:<Name> tcolon:T_COLON tdo:T_DO CommaLoopControl:<CommaLoopControl> teos:T_EOS  :production806"; }

        /**
         * Reduce by <LabelDoStmt> ::= LblDef:<LblDef> Name:<Name> tcolon:T_COLON tdo:T_DO CommaLoopControl:<CommaLoopControl> teos:T_EOS  :production806
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <LabelDoStmt> ::= LblDef:<LblDef> Name:<Name> tcolon:T_COLON tdo:T_DO CommaLoopControl:<CommaLoopControl> teos:T_EOS  :production806
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTCommaLoopControlNode v5 = (ASTCommaLoopControlNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v2 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTLabelDoStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.LabelDoStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("Name"))
                    return 1;
                else
                    if (name.equals("tcolon"))
                        return 2;
                    else
                        if (name.equals("tdo"))
                            return 3;
                        else
                            if (name.equals("CommaLoopControl"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <LabelDoStmt> ::= LblDef:<LblDef> Name:<Name> tcolon:T_COLON tdo:T_DO CommaLoopControl:<CommaLoopControl> teos:T_EOS  :production806
         */
        protected ASTLabelDoStmtNode userAction(ASTLblDefNode v1, ASTNameNode v2, Token v3, Token v4, ASTCommaLoopControlNode v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production806Production PRODUCTION806 = Production806Production.getInstance();

    public static class Production807Production extends Production
    {
        private Production807Production() {;} // Singleton
        private static Production807Production singletonInstance = null;
        public static final Production807Production getInstance() { if (singletonInstance == null) singletonInstance = new Production807Production(); return singletonInstance; }

        public String getDescription() { return "<LabelDoStmt> ::= Name:<Name> tcolon:T_COLON tdo:T_DO teos:T_EOS  :production807"; }

        /**
         * Reduce by <LabelDoStmt> ::= Name:<Name> tcolon:T_COLON tdo:T_DO teos:T_EOS  :production807
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <LabelDoStmt> ::= Name:<Name> tcolon:T_COLON tdo:T_DO teos:T_EOS  :production807
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTLabelDoStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.LabelDoStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tcolon"))
                    return 1;
                else
                    if (name.equals("tdo"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <LabelDoStmt> ::= Name:<Name> tcolon:T_COLON tdo:T_DO teos:T_EOS  :production807
         */
        protected ASTLabelDoStmtNode userAction(ASTNameNode v1, Token v2, Token v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production807Production PRODUCTION807 = Production807Production.getInstance();

    public static class Production808Production extends Production
    {
        private Production808Production() {;} // Singleton
        private static Production808Production singletonInstance = null;
        public static final Production808Production getInstance() { if (singletonInstance == null) singletonInstance = new Production808Production(); return singletonInstance; }

        public String getDescription() { return "<LabelDoStmt> ::= LblDef:<LblDef> Name:<Name> tcolon:T_COLON tdo:T_DO teos:T_EOS  :production808"; }

        /**
         * Reduce by <LabelDoStmt> ::= LblDef:<LblDef> Name:<Name> tcolon:T_COLON tdo:T_DO teos:T_EOS  :production808
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <LabelDoStmt> ::= LblDef:<LblDef> Name:<Name> tcolon:T_COLON tdo:T_DO teos:T_EOS  :production808
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v2 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTLabelDoStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.LabelDoStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("Name"))
                    return 1;
                else
                    if (name.equals("tcolon"))
                        return 2;
                    else
                        if (name.equals("tdo"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <LabelDoStmt> ::= LblDef:<LblDef> Name:<Name> tcolon:T_COLON tdo:T_DO teos:T_EOS  :production808
         */
        protected ASTLabelDoStmtNode userAction(ASTLblDefNode v1, ASTNameNode v2, Token v3, Token v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production808Production PRODUCTION808 = Production808Production.getInstance();

    public static class Production809Production extends Production
    {
        private Production809Production() {;} // Singleton
        private static Production809Production singletonInstance = null;
        public static final Production809Production getInstance() { if (singletonInstance == null) singletonInstance = new Production809Production(); return singletonInstance; }

        public String getDescription() { return "<CommaLoopControl> ::= tcomma:T_COMMA LoopControl:<LoopControl>  :production809"; }

        /**
         * Reduce by <CommaLoopControl> ::= tcomma:T_COMMA LoopControl:<LoopControl>  :production809
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CommaLoopControl> ::= tcomma:T_COMMA LoopControl:<LoopControl>  :production809
            ASTLoopControlNode v2 = (ASTLoopControlNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCommaLoopControlNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.CommaLoopControlNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tcomma"))
                return 0;
            else
                if (name.equals("LoopControl"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CommaLoopControl> ::= tcomma:T_COMMA LoopControl:<LoopControl>  :production809
         */
        protected ASTCommaLoopControlNode userAction(Token v1, ASTLoopControlNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production809Production PRODUCTION809 = Production809Production.getInstance();

    public static class Production810Production extends Production
    {
        private Production810Production() {;} // Singleton
        private static Production810Production singletonInstance = null;
        public static final Production810Production getInstance() { if (singletonInstance == null) singletonInstance = new Production810Production(); return singletonInstance; }

        public String getDescription() { return "<CommaLoopControl> ::= LoopControl:<LoopControl>  :production810"; }

        /**
         * Reduce by <CommaLoopControl> ::= LoopControl:<LoopControl>  :production810
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CommaLoopControl> ::= LoopControl:<LoopControl>  :production810
            ASTLoopControlNode v1 = (ASTLoopControlNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCommaLoopControlNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.CommaLoopControlNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LoopControl"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CommaLoopControl> ::= LoopControl:<LoopControl>  :production810
         */
        protected ASTCommaLoopControlNode userAction(ASTLoopControlNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production810Production PRODUCTION810 = Production810Production.getInstance();

    public static class Production811Production extends Production
    {
        private Production811Production() {;} // Singleton
        private static Production811Production singletonInstance = null;
        public static final Production811Production getInstance() { if (singletonInstance == null) singletonInstance = new Production811Production(); return singletonInstance; }

        public String getDescription() { return "<LoopControl> ::= VariableName:<VariableName> tequals:T_EQUALS Expr:<Expr> tcomma:T_COMMA Expr2:<Expr>  :production811"; }

        /**
         * Reduce by <LoopControl> ::= VariableName:<VariableName> tequals:T_EQUALS Expr:<Expr> tcomma:T_COMMA Expr2:<Expr>  :production811
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <LoopControl> ::= VariableName:<VariableName> tequals:T_EQUALS Expr:<Expr> tcomma:T_COMMA Expr2:<Expr>  :production811
            ASTExprNode v5 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v3 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTVariableNameNode v1 = (ASTVariableNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTLoopControlNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.LoopControlNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("VariableName"))
                return 0;
            else
                if (name.equals("tequals"))
                    return 1;
                else
                    if (name.equals("Expr"))
                        return 2;
                    else
                        if (name.equals("tcomma"))
                            return 3;
                        else
                            if (name.equals("Expr2"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <LoopControl> ::= VariableName:<VariableName> tequals:T_EQUALS Expr:<Expr> tcomma:T_COMMA Expr2:<Expr>  :production811
         */
        protected ASTLoopControlNode userAction(ASTVariableNameNode v1, Token v2, ASTExprNode v3, Token v4, ASTExprNode v5)
        {
            return null;
        }
    }
    public static final Productions.Production811Production PRODUCTION811 = Production811Production.getInstance();

    public static class Production812Production extends Production
    {
        private Production812Production() {;} // Singleton
        private static Production812Production singletonInstance = null;
        public static final Production812Production getInstance() { if (singletonInstance == null) singletonInstance = new Production812Production(); return singletonInstance; }

        public String getDescription() { return "<LoopControl> ::= VariableName:<VariableName> tequals:T_EQUALS Expr:<Expr> tcomma:T_COMMA Expr2:<Expr> tcomma2:T_COMMA Expr3:<Expr>  :production812"; }

        /**
         * Reduce by <LoopControl> ::= VariableName:<VariableName> tequals:T_EQUALS Expr:<Expr> tcomma:T_COMMA Expr2:<Expr> tcomma2:T_COMMA Expr3:<Expr>  :production812
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <LoopControl> ::= VariableName:<VariableName> tequals:T_EQUALS Expr:<Expr> tcomma:T_COMMA Expr2:<Expr> tcomma2:T_COMMA Expr3:<Expr>  :production812
            ASTExprNode v7 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v5 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v3 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTVariableNameNode v1 = (ASTVariableNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTLoopControlNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7);

            // The production has 7 symbols on its RHS
            parser.reduce(Nonterminal.LoopControlNonterminal.getInstance(), 7, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("VariableName"))
                return 0;
            else
                if (name.equals("tequals"))
                    return 1;
                else
                    if (name.equals("Expr"))
                        return 2;
                    else
                        if (name.equals("tcomma"))
                            return 3;
                        else
                            if (name.equals("Expr2"))
                                return 4;
                            else
                                if (name.equals("tcomma2"))
                                    return 5;
                                else
                                    if (name.equals("Expr3"))
                                        return 6;
                                    else
                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <LoopControl> ::= VariableName:<VariableName> tequals:T_EQUALS Expr:<Expr> tcomma:T_COMMA Expr2:<Expr> tcomma2:T_COMMA Expr3:<Expr>  :production812
         */
        protected ASTLoopControlNode userAction(ASTVariableNameNode v1, Token v2, ASTExprNode v3, Token v4, ASTExprNode v5, Token v6, ASTExprNode v7)
        {
            return null;
        }
    }
    public static final Productions.Production812Production PRODUCTION812 = Production812Production.getInstance();

    public static class Production813Production extends Production
    {
        private Production813Production() {;} // Singleton
        private static Production813Production singletonInstance = null;
        public static final Production813Production getInstance() { if (singletonInstance == null) singletonInstance = new Production813Production(); return singletonInstance; }

        public String getDescription() { return "<LoopControl> ::= twhile:T_WHILE tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN  :production813"; }

        /**
         * Reduce by <LoopControl> ::= twhile:T_WHILE tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN  :production813
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <LoopControl> ::= twhile:T_WHILE tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN  :production813
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v3 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTLoopControlNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.LoopControlNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("twhile"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("Expr"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <LoopControl> ::= twhile:T_WHILE tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN  :production813
         */
        protected ASTLoopControlNode userAction(Token v1, Token v2, ASTExprNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production813Production PRODUCTION813 = Production813Production.getInstance();

    public static class Production814Production extends Production
    {
        private Production814Production() {;} // Singleton
        private static Production814Production singletonInstance = null;
        public static final Production814Production getInstance() { if (singletonInstance == null) singletonInstance = new Production814Production(); return singletonInstance; }

        public String getDescription() { return "<EndDoStmt> ::= tenddo:T_ENDDO teos:T_EOS  :production814"; }

        /**
         * Reduce by <EndDoStmt> ::= tenddo:T_ENDDO teos:T_EOS  :production814
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndDoStmt> ::= tenddo:T_ENDDO teos:T_EOS  :production814
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndDoStmtNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.EndDoStmtNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tenddo"))
                return 0;
            else
                if (name.equals("teos"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndDoStmt> ::= tenddo:T_ENDDO teos:T_EOS  :production814
         */
        protected ASTEndDoStmtNode userAction(Token v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production814Production PRODUCTION814 = Production814Production.getInstance();

    public static class Production815Production extends Production
    {
        private Production815Production() {;} // Singleton
        private static Production815Production singletonInstance = null;
        public static final Production815Production getInstance() { if (singletonInstance == null) singletonInstance = new Production815Production(); return singletonInstance; }

        public String getDescription() { return "<EndDoStmt> ::= tenddo:T_ENDDO <EndDoStmt@63> teos:T_EOS  :production815"; }

        /**
         * Reduce by <EndDoStmt> ::= tenddo:T_ENDDO <EndDoStmt@63> teos:T_EOS  :production815
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndDoStmt> ::= tenddo:T_ENDDO <EndDoStmt@63> teos:T_EOS  :production815
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v2 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndDoStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EndDoStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tenddo"))
                return 0;
            else
                if (name.equals("EndName"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndDoStmt> ::= tenddo:T_ENDDO <EndDoStmt@63> teos:T_EOS  :production815
         */
        protected ASTEndDoStmtNode userAction(Token v1, ASTEndNameNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production815Production PRODUCTION815 = Production815Production.getInstance();

    public static class Production816Production extends Production
    {
        private Production816Production() {;} // Singleton
        private static Production816Production singletonInstance = null;
        public static final Production816Production getInstance() { if (singletonInstance == null) singletonInstance = new Production816Production(); return singletonInstance; }

        public String getDescription() { return "<EndDoStmt> ::= LblDef:<LblDef> tenddo:T_ENDDO teos:T_EOS  :production816"; }

        /**
         * Reduce by <EndDoStmt> ::= LblDef:<LblDef> tenddo:T_ENDDO teos:T_EOS  :production816
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndDoStmt> ::= LblDef:<LblDef> tenddo:T_ENDDO teos:T_EOS  :production816
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndDoStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EndDoStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tenddo"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndDoStmt> ::= LblDef:<LblDef> tenddo:T_ENDDO teos:T_EOS  :production816
         */
        protected ASTEndDoStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production816Production PRODUCTION816 = Production816Production.getInstance();

    public static class Production817Production extends Production
    {
        private Production817Production() {;} // Singleton
        private static Production817Production singletonInstance = null;
        public static final Production817Production getInstance() { if (singletonInstance == null) singletonInstance = new Production817Production(); return singletonInstance; }

        public String getDescription() { return "<EndDoStmt> ::= LblDef:<LblDef> tenddo:T_ENDDO <EndDoStmt@63> teos:T_EOS  :production817"; }

        /**
         * Reduce by <EndDoStmt> ::= LblDef:<LblDef> tenddo:T_ENDDO <EndDoStmt@63> teos:T_EOS  :production817
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndDoStmt> ::= LblDef:<LblDef> tenddo:T_ENDDO <EndDoStmt@63> teos:T_EOS  :production817
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v3 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndDoStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EndDoStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tenddo"))
                    return 1;
                else
                    if (name.equals("EndName"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndDoStmt> ::= LblDef:<LblDef> tenddo:T_ENDDO <EndDoStmt@63> teos:T_EOS  :production817
         */
        protected ASTEndDoStmtNode userAction(ASTLblDefNode v1, Token v2, ASTEndNameNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production817Production PRODUCTION817 = Production817Production.getInstance();

    public static class Production818Production extends Production
    {
        private Production818Production() {;} // Singleton
        private static Production818Production singletonInstance = null;
        public static final Production818Production getInstance() { if (singletonInstance == null) singletonInstance = new Production818Production(); return singletonInstance; }

        public String getDescription() { return "<EndDoStmt> ::= tend:T_END tdo:T_DO teos:T_EOS  :production818"; }

        /**
         * Reduce by <EndDoStmt> ::= tend:T_END tdo:T_DO teos:T_EOS  :production818
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndDoStmt> ::= tend:T_END tdo:T_DO teos:T_EOS  :production818
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndDoStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EndDoStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tend"))
                return 0;
            else
                if (name.equals("tdo"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndDoStmt> ::= tend:T_END tdo:T_DO teos:T_EOS  :production818
         */
        protected ASTEndDoStmtNode userAction(Token v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production818Production PRODUCTION818 = Production818Production.getInstance();

    public static class Production819Production extends Production
    {
        private Production819Production() {;} // Singleton
        private static Production819Production singletonInstance = null;
        public static final Production819Production getInstance() { if (singletonInstance == null) singletonInstance = new Production819Production(); return singletonInstance; }

        public String getDescription() { return "<EndDoStmt> ::= tend:T_END tdo:T_DO <EndDoStmt@64> teos:T_EOS  :production819"; }

        /**
         * Reduce by <EndDoStmt> ::= tend:T_END tdo:T_DO <EndDoStmt@64> teos:T_EOS  :production819
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndDoStmt> ::= tend:T_END tdo:T_DO <EndDoStmt@64> teos:T_EOS  :production819
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v3 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndDoStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EndDoStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tend"))
                return 0;
            else
                if (name.equals("tdo"))
                    return 1;
                else
                    if (name.equals("EndName"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndDoStmt> ::= tend:T_END tdo:T_DO <EndDoStmt@64> teos:T_EOS  :production819
         */
        protected ASTEndDoStmtNode userAction(Token v1, Token v2, ASTEndNameNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production819Production PRODUCTION819 = Production819Production.getInstance();

    public static class Production820Production extends Production
    {
        private Production820Production() {;} // Singleton
        private static Production820Production singletonInstance = null;
        public static final Production820Production getInstance() { if (singletonInstance == null) singletonInstance = new Production820Production(); return singletonInstance; }

        public String getDescription() { return "<EndDoStmt> ::= LblDef:<LblDef> tend:T_END tdo:T_DO teos:T_EOS  :production820"; }

        /**
         * Reduce by <EndDoStmt> ::= LblDef:<LblDef> tend:T_END tdo:T_DO teos:T_EOS  :production820
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndDoStmt> ::= LblDef:<LblDef> tend:T_END tdo:T_DO teos:T_EOS  :production820
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndDoStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EndDoStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tend"))
                    return 1;
                else
                    if (name.equals("tdo"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndDoStmt> ::= LblDef:<LblDef> tend:T_END tdo:T_DO teos:T_EOS  :production820
         */
        protected ASTEndDoStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production820Production PRODUCTION820 = Production820Production.getInstance();

    public static class Production821Production extends Production
    {
        private Production821Production() {;} // Singleton
        private static Production821Production singletonInstance = null;
        public static final Production821Production getInstance() { if (singletonInstance == null) singletonInstance = new Production821Production(); return singletonInstance; }

        public String getDescription() { return "<EndDoStmt> ::= LblDef:<LblDef> tend:T_END tdo:T_DO <EndDoStmt@64> teos:T_EOS  :production821"; }

        /**
         * Reduce by <EndDoStmt> ::= LblDef:<LblDef> tend:T_END tdo:T_DO <EndDoStmt@64> teos:T_EOS  :production821
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndDoStmt> ::= LblDef:<LblDef> tend:T_END tdo:T_DO <EndDoStmt@64> teos:T_EOS  :production821
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v4 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndDoStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.EndDoStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tend"))
                    return 1;
                else
                    if (name.equals("tdo"))
                        return 2;
                    else
                        if (name.equals("EndName"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndDoStmt> ::= LblDef:<LblDef> tend:T_END tdo:T_DO <EndDoStmt@64> teos:T_EOS  :production821
         */
        protected ASTEndDoStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, ASTEndNameNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production821Production PRODUCTION821 = Production821Production.getInstance();

    public static class Production822Production extends Production
    {
        private Production822Production() {;} // Singleton
        private static Production822Production singletonInstance = null;
        public static final Production822Production getInstance() { if (singletonInstance == null) singletonInstance = new Production822Production(); return singletonInstance; }

        public String getDescription() { return "<CycleStmt> ::= tcycle:T_CYCLE teos:T_EOS  :production822"; }

        /**
         * Reduce by <CycleStmt> ::= tcycle:T_CYCLE teos:T_EOS  :production822
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CycleStmt> ::= tcycle:T_CYCLE teos:T_EOS  :production822
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCycleStmtNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.CycleStmtNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tcycle"))
                return 0;
            else
                if (name.equals("teos"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CycleStmt> ::= tcycle:T_CYCLE teos:T_EOS  :production822
         */
        protected ASTCycleStmtNode userAction(Token v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production822Production PRODUCTION822 = Production822Production.getInstance();

    public static class Production823Production extends Production
    {
        private Production823Production() {;} // Singleton
        private static Production823Production singletonInstance = null;
        public static final Production823Production getInstance() { if (singletonInstance == null) singletonInstance = new Production823Production(); return singletonInstance; }

        public String getDescription() { return "<CycleStmt> ::= tcycle:T_CYCLE <CycleStmt@65> teos:T_EOS  :production823"; }

        /**
         * Reduce by <CycleStmt> ::= tcycle:T_CYCLE <CycleStmt@65> teos:T_EOS  :production823
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CycleStmt> ::= tcycle:T_CYCLE <CycleStmt@65> teos:T_EOS  :production823
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v2 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCycleStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.CycleStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tcycle"))
                return 0;
            else
                if (name.equals("Name"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CycleStmt> ::= tcycle:T_CYCLE <CycleStmt@65> teos:T_EOS  :production823
         */
        protected ASTCycleStmtNode userAction(Token v1, ASTNameNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production823Production PRODUCTION823 = Production823Production.getInstance();

    public static class Production824Production extends Production
    {
        private Production824Production() {;} // Singleton
        private static Production824Production singletonInstance = null;
        public static final Production824Production getInstance() { if (singletonInstance == null) singletonInstance = new Production824Production(); return singletonInstance; }

        public String getDescription() { return "<CycleStmt> ::= LblDef:<LblDef> tcycle:T_CYCLE teos:T_EOS  :production824"; }

        /**
         * Reduce by <CycleStmt> ::= LblDef:<LblDef> tcycle:T_CYCLE teos:T_EOS  :production824
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CycleStmt> ::= LblDef:<LblDef> tcycle:T_CYCLE teos:T_EOS  :production824
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCycleStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.CycleStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tcycle"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CycleStmt> ::= LblDef:<LblDef> tcycle:T_CYCLE teos:T_EOS  :production824
         */
        protected ASTCycleStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production824Production PRODUCTION824 = Production824Production.getInstance();

    public static class Production825Production extends Production
    {
        private Production825Production() {;} // Singleton
        private static Production825Production singletonInstance = null;
        public static final Production825Production getInstance() { if (singletonInstance == null) singletonInstance = new Production825Production(); return singletonInstance; }

        public String getDescription() { return "<CycleStmt> ::= LblDef:<LblDef> tcycle:T_CYCLE <CycleStmt@65> teos:T_EOS  :production825"; }

        /**
         * Reduce by <CycleStmt> ::= LblDef:<LblDef> tcycle:T_CYCLE <CycleStmt@65> teos:T_EOS  :production825
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CycleStmt> ::= LblDef:<LblDef> tcycle:T_CYCLE <CycleStmt@65> teos:T_EOS  :production825
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v3 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCycleStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.CycleStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tcycle"))
                    return 1;
                else
                    if (name.equals("Name"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CycleStmt> ::= LblDef:<LblDef> tcycle:T_CYCLE <CycleStmt@65> teos:T_EOS  :production825
         */
        protected ASTCycleStmtNode userAction(ASTLblDefNode v1, Token v2, ASTNameNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production825Production PRODUCTION825 = Production825Production.getInstance();

    public static class Production826Production extends Production
    {
        private Production826Production() {;} // Singleton
        private static Production826Production singletonInstance = null;
        public static final Production826Production getInstance() { if (singletonInstance == null) singletonInstance = new Production826Production(); return singletonInstance; }

        public String getDescription() { return "<ExitStmt> ::= texit:T_EXIT teos:T_EOS  :production826"; }

        /**
         * Reduce by <ExitStmt> ::= texit:T_EXIT teos:T_EOS  :production826
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ExitStmt> ::= texit:T_EXIT teos:T_EOS  :production826
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTExitStmtNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.ExitStmtNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("texit"))
                return 0;
            else
                if (name.equals("teos"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ExitStmt> ::= texit:T_EXIT teos:T_EOS  :production826
         */
        protected ASTExitStmtNode userAction(Token v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production826Production PRODUCTION826 = Production826Production.getInstance();

    public static class Production827Production extends Production
    {
        private Production827Production() {;} // Singleton
        private static Production827Production singletonInstance = null;
        public static final Production827Production getInstance() { if (singletonInstance == null) singletonInstance = new Production827Production(); return singletonInstance; }

        public String getDescription() { return "<ExitStmt> ::= texit:T_EXIT <ExitStmt@66> teos:T_EOS  :production827"; }

        /**
         * Reduce by <ExitStmt> ::= texit:T_EXIT <ExitStmt@66> teos:T_EOS  :production827
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ExitStmt> ::= texit:T_EXIT <ExitStmt@66> teos:T_EOS  :production827
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v2 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTExitStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.ExitStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("texit"))
                return 0;
            else
                if (name.equals("Name"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ExitStmt> ::= texit:T_EXIT <ExitStmt@66> teos:T_EOS  :production827
         */
        protected ASTExitStmtNode userAction(Token v1, ASTNameNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production827Production PRODUCTION827 = Production827Production.getInstance();

    public static class Production828Production extends Production
    {
        private Production828Production() {;} // Singleton
        private static Production828Production singletonInstance = null;
        public static final Production828Production getInstance() { if (singletonInstance == null) singletonInstance = new Production828Production(); return singletonInstance; }

        public String getDescription() { return "<ExitStmt> ::= LblDef:<LblDef> texit:T_EXIT teos:T_EOS  :production828"; }

        /**
         * Reduce by <ExitStmt> ::= LblDef:<LblDef> texit:T_EXIT teos:T_EOS  :production828
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ExitStmt> ::= LblDef:<LblDef> texit:T_EXIT teos:T_EOS  :production828
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTExitStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.ExitStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("texit"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ExitStmt> ::= LblDef:<LblDef> texit:T_EXIT teos:T_EOS  :production828
         */
        protected ASTExitStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production828Production PRODUCTION828 = Production828Production.getInstance();

    public static class Production829Production extends Production
    {
        private Production829Production() {;} // Singleton
        private static Production829Production singletonInstance = null;
        public static final Production829Production getInstance() { if (singletonInstance == null) singletonInstance = new Production829Production(); return singletonInstance; }

        public String getDescription() { return "<ExitStmt> ::= LblDef:<LblDef> texit:T_EXIT <ExitStmt@66> teos:T_EOS  :production829"; }

        /**
         * Reduce by <ExitStmt> ::= LblDef:<LblDef> texit:T_EXIT <ExitStmt@66> teos:T_EOS  :production829
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ExitStmt> ::= LblDef:<LblDef> texit:T_EXIT <ExitStmt@66> teos:T_EOS  :production829
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v3 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTExitStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.ExitStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("texit"))
                    return 1;
                else
                    if (name.equals("Name"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ExitStmt> ::= LblDef:<LblDef> texit:T_EXIT <ExitStmt@66> teos:T_EOS  :production829
         */
        protected ASTExitStmtNode userAction(ASTLblDefNode v1, Token v2, ASTNameNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production829Production PRODUCTION829 = Production829Production.getInstance();

    public static class Production830Production extends Production
    {
        private Production830Production() {;} // Singleton
        private static Production830Production singletonInstance = null;
        public static final Production830Production getInstance() { if (singletonInstance == null) singletonInstance = new Production830Production(); return singletonInstance; }

        public String getDescription() { return "<GotoStmt> ::= GoToKw:<GoToKw> LblRef:<LblRef> teos:T_EOS  :production830"; }

        /**
         * Reduce by <GotoStmt> ::= GoToKw:<GoToKw> LblRef:<LblRef> teos:T_EOS  :production830
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <GotoStmt> ::= GoToKw:<GoToKw> LblRef:<LblRef> teos:T_EOS  :production830
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblRefNode v2 = (ASTLblRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTGoToKwNode v1 = (ASTGoToKwNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTGotoStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.GotoStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("GoToKw"))
                return 0;
            else
                if (name.equals("LblRef"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <GotoStmt> ::= GoToKw:<GoToKw> LblRef:<LblRef> teos:T_EOS  :production830
         */
        protected ASTGotoStmtNode userAction(ASTGoToKwNode v1, ASTLblRefNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production830Production PRODUCTION830 = Production830Production.getInstance();

    public static class Production831Production extends Production
    {
        private Production831Production() {;} // Singleton
        private static Production831Production singletonInstance = null;
        public static final Production831Production getInstance() { if (singletonInstance == null) singletonInstance = new Production831Production(); return singletonInstance; }

        public String getDescription() { return "<GotoStmt> ::= LblDef:<LblDef> GoToKw:<GoToKw> LblRef:<LblRef> teos:T_EOS  :production831"; }

        /**
         * Reduce by <GotoStmt> ::= LblDef:<LblDef> GoToKw:<GoToKw> LblRef:<LblRef> teos:T_EOS  :production831
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <GotoStmt> ::= LblDef:<LblDef> GoToKw:<GoToKw> LblRef:<LblRef> teos:T_EOS  :production831
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblRefNode v3 = (ASTLblRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTGoToKwNode v2 = (ASTGoToKwNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTGotoStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.GotoStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("GoToKw"))
                    return 1;
                else
                    if (name.equals("LblRef"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <GotoStmt> ::= LblDef:<LblDef> GoToKw:<GoToKw> LblRef:<LblRef> teos:T_EOS  :production831
         */
        protected ASTGotoStmtNode userAction(ASTLblDefNode v1, ASTGoToKwNode v2, ASTLblRefNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production831Production PRODUCTION831 = Production831Production.getInstance();

    public static class Production832Production extends Production
    {
        private Production832Production() {;} // Singleton
        private static Production832Production singletonInstance = null;
        public static final Production832Production getInstance() { if (singletonInstance == null) singletonInstance = new Production832Production(); return singletonInstance; }

        public String getDescription() { return "<GoToKw> ::= tgoto:T_GOTO  :production832"; }

        /**
         * Reduce by <GoToKw> ::= tgoto:T_GOTO  :production832
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <GoToKw> ::= tgoto:T_GOTO  :production832
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTGoToKwNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.GoToKwNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tgoto"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <GoToKw> ::= tgoto:T_GOTO  :production832
         */
        protected ASTGoToKwNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production832Production PRODUCTION832 = Production832Production.getInstance();

    public static class Production833Production extends Production
    {
        private Production833Production() {;} // Singleton
        private static Production833Production singletonInstance = null;
        public static final Production833Production getInstance() { if (singletonInstance == null) singletonInstance = new Production833Production(); return singletonInstance; }

        public String getDescription() { return "<GoToKw> ::= tgo:T_GO tto:T_TO  :production833"; }

        /**
         * Reduce by <GoToKw> ::= tgo:T_GO tto:T_TO  :production833
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <GoToKw> ::= tgo:T_GO tto:T_TO  :production833
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTGoToKwNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.GoToKwNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tgo"))
                return 0;
            else
                if (name.equals("tto"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <GoToKw> ::= tgo:T_GO tto:T_TO  :production833
         */
        protected ASTGoToKwNode userAction(Token v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production833Production PRODUCTION833 = Production833Production.getInstance();

    public static class Production834Production extends Production
    {
        private Production834Production() {;} // Singleton
        private static Production834Production singletonInstance = null;
        public static final Production834Production getInstance() { if (singletonInstance == null) singletonInstance = new Production834Production(); return singletonInstance; }

        public String getDescription() { return "<ComputedGotoStmt> ::= GoToKw:<GoToKw> tlparen:T_LPAREN LblRefList:<LblRefList> trparen:T_RPAREN Expr:<Expr> teos:T_EOS  :production834"; }

        /**
         * Reduce by <ComputedGotoStmt> ::= GoToKw:<GoToKw> tlparen:T_LPAREN LblRefList:<LblRefList> trparen:T_RPAREN Expr:<Expr> teos:T_EOS  :production834
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ComputedGotoStmt> ::= GoToKw:<GoToKw> tlparen:T_LPAREN LblRefList:<LblRefList> trparen:T_RPAREN Expr:<Expr> teos:T_EOS  :production834
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v5 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblRefListNode v3 = (ASTLblRefListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTGoToKwNode v1 = (ASTGoToKwNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTComputedGotoStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.ComputedGotoStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("GoToKw"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("LblRefList"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("Expr"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ComputedGotoStmt> ::= GoToKw:<GoToKw> tlparen:T_LPAREN LblRefList:<LblRefList> trparen:T_RPAREN Expr:<Expr> teos:T_EOS  :production834
         */
        protected ASTComputedGotoStmtNode userAction(ASTGoToKwNode v1, Token v2, ASTLblRefListNode v3, Token v4, ASTExprNode v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production834Production PRODUCTION834 = Production834Production.getInstance();

    public static class Production835Production extends Production
    {
        private Production835Production() {;} // Singleton
        private static Production835Production singletonInstance = null;
        public static final Production835Production getInstance() { if (singletonInstance == null) singletonInstance = new Production835Production(); return singletonInstance; }

        public String getDescription() { return "<ComputedGotoStmt> ::= LblDef:<LblDef> GoToKw:<GoToKw> tlparen:T_LPAREN LblRefList:<LblRefList> trparen:T_RPAREN Expr:<Expr> teos:T_EOS  :production835"; }

        /**
         * Reduce by <ComputedGotoStmt> ::= LblDef:<LblDef> GoToKw:<GoToKw> tlparen:T_LPAREN LblRefList:<LblRefList> trparen:T_RPAREN Expr:<Expr> teos:T_EOS  :production835
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ComputedGotoStmt> ::= LblDef:<LblDef> GoToKw:<GoToKw> tlparen:T_LPAREN LblRefList:<LblRefList> trparen:T_RPAREN Expr:<Expr> teos:T_EOS  :production835
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v6 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblRefListNode v4 = (ASTLblRefListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTGoToKwNode v2 = (ASTGoToKwNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTComputedGotoStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7);

            // The production has 7 symbols on its RHS
            parser.reduce(Nonterminal.ComputedGotoStmtNonterminal.getInstance(), 7, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("GoToKw"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("LblRefList"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("Expr"))
                                    return 5;
                                else
                                    if (name.equals("teos"))
                                        return 6;
                                    else
                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ComputedGotoStmt> ::= LblDef:<LblDef> GoToKw:<GoToKw> tlparen:T_LPAREN LblRefList:<LblRefList> trparen:T_RPAREN Expr:<Expr> teos:T_EOS  :production835
         */
        protected ASTComputedGotoStmtNode userAction(ASTLblDefNode v1, ASTGoToKwNode v2, Token v3, ASTLblRefListNode v4, Token v5, ASTExprNode v6, Token v7)
        {
            return null;
        }
    }
    public static final Productions.Production835Production PRODUCTION835 = Production835Production.getInstance();

    public static class Production836Production extends Production
    {
        private Production836Production() {;} // Singleton
        private static Production836Production singletonInstance = null;
        public static final Production836Production getInstance() { if (singletonInstance == null) singletonInstance = new Production836Production(); return singletonInstance; }

        public String getDescription() { return "<ComputedGotoStmt> ::= GoToKw:<GoToKw> tlparen:T_LPAREN LblRefList:<LblRefList> trparen:T_RPAREN CommaExp:<CommaExp> teos:T_EOS  :production836"; }

        /**
         * Reduce by <ComputedGotoStmt> ::= GoToKw:<GoToKw> tlparen:T_LPAREN LblRefList:<LblRefList> trparen:T_RPAREN CommaExp:<CommaExp> teos:T_EOS  :production836
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ComputedGotoStmt> ::= GoToKw:<GoToKw> tlparen:T_LPAREN LblRefList:<LblRefList> trparen:T_RPAREN CommaExp:<CommaExp> teos:T_EOS  :production836
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTCommaExpNode v5 = (ASTCommaExpNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblRefListNode v3 = (ASTLblRefListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTGoToKwNode v1 = (ASTGoToKwNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTComputedGotoStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.ComputedGotoStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("GoToKw"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("LblRefList"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("CommaExp"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ComputedGotoStmt> ::= GoToKw:<GoToKw> tlparen:T_LPAREN LblRefList:<LblRefList> trparen:T_RPAREN CommaExp:<CommaExp> teos:T_EOS  :production836
         */
        protected ASTComputedGotoStmtNode userAction(ASTGoToKwNode v1, Token v2, ASTLblRefListNode v3, Token v4, ASTCommaExpNode v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production836Production PRODUCTION836 = Production836Production.getInstance();

    public static class Production837Production extends Production
    {
        private Production837Production() {;} // Singleton
        private static Production837Production singletonInstance = null;
        public static final Production837Production getInstance() { if (singletonInstance == null) singletonInstance = new Production837Production(); return singletonInstance; }

        public String getDescription() { return "<ComputedGotoStmt> ::= LblDef:<LblDef> GoToKw:<GoToKw> tlparen:T_LPAREN LblRefList:<LblRefList> trparen:T_RPAREN CommaExp:<CommaExp> teos:T_EOS  :production837"; }

        /**
         * Reduce by <ComputedGotoStmt> ::= LblDef:<LblDef> GoToKw:<GoToKw> tlparen:T_LPAREN LblRefList:<LblRefList> trparen:T_RPAREN CommaExp:<CommaExp> teos:T_EOS  :production837
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ComputedGotoStmt> ::= LblDef:<LblDef> GoToKw:<GoToKw> tlparen:T_LPAREN LblRefList:<LblRefList> trparen:T_RPAREN CommaExp:<CommaExp> teos:T_EOS  :production837
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTCommaExpNode v6 = (ASTCommaExpNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblRefListNode v4 = (ASTLblRefListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTGoToKwNode v2 = (ASTGoToKwNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTComputedGotoStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7);

            // The production has 7 symbols on its RHS
            parser.reduce(Nonterminal.ComputedGotoStmtNonterminal.getInstance(), 7, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("GoToKw"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("LblRefList"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("CommaExp"))
                                    return 5;
                                else
                                    if (name.equals("teos"))
                                        return 6;
                                    else
                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ComputedGotoStmt> ::= LblDef:<LblDef> GoToKw:<GoToKw> tlparen:T_LPAREN LblRefList:<LblRefList> trparen:T_RPAREN CommaExp:<CommaExp> teos:T_EOS  :production837
         */
        protected ASTComputedGotoStmtNode userAction(ASTLblDefNode v1, ASTGoToKwNode v2, Token v3, ASTLblRefListNode v4, Token v5, ASTCommaExpNode v6, Token v7)
        {
            return null;
        }
    }
    public static final Productions.Production837Production PRODUCTION837 = Production837Production.getInstance();

    public static class Production838Production extends Production
    {
        private Production838Production() {;} // Singleton
        private static Production838Production singletonInstance = null;
        public static final Production838Production getInstance() { if (singletonInstance == null) singletonInstance = new Production838Production(); return singletonInstance; }

        public String getDescription() { return "<CommaExp> ::= tcomma:T_COMMA Expr:<Expr>  :production838"; }

        /**
         * Reduce by <CommaExp> ::= tcomma:T_COMMA Expr:<Expr>  :production838
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CommaExp> ::= tcomma:T_COMMA Expr:<Expr>  :production838
            ASTExprNode v2 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCommaExpNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.CommaExpNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tcomma"))
                return 0;
            else
                if (name.equals("Expr"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CommaExp> ::= tcomma:T_COMMA Expr:<Expr>  :production838
         */
        protected ASTCommaExpNode userAction(Token v1, ASTExprNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production838Production PRODUCTION838 = Production838Production.getInstance();

    public static class Production839Production extends Production
    {
        private Production839Production() {;} // Singleton
        private static Production839Production singletonInstance = null;
        public static final Production839Production getInstance() { if (singletonInstance == null) singletonInstance = new Production839Production(); return singletonInstance; }

        public String getDescription() { return "<LblRefList> ::= LblRef:<LblRef>  :production839"; }

        /**
         * Reduce by <LblRefList> ::= LblRef:<LblRef>  :production839
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <LblRefList> ::= LblRef:<LblRef>  :production839
            ASTLblRefNode v1 = (ASTLblRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTLblRefListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.LblRefListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblRef"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <LblRefList> ::= LblRef:<LblRef>  :production839
         */
        protected ASTLblRefListNode userAction(ASTLblRefNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production839Production PRODUCTION839 = Production839Production.getInstance();

    public static class Production840Production extends Production
    {
        private Production840Production() {;} // Singleton
        private static Production840Production singletonInstance = null;
        public static final Production840Production getInstance() { if (singletonInstance == null) singletonInstance = new Production840Production(); return singletonInstance; }

        public String getDescription() { return "<LblRefList> ::= @:<LblRefList> tcomma:T_COMMA LblRef:<LblRef>  :production840"; }

        /**
         * Reduce by <LblRefList> ::= @:<LblRefList> tcomma:T_COMMA LblRef:<LblRef>  :production840
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <LblRefList> ::= @:<LblRefList> tcomma:T_COMMA LblRef:<LblRef>  :production840
            ASTLblRefNode v3 = (ASTLblRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblRefListNode v1 = (ASTLblRefListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTLblRefListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.LblRefListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("LblRef"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <LblRefList> ::= @:<LblRefList> tcomma:T_COMMA LblRef:<LblRef>  :production840
         */
        protected ASTLblRefListNode userAction(ASTLblRefListNode v1, Token v2, ASTLblRefNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production840Production PRODUCTION840 = Production840Production.getInstance();

    public static class Production841Production extends Production
    {
        private Production841Production() {;} // Singleton
        private static Production841Production singletonInstance = null;
        public static final Production841Production getInstance() { if (singletonInstance == null) singletonInstance = new Production841Production(); return singletonInstance; }

        public String getDescription() { return "<LblRef> ::= Label:<Label>  :production841"; }

        /**
         * Reduce by <LblRef> ::= Label:<Label>  :production841
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <LblRef> ::= Label:<Label>  :production841
            ASTLabelNode v1 = (ASTLabelNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTLblRefNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.LblRefNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Label"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <LblRef> ::= Label:<Label>  :production841
         */
        protected ASTLblRefNode userAction(ASTLabelNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production841Production PRODUCTION841 = Production841Production.getInstance();

    public static class Production842Production extends Production
    {
        private Production842Production() {;} // Singleton
        private static Production842Production singletonInstance = null;
        public static final Production842Production getInstance() { if (singletonInstance == null) singletonInstance = new Production842Production(); return singletonInstance; }

        public String getDescription() { return "<ArithmeticIfStmt> ::= tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN LblRef:<LblRef> tcomma:T_COMMA LblRef2:<LblRef> tcomma2:T_COMMA LblRef3:<LblRef> teos:T_EOS  :production842"; }

        /**
         * Reduce by <ArithmeticIfStmt> ::= tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN LblRef:<LblRef> tcomma:T_COMMA LblRef2:<LblRef> tcomma2:T_COMMA LblRef3:<LblRef> teos:T_EOS  :production842
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ArithmeticIfStmt> ::= tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN LblRef:<LblRef> tcomma:T_COMMA LblRef2:<LblRef> tcomma2:T_COMMA LblRef3:<LblRef> teos:T_EOS  :production842
            Token v10 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblRefNode v9 = (ASTLblRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblRefNode v7 = (ASTLblRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblRefNode v5 = (ASTLblRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v3 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTArithmeticIfStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);

            // The production has 10 symbols on its RHS
            parser.reduce(Nonterminal.ArithmeticIfStmtNonterminal.getInstance(), 10, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tif"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("Expr"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("LblRef"))
                                return 4;
                            else
                                if (name.equals("tcomma"))
                                    return 5;
                                else
                                    if (name.equals("LblRef2"))
                                        return 6;
                                    else
                                        if (name.equals("tcomma2"))
                                            return 7;
                                        else
                                            if (name.equals("LblRef3"))
                                                return 8;
                                            else
                                                if (name.equals("teos"))
                                                    return 9;
                                                else
                                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ArithmeticIfStmt> ::= tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN LblRef:<LblRef> tcomma:T_COMMA LblRef2:<LblRef> tcomma2:T_COMMA LblRef3:<LblRef> teos:T_EOS  :production842
         */
        protected ASTArithmeticIfStmtNode userAction(Token v1, Token v2, ASTExprNode v3, Token v4, ASTLblRefNode v5, Token v6, ASTLblRefNode v7, Token v8, ASTLblRefNode v9, Token v10)
        {
            return null;
        }
    }
    public static final Productions.Production842Production PRODUCTION842 = Production842Production.getInstance();

    public static class Production843Production extends Production
    {
        private Production843Production() {;} // Singleton
        private static Production843Production singletonInstance = null;
        public static final Production843Production getInstance() { if (singletonInstance == null) singletonInstance = new Production843Production(); return singletonInstance; }

        public String getDescription() { return "<ArithmeticIfStmt> ::= LblDef:<LblDef> tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN LblRef:<LblRef> tcomma:T_COMMA LblRef2:<LblRef> tcomma2:T_COMMA LblRef3:<LblRef> teos:T_EOS  :production843"; }

        /**
         * Reduce by <ArithmeticIfStmt> ::= LblDef:<LblDef> tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN LblRef:<LblRef> tcomma:T_COMMA LblRef2:<LblRef> tcomma2:T_COMMA LblRef3:<LblRef> teos:T_EOS  :production843
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ArithmeticIfStmt> ::= LblDef:<LblDef> tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN LblRef:<LblRef> tcomma:T_COMMA LblRef2:<LblRef> tcomma2:T_COMMA LblRef3:<LblRef> teos:T_EOS  :production843
            Token v11 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblRefNode v10 = (ASTLblRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblRefNode v8 = (ASTLblRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblRefNode v6 = (ASTLblRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v4 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTArithmeticIfStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);

            // The production has 11 symbols on its RHS
            parser.reduce(Nonterminal.ArithmeticIfStmtNonterminal.getInstance(), 11, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tif"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("Expr"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("LblRef"))
                                    return 5;
                                else
                                    if (name.equals("tcomma"))
                                        return 6;
                                    else
                                        if (name.equals("LblRef2"))
                                            return 7;
                                        else
                                            if (name.equals("tcomma2"))
                                                return 8;
                                            else
                                                if (name.equals("LblRef3"))
                                                    return 9;
                                                else
                                                    if (name.equals("teos"))
                                                        return 10;
                                                    else
                                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ArithmeticIfStmt> ::= LblDef:<LblDef> tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN LblRef:<LblRef> tcomma:T_COMMA LblRef2:<LblRef> tcomma2:T_COMMA LblRef3:<LblRef> teos:T_EOS  :production843
         */
        protected ASTArithmeticIfStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, ASTExprNode v4, Token v5, ASTLblRefNode v6, Token v7, ASTLblRefNode v8, Token v9, ASTLblRefNode v10, Token v11)
        {
            return null;
        }
    }
    public static final Productions.Production843Production PRODUCTION843 = Production843Production.getInstance();

    public static class Production844Production extends Production
    {
        private Production844Production() {;} // Singleton
        private static Production844Production singletonInstance = null;
        public static final Production844Production getInstance() { if (singletonInstance == null) singletonInstance = new Production844Production(); return singletonInstance; }

        public String getDescription() { return "<ContinueStmt> ::= tcontinue:T_CONTINUE teos:T_EOS  :production844"; }

        /**
         * Reduce by <ContinueStmt> ::= tcontinue:T_CONTINUE teos:T_EOS  :production844
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ContinueStmt> ::= tcontinue:T_CONTINUE teos:T_EOS  :production844
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTContinueStmtNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.ContinueStmtNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tcontinue"))
                return 0;
            else
                if (name.equals("teos"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ContinueStmt> ::= tcontinue:T_CONTINUE teos:T_EOS  :production844
         */
        protected ASTContinueStmtNode userAction(Token v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production844Production PRODUCTION844 = Production844Production.getInstance();

    public static class Production845Production extends Production
    {
        private Production845Production() {;} // Singleton
        private static Production845Production singletonInstance = null;
        public static final Production845Production getInstance() { if (singletonInstance == null) singletonInstance = new Production845Production(); return singletonInstance; }

        public String getDescription() { return "<ContinueStmt> ::= LblDef:<LblDef> tcontinue:T_CONTINUE teos:T_EOS  :production845"; }

        /**
         * Reduce by <ContinueStmt> ::= LblDef:<LblDef> tcontinue:T_CONTINUE teos:T_EOS  :production845
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ContinueStmt> ::= LblDef:<LblDef> tcontinue:T_CONTINUE teos:T_EOS  :production845
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTContinueStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.ContinueStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tcontinue"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ContinueStmt> ::= LblDef:<LblDef> tcontinue:T_CONTINUE teos:T_EOS  :production845
         */
        protected ASTContinueStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production845Production PRODUCTION845 = Production845Production.getInstance();

    public static class Production846Production extends Production
    {
        private Production846Production() {;} // Singleton
        private static Production846Production singletonInstance = null;
        public static final Production846Production getInstance() { if (singletonInstance == null) singletonInstance = new Production846Production(); return singletonInstance; }

        public String getDescription() { return "<StopStmt> ::= tstop:T_STOP teos:T_EOS  :production846"; }

        /**
         * Reduce by <StopStmt> ::= tstop:T_STOP teos:T_EOS  :production846
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <StopStmt> ::= tstop:T_STOP teos:T_EOS  :production846
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTStopStmtNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.StopStmtNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tstop"))
                return 0;
            else
                if (name.equals("teos"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <StopStmt> ::= tstop:T_STOP teos:T_EOS  :production846
         */
        protected ASTStopStmtNode userAction(Token v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production846Production PRODUCTION846 = Production846Production.getInstance();

    public static class Production847Production extends Production
    {
        private Production847Production() {;} // Singleton
        private static Production847Production singletonInstance = null;
        public static final Production847Production getInstance() { if (singletonInstance == null) singletonInstance = new Production847Production(); return singletonInstance; }

        public String getDescription() { return "<StopStmt> ::= LblDef:<LblDef> tstop:T_STOP teos:T_EOS  :production847"; }

        /**
         * Reduce by <StopStmt> ::= LblDef:<LblDef> tstop:T_STOP teos:T_EOS  :production847
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <StopStmt> ::= LblDef:<LblDef> tstop:T_STOP teos:T_EOS  :production847
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTStopStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.StopStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tstop"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <StopStmt> ::= LblDef:<LblDef> tstop:T_STOP teos:T_EOS  :production847
         */
        protected ASTStopStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production847Production PRODUCTION847 = Production847Production.getInstance();

    public static class Production848Production extends Production
    {
        private Production848Production() {;} // Singleton
        private static Production848Production singletonInstance = null;
        public static final Production848Production getInstance() { if (singletonInstance == null) singletonInstance = new Production848Production(); return singletonInstance; }

        public String getDescription() { return "<StopStmt> ::= tstop:T_STOP ticon:T_ICON teos:T_EOS  :production848"; }

        /**
         * Reduce by <StopStmt> ::= tstop:T_STOP ticon:T_ICON teos:T_EOS  :production848
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <StopStmt> ::= tstop:T_STOP ticon:T_ICON teos:T_EOS  :production848
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTStopStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.StopStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tstop"))
                return 0;
            else
                if (name.equals("ticon"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <StopStmt> ::= tstop:T_STOP ticon:T_ICON teos:T_EOS  :production848
         */
        protected ASTStopStmtNode userAction(Token v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production848Production PRODUCTION848 = Production848Production.getInstance();

    public static class Production849Production extends Production
    {
        private Production849Production() {;} // Singleton
        private static Production849Production singletonInstance = null;
        public static final Production849Production getInstance() { if (singletonInstance == null) singletonInstance = new Production849Production(); return singletonInstance; }

        public String getDescription() { return "<StopStmt> ::= LblDef:<LblDef> tstop:T_STOP ticon:T_ICON teos:T_EOS  :production849"; }

        /**
         * Reduce by <StopStmt> ::= LblDef:<LblDef> tstop:T_STOP ticon:T_ICON teos:T_EOS  :production849
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <StopStmt> ::= LblDef:<LblDef> tstop:T_STOP ticon:T_ICON teos:T_EOS  :production849
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTStopStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.StopStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tstop"))
                    return 1;
                else
                    if (name.equals("ticon"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <StopStmt> ::= LblDef:<LblDef> tstop:T_STOP ticon:T_ICON teos:T_EOS  :production849
         */
        protected ASTStopStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production849Production PRODUCTION849 = Production849Production.getInstance();

    public static class Production850Production extends Production
    {
        private Production850Production() {;} // Singleton
        private static Production850Production singletonInstance = null;
        public static final Production850Production getInstance() { if (singletonInstance == null) singletonInstance = new Production850Production(); return singletonInstance; }

        public String getDescription() { return "<StopStmt> ::= tstop:T_STOP tscon:T_SCON teos:T_EOS  :production850"; }

        /**
         * Reduce by <StopStmt> ::= tstop:T_STOP tscon:T_SCON teos:T_EOS  :production850
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <StopStmt> ::= tstop:T_STOP tscon:T_SCON teos:T_EOS  :production850
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTStopStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.StopStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tstop"))
                return 0;
            else
                if (name.equals("tscon"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <StopStmt> ::= tstop:T_STOP tscon:T_SCON teos:T_EOS  :production850
         */
        protected ASTStopStmtNode userAction(Token v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production850Production PRODUCTION850 = Production850Production.getInstance();

    public static class Production851Production extends Production
    {
        private Production851Production() {;} // Singleton
        private static Production851Production singletonInstance = null;
        public static final Production851Production getInstance() { if (singletonInstance == null) singletonInstance = new Production851Production(); return singletonInstance; }

        public String getDescription() { return "<StopStmt> ::= LblDef:<LblDef> tstop:T_STOP tscon:T_SCON teos:T_EOS  :production851"; }

        /**
         * Reduce by <StopStmt> ::= LblDef:<LblDef> tstop:T_STOP tscon:T_SCON teos:T_EOS  :production851
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <StopStmt> ::= LblDef:<LblDef> tstop:T_STOP tscon:T_SCON teos:T_EOS  :production851
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTStopStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.StopStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tstop"))
                    return 1;
                else
                    if (name.equals("tscon"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <StopStmt> ::= LblDef:<LblDef> tstop:T_STOP tscon:T_SCON teos:T_EOS  :production851
         */
        protected ASTStopStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production851Production PRODUCTION851 = Production851Production.getInstance();

    public static class Production852Production extends Production
    {
        private Production852Production() {;} // Singleton
        private static Production852Production singletonInstance = null;
        public static final Production852Production getInstance() { if (singletonInstance == null) singletonInstance = new Production852Production(); return singletonInstance; }

        public String getDescription() { return "<UnitIdentifier> ::= UFExpr:<UFExpr>  :production852"; }

        /**
         * Reduce by <UnitIdentifier> ::= UFExpr:<UFExpr>  :production852
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UnitIdentifier> ::= UFExpr:<UFExpr>  :production852
            ASTUFExprNode v1 = (ASTUFExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTUnitIdentifierNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.UnitIdentifierNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("UFExpr"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <UnitIdentifier> ::= UFExpr:<UFExpr>  :production852
         */
        protected ASTUnitIdentifierNode userAction(ASTUFExprNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production852Production PRODUCTION852 = Production852Production.getInstance();

    public static class Production853Production extends Production
    {
        private Production853Production() {;} // Singleton
        private static Production853Production singletonInstance = null;
        public static final Production853Production getInstance() { if (singletonInstance == null) singletonInstance = new Production853Production(); return singletonInstance; }

        public String getDescription() { return "<UnitIdentifier> ::= tasterisk:T_ASTERISK  :production853"; }

        /**
         * Reduce by <UnitIdentifier> ::= tasterisk:T_ASTERISK  :production853
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UnitIdentifier> ::= tasterisk:T_ASTERISK  :production853
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTUnitIdentifierNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.UnitIdentifierNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tasterisk"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <UnitIdentifier> ::= tasterisk:T_ASTERISK  :production853
         */
        protected ASTUnitIdentifierNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production853Production PRODUCTION853 = Production853Production.getInstance();

    public static class Production854Production extends Production
    {
        private Production854Production() {;} // Singleton
        private static Production854Production singletonInstance = null;
        public static final Production854Production getInstance() { if (singletonInstance == null) singletonInstance = new Production854Production(); return singletonInstance; }

        public String getDescription() { return "<OpenStmt> ::= topen:T_OPEN tlparen:T_LPAREN ConnectSpecList:<ConnectSpecList> trparen:T_RPAREN teos:T_EOS  :production854"; }

        /**
         * Reduce by <OpenStmt> ::= topen:T_OPEN tlparen:T_LPAREN ConnectSpecList:<ConnectSpecList> trparen:T_RPAREN teos:T_EOS  :production854
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <OpenStmt> ::= topen:T_OPEN tlparen:T_LPAREN ConnectSpecList:<ConnectSpecList> trparen:T_RPAREN teos:T_EOS  :production854
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTConnectSpecListNode v3 = (ASTConnectSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTOpenStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.OpenStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("topen"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("ConnectSpecList"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <OpenStmt> ::= topen:T_OPEN tlparen:T_LPAREN ConnectSpecList:<ConnectSpecList> trparen:T_RPAREN teos:T_EOS  :production854
         */
        protected ASTOpenStmtNode userAction(Token v1, Token v2, ASTConnectSpecListNode v3, Token v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production854Production PRODUCTION854 = Production854Production.getInstance();

    public static class Production855Production extends Production
    {
        private Production855Production() {;} // Singleton
        private static Production855Production singletonInstance = null;
        public static final Production855Production getInstance() { if (singletonInstance == null) singletonInstance = new Production855Production(); return singletonInstance; }

        public String getDescription() { return "<OpenStmt> ::= LblDef:<LblDef> topen:T_OPEN tlparen:T_LPAREN ConnectSpecList:<ConnectSpecList> trparen:T_RPAREN teos:T_EOS  :production855"; }

        /**
         * Reduce by <OpenStmt> ::= LblDef:<LblDef> topen:T_OPEN tlparen:T_LPAREN ConnectSpecList:<ConnectSpecList> trparen:T_RPAREN teos:T_EOS  :production855
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <OpenStmt> ::= LblDef:<LblDef> topen:T_OPEN tlparen:T_LPAREN ConnectSpecList:<ConnectSpecList> trparen:T_RPAREN teos:T_EOS  :production855
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTConnectSpecListNode v4 = (ASTConnectSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTOpenStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.OpenStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("topen"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("ConnectSpecList"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <OpenStmt> ::= LblDef:<LblDef> topen:T_OPEN tlparen:T_LPAREN ConnectSpecList:<ConnectSpecList> trparen:T_RPAREN teos:T_EOS  :production855
         */
        protected ASTOpenStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, ASTConnectSpecListNode v4, Token v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production855Production PRODUCTION855 = Production855Production.getInstance();

    public static class Production856Production extends Production
    {
        private Production856Production() {;} // Singleton
        private static Production856Production singletonInstance = null;
        public static final Production856Production getInstance() { if (singletonInstance == null) singletonInstance = new Production856Production(); return singletonInstance; }

        public String getDescription() { return "<ConnectSpecList> ::= UnitIdentifier:<UnitIdentifier>  :production856"; }

        /**
         * Reduce by <ConnectSpecList> ::= UnitIdentifier:<UnitIdentifier>  :production856
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ConnectSpecList> ::= UnitIdentifier:<UnitIdentifier>  :production856
            ASTUnitIdentifierNode v1 = (ASTUnitIdentifierNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTConnectSpecListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ConnectSpecListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("UnitIdentifier"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ConnectSpecList> ::= UnitIdentifier:<UnitIdentifier>  :production856
         */
        protected ASTConnectSpecListNode userAction(ASTUnitIdentifierNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production856Production PRODUCTION856 = Production856Production.getInstance();

    public static class Production857Production extends Production
    {
        private Production857Production() {;} // Singleton
        private static Production857Production singletonInstance = null;
        public static final Production857Production getInstance() { if (singletonInstance == null) singletonInstance = new Production857Production(); return singletonInstance; }

        public String getDescription() { return "<ConnectSpecList> ::= ConnectSpec:<ConnectSpec>  :production857"; }

        /**
         * Reduce by <ConnectSpecList> ::= ConnectSpec:<ConnectSpec>  :production857
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ConnectSpecList> ::= ConnectSpec:<ConnectSpec>  :production857
            ASTConnectSpecNode v1 = (ASTConnectSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTConnectSpecListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ConnectSpecListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ConnectSpec"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ConnectSpecList> ::= ConnectSpec:<ConnectSpec>  :production857
         */
        protected ASTConnectSpecListNode userAction(ASTConnectSpecNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production857Production PRODUCTION857 = Production857Production.getInstance();

    public static class Production858Production extends Production
    {
        private Production858Production() {;} // Singleton
        private static Production858Production singletonInstance = null;
        public static final Production858Production getInstance() { if (singletonInstance == null) singletonInstance = new Production858Production(); return singletonInstance; }

        public String getDescription() { return "<ConnectSpecList> ::= @:<ConnectSpecList> tcomma:T_COMMA ConnectSpec:<ConnectSpec>  :production858"; }

        /**
         * Reduce by <ConnectSpecList> ::= @:<ConnectSpecList> tcomma:T_COMMA ConnectSpec:<ConnectSpec>  :production858
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ConnectSpecList> ::= @:<ConnectSpecList> tcomma:T_COMMA ConnectSpec:<ConnectSpec>  :production858
            ASTConnectSpecNode v3 = (ASTConnectSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTConnectSpecListNode v1 = (ASTConnectSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTConnectSpecListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.ConnectSpecListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("ConnectSpec"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ConnectSpecList> ::= @:<ConnectSpecList> tcomma:T_COMMA ConnectSpec:<ConnectSpec>  :production858
         */
        protected ASTConnectSpecListNode userAction(ASTConnectSpecListNode v1, Token v2, ASTConnectSpecNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production858Production PRODUCTION858 = Production858Production.getInstance();

    public static class Production859Production extends Production
    {
        private Production859Production() {;} // Singleton
        private static Production859Production singletonInstance = null;
        public static final Production859Production getInstance() { if (singletonInstance == null) singletonInstance = new Production859Production(); return singletonInstance; }

        public String getDescription() { return "<ConnectSpec> ::= tuniteq:T_UNITEQ UnitIdentifier:<UnitIdentifier>  :production859"; }

        /**
         * Reduce by <ConnectSpec> ::= tuniteq:T_UNITEQ UnitIdentifier:<UnitIdentifier>  :production859
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ConnectSpec> ::= tuniteq:T_UNITEQ UnitIdentifier:<UnitIdentifier>  :production859
            ASTUnitIdentifierNode v2 = (ASTUnitIdentifierNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTConnectSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.ConnectSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tuniteq"))
                return 0;
            else
                if (name.equals("UnitIdentifier"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ConnectSpec> ::= tuniteq:T_UNITEQ UnitIdentifier:<UnitIdentifier>  :production859
         */
        protected ASTConnectSpecNode userAction(Token v1, ASTUnitIdentifierNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production859Production PRODUCTION859 = Production859Production.getInstance();

    public static class Production860Production extends Production
    {
        private Production860Production() {;} // Singleton
        private static Production860Production singletonInstance = null;
        public static final Production860Production getInstance() { if (singletonInstance == null) singletonInstance = new Production860Production(); return singletonInstance; }

        public String getDescription() { return "<ConnectSpec> ::= terreq:T_ERREQ LblRef:<LblRef>  :production860"; }

        /**
         * Reduce by <ConnectSpec> ::= terreq:T_ERREQ LblRef:<LblRef>  :production860
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ConnectSpec> ::= terreq:T_ERREQ LblRef:<LblRef>  :production860
            ASTLblRefNode v2 = (ASTLblRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTConnectSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.ConnectSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("terreq"))
                return 0;
            else
                if (name.equals("LblRef"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ConnectSpec> ::= terreq:T_ERREQ LblRef:<LblRef>  :production860
         */
        protected ASTConnectSpecNode userAction(Token v1, ASTLblRefNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production860Production PRODUCTION860 = Production860Production.getInstance();

    public static class Production861Production extends Production
    {
        private Production861Production() {;} // Singleton
        private static Production861Production singletonInstance = null;
        public static final Production861Production getInstance() { if (singletonInstance == null) singletonInstance = new Production861Production(); return singletonInstance; }

        public String getDescription() { return "<ConnectSpec> ::= tfileeq:T_FILEEQ CExpr:<CExpr>  :production861"; }

        /**
         * Reduce by <ConnectSpec> ::= tfileeq:T_FILEEQ CExpr:<CExpr>  :production861
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ConnectSpec> ::= tfileeq:T_FILEEQ CExpr:<CExpr>  :production861
            ASTCExprNode v2 = (ASTCExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTConnectSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.ConnectSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tfileeq"))
                return 0;
            else
                if (name.equals("CExpr"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ConnectSpec> ::= tfileeq:T_FILEEQ CExpr:<CExpr>  :production861
         */
        protected ASTConnectSpecNode userAction(Token v1, ASTCExprNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production861Production PRODUCTION861 = Production861Production.getInstance();

    public static class Production862Production extends Production
    {
        private Production862Production() {;} // Singleton
        private static Production862Production singletonInstance = null;
        public static final Production862Production getInstance() { if (singletonInstance == null) singletonInstance = new Production862Production(); return singletonInstance; }

        public String getDescription() { return "<ConnectSpec> ::= tstatuseq:T_STATUSEQ CExpr:<CExpr>  :production862"; }

        /**
         * Reduce by <ConnectSpec> ::= tstatuseq:T_STATUSEQ CExpr:<CExpr>  :production862
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ConnectSpec> ::= tstatuseq:T_STATUSEQ CExpr:<CExpr>  :production862
            ASTCExprNode v2 = (ASTCExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTConnectSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.ConnectSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tstatuseq"))
                return 0;
            else
                if (name.equals("CExpr"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ConnectSpec> ::= tstatuseq:T_STATUSEQ CExpr:<CExpr>  :production862
         */
        protected ASTConnectSpecNode userAction(Token v1, ASTCExprNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production862Production PRODUCTION862 = Production862Production.getInstance();

    public static class Production863Production extends Production
    {
        private Production863Production() {;} // Singleton
        private static Production863Production singletonInstance = null;
        public static final Production863Production getInstance() { if (singletonInstance == null) singletonInstance = new Production863Production(); return singletonInstance; }

        public String getDescription() { return "<ConnectSpec> ::= taccesseq:T_ACCESSEQ CExpr:<CExpr>  :production863"; }

        /**
         * Reduce by <ConnectSpec> ::= taccesseq:T_ACCESSEQ CExpr:<CExpr>  :production863
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ConnectSpec> ::= taccesseq:T_ACCESSEQ CExpr:<CExpr>  :production863
            ASTCExprNode v2 = (ASTCExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTConnectSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.ConnectSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("taccesseq"))
                return 0;
            else
                if (name.equals("CExpr"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ConnectSpec> ::= taccesseq:T_ACCESSEQ CExpr:<CExpr>  :production863
         */
        protected ASTConnectSpecNode userAction(Token v1, ASTCExprNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production863Production PRODUCTION863 = Production863Production.getInstance();

    public static class Production864Production extends Production
    {
        private Production864Production() {;} // Singleton
        private static Production864Production singletonInstance = null;
        public static final Production864Production getInstance() { if (singletonInstance == null) singletonInstance = new Production864Production(); return singletonInstance; }

        public String getDescription() { return "<ConnectSpec> ::= tformeq:T_FORMEQ CExpr:<CExpr>  :production864"; }

        /**
         * Reduce by <ConnectSpec> ::= tformeq:T_FORMEQ CExpr:<CExpr>  :production864
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ConnectSpec> ::= tformeq:T_FORMEQ CExpr:<CExpr>  :production864
            ASTCExprNode v2 = (ASTCExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTConnectSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.ConnectSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tformeq"))
                return 0;
            else
                if (name.equals("CExpr"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ConnectSpec> ::= tformeq:T_FORMEQ CExpr:<CExpr>  :production864
         */
        protected ASTConnectSpecNode userAction(Token v1, ASTCExprNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production864Production PRODUCTION864 = Production864Production.getInstance();

    public static class Production865Production extends Production
    {
        private Production865Production() {;} // Singleton
        private static Production865Production singletonInstance = null;
        public static final Production865Production getInstance() { if (singletonInstance == null) singletonInstance = new Production865Production(); return singletonInstance; }

        public String getDescription() { return "<ConnectSpec> ::= trecleq:T_RECLEQ Expr:<Expr>  :production865"; }

        /**
         * Reduce by <ConnectSpec> ::= trecleq:T_RECLEQ Expr:<Expr>  :production865
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ConnectSpec> ::= trecleq:T_RECLEQ Expr:<Expr>  :production865
            ASTExprNode v2 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTConnectSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.ConnectSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("trecleq"))
                return 0;
            else
                if (name.equals("Expr"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ConnectSpec> ::= trecleq:T_RECLEQ Expr:<Expr>  :production865
         */
        protected ASTConnectSpecNode userAction(Token v1, ASTExprNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production865Production PRODUCTION865 = Production865Production.getInstance();

    public static class Production866Production extends Production
    {
        private Production866Production() {;} // Singleton
        private static Production866Production singletonInstance = null;
        public static final Production866Production getInstance() { if (singletonInstance == null) singletonInstance = new Production866Production(); return singletonInstance; }

        public String getDescription() { return "<ConnectSpec> ::= tblankeq:T_BLANKEQ CExpr:<CExpr>  :production866"; }

        /**
         * Reduce by <ConnectSpec> ::= tblankeq:T_BLANKEQ CExpr:<CExpr>  :production866
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ConnectSpec> ::= tblankeq:T_BLANKEQ CExpr:<CExpr>  :production866
            ASTCExprNode v2 = (ASTCExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTConnectSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.ConnectSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tblankeq"))
                return 0;
            else
                if (name.equals("CExpr"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ConnectSpec> ::= tblankeq:T_BLANKEQ CExpr:<CExpr>  :production866
         */
        protected ASTConnectSpecNode userAction(Token v1, ASTCExprNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production866Production PRODUCTION866 = Production866Production.getInstance();

    public static class Production867Production extends Production
    {
        private Production867Production() {;} // Singleton
        private static Production867Production singletonInstance = null;
        public static final Production867Production getInstance() { if (singletonInstance == null) singletonInstance = new Production867Production(); return singletonInstance; }

        public String getDescription() { return "<ConnectSpec> ::= tiostateq:T_IOSTATEQ ScalarVariable:<ScalarVariable>  :production867"; }

        /**
         * Reduce by <ConnectSpec> ::= tiostateq:T_IOSTATEQ ScalarVariable:<ScalarVariable>  :production867
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ConnectSpec> ::= tiostateq:T_IOSTATEQ ScalarVariable:<ScalarVariable>  :production867
            ASTScalarVariableNode v2 = (ASTScalarVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTConnectSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.ConnectSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tiostateq"))
                return 0;
            else
                if (name.equals("ScalarVariable"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ConnectSpec> ::= tiostateq:T_IOSTATEQ ScalarVariable:<ScalarVariable>  :production867
         */
        protected ASTConnectSpecNode userAction(Token v1, ASTScalarVariableNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production867Production PRODUCTION867 = Production867Production.getInstance();

    public static class Production868Production extends Production
    {
        private Production868Production() {;} // Singleton
        private static Production868Production singletonInstance = null;
        public static final Production868Production getInstance() { if (singletonInstance == null) singletonInstance = new Production868Production(); return singletonInstance; }

        public String getDescription() { return "<ConnectSpec> ::= tpositioneq:T_POSITIONEQ CExpr:<CExpr>  :production868"; }

        /**
         * Reduce by <ConnectSpec> ::= tpositioneq:T_POSITIONEQ CExpr:<CExpr>  :production868
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ConnectSpec> ::= tpositioneq:T_POSITIONEQ CExpr:<CExpr>  :production868
            ASTCExprNode v2 = (ASTCExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTConnectSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.ConnectSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tpositioneq"))
                return 0;
            else
                if (name.equals("CExpr"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ConnectSpec> ::= tpositioneq:T_POSITIONEQ CExpr:<CExpr>  :production868
         */
        protected ASTConnectSpecNode userAction(Token v1, ASTCExprNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production868Production PRODUCTION868 = Production868Production.getInstance();

    public static class Production869Production extends Production
    {
        private Production869Production() {;} // Singleton
        private static Production869Production singletonInstance = null;
        public static final Production869Production getInstance() { if (singletonInstance == null) singletonInstance = new Production869Production(); return singletonInstance; }

        public String getDescription() { return "<ConnectSpec> ::= tactioneq:T_ACTIONEQ CExpr:<CExpr>  :production869"; }

        /**
         * Reduce by <ConnectSpec> ::= tactioneq:T_ACTIONEQ CExpr:<CExpr>  :production869
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ConnectSpec> ::= tactioneq:T_ACTIONEQ CExpr:<CExpr>  :production869
            ASTCExprNode v2 = (ASTCExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTConnectSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.ConnectSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tactioneq"))
                return 0;
            else
                if (name.equals("CExpr"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ConnectSpec> ::= tactioneq:T_ACTIONEQ CExpr:<CExpr>  :production869
         */
        protected ASTConnectSpecNode userAction(Token v1, ASTCExprNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production869Production PRODUCTION869 = Production869Production.getInstance();

    public static class Production870Production extends Production
    {
        private Production870Production() {;} // Singleton
        private static Production870Production singletonInstance = null;
        public static final Production870Production getInstance() { if (singletonInstance == null) singletonInstance = new Production870Production(); return singletonInstance; }

        public String getDescription() { return "<ConnectSpec> ::= tdelimeq:T_DELIMEQ CExpr:<CExpr>  :production870"; }

        /**
         * Reduce by <ConnectSpec> ::= tdelimeq:T_DELIMEQ CExpr:<CExpr>  :production870
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ConnectSpec> ::= tdelimeq:T_DELIMEQ CExpr:<CExpr>  :production870
            ASTCExprNode v2 = (ASTCExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTConnectSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.ConnectSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tdelimeq"))
                return 0;
            else
                if (name.equals("CExpr"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ConnectSpec> ::= tdelimeq:T_DELIMEQ CExpr:<CExpr>  :production870
         */
        protected ASTConnectSpecNode userAction(Token v1, ASTCExprNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production870Production PRODUCTION870 = Production870Production.getInstance();

    public static class Production871Production extends Production
    {
        private Production871Production() {;} // Singleton
        private static Production871Production singletonInstance = null;
        public static final Production871Production getInstance() { if (singletonInstance == null) singletonInstance = new Production871Production(); return singletonInstance; }

        public String getDescription() { return "<ConnectSpec> ::= tpadeq:T_PADEQ CExpr:<CExpr>  :production871"; }

        /**
         * Reduce by <ConnectSpec> ::= tpadeq:T_PADEQ CExpr:<CExpr>  :production871
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ConnectSpec> ::= tpadeq:T_PADEQ CExpr:<CExpr>  :production871
            ASTCExprNode v2 = (ASTCExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTConnectSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.ConnectSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tpadeq"))
                return 0;
            else
                if (name.equals("CExpr"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ConnectSpec> ::= tpadeq:T_PADEQ CExpr:<CExpr>  :production871
         */
        protected ASTConnectSpecNode userAction(Token v1, ASTCExprNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production871Production PRODUCTION871 = Production871Production.getInstance();

    public static class Production872Production extends Production
    {
        private Production872Production() {;} // Singleton
        private static Production872Production singletonInstance = null;
        public static final Production872Production getInstance() { if (singletonInstance == null) singletonInstance = new Production872Production(); return singletonInstance; }

        public String getDescription() { return "<CloseStmt> ::= tclose:T_CLOSE tlparen:T_LPAREN CloseSpecList:<CloseSpecList> trparen:T_RPAREN teos:T_EOS  :production872"; }

        /**
         * Reduce by <CloseStmt> ::= tclose:T_CLOSE tlparen:T_LPAREN CloseSpecList:<CloseSpecList> trparen:T_RPAREN teos:T_EOS  :production872
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CloseStmt> ::= tclose:T_CLOSE tlparen:T_LPAREN CloseSpecList:<CloseSpecList> trparen:T_RPAREN teos:T_EOS  :production872
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTCloseSpecListNode v3 = (ASTCloseSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCloseStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.CloseStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tclose"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("CloseSpecList"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CloseStmt> ::= tclose:T_CLOSE tlparen:T_LPAREN CloseSpecList:<CloseSpecList> trparen:T_RPAREN teos:T_EOS  :production872
         */
        protected ASTCloseStmtNode userAction(Token v1, Token v2, ASTCloseSpecListNode v3, Token v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production872Production PRODUCTION872 = Production872Production.getInstance();

    public static class Production873Production extends Production
    {
        private Production873Production() {;} // Singleton
        private static Production873Production singletonInstance = null;
        public static final Production873Production getInstance() { if (singletonInstance == null) singletonInstance = new Production873Production(); return singletonInstance; }

        public String getDescription() { return "<CloseStmt> ::= LblDef:<LblDef> tclose:T_CLOSE tlparen:T_LPAREN CloseSpecList:<CloseSpecList> trparen:T_RPAREN teos:T_EOS  :production873"; }

        /**
         * Reduce by <CloseStmt> ::= LblDef:<LblDef> tclose:T_CLOSE tlparen:T_LPAREN CloseSpecList:<CloseSpecList> trparen:T_RPAREN teos:T_EOS  :production873
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CloseStmt> ::= LblDef:<LblDef> tclose:T_CLOSE tlparen:T_LPAREN CloseSpecList:<CloseSpecList> trparen:T_RPAREN teos:T_EOS  :production873
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTCloseSpecListNode v4 = (ASTCloseSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCloseStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.CloseStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tclose"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("CloseSpecList"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CloseStmt> ::= LblDef:<LblDef> tclose:T_CLOSE tlparen:T_LPAREN CloseSpecList:<CloseSpecList> trparen:T_RPAREN teos:T_EOS  :production873
         */
        protected ASTCloseStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, ASTCloseSpecListNode v4, Token v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production873Production PRODUCTION873 = Production873Production.getInstance();

    public static class Production874Production extends Production
    {
        private Production874Production() {;} // Singleton
        private static Production874Production singletonInstance = null;
        public static final Production874Production getInstance() { if (singletonInstance == null) singletonInstance = new Production874Production(); return singletonInstance; }

        public String getDescription() { return "<CloseSpecList> ::= UnitIdentifier:<UnitIdentifier>  :production874"; }

        /**
         * Reduce by <CloseSpecList> ::= UnitIdentifier:<UnitIdentifier>  :production874
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CloseSpecList> ::= UnitIdentifier:<UnitIdentifier>  :production874
            ASTUnitIdentifierNode v1 = (ASTUnitIdentifierNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCloseSpecListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.CloseSpecListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("UnitIdentifier"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CloseSpecList> ::= UnitIdentifier:<UnitIdentifier>  :production874
         */
        protected ASTCloseSpecListNode userAction(ASTUnitIdentifierNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production874Production PRODUCTION874 = Production874Production.getInstance();

    public static class Production875Production extends Production
    {
        private Production875Production() {;} // Singleton
        private static Production875Production singletonInstance = null;
        public static final Production875Production getInstance() { if (singletonInstance == null) singletonInstance = new Production875Production(); return singletonInstance; }

        public String getDescription() { return "<CloseSpecList> ::= CloseSpec:<CloseSpec>  :production875"; }

        /**
         * Reduce by <CloseSpecList> ::= CloseSpec:<CloseSpec>  :production875
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CloseSpecList> ::= CloseSpec:<CloseSpec>  :production875
            ASTCloseSpecNode v1 = (ASTCloseSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCloseSpecListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.CloseSpecListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("CloseSpec"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CloseSpecList> ::= CloseSpec:<CloseSpec>  :production875
         */
        protected ASTCloseSpecListNode userAction(ASTCloseSpecNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production875Production PRODUCTION875 = Production875Production.getInstance();

    public static class Production876Production extends Production
    {
        private Production876Production() {;} // Singleton
        private static Production876Production singletonInstance = null;
        public static final Production876Production getInstance() { if (singletonInstance == null) singletonInstance = new Production876Production(); return singletonInstance; }

        public String getDescription() { return "<CloseSpecList> ::= @:<CloseSpecList> tcomma:T_COMMA CloseSpec:<CloseSpec>  :production876"; }

        /**
         * Reduce by <CloseSpecList> ::= @:<CloseSpecList> tcomma:T_COMMA CloseSpec:<CloseSpec>  :production876
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CloseSpecList> ::= @:<CloseSpecList> tcomma:T_COMMA CloseSpec:<CloseSpec>  :production876
            ASTCloseSpecNode v3 = (ASTCloseSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTCloseSpecListNode v1 = (ASTCloseSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCloseSpecListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.CloseSpecListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("CloseSpec"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CloseSpecList> ::= @:<CloseSpecList> tcomma:T_COMMA CloseSpec:<CloseSpec>  :production876
         */
        protected ASTCloseSpecListNode userAction(ASTCloseSpecListNode v1, Token v2, ASTCloseSpecNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production876Production PRODUCTION876 = Production876Production.getInstance();

    public static class Production877Production extends Production
    {
        private Production877Production() {;} // Singleton
        private static Production877Production singletonInstance = null;
        public static final Production877Production getInstance() { if (singletonInstance == null) singletonInstance = new Production877Production(); return singletonInstance; }

        public String getDescription() { return "<CloseSpec> ::= tuniteq:T_UNITEQ UnitIdentifier:<UnitIdentifier>  :production877"; }

        /**
         * Reduce by <CloseSpec> ::= tuniteq:T_UNITEQ UnitIdentifier:<UnitIdentifier>  :production877
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CloseSpec> ::= tuniteq:T_UNITEQ UnitIdentifier:<UnitIdentifier>  :production877
            ASTUnitIdentifierNode v2 = (ASTUnitIdentifierNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCloseSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.CloseSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tuniteq"))
                return 0;
            else
                if (name.equals("UnitIdentifier"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CloseSpec> ::= tuniteq:T_UNITEQ UnitIdentifier:<UnitIdentifier>  :production877
         */
        protected ASTCloseSpecNode userAction(Token v1, ASTUnitIdentifierNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production877Production PRODUCTION877 = Production877Production.getInstance();

    public static class Production878Production extends Production
    {
        private Production878Production() {;} // Singleton
        private static Production878Production singletonInstance = null;
        public static final Production878Production getInstance() { if (singletonInstance == null) singletonInstance = new Production878Production(); return singletonInstance; }

        public String getDescription() { return "<CloseSpec> ::= terreq:T_ERREQ LblRef:<LblRef>  :production878"; }

        /**
         * Reduce by <CloseSpec> ::= terreq:T_ERREQ LblRef:<LblRef>  :production878
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CloseSpec> ::= terreq:T_ERREQ LblRef:<LblRef>  :production878
            ASTLblRefNode v2 = (ASTLblRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCloseSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.CloseSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("terreq"))
                return 0;
            else
                if (name.equals("LblRef"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CloseSpec> ::= terreq:T_ERREQ LblRef:<LblRef>  :production878
         */
        protected ASTCloseSpecNode userAction(Token v1, ASTLblRefNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production878Production PRODUCTION878 = Production878Production.getInstance();

    public static class Production879Production extends Production
    {
        private Production879Production() {;} // Singleton
        private static Production879Production singletonInstance = null;
        public static final Production879Production getInstance() { if (singletonInstance == null) singletonInstance = new Production879Production(); return singletonInstance; }

        public String getDescription() { return "<CloseSpec> ::= tstatuseq:T_STATUSEQ CExpr:<CExpr>  :production879"; }

        /**
         * Reduce by <CloseSpec> ::= tstatuseq:T_STATUSEQ CExpr:<CExpr>  :production879
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CloseSpec> ::= tstatuseq:T_STATUSEQ CExpr:<CExpr>  :production879
            ASTCExprNode v2 = (ASTCExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCloseSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.CloseSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tstatuseq"))
                return 0;
            else
                if (name.equals("CExpr"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CloseSpec> ::= tstatuseq:T_STATUSEQ CExpr:<CExpr>  :production879
         */
        protected ASTCloseSpecNode userAction(Token v1, ASTCExprNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production879Production PRODUCTION879 = Production879Production.getInstance();

    public static class Production880Production extends Production
    {
        private Production880Production() {;} // Singleton
        private static Production880Production singletonInstance = null;
        public static final Production880Production getInstance() { if (singletonInstance == null) singletonInstance = new Production880Production(); return singletonInstance; }

        public String getDescription() { return "<CloseSpec> ::= tiostateq:T_IOSTATEQ ScalarVariable:<ScalarVariable>  :production880"; }

        /**
         * Reduce by <CloseSpec> ::= tiostateq:T_IOSTATEQ ScalarVariable:<ScalarVariable>  :production880
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CloseSpec> ::= tiostateq:T_IOSTATEQ ScalarVariable:<ScalarVariable>  :production880
            ASTScalarVariableNode v2 = (ASTScalarVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCloseSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.CloseSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tiostateq"))
                return 0;
            else
                if (name.equals("ScalarVariable"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CloseSpec> ::= tiostateq:T_IOSTATEQ ScalarVariable:<ScalarVariable>  :production880
         */
        protected ASTCloseSpecNode userAction(Token v1, ASTScalarVariableNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production880Production PRODUCTION880 = Production880Production.getInstance();

    public static class Production881Production extends Production
    {
        private Production881Production() {;} // Singleton
        private static Production881Production singletonInstance = null;
        public static final Production881Production getInstance() { if (singletonInstance == null) singletonInstance = new Production881Production(); return singletonInstance; }

        public String getDescription() { return "<ReadStmt> ::= tread:T_READ RdCtlSpec:<RdCtlSpec> InputItemList:<InputItemList> teos:T_EOS  :production881"; }

        /**
         * Reduce by <ReadStmt> ::= tread:T_READ RdCtlSpec:<RdCtlSpec> InputItemList:<InputItemList> teos:T_EOS  :production881
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ReadStmt> ::= tread:T_READ RdCtlSpec:<RdCtlSpec> InputItemList:<InputItemList> teos:T_EOS  :production881
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTInputItemListNode v3 = (ASTInputItemListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTRdCtlSpecNode v2 = (ASTRdCtlSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTReadStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.ReadStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tread"))
                return 0;
            else
                if (name.equals("RdCtlSpec"))
                    return 1;
                else
                    if (name.equals("InputItemList"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ReadStmt> ::= tread:T_READ RdCtlSpec:<RdCtlSpec> InputItemList:<InputItemList> teos:T_EOS  :production881
         */
        protected ASTReadStmtNode userAction(Token v1, ASTRdCtlSpecNode v2, ASTInputItemListNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production881Production PRODUCTION881 = Production881Production.getInstance();

    public static class Production882Production extends Production
    {
        private Production882Production() {;} // Singleton
        private static Production882Production singletonInstance = null;
        public static final Production882Production getInstance() { if (singletonInstance == null) singletonInstance = new Production882Production(); return singletonInstance; }

        public String getDescription() { return "<ReadStmt> ::= LblDef:<LblDef> tread:T_READ RdCtlSpec:<RdCtlSpec> InputItemList:<InputItemList> teos:T_EOS  :production882"; }

        /**
         * Reduce by <ReadStmt> ::= LblDef:<LblDef> tread:T_READ RdCtlSpec:<RdCtlSpec> InputItemList:<InputItemList> teos:T_EOS  :production882
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ReadStmt> ::= LblDef:<LblDef> tread:T_READ RdCtlSpec:<RdCtlSpec> InputItemList:<InputItemList> teos:T_EOS  :production882
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTInputItemListNode v4 = (ASTInputItemListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTRdCtlSpecNode v3 = (ASTRdCtlSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTReadStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.ReadStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tread"))
                    return 1;
                else
                    if (name.equals("RdCtlSpec"))
                        return 2;
                    else
                        if (name.equals("InputItemList"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ReadStmt> ::= LblDef:<LblDef> tread:T_READ RdCtlSpec:<RdCtlSpec> InputItemList:<InputItemList> teos:T_EOS  :production882
         */
        protected ASTReadStmtNode userAction(ASTLblDefNode v1, Token v2, ASTRdCtlSpecNode v3, ASTInputItemListNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production882Production PRODUCTION882 = Production882Production.getInstance();

    public static class Production883Production extends Production
    {
        private Production883Production() {;} // Singleton
        private static Production883Production singletonInstance = null;
        public static final Production883Production getInstance() { if (singletonInstance == null) singletonInstance = new Production883Production(); return singletonInstance; }

        public String getDescription() { return "<ReadStmt> ::= tread:T_READ RdCtlSpec:<RdCtlSpec> teos:T_EOS  :production883"; }

        /**
         * Reduce by <ReadStmt> ::= tread:T_READ RdCtlSpec:<RdCtlSpec> teos:T_EOS  :production883
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ReadStmt> ::= tread:T_READ RdCtlSpec:<RdCtlSpec> teos:T_EOS  :production883
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTRdCtlSpecNode v2 = (ASTRdCtlSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTReadStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.ReadStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tread"))
                return 0;
            else
                if (name.equals("RdCtlSpec"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ReadStmt> ::= tread:T_READ RdCtlSpec:<RdCtlSpec> teos:T_EOS  :production883
         */
        protected ASTReadStmtNode userAction(Token v1, ASTRdCtlSpecNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production883Production PRODUCTION883 = Production883Production.getInstance();

    public static class Production884Production extends Production
    {
        private Production884Production() {;} // Singleton
        private static Production884Production singletonInstance = null;
        public static final Production884Production getInstance() { if (singletonInstance == null) singletonInstance = new Production884Production(); return singletonInstance; }

        public String getDescription() { return "<ReadStmt> ::= LblDef:<LblDef> tread:T_READ RdCtlSpec:<RdCtlSpec> teos:T_EOS  :production884"; }

        /**
         * Reduce by <ReadStmt> ::= LblDef:<LblDef> tread:T_READ RdCtlSpec:<RdCtlSpec> teos:T_EOS  :production884
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ReadStmt> ::= LblDef:<LblDef> tread:T_READ RdCtlSpec:<RdCtlSpec> teos:T_EOS  :production884
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTRdCtlSpecNode v3 = (ASTRdCtlSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTReadStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.ReadStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tread"))
                    return 1;
                else
                    if (name.equals("RdCtlSpec"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ReadStmt> ::= LblDef:<LblDef> tread:T_READ RdCtlSpec:<RdCtlSpec> teos:T_EOS  :production884
         */
        protected ASTReadStmtNode userAction(ASTLblDefNode v1, Token v2, ASTRdCtlSpecNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production884Production PRODUCTION884 = Production884Production.getInstance();

    public static class Production885Production extends Production
    {
        private Production885Production() {;} // Singleton
        private static Production885Production singletonInstance = null;
        public static final Production885Production getInstance() { if (singletonInstance == null) singletonInstance = new Production885Production(); return singletonInstance; }

        public String getDescription() { return "<ReadStmt> ::= tread:T_READ RdFmtId:<RdFmtId> tcomma:T_COMMA InputItemList:<InputItemList> teos:T_EOS  :production885"; }

        /**
         * Reduce by <ReadStmt> ::= tread:T_READ RdFmtId:<RdFmtId> tcomma:T_COMMA InputItemList:<InputItemList> teos:T_EOS  :production885
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ReadStmt> ::= tread:T_READ RdFmtId:<RdFmtId> tcomma:T_COMMA InputItemList:<InputItemList> teos:T_EOS  :production885
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTInputItemListNode v4 = (ASTInputItemListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTRdFmtIdNode v2 = (ASTRdFmtIdNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTReadStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.ReadStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tread"))
                return 0;
            else
                if (name.equals("RdFmtId"))
                    return 1;
                else
                    if (name.equals("tcomma"))
                        return 2;
                    else
                        if (name.equals("InputItemList"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ReadStmt> ::= tread:T_READ RdFmtId:<RdFmtId> tcomma:T_COMMA InputItemList:<InputItemList> teos:T_EOS  :production885
         */
        protected ASTReadStmtNode userAction(Token v1, ASTRdFmtIdNode v2, Token v3, ASTInputItemListNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production885Production PRODUCTION885 = Production885Production.getInstance();

    public static class Production886Production extends Production
    {
        private Production886Production() {;} // Singleton
        private static Production886Production singletonInstance = null;
        public static final Production886Production getInstance() { if (singletonInstance == null) singletonInstance = new Production886Production(); return singletonInstance; }

        public String getDescription() { return "<ReadStmt> ::= LblDef:<LblDef> tread:T_READ RdFmtId:<RdFmtId> tcomma:T_COMMA InputItemList:<InputItemList> teos:T_EOS  :production886"; }

        /**
         * Reduce by <ReadStmt> ::= LblDef:<LblDef> tread:T_READ RdFmtId:<RdFmtId> tcomma:T_COMMA InputItemList:<InputItemList> teos:T_EOS  :production886
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ReadStmt> ::= LblDef:<LblDef> tread:T_READ RdFmtId:<RdFmtId> tcomma:T_COMMA InputItemList:<InputItemList> teos:T_EOS  :production886
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTInputItemListNode v5 = (ASTInputItemListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTRdFmtIdNode v3 = (ASTRdFmtIdNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTReadStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.ReadStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tread"))
                    return 1;
                else
                    if (name.equals("RdFmtId"))
                        return 2;
                    else
                        if (name.equals("tcomma"))
                            return 3;
                        else
                            if (name.equals("InputItemList"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ReadStmt> ::= LblDef:<LblDef> tread:T_READ RdFmtId:<RdFmtId> tcomma:T_COMMA InputItemList:<InputItemList> teos:T_EOS  :production886
         */
        protected ASTReadStmtNode userAction(ASTLblDefNode v1, Token v2, ASTRdFmtIdNode v3, Token v4, ASTInputItemListNode v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production886Production PRODUCTION886 = Production886Production.getInstance();

    public static class Production887Production extends Production
    {
        private Production887Production() {;} // Singleton
        private static Production887Production singletonInstance = null;
        public static final Production887Production getInstance() { if (singletonInstance == null) singletonInstance = new Production887Production(); return singletonInstance; }

        public String getDescription() { return "<ReadStmt> ::= tread:T_READ RdFmtId:<RdFmtId> teos:T_EOS  :production887"; }

        /**
         * Reduce by <ReadStmt> ::= tread:T_READ RdFmtId:<RdFmtId> teos:T_EOS  :production887
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ReadStmt> ::= tread:T_READ RdFmtId:<RdFmtId> teos:T_EOS  :production887
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTRdFmtIdNode v2 = (ASTRdFmtIdNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTReadStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.ReadStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tread"))
                return 0;
            else
                if (name.equals("RdFmtId"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ReadStmt> ::= tread:T_READ RdFmtId:<RdFmtId> teos:T_EOS  :production887
         */
        protected ASTReadStmtNode userAction(Token v1, ASTRdFmtIdNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production887Production PRODUCTION887 = Production887Production.getInstance();

    public static class Production888Production extends Production
    {
        private Production888Production() {;} // Singleton
        private static Production888Production singletonInstance = null;
        public static final Production888Production getInstance() { if (singletonInstance == null) singletonInstance = new Production888Production(); return singletonInstance; }

        public String getDescription() { return "<ReadStmt> ::= LblDef:<LblDef> tread:T_READ RdFmtId:<RdFmtId> teos:T_EOS  :production888"; }

        /**
         * Reduce by <ReadStmt> ::= LblDef:<LblDef> tread:T_READ RdFmtId:<RdFmtId> teos:T_EOS  :production888
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ReadStmt> ::= LblDef:<LblDef> tread:T_READ RdFmtId:<RdFmtId> teos:T_EOS  :production888
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTRdFmtIdNode v3 = (ASTRdFmtIdNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTReadStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.ReadStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tread"))
                    return 1;
                else
                    if (name.equals("RdFmtId"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ReadStmt> ::= LblDef:<LblDef> tread:T_READ RdFmtId:<RdFmtId> teos:T_EOS  :production888
         */
        protected ASTReadStmtNode userAction(ASTLblDefNode v1, Token v2, ASTRdFmtIdNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production888Production PRODUCTION888 = Production888Production.getInstance();

    public static class Production889Production extends Production
    {
        private Production889Production() {;} // Singleton
        private static Production889Production singletonInstance = null;
        public static final Production889Production getInstance() { if (singletonInstance == null) singletonInstance = new Production889Production(); return singletonInstance; }

        public String getDescription() { return "<RdCtlSpec> ::= RdUnitId:<RdUnitId>  :production889"; }

        /**
         * Reduce by <RdCtlSpec> ::= RdUnitId:<RdUnitId>  :production889
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <RdCtlSpec> ::= RdUnitId:<RdUnitId>  :production889
            ASTRdUnitIdNode v1 = (ASTRdUnitIdNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTRdCtlSpecNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.RdCtlSpecNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("RdUnitId"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <RdCtlSpec> ::= RdUnitId:<RdUnitId>  :production889
         */
        protected ASTRdCtlSpecNode userAction(ASTRdUnitIdNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production889Production PRODUCTION889 = Production889Production.getInstance();

    public static class Production890Production extends Production
    {
        private Production890Production() {;} // Singleton
        private static Production890Production singletonInstance = null;
        public static final Production890Production getInstance() { if (singletonInstance == null) singletonInstance = new Production890Production(); return singletonInstance; }

        public String getDescription() { return "<RdCtlSpec> ::= tlparen:T_LPAREN RdIoCtlSpecList:<RdIoCtlSpecList> trparen:T_RPAREN  :production890"; }

        /**
         * Reduce by <RdCtlSpec> ::= tlparen:T_LPAREN RdIoCtlSpecList:<RdIoCtlSpecList> trparen:T_RPAREN  :production890
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <RdCtlSpec> ::= tlparen:T_LPAREN RdIoCtlSpecList:<RdIoCtlSpecList> trparen:T_RPAREN  :production890
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTRdIoCtlSpecListNode v2 = (ASTRdIoCtlSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTRdCtlSpecNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.RdCtlSpecNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("RdIoCtlSpecList"))
                    return 1;
                else
                    if (name.equals("trparen"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <RdCtlSpec> ::= tlparen:T_LPAREN RdIoCtlSpecList:<RdIoCtlSpecList> trparen:T_RPAREN  :production890
         */
        protected ASTRdCtlSpecNode userAction(Token v1, ASTRdIoCtlSpecListNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production890Production PRODUCTION890 = Production890Production.getInstance();

    public static class Production891Production extends Production
    {
        private Production891Production() {;} // Singleton
        private static Production891Production singletonInstance = null;
        public static final Production891Production getInstance() { if (singletonInstance == null) singletonInstance = new Production891Production(); return singletonInstance; }

        public String getDescription() { return "<RdUnitId> ::= tlparen:T_LPAREN UFExpr:<UFExpr> trparen:T_RPAREN  :production891"; }

        /**
         * Reduce by <RdUnitId> ::= tlparen:T_LPAREN UFExpr:<UFExpr> trparen:T_RPAREN  :production891
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <RdUnitId> ::= tlparen:T_LPAREN UFExpr:<UFExpr> trparen:T_RPAREN  :production891
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTUFExprNode v2 = (ASTUFExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTRdUnitIdNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.RdUnitIdNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("UFExpr"))
                    return 1;
                else
                    if (name.equals("trparen"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <RdUnitId> ::= tlparen:T_LPAREN UFExpr:<UFExpr> trparen:T_RPAREN  :production891
         */
        protected ASTRdUnitIdNode userAction(Token v1, ASTUFExprNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production891Production PRODUCTION891 = Production891Production.getInstance();

    public static class Production892Production extends Production
    {
        private Production892Production() {;} // Singleton
        private static Production892Production singletonInstance = null;
        public static final Production892Production getInstance() { if (singletonInstance == null) singletonInstance = new Production892Production(); return singletonInstance; }

        public String getDescription() { return "<RdUnitId> ::= tlparen:T_LPAREN tasterisk:T_ASTERISK trparen:T_RPAREN  :production892"; }

        /**
         * Reduce by <RdUnitId> ::= tlparen:T_LPAREN tasterisk:T_ASTERISK trparen:T_RPAREN  :production892
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <RdUnitId> ::= tlparen:T_LPAREN tasterisk:T_ASTERISK trparen:T_RPAREN  :production892
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTRdUnitIdNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.RdUnitIdNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("tasterisk"))
                    return 1;
                else
                    if (name.equals("trparen"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <RdUnitId> ::= tlparen:T_LPAREN tasterisk:T_ASTERISK trparen:T_RPAREN  :production892
         */
        protected ASTRdUnitIdNode userAction(Token v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production892Production PRODUCTION892 = Production892Production.getInstance();

    public static class Production893Production extends Production
    {
        private Production893Production() {;} // Singleton
        private static Production893Production singletonInstance = null;
        public static final Production893Production getInstance() { if (singletonInstance == null) singletonInstance = new Production893Production(); return singletonInstance; }

        public String getDescription() { return "<RdIoCtlSpecList> ::= UnitIdentifier:<UnitIdentifier> tcomma:T_COMMA IoControlSpec:<IoControlSpec>  :production893"; }

        /**
         * Reduce by <RdIoCtlSpecList> ::= UnitIdentifier:<UnitIdentifier> tcomma:T_COMMA IoControlSpec:<IoControlSpec>  :production893
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <RdIoCtlSpecList> ::= UnitIdentifier:<UnitIdentifier> tcomma:T_COMMA IoControlSpec:<IoControlSpec>  :production893
            ASTIoControlSpecNode v3 = (ASTIoControlSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTUnitIdentifierNode v1 = (ASTUnitIdentifierNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTRdIoCtlSpecListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.RdIoCtlSpecListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("UnitIdentifier"))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("IoControlSpec"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <RdIoCtlSpecList> ::= UnitIdentifier:<UnitIdentifier> tcomma:T_COMMA IoControlSpec:<IoControlSpec>  :production893
         */
        protected ASTRdIoCtlSpecListNode userAction(ASTUnitIdentifierNode v1, Token v2, ASTIoControlSpecNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production893Production PRODUCTION893 = Production893Production.getInstance();

    public static class Production894Production extends Production
    {
        private Production894Production() {;} // Singleton
        private static Production894Production singletonInstance = null;
        public static final Production894Production getInstance() { if (singletonInstance == null) singletonInstance = new Production894Production(); return singletonInstance; }

        public String getDescription() { return "<RdIoCtlSpecList> ::= UnitIdentifier:<UnitIdentifier> tcomma:T_COMMA FormatIdentifier:<FormatIdentifier>  :production894"; }

        /**
         * Reduce by <RdIoCtlSpecList> ::= UnitIdentifier:<UnitIdentifier> tcomma:T_COMMA FormatIdentifier:<FormatIdentifier>  :production894
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <RdIoCtlSpecList> ::= UnitIdentifier:<UnitIdentifier> tcomma:T_COMMA FormatIdentifier:<FormatIdentifier>  :production894
            ASTFormatIdentifierNode v3 = (ASTFormatIdentifierNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTUnitIdentifierNode v1 = (ASTUnitIdentifierNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTRdIoCtlSpecListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.RdIoCtlSpecListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("UnitIdentifier"))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("FormatIdentifier"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <RdIoCtlSpecList> ::= UnitIdentifier:<UnitIdentifier> tcomma:T_COMMA FormatIdentifier:<FormatIdentifier>  :production894
         */
        protected ASTRdIoCtlSpecListNode userAction(ASTUnitIdentifierNode v1, Token v2, ASTFormatIdentifierNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production894Production PRODUCTION894 = Production894Production.getInstance();

    public static class Production895Production extends Production
    {
        private Production895Production() {;} // Singleton
        private static Production895Production singletonInstance = null;
        public static final Production895Production getInstance() { if (singletonInstance == null) singletonInstance = new Production895Production(); return singletonInstance; }

        public String getDescription() { return "<RdIoCtlSpecList> ::= IoControlSpec:<IoControlSpec>  :production895"; }

        /**
         * Reduce by <RdIoCtlSpecList> ::= IoControlSpec:<IoControlSpec>  :production895
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <RdIoCtlSpecList> ::= IoControlSpec:<IoControlSpec>  :production895
            ASTIoControlSpecNode v1 = (ASTIoControlSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTRdIoCtlSpecListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.RdIoCtlSpecListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("IoControlSpec"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <RdIoCtlSpecList> ::= IoControlSpec:<IoControlSpec>  :production895
         */
        protected ASTRdIoCtlSpecListNode userAction(ASTIoControlSpecNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production895Production PRODUCTION895 = Production895Production.getInstance();

    public static class Production896Production extends Production
    {
        private Production896Production() {;} // Singleton
        private static Production896Production singletonInstance = null;
        public static final Production896Production getInstance() { if (singletonInstance == null) singletonInstance = new Production896Production(); return singletonInstance; }

        public String getDescription() { return "<RdIoCtlSpecList> ::= @:<RdIoCtlSpecList> tcomma:T_COMMA IoControlSpec:<IoControlSpec>  :production896"; }

        /**
         * Reduce by <RdIoCtlSpecList> ::= @:<RdIoCtlSpecList> tcomma:T_COMMA IoControlSpec:<IoControlSpec>  :production896
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <RdIoCtlSpecList> ::= @:<RdIoCtlSpecList> tcomma:T_COMMA IoControlSpec:<IoControlSpec>  :production896
            ASTIoControlSpecNode v3 = (ASTIoControlSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTRdIoCtlSpecListNode v1 = (ASTRdIoCtlSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTRdIoCtlSpecListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.RdIoCtlSpecListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("IoControlSpec"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <RdIoCtlSpecList> ::= @:<RdIoCtlSpecList> tcomma:T_COMMA IoControlSpec:<IoControlSpec>  :production896
         */
        protected ASTRdIoCtlSpecListNode userAction(ASTRdIoCtlSpecListNode v1, Token v2, ASTIoControlSpecNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production896Production PRODUCTION896 = Production896Production.getInstance();

    public static class Production897Production extends Production
    {
        private Production897Production() {;} // Singleton
        private static Production897Production singletonInstance = null;
        public static final Production897Production getInstance() { if (singletonInstance == null) singletonInstance = new Production897Production(); return singletonInstance; }

        public String getDescription() { return "<RdFmtId> ::= LblRef:<LblRef>  :production897"; }

        /**
         * Reduce by <RdFmtId> ::= LblRef:<LblRef>  :production897
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <RdFmtId> ::= LblRef:<LblRef>  :production897
            ASTLblRefNode v1 = (ASTLblRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTRdFmtIdNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.RdFmtIdNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblRef"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <RdFmtId> ::= LblRef:<LblRef>  :production897
         */
        protected ASTRdFmtIdNode userAction(ASTLblRefNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production897Production PRODUCTION897 = Production897Production.getInstance();

    public static class Production898Production extends Production
    {
        private Production898Production() {;} // Singleton
        private static Production898Production singletonInstance = null;
        public static final Production898Production getInstance() { if (singletonInstance == null) singletonInstance = new Production898Production(); return singletonInstance; }

        public String getDescription() { return "<RdFmtId> ::= tasterisk:T_ASTERISK  :production898"; }

        /**
         * Reduce by <RdFmtId> ::= tasterisk:T_ASTERISK  :production898
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <RdFmtId> ::= tasterisk:T_ASTERISK  :production898
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTRdFmtIdNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.RdFmtIdNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tasterisk"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <RdFmtId> ::= tasterisk:T_ASTERISK  :production898
         */
        protected ASTRdFmtIdNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production898Production PRODUCTION898 = Production898Production.getInstance();

    public static class Production899Production extends Production
    {
        private Production899Production() {;} // Singleton
        private static Production899Production singletonInstance = null;
        public static final Production899Production getInstance() { if (singletonInstance == null) singletonInstance = new Production899Production(); return singletonInstance; }

        public String getDescription() { return "<RdFmtId> ::= COperand:<COperand>  :production899"; }

        /**
         * Reduce by <RdFmtId> ::= COperand:<COperand>  :production899
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <RdFmtId> ::= COperand:<COperand>  :production899
            ASTCOperandNode v1 = (ASTCOperandNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTRdFmtIdNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.RdFmtIdNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("COperand"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <RdFmtId> ::= COperand:<COperand>  :production899
         */
        protected ASTRdFmtIdNode userAction(ASTCOperandNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production899Production PRODUCTION899 = Production899Production.getInstance();

    public static class Production900Production extends Production
    {
        private Production900Production() {;} // Singleton
        private static Production900Production singletonInstance = null;
        public static final Production900Production getInstance() { if (singletonInstance == null) singletonInstance = new Production900Production(); return singletonInstance; }

        public String getDescription() { return "<RdFmtId> ::= COperand:<COperand> ConcatOp:<ConcatOp> CPrimary:<CPrimary>  :production900"; }

        /**
         * Reduce by <RdFmtId> ::= COperand:<COperand> ConcatOp:<ConcatOp> CPrimary:<CPrimary>  :production900
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <RdFmtId> ::= COperand:<COperand> ConcatOp:<ConcatOp> CPrimary:<CPrimary>  :production900
            ASTCPrimaryNode v3 = (ASTCPrimaryNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTConcatOpNode v2 = (ASTConcatOpNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTCOperandNode v1 = (ASTCOperandNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTRdFmtIdNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.RdFmtIdNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("COperand"))
                return 0;
            else
                if (name.equals("ConcatOp"))
                    return 1;
                else
                    if (name.equals("CPrimary"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <RdFmtId> ::= COperand:<COperand> ConcatOp:<ConcatOp> CPrimary:<CPrimary>  :production900
         */
        protected ASTRdFmtIdNode userAction(ASTCOperandNode v1, ASTConcatOpNode v2, ASTCPrimaryNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production900Production PRODUCTION900 = Production900Production.getInstance();

    public static class Production901Production extends Production
    {
        private Production901Production() {;} // Singleton
        private static Production901Production singletonInstance = null;
        public static final Production901Production getInstance() { if (singletonInstance == null) singletonInstance = new Production901Production(); return singletonInstance; }

        public String getDescription() { return "<RdFmtId> ::= RdFmtIdExpr:<RdFmtIdExpr> ConcatOp:<ConcatOp> CPrimary:<CPrimary>  :production901"; }

        /**
         * Reduce by <RdFmtId> ::= RdFmtIdExpr:<RdFmtIdExpr> ConcatOp:<ConcatOp> CPrimary:<CPrimary>  :production901
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <RdFmtId> ::= RdFmtIdExpr:<RdFmtIdExpr> ConcatOp:<ConcatOp> CPrimary:<CPrimary>  :production901
            ASTCPrimaryNode v3 = (ASTCPrimaryNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTConcatOpNode v2 = (ASTConcatOpNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTRdFmtIdExprNode v1 = (ASTRdFmtIdExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTRdFmtIdNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.RdFmtIdNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("RdFmtIdExpr"))
                return 0;
            else
                if (name.equals("ConcatOp"))
                    return 1;
                else
                    if (name.equals("CPrimary"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <RdFmtId> ::= RdFmtIdExpr:<RdFmtIdExpr> ConcatOp:<ConcatOp> CPrimary:<CPrimary>  :production901
         */
        protected ASTRdFmtIdNode userAction(ASTRdFmtIdExprNode v1, ASTConcatOpNode v2, ASTCPrimaryNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production901Production PRODUCTION901 = Production901Production.getInstance();

    public static class Production902Production extends Production
    {
        private Production902Production() {;} // Singleton
        private static Production902Production singletonInstance = null;
        public static final Production902Production getInstance() { if (singletonInstance == null) singletonInstance = new Production902Production(); return singletonInstance; }

        public String getDescription() { return "<RdFmtIdExpr> ::= tlparen:T_LPAREN UFExpr:<UFExpr> trparen:T_RPAREN  :production902"; }

        /**
         * Reduce by <RdFmtIdExpr> ::= tlparen:T_LPAREN UFExpr:<UFExpr> trparen:T_RPAREN  :production902
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <RdFmtIdExpr> ::= tlparen:T_LPAREN UFExpr:<UFExpr> trparen:T_RPAREN  :production902
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTUFExprNode v2 = (ASTUFExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTRdFmtIdExprNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.RdFmtIdExprNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("UFExpr"))
                    return 1;
                else
                    if (name.equals("trparen"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <RdFmtIdExpr> ::= tlparen:T_LPAREN UFExpr:<UFExpr> trparen:T_RPAREN  :production902
         */
        protected ASTRdFmtIdExprNode userAction(Token v1, ASTUFExprNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production902Production PRODUCTION902 = Production902Production.getInstance();

    public static class Production903Production extends Production
    {
        private Production903Production() {;} // Singleton
        private static Production903Production singletonInstance = null;
        public static final Production903Production getInstance() { if (singletonInstance == null) singletonInstance = new Production903Production(); return singletonInstance; }

        public String getDescription() { return "<WriteStmt> ::= twrite:T_WRITE tlparen:T_LPAREN IoControlSpecList:<IoControlSpecList> trparen:T_RPAREN OutputItemList:<OutputItemList> teos:T_EOS  :production903"; }

        /**
         * Reduce by <WriteStmt> ::= twrite:T_WRITE tlparen:T_LPAREN IoControlSpecList:<IoControlSpecList> trparen:T_RPAREN OutputItemList:<OutputItemList> teos:T_EOS  :production903
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <WriteStmt> ::= twrite:T_WRITE tlparen:T_LPAREN IoControlSpecList:<IoControlSpecList> trparen:T_RPAREN OutputItemList:<OutputItemList> teos:T_EOS  :production903
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTOutputItemListNode v5 = (ASTOutputItemListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTIoControlSpecListNode v3 = (ASTIoControlSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTWriteStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.WriteStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("twrite"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("IoControlSpecList"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("OutputItemList"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <WriteStmt> ::= twrite:T_WRITE tlparen:T_LPAREN IoControlSpecList:<IoControlSpecList> trparen:T_RPAREN OutputItemList:<OutputItemList> teos:T_EOS  :production903
         */
        protected ASTWriteStmtNode userAction(Token v1, Token v2, ASTIoControlSpecListNode v3, Token v4, ASTOutputItemListNode v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production903Production PRODUCTION903 = Production903Production.getInstance();

    public static class Production904Production extends Production
    {
        private Production904Production() {;} // Singleton
        private static Production904Production singletonInstance = null;
        public static final Production904Production getInstance() { if (singletonInstance == null) singletonInstance = new Production904Production(); return singletonInstance; }

        public String getDescription() { return "<WriteStmt> ::= LblDef:<LblDef> twrite:T_WRITE tlparen:T_LPAREN IoControlSpecList:<IoControlSpecList> trparen:T_RPAREN OutputItemList:<OutputItemList> teos:T_EOS  :production904"; }

        /**
         * Reduce by <WriteStmt> ::= LblDef:<LblDef> twrite:T_WRITE tlparen:T_LPAREN IoControlSpecList:<IoControlSpecList> trparen:T_RPAREN OutputItemList:<OutputItemList> teos:T_EOS  :production904
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <WriteStmt> ::= LblDef:<LblDef> twrite:T_WRITE tlparen:T_LPAREN IoControlSpecList:<IoControlSpecList> trparen:T_RPAREN OutputItemList:<OutputItemList> teos:T_EOS  :production904
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTOutputItemListNode v6 = (ASTOutputItemListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTIoControlSpecListNode v4 = (ASTIoControlSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTWriteStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7);

            // The production has 7 symbols on its RHS
            parser.reduce(Nonterminal.WriteStmtNonterminal.getInstance(), 7, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("twrite"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("IoControlSpecList"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("OutputItemList"))
                                    return 5;
                                else
                                    if (name.equals("teos"))
                                        return 6;
                                    else
                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <WriteStmt> ::= LblDef:<LblDef> twrite:T_WRITE tlparen:T_LPAREN IoControlSpecList:<IoControlSpecList> trparen:T_RPAREN OutputItemList:<OutputItemList> teos:T_EOS  :production904
         */
        protected ASTWriteStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, ASTIoControlSpecListNode v4, Token v5, ASTOutputItemListNode v6, Token v7)
        {
            return null;
        }
    }
    public static final Productions.Production904Production PRODUCTION904 = Production904Production.getInstance();

    public static class Production905Production extends Production
    {
        private Production905Production() {;} // Singleton
        private static Production905Production singletonInstance = null;
        public static final Production905Production getInstance() { if (singletonInstance == null) singletonInstance = new Production905Production(); return singletonInstance; }

        public String getDescription() { return "<WriteStmt> ::= twrite:T_WRITE tlparen:T_LPAREN IoControlSpecList:<IoControlSpecList> trparen:T_RPAREN teos:T_EOS  :production905"; }

        /**
         * Reduce by <WriteStmt> ::= twrite:T_WRITE tlparen:T_LPAREN IoControlSpecList:<IoControlSpecList> trparen:T_RPAREN teos:T_EOS  :production905
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <WriteStmt> ::= twrite:T_WRITE tlparen:T_LPAREN IoControlSpecList:<IoControlSpecList> trparen:T_RPAREN teos:T_EOS  :production905
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTIoControlSpecListNode v3 = (ASTIoControlSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTWriteStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.WriteStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("twrite"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("IoControlSpecList"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <WriteStmt> ::= twrite:T_WRITE tlparen:T_LPAREN IoControlSpecList:<IoControlSpecList> trparen:T_RPAREN teos:T_EOS  :production905
         */
        protected ASTWriteStmtNode userAction(Token v1, Token v2, ASTIoControlSpecListNode v3, Token v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production905Production PRODUCTION905 = Production905Production.getInstance();

    public static class Production906Production extends Production
    {
        private Production906Production() {;} // Singleton
        private static Production906Production singletonInstance = null;
        public static final Production906Production getInstance() { if (singletonInstance == null) singletonInstance = new Production906Production(); return singletonInstance; }

        public String getDescription() { return "<WriteStmt> ::= LblDef:<LblDef> twrite:T_WRITE tlparen:T_LPAREN IoControlSpecList:<IoControlSpecList> trparen:T_RPAREN teos:T_EOS  :production906"; }

        /**
         * Reduce by <WriteStmt> ::= LblDef:<LblDef> twrite:T_WRITE tlparen:T_LPAREN IoControlSpecList:<IoControlSpecList> trparen:T_RPAREN teos:T_EOS  :production906
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <WriteStmt> ::= LblDef:<LblDef> twrite:T_WRITE tlparen:T_LPAREN IoControlSpecList:<IoControlSpecList> trparen:T_RPAREN teos:T_EOS  :production906
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTIoControlSpecListNode v4 = (ASTIoControlSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTWriteStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.WriteStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("twrite"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("IoControlSpecList"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <WriteStmt> ::= LblDef:<LblDef> twrite:T_WRITE tlparen:T_LPAREN IoControlSpecList:<IoControlSpecList> trparen:T_RPAREN teos:T_EOS  :production906
         */
        protected ASTWriteStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, ASTIoControlSpecListNode v4, Token v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production906Production PRODUCTION906 = Production906Production.getInstance();

    public static class Production907Production extends Production
    {
        private Production907Production() {;} // Singleton
        private static Production907Production singletonInstance = null;
        public static final Production907Production getInstance() { if (singletonInstance == null) singletonInstance = new Production907Production(); return singletonInstance; }

        public String getDescription() { return "<PrintStmt> ::= tprint:T_PRINT FormatIdentifier:<FormatIdentifier> tcomma:T_COMMA OutputItemList:<OutputItemList> teos:T_EOS  :production907"; }

        /**
         * Reduce by <PrintStmt> ::= tprint:T_PRINT FormatIdentifier:<FormatIdentifier> tcomma:T_COMMA OutputItemList:<OutputItemList> teos:T_EOS  :production907
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PrintStmt> ::= tprint:T_PRINT FormatIdentifier:<FormatIdentifier> tcomma:T_COMMA OutputItemList:<OutputItemList> teos:T_EOS  :production907
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTOutputItemListNode v4 = (ASTOutputItemListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFormatIdentifierNode v2 = (ASTFormatIdentifierNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPrintStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.PrintStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tprint"))
                return 0;
            else
                if (name.equals("FormatIdentifier"))
                    return 1;
                else
                    if (name.equals("tcomma"))
                        return 2;
                    else
                        if (name.equals("OutputItemList"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PrintStmt> ::= tprint:T_PRINT FormatIdentifier:<FormatIdentifier> tcomma:T_COMMA OutputItemList:<OutputItemList> teos:T_EOS  :production907
         */
        protected ASTPrintStmtNode userAction(Token v1, ASTFormatIdentifierNode v2, Token v3, ASTOutputItemListNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production907Production PRODUCTION907 = Production907Production.getInstance();

    public static class Production908Production extends Production
    {
        private Production908Production() {;} // Singleton
        private static Production908Production singletonInstance = null;
        public static final Production908Production getInstance() { if (singletonInstance == null) singletonInstance = new Production908Production(); return singletonInstance; }

        public String getDescription() { return "<PrintStmt> ::= LblDef:<LblDef> tprint:T_PRINT FormatIdentifier:<FormatIdentifier> tcomma:T_COMMA OutputItemList:<OutputItemList> teos:T_EOS  :production908"; }

        /**
         * Reduce by <PrintStmt> ::= LblDef:<LblDef> tprint:T_PRINT FormatIdentifier:<FormatIdentifier> tcomma:T_COMMA OutputItemList:<OutputItemList> teos:T_EOS  :production908
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PrintStmt> ::= LblDef:<LblDef> tprint:T_PRINT FormatIdentifier:<FormatIdentifier> tcomma:T_COMMA OutputItemList:<OutputItemList> teos:T_EOS  :production908
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTOutputItemListNode v5 = (ASTOutputItemListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFormatIdentifierNode v3 = (ASTFormatIdentifierNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPrintStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.PrintStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tprint"))
                    return 1;
                else
                    if (name.equals("FormatIdentifier"))
                        return 2;
                    else
                        if (name.equals("tcomma"))
                            return 3;
                        else
                            if (name.equals("OutputItemList"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PrintStmt> ::= LblDef:<LblDef> tprint:T_PRINT FormatIdentifier:<FormatIdentifier> tcomma:T_COMMA OutputItemList:<OutputItemList> teos:T_EOS  :production908
         */
        protected ASTPrintStmtNode userAction(ASTLblDefNode v1, Token v2, ASTFormatIdentifierNode v3, Token v4, ASTOutputItemListNode v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production908Production PRODUCTION908 = Production908Production.getInstance();

    public static class Production909Production extends Production
    {
        private Production909Production() {;} // Singleton
        private static Production909Production singletonInstance = null;
        public static final Production909Production getInstance() { if (singletonInstance == null) singletonInstance = new Production909Production(); return singletonInstance; }

        public String getDescription() { return "<PrintStmt> ::= tprint:T_PRINT FormatIdentifier:<FormatIdentifier> teos:T_EOS  :production909"; }

        /**
         * Reduce by <PrintStmt> ::= tprint:T_PRINT FormatIdentifier:<FormatIdentifier> teos:T_EOS  :production909
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PrintStmt> ::= tprint:T_PRINT FormatIdentifier:<FormatIdentifier> teos:T_EOS  :production909
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFormatIdentifierNode v2 = (ASTFormatIdentifierNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPrintStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.PrintStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tprint"))
                return 0;
            else
                if (name.equals("FormatIdentifier"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PrintStmt> ::= tprint:T_PRINT FormatIdentifier:<FormatIdentifier> teos:T_EOS  :production909
         */
        protected ASTPrintStmtNode userAction(Token v1, ASTFormatIdentifierNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production909Production PRODUCTION909 = Production909Production.getInstance();

    public static class Production910Production extends Production
    {
        private Production910Production() {;} // Singleton
        private static Production910Production singletonInstance = null;
        public static final Production910Production getInstance() { if (singletonInstance == null) singletonInstance = new Production910Production(); return singletonInstance; }

        public String getDescription() { return "<PrintStmt> ::= LblDef:<LblDef> tprint:T_PRINT FormatIdentifier:<FormatIdentifier> teos:T_EOS  :production910"; }

        /**
         * Reduce by <PrintStmt> ::= LblDef:<LblDef> tprint:T_PRINT FormatIdentifier:<FormatIdentifier> teos:T_EOS  :production910
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PrintStmt> ::= LblDef:<LblDef> tprint:T_PRINT FormatIdentifier:<FormatIdentifier> teos:T_EOS  :production910
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFormatIdentifierNode v3 = (ASTFormatIdentifierNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPrintStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.PrintStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tprint"))
                    return 1;
                else
                    if (name.equals("FormatIdentifier"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PrintStmt> ::= LblDef:<LblDef> tprint:T_PRINT FormatIdentifier:<FormatIdentifier> teos:T_EOS  :production910
         */
        protected ASTPrintStmtNode userAction(ASTLblDefNode v1, Token v2, ASTFormatIdentifierNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production910Production PRODUCTION910 = Production910Production.getInstance();

    public static class XIoControlSpecListProduction extends Production
    {
        private XIoControlSpecListProduction() {;} // Singleton
        private static XIoControlSpecListProduction singletonInstance = null;
        public static final XIoControlSpecListProduction getInstance() { if (singletonInstance == null) singletonInstance = new XIoControlSpecListProduction(); return singletonInstance; }

        public String getDescription() { return "<IoControlSpecList> ::= UnitIdentifier:<UnitIdentifier>  :xIoControlSpecList"; }

        /**
         * Reduce by <IoControlSpecList> ::= UnitIdentifier:<UnitIdentifier>  :xIoControlSpecList
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <IoControlSpecList> ::= UnitIdentifier:<UnitIdentifier>  :xIoControlSpecList
            ASTUnitIdentifierNode v1 = (ASTUnitIdentifierNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTIoControlSpecListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.IoControlSpecListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("UnitIdentifier"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <IoControlSpecList> ::= UnitIdentifier:<UnitIdentifier>  :xIoControlSpecList
         */
        protected ASTIoControlSpecListNode userAction(ASTUnitIdentifierNode v1)
        {
            return null;
        }
    }
    public static final Productions.XIoControlSpecListProduction XIOCONTROLSPECLIST = XIoControlSpecListProduction.getInstance();

    public static class Production912Production extends Production
    {
        private Production912Production() {;} // Singleton
        private static Production912Production singletonInstance = null;
        public static final Production912Production getInstance() { if (singletonInstance == null) singletonInstance = new Production912Production(); return singletonInstance; }

        public String getDescription() { return "<IoControlSpecList> ::= UnitIdentifier:<UnitIdentifier> tcomma:T_COMMA FormatIdentifier:<FormatIdentifier>  :production912"; }

        /**
         * Reduce by <IoControlSpecList> ::= UnitIdentifier:<UnitIdentifier> tcomma:T_COMMA FormatIdentifier:<FormatIdentifier>  :production912
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <IoControlSpecList> ::= UnitIdentifier:<UnitIdentifier> tcomma:T_COMMA FormatIdentifier:<FormatIdentifier>  :production912
            ASTFormatIdentifierNode v3 = (ASTFormatIdentifierNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTUnitIdentifierNode v1 = (ASTUnitIdentifierNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTIoControlSpecListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.IoControlSpecListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("UnitIdentifier"))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("FormatIdentifier"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <IoControlSpecList> ::= UnitIdentifier:<UnitIdentifier> tcomma:T_COMMA FormatIdentifier:<FormatIdentifier>  :production912
         */
        protected ASTIoControlSpecListNode userAction(ASTUnitIdentifierNode v1, Token v2, ASTFormatIdentifierNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production912Production PRODUCTION912 = Production912Production.getInstance();

    public static class Production913Production extends Production
    {
        private Production913Production() {;} // Singleton
        private static Production913Production singletonInstance = null;
        public static final Production913Production getInstance() { if (singletonInstance == null) singletonInstance = new Production913Production(); return singletonInstance; }

        public String getDescription() { return "<IoControlSpecList> ::= UnitIdentifier:<UnitIdentifier> tcomma:T_COMMA IoControlSpec:<IoControlSpec>  :production913"; }

        /**
         * Reduce by <IoControlSpecList> ::= UnitIdentifier:<UnitIdentifier> tcomma:T_COMMA IoControlSpec:<IoControlSpec>  :production913
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <IoControlSpecList> ::= UnitIdentifier:<UnitIdentifier> tcomma:T_COMMA IoControlSpec:<IoControlSpec>  :production913
            ASTIoControlSpecNode v3 = (ASTIoControlSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTUnitIdentifierNode v1 = (ASTUnitIdentifierNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTIoControlSpecListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.IoControlSpecListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("UnitIdentifier"))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("IoControlSpec"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <IoControlSpecList> ::= UnitIdentifier:<UnitIdentifier> tcomma:T_COMMA IoControlSpec:<IoControlSpec>  :production913
         */
        protected ASTIoControlSpecListNode userAction(ASTUnitIdentifierNode v1, Token v2, ASTIoControlSpecNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production913Production PRODUCTION913 = Production913Production.getInstance();

    public static class Production914Production extends Production
    {
        private Production914Production() {;} // Singleton
        private static Production914Production singletonInstance = null;
        public static final Production914Production getInstance() { if (singletonInstance == null) singletonInstance = new Production914Production(); return singletonInstance; }

        public String getDescription() { return "<IoControlSpecList> ::= IoControlSpec:<IoControlSpec>  :production914"; }

        /**
         * Reduce by <IoControlSpecList> ::= IoControlSpec:<IoControlSpec>  :production914
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <IoControlSpecList> ::= IoControlSpec:<IoControlSpec>  :production914
            ASTIoControlSpecNode v1 = (ASTIoControlSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTIoControlSpecListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.IoControlSpecListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("IoControlSpec"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <IoControlSpecList> ::= IoControlSpec:<IoControlSpec>  :production914
         */
        protected ASTIoControlSpecListNode userAction(ASTIoControlSpecNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production914Production PRODUCTION914 = Production914Production.getInstance();

    public static class Production915Production extends Production
    {
        private Production915Production() {;} // Singleton
        private static Production915Production singletonInstance = null;
        public static final Production915Production getInstance() { if (singletonInstance == null) singletonInstance = new Production915Production(); return singletonInstance; }

        public String getDescription() { return "<IoControlSpecList> ::= @:<IoControlSpecList> tcomma:T_COMMA IoControlSpec:<IoControlSpec>  :production915"; }

        /**
         * Reduce by <IoControlSpecList> ::= @:<IoControlSpecList> tcomma:T_COMMA IoControlSpec:<IoControlSpec>  :production915
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <IoControlSpecList> ::= @:<IoControlSpecList> tcomma:T_COMMA IoControlSpec:<IoControlSpec>  :production915
            ASTIoControlSpecNode v3 = (ASTIoControlSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTIoControlSpecListNode v1 = (ASTIoControlSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTIoControlSpecListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.IoControlSpecListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("IoControlSpec"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <IoControlSpecList> ::= @:<IoControlSpecList> tcomma:T_COMMA IoControlSpec:<IoControlSpec>  :production915
         */
        protected ASTIoControlSpecListNode userAction(ASTIoControlSpecListNode v1, Token v2, ASTIoControlSpecNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production915Production PRODUCTION915 = Production915Production.getInstance();

    public static class Production916Production extends Production
    {
        private Production916Production() {;} // Singleton
        private static Production916Production singletonInstance = null;
        public static final Production916Production getInstance() { if (singletonInstance == null) singletonInstance = new Production916Production(); return singletonInstance; }

        public String getDescription() { return "<IoControlSpec> ::= tfmteq:T_FMTEQ FormatIdentifier:<FormatIdentifier>  :production916"; }

        /**
         * Reduce by <IoControlSpec> ::= tfmteq:T_FMTEQ FormatIdentifier:<FormatIdentifier>  :production916
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <IoControlSpec> ::= tfmteq:T_FMTEQ FormatIdentifier:<FormatIdentifier>  :production916
            ASTFormatIdentifierNode v2 = (ASTFormatIdentifierNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTIoControlSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.IoControlSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tfmteq"))
                return 0;
            else
                if (name.equals("FormatIdentifier"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <IoControlSpec> ::= tfmteq:T_FMTEQ FormatIdentifier:<FormatIdentifier>  :production916
         */
        protected ASTIoControlSpecNode userAction(Token v1, ASTFormatIdentifierNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production916Production PRODUCTION916 = Production916Production.getInstance();

    public static class Production917Production extends Production
    {
        private Production917Production() {;} // Singleton
        private static Production917Production singletonInstance = null;
        public static final Production917Production getInstance() { if (singletonInstance == null) singletonInstance = new Production917Production(); return singletonInstance; }

        public String getDescription() { return "<IoControlSpec> ::= tuniteq:T_UNITEQ UnitIdentifier:<UnitIdentifier>  :production917"; }

        /**
         * Reduce by <IoControlSpec> ::= tuniteq:T_UNITEQ UnitIdentifier:<UnitIdentifier>  :production917
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <IoControlSpec> ::= tuniteq:T_UNITEQ UnitIdentifier:<UnitIdentifier>  :production917
            ASTUnitIdentifierNode v2 = (ASTUnitIdentifierNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTIoControlSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.IoControlSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tuniteq"))
                return 0;
            else
                if (name.equals("UnitIdentifier"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <IoControlSpec> ::= tuniteq:T_UNITEQ UnitIdentifier:<UnitIdentifier>  :production917
         */
        protected ASTIoControlSpecNode userAction(Token v1, ASTUnitIdentifierNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production917Production PRODUCTION917 = Production917Production.getInstance();

    public static class Production918Production extends Production
    {
        private Production918Production() {;} // Singleton
        private static Production918Production singletonInstance = null;
        public static final Production918Production getInstance() { if (singletonInstance == null) singletonInstance = new Production918Production(); return singletonInstance; }

        public String getDescription() { return "<IoControlSpec> ::= treceq:T_RECEQ Expr:<Expr>  :production918"; }

        /**
         * Reduce by <IoControlSpec> ::= treceq:T_RECEQ Expr:<Expr>  :production918
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <IoControlSpec> ::= treceq:T_RECEQ Expr:<Expr>  :production918
            ASTExprNode v2 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTIoControlSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.IoControlSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("treceq"))
                return 0;
            else
                if (name.equals("Expr"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <IoControlSpec> ::= treceq:T_RECEQ Expr:<Expr>  :production918
         */
        protected ASTIoControlSpecNode userAction(Token v1, ASTExprNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production918Production PRODUCTION918 = Production918Production.getInstance();

    public static class Production919Production extends Production
    {
        private Production919Production() {;} // Singleton
        private static Production919Production singletonInstance = null;
        public static final Production919Production getInstance() { if (singletonInstance == null) singletonInstance = new Production919Production(); return singletonInstance; }

        public String getDescription() { return "<IoControlSpec> ::= tendeq:T_ENDEQ LblRef:<LblRef>  :production919"; }

        /**
         * Reduce by <IoControlSpec> ::= tendeq:T_ENDEQ LblRef:<LblRef>  :production919
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <IoControlSpec> ::= tendeq:T_ENDEQ LblRef:<LblRef>  :production919
            ASTLblRefNode v2 = (ASTLblRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTIoControlSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.IoControlSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tendeq"))
                return 0;
            else
                if (name.equals("LblRef"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <IoControlSpec> ::= tendeq:T_ENDEQ LblRef:<LblRef>  :production919
         */
        protected ASTIoControlSpecNode userAction(Token v1, ASTLblRefNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production919Production PRODUCTION919 = Production919Production.getInstance();

    public static class Production920Production extends Production
    {
        private Production920Production() {;} // Singleton
        private static Production920Production singletonInstance = null;
        public static final Production920Production getInstance() { if (singletonInstance == null) singletonInstance = new Production920Production(); return singletonInstance; }

        public String getDescription() { return "<IoControlSpec> ::= terreq:T_ERREQ LblRef:<LblRef>  :production920"; }

        /**
         * Reduce by <IoControlSpec> ::= terreq:T_ERREQ LblRef:<LblRef>  :production920
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <IoControlSpec> ::= terreq:T_ERREQ LblRef:<LblRef>  :production920
            ASTLblRefNode v2 = (ASTLblRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTIoControlSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.IoControlSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("terreq"))
                return 0;
            else
                if (name.equals("LblRef"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <IoControlSpec> ::= terreq:T_ERREQ LblRef:<LblRef>  :production920
         */
        protected ASTIoControlSpecNode userAction(Token v1, ASTLblRefNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production920Production PRODUCTION920 = Production920Production.getInstance();

    public static class Production921Production extends Production
    {
        private Production921Production() {;} // Singleton
        private static Production921Production singletonInstance = null;
        public static final Production921Production getInstance() { if (singletonInstance == null) singletonInstance = new Production921Production(); return singletonInstance; }

        public String getDescription() { return "<IoControlSpec> ::= tiostateq:T_IOSTATEQ ScalarVariable:<ScalarVariable>  :production921"; }

        /**
         * Reduce by <IoControlSpec> ::= tiostateq:T_IOSTATEQ ScalarVariable:<ScalarVariable>  :production921
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <IoControlSpec> ::= tiostateq:T_IOSTATEQ ScalarVariable:<ScalarVariable>  :production921
            ASTScalarVariableNode v2 = (ASTScalarVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTIoControlSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.IoControlSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tiostateq"))
                return 0;
            else
                if (name.equals("ScalarVariable"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <IoControlSpec> ::= tiostateq:T_IOSTATEQ ScalarVariable:<ScalarVariable>  :production921
         */
        protected ASTIoControlSpecNode userAction(Token v1, ASTScalarVariableNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production921Production PRODUCTION921 = Production921Production.getInstance();

    public static class Production922Production extends Production
    {
        private Production922Production() {;} // Singleton
        private static Production922Production singletonInstance = null;
        public static final Production922Production getInstance() { if (singletonInstance == null) singletonInstance = new Production922Production(); return singletonInstance; }

        public String getDescription() { return "<IoControlSpec> ::= tnmleq:T_NMLEQ NamelistGroupName:<NamelistGroupName>  :production922"; }

        /**
         * Reduce by <IoControlSpec> ::= tnmleq:T_NMLEQ NamelistGroupName:<NamelistGroupName>  :production922
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <IoControlSpec> ::= tnmleq:T_NMLEQ NamelistGroupName:<NamelistGroupName>  :production922
            ASTNamelistGroupNameNode v2 = (ASTNamelistGroupNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTIoControlSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.IoControlSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tnmleq"))
                return 0;
            else
                if (name.equals("NamelistGroupName"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <IoControlSpec> ::= tnmleq:T_NMLEQ NamelistGroupName:<NamelistGroupName>  :production922
         */
        protected ASTIoControlSpecNode userAction(Token v1, ASTNamelistGroupNameNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production922Production PRODUCTION922 = Production922Production.getInstance();

    public static class Production923Production extends Production
    {
        private Production923Production() {;} // Singleton
        private static Production923Production singletonInstance = null;
        public static final Production923Production getInstance() { if (singletonInstance == null) singletonInstance = new Production923Production(); return singletonInstance; }

        public String getDescription() { return "<IoControlSpec> ::= tadvanceeq:T_ADVANCEEQ CExpr:<CExpr>  :production923"; }

        /**
         * Reduce by <IoControlSpec> ::= tadvanceeq:T_ADVANCEEQ CExpr:<CExpr>  :production923
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <IoControlSpec> ::= tadvanceeq:T_ADVANCEEQ CExpr:<CExpr>  :production923
            ASTCExprNode v2 = (ASTCExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTIoControlSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.IoControlSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tadvanceeq"))
                return 0;
            else
                if (name.equals("CExpr"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <IoControlSpec> ::= tadvanceeq:T_ADVANCEEQ CExpr:<CExpr>  :production923
         */
        protected ASTIoControlSpecNode userAction(Token v1, ASTCExprNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production923Production PRODUCTION923 = Production923Production.getInstance();

    public static class Production924Production extends Production
    {
        private Production924Production() {;} // Singleton
        private static Production924Production singletonInstance = null;
        public static final Production924Production getInstance() { if (singletonInstance == null) singletonInstance = new Production924Production(); return singletonInstance; }

        public String getDescription() { return "<IoControlSpec> ::= tsizeeq:T_SIZEEQ Variable:<Variable>  :production924"; }

        /**
         * Reduce by <IoControlSpec> ::= tsizeeq:T_SIZEEQ Variable:<Variable>  :production924
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <IoControlSpec> ::= tsizeeq:T_SIZEEQ Variable:<Variable>  :production924
            ASTVariableNode v2 = (ASTVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTIoControlSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.IoControlSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tsizeeq"))
                return 0;
            else
                if (name.equals("Variable"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <IoControlSpec> ::= tsizeeq:T_SIZEEQ Variable:<Variable>  :production924
         */
        protected ASTIoControlSpecNode userAction(Token v1, ASTVariableNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production924Production PRODUCTION924 = Production924Production.getInstance();

    public static class Production925Production extends Production
    {
        private Production925Production() {;} // Singleton
        private static Production925Production singletonInstance = null;
        public static final Production925Production getInstance() { if (singletonInstance == null) singletonInstance = new Production925Production(); return singletonInstance; }

        public String getDescription() { return "<IoControlSpec> ::= teoreq:T_EOREQ LblRef:<LblRef>  :production925"; }

        /**
         * Reduce by <IoControlSpec> ::= teoreq:T_EOREQ LblRef:<LblRef>  :production925
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <IoControlSpec> ::= teoreq:T_EOREQ LblRef:<LblRef>  :production925
            ASTLblRefNode v2 = (ASTLblRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTIoControlSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.IoControlSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("teoreq"))
                return 0;
            else
                if (name.equals("LblRef"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <IoControlSpec> ::= teoreq:T_EOREQ LblRef:<LblRef>  :production925
         */
        protected ASTIoControlSpecNode userAction(Token v1, ASTLblRefNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production925Production PRODUCTION925 = Production925Production.getInstance();

    public static class Production926Production extends Production
    {
        private Production926Production() {;} // Singleton
        private static Production926Production singletonInstance = null;
        public static final Production926Production getInstance() { if (singletonInstance == null) singletonInstance = new Production926Production(); return singletonInstance; }

        public String getDescription() { return "<FormatIdentifier> ::= LblRef:<LblRef>  :production926"; }

        /**
         * Reduce by <FormatIdentifier> ::= LblRef:<LblRef>  :production926
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FormatIdentifier> ::= LblRef:<LblRef>  :production926
            ASTLblRefNode v1 = (ASTLblRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFormatIdentifierNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.FormatIdentifierNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblRef"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FormatIdentifier> ::= LblRef:<LblRef>  :production926
         */
        protected ASTFormatIdentifierNode userAction(ASTLblRefNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production926Production PRODUCTION926 = Production926Production.getInstance();

    public static class Production927Production extends Production
    {
        private Production927Production() {;} // Singleton
        private static Production927Production singletonInstance = null;
        public static final Production927Production getInstance() { if (singletonInstance == null) singletonInstance = new Production927Production(); return singletonInstance; }

        public String getDescription() { return "<FormatIdentifier> ::= CExpr:<CExpr>  :production927"; }

        /**
         * Reduce by <FormatIdentifier> ::= CExpr:<CExpr>  :production927
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FormatIdentifier> ::= CExpr:<CExpr>  :production927
            ASTCExprNode v1 = (ASTCExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFormatIdentifierNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.FormatIdentifierNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("CExpr"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FormatIdentifier> ::= CExpr:<CExpr>  :production927
         */
        protected ASTFormatIdentifierNode userAction(ASTCExprNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production927Production PRODUCTION927 = Production927Production.getInstance();

    public static class Production928Production extends Production
    {
        private Production928Production() {;} // Singleton
        private static Production928Production singletonInstance = null;
        public static final Production928Production getInstance() { if (singletonInstance == null) singletonInstance = new Production928Production(); return singletonInstance; }

        public String getDescription() { return "<FormatIdentifier> ::= tasterisk:T_ASTERISK  :production928"; }

        /**
         * Reduce by <FormatIdentifier> ::= tasterisk:T_ASTERISK  :production928
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FormatIdentifier> ::= tasterisk:T_ASTERISK  :production928
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFormatIdentifierNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.FormatIdentifierNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tasterisk"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FormatIdentifier> ::= tasterisk:T_ASTERISK  :production928
         */
        protected ASTFormatIdentifierNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production928Production PRODUCTION928 = Production928Production.getInstance();

    public static class Production929Production extends Production
    {
        private Production929Production() {;} // Singleton
        private static Production929Production singletonInstance = null;
        public static final Production929Production getInstance() { if (singletonInstance == null) singletonInstance = new Production929Production(); return singletonInstance; }

        public String getDescription() { return "<InputItemList> ::= InputItem:<InputItem>  :production929"; }

        /**
         * Reduce by <InputItemList> ::= InputItem:<InputItem>  :production929
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InputItemList> ::= InputItem:<InputItem>  :production929
            ASTInputItemNode v1 = (ASTInputItemNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInputItemListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.InputItemListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("InputItem"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InputItemList> ::= InputItem:<InputItem>  :production929
         */
        protected ASTInputItemListNode userAction(ASTInputItemNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production929Production PRODUCTION929 = Production929Production.getInstance();

    public static class Production930Production extends Production
    {
        private Production930Production() {;} // Singleton
        private static Production930Production singletonInstance = null;
        public static final Production930Production getInstance() { if (singletonInstance == null) singletonInstance = new Production930Production(); return singletonInstance; }

        public String getDescription() { return "<InputItemList> ::= @:<InputItemList> tcomma:T_COMMA InputItem:<InputItem>  :production930"; }

        /**
         * Reduce by <InputItemList> ::= @:<InputItemList> tcomma:T_COMMA InputItem:<InputItem>  :production930
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InputItemList> ::= @:<InputItemList> tcomma:T_COMMA InputItem:<InputItem>  :production930
            ASTInputItemNode v3 = (ASTInputItemNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTInputItemListNode v1 = (ASTInputItemListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInputItemListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.InputItemListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("InputItem"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InputItemList> ::= @:<InputItemList> tcomma:T_COMMA InputItem:<InputItem>  :production930
         */
        protected ASTInputItemListNode userAction(ASTInputItemListNode v1, Token v2, ASTInputItemNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production930Production PRODUCTION930 = Production930Production.getInstance();

    public static class Production931Production extends Production
    {
        private Production931Production() {;} // Singleton
        private static Production931Production singletonInstance = null;
        public static final Production931Production getInstance() { if (singletonInstance == null) singletonInstance = new Production931Production(); return singletonInstance; }

        public String getDescription() { return "<InputItem> ::= Variable:<Variable>  :production931"; }

        /**
         * Reduce by <InputItem> ::= Variable:<Variable>  :production931
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InputItem> ::= Variable:<Variable>  :production931
            ASTVariableNode v1 = (ASTVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInputItemNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.InputItemNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Variable"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InputItem> ::= Variable:<Variable>  :production931
         */
        protected ASTInputItemNode userAction(ASTVariableNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production931Production PRODUCTION931 = Production931Production.getInstance();

    public static class Production932Production extends Production
    {
        private Production932Production() {;} // Singleton
        private static Production932Production singletonInstance = null;
        public static final Production932Production getInstance() { if (singletonInstance == null) singletonInstance = new Production932Production(); return singletonInstance; }

        public String getDescription() { return "<InputItem> ::= InputImpliedDo:<InputImpliedDo>  :production932"; }

        /**
         * Reduce by <InputItem> ::= InputImpliedDo:<InputImpliedDo>  :production932
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InputItem> ::= InputImpliedDo:<InputImpliedDo>  :production932
            ASTInputImpliedDoNode v1 = (ASTInputImpliedDoNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInputItemNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.InputItemNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("InputImpliedDo"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InputItem> ::= InputImpliedDo:<InputImpliedDo>  :production932
         */
        protected ASTInputItemNode userAction(ASTInputImpliedDoNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production932Production PRODUCTION932 = Production932Production.getInstance();

    public static class Production933Production extends Production
    {
        private Production933Production() {;} // Singleton
        private static Production933Production singletonInstance = null;
        public static final Production933Production getInstance() { if (singletonInstance == null) singletonInstance = new Production933Production(); return singletonInstance; }

        public String getDescription() { return "<OutputItemList> ::= Expr:<Expr>  :production933"; }

        /**
         * Reduce by <OutputItemList> ::= Expr:<Expr>  :production933
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <OutputItemList> ::= Expr:<Expr>  :production933
            ASTExprNode v1 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTOutputItemListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.OutputItemListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Expr"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <OutputItemList> ::= Expr:<Expr>  :production933
         */
        protected ASTOutputItemListNode userAction(ASTExprNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production933Production PRODUCTION933 = Production933Production.getInstance();

    public static class Production934Production extends Production
    {
        private Production934Production() {;} // Singleton
        private static Production934Production singletonInstance = null;
        public static final Production934Production getInstance() { if (singletonInstance == null) singletonInstance = new Production934Production(); return singletonInstance; }

        public String getDescription() { return "<OutputItemList> ::= OutputItemList1:<OutputItemList1>  :production934"; }

        /**
         * Reduce by <OutputItemList> ::= OutputItemList1:<OutputItemList1>  :production934
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <OutputItemList> ::= OutputItemList1:<OutputItemList1>  :production934
            ASTOutputItemList1Node v1 = (ASTOutputItemList1Node)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTOutputItemListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.OutputItemListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("OutputItemList1"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <OutputItemList> ::= OutputItemList1:<OutputItemList1>  :production934
         */
        protected ASTOutputItemListNode userAction(ASTOutputItemList1Node v1)
        {
            return null;
        }
    }
    public static final Productions.Production934Production PRODUCTION934 = Production934Production.getInstance();

    public static class Production935Production extends Production
    {
        private Production935Production() {;} // Singleton
        private static Production935Production singletonInstance = null;
        public static final Production935Production getInstance() { if (singletonInstance == null) singletonInstance = new Production935Production(); return singletonInstance; }

        public String getDescription() { return "<OutputItemList1> ::= Expr:<Expr> tcomma:T_COMMA Expr2:<Expr>  :production935"; }

        /**
         * Reduce by <OutputItemList1> ::= Expr:<Expr> tcomma:T_COMMA Expr2:<Expr>  :production935
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <OutputItemList1> ::= Expr:<Expr> tcomma:T_COMMA Expr2:<Expr>  :production935
            ASTExprNode v3 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v1 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTOutputItemList1Node userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.OutputItemList1Nonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Expr"))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("Expr2"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <OutputItemList1> ::= Expr:<Expr> tcomma:T_COMMA Expr2:<Expr>  :production935
         */
        protected ASTOutputItemList1Node userAction(ASTExprNode v1, Token v2, ASTExprNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production935Production PRODUCTION935 = Production935Production.getInstance();

    public static class Production936Production extends Production
    {
        private Production936Production() {;} // Singleton
        private static Production936Production singletonInstance = null;
        public static final Production936Production getInstance() { if (singletonInstance == null) singletonInstance = new Production936Production(); return singletonInstance; }

        public String getDescription() { return "<OutputItemList1> ::= Expr:<Expr> tcomma:T_COMMA OutputImpliedDo:<OutputImpliedDo>  :production936"; }

        /**
         * Reduce by <OutputItemList1> ::= Expr:<Expr> tcomma:T_COMMA OutputImpliedDo:<OutputImpliedDo>  :production936
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <OutputItemList1> ::= Expr:<Expr> tcomma:T_COMMA OutputImpliedDo:<OutputImpliedDo>  :production936
            ASTOutputImpliedDoNode v3 = (ASTOutputImpliedDoNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v1 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTOutputItemList1Node userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.OutputItemList1Nonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Expr"))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("OutputImpliedDo"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <OutputItemList1> ::= Expr:<Expr> tcomma:T_COMMA OutputImpliedDo:<OutputImpliedDo>  :production936
         */
        protected ASTOutputItemList1Node userAction(ASTExprNode v1, Token v2, ASTOutputImpliedDoNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production936Production PRODUCTION936 = Production936Production.getInstance();

    public static class Production937Production extends Production
    {
        private Production937Production() {;} // Singleton
        private static Production937Production singletonInstance = null;
        public static final Production937Production getInstance() { if (singletonInstance == null) singletonInstance = new Production937Production(); return singletonInstance; }

        public String getDescription() { return "<OutputItemList1> ::= OutputImpliedDo:<OutputImpliedDo>  :production937"; }

        /**
         * Reduce by <OutputItemList1> ::= OutputImpliedDo:<OutputImpliedDo>  :production937
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <OutputItemList1> ::= OutputImpliedDo:<OutputImpliedDo>  :production937
            ASTOutputImpliedDoNode v1 = (ASTOutputImpliedDoNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTOutputItemList1Node userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.OutputItemList1Nonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("OutputImpliedDo"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <OutputItemList1> ::= OutputImpliedDo:<OutputImpliedDo>  :production937
         */
        protected ASTOutputItemList1Node userAction(ASTOutputImpliedDoNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production937Production PRODUCTION937 = Production937Production.getInstance();

    public static class Production938Production extends Production
    {
        private Production938Production() {;} // Singleton
        private static Production938Production singletonInstance = null;
        public static final Production938Production getInstance() { if (singletonInstance == null) singletonInstance = new Production938Production(); return singletonInstance; }

        public String getDescription() { return "<OutputItemList1> ::= @:<OutputItemList1> tcomma:T_COMMA Expr:<Expr>  :production938"; }

        /**
         * Reduce by <OutputItemList1> ::= @:<OutputItemList1> tcomma:T_COMMA Expr:<Expr>  :production938
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <OutputItemList1> ::= @:<OutputItemList1> tcomma:T_COMMA Expr:<Expr>  :production938
            ASTExprNode v3 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTOutputItemList1Node v1 = (ASTOutputItemList1Node)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTOutputItemList1Node userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.OutputItemList1Nonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("Expr"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <OutputItemList1> ::= @:<OutputItemList1> tcomma:T_COMMA Expr:<Expr>  :production938
         */
        protected ASTOutputItemList1Node userAction(ASTOutputItemList1Node v1, Token v2, ASTExprNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production938Production PRODUCTION938 = Production938Production.getInstance();

    public static class Production939Production extends Production
    {
        private Production939Production() {;} // Singleton
        private static Production939Production singletonInstance = null;
        public static final Production939Production getInstance() { if (singletonInstance == null) singletonInstance = new Production939Production(); return singletonInstance; }

        public String getDescription() { return "<OutputItemList1> ::= @:<OutputItemList1> tcomma:T_COMMA OutputImpliedDo:<OutputImpliedDo>  :production939"; }

        /**
         * Reduce by <OutputItemList1> ::= @:<OutputItemList1> tcomma:T_COMMA OutputImpliedDo:<OutputImpliedDo>  :production939
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <OutputItemList1> ::= @:<OutputItemList1> tcomma:T_COMMA OutputImpliedDo:<OutputImpliedDo>  :production939
            ASTOutputImpliedDoNode v3 = (ASTOutputImpliedDoNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTOutputItemList1Node v1 = (ASTOutputItemList1Node)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTOutputItemList1Node userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.OutputItemList1Nonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("OutputImpliedDo"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <OutputItemList1> ::= @:<OutputItemList1> tcomma:T_COMMA OutputImpliedDo:<OutputImpliedDo>  :production939
         */
        protected ASTOutputItemList1Node userAction(ASTOutputItemList1Node v1, Token v2, ASTOutputImpliedDoNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production939Production PRODUCTION939 = Production939Production.getInstance();

    public static class Production940Production extends Production
    {
        private Production940Production() {;} // Singleton
        private static Production940Production singletonInstance = null;
        public static final Production940Production getInstance() { if (singletonInstance == null) singletonInstance = new Production940Production(); return singletonInstance; }

        public String getDescription() { return "<InputImpliedDo> ::= tlparen:T_LPAREN InputItemList:<InputItemList> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr:<Expr> tcomma2:T_COMMA Expr2:<Expr> trparen:T_RPAREN  :production940"; }

        /**
         * Reduce by <InputImpliedDo> ::= tlparen:T_LPAREN InputItemList:<InputItemList> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr:<Expr> tcomma2:T_COMMA Expr2:<Expr> trparen:T_RPAREN  :production940
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InputImpliedDo> ::= tlparen:T_LPAREN InputItemList:<InputItemList> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr:<Expr> tcomma2:T_COMMA Expr2:<Expr> trparen:T_RPAREN  :production940
            Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v8 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v6 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTImpliedDoVariableNode v4 = (ASTImpliedDoVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTInputItemListNode v2 = (ASTInputItemListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInputImpliedDoNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8, v9);

            // The production has 9 symbols on its RHS
            parser.reduce(Nonterminal.InputImpliedDoNonterminal.getInstance(), 9, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("InputItemList"))
                    return 1;
                else
                    if (name.equals("tcomma"))
                        return 2;
                    else
                        if (name.equals("ImpliedDoVariable"))
                            return 3;
                        else
                            if (name.equals("tequals"))
                                return 4;
                            else
                                if (name.equals("Expr"))
                                    return 5;
                                else
                                    if (name.equals("tcomma2"))
                                        return 6;
                                    else
                                        if (name.equals("Expr2"))
                                            return 7;
                                        else
                                            if (name.equals("trparen"))
                                                return 8;
                                            else
                                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InputImpliedDo> ::= tlparen:T_LPAREN InputItemList:<InputItemList> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr:<Expr> tcomma2:T_COMMA Expr2:<Expr> trparen:T_RPAREN  :production940
         */
        protected ASTInputImpliedDoNode userAction(Token v1, ASTInputItemListNode v2, Token v3, ASTImpliedDoVariableNode v4, Token v5, ASTExprNode v6, Token v7, ASTExprNode v8, Token v9)
        {
            return null;
        }
    }
    public static final Productions.Production940Production PRODUCTION940 = Production940Production.getInstance();

    public static class Production941Production extends Production
    {
        private Production941Production() {;} // Singleton
        private static Production941Production singletonInstance = null;
        public static final Production941Production getInstance() { if (singletonInstance == null) singletonInstance = new Production941Production(); return singletonInstance; }

        public String getDescription() { return "<InputImpliedDo> ::= tlparen:T_LPAREN InputItemList:<InputItemList> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr:<Expr> tcomma2:T_COMMA Expr2:<Expr> tcomma3:T_COMMA Expr3:<Expr> trparen:T_RPAREN  :production941"; }

        /**
         * Reduce by <InputImpliedDo> ::= tlparen:T_LPAREN InputItemList:<InputItemList> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr:<Expr> tcomma2:T_COMMA Expr2:<Expr> tcomma3:T_COMMA Expr3:<Expr> trparen:T_RPAREN  :production941
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InputImpliedDo> ::= tlparen:T_LPAREN InputItemList:<InputItemList> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr:<Expr> tcomma2:T_COMMA Expr2:<Expr> tcomma3:T_COMMA Expr3:<Expr> trparen:T_RPAREN  :production941
            Token v11 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v10 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v8 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v6 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTImpliedDoVariableNode v4 = (ASTImpliedDoVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTInputItemListNode v2 = (ASTInputItemListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInputImpliedDoNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);

            // The production has 11 symbols on its RHS
            parser.reduce(Nonterminal.InputImpliedDoNonterminal.getInstance(), 11, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("InputItemList"))
                    return 1;
                else
                    if (name.equals("tcomma"))
                        return 2;
                    else
                        if (name.equals("ImpliedDoVariable"))
                            return 3;
                        else
                            if (name.equals("tequals"))
                                return 4;
                            else
                                if (name.equals("Expr"))
                                    return 5;
                                else
                                    if (name.equals("tcomma2"))
                                        return 6;
                                    else
                                        if (name.equals("Expr2"))
                                            return 7;
                                        else
                                            if (name.equals("tcomma3"))
                                                return 8;
                                            else
                                                if (name.equals("Expr3"))
                                                    return 9;
                                                else
                                                    if (name.equals("trparen"))
                                                        return 10;
                                                    else
                                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InputImpliedDo> ::= tlparen:T_LPAREN InputItemList:<InputItemList> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr:<Expr> tcomma2:T_COMMA Expr2:<Expr> tcomma3:T_COMMA Expr3:<Expr> trparen:T_RPAREN  :production941
         */
        protected ASTInputImpliedDoNode userAction(Token v1, ASTInputItemListNode v2, Token v3, ASTImpliedDoVariableNode v4, Token v5, ASTExprNode v6, Token v7, ASTExprNode v8, Token v9, ASTExprNode v10, Token v11)
        {
            return null;
        }
    }
    public static final Productions.Production941Production PRODUCTION941 = Production941Production.getInstance();

    public static class Production942Production extends Production
    {
        private Production942Production() {;} // Singleton
        private static Production942Production singletonInstance = null;
        public static final Production942Production getInstance() { if (singletonInstance == null) singletonInstance = new Production942Production(); return singletonInstance; }

        public String getDescription() { return "<OutputImpliedDo> ::= tlparen:T_LPAREN Expr:<Expr> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr2:<Expr> tcomma2:T_COMMA Expr3:<Expr> trparen:T_RPAREN  :production942"; }

        /**
         * Reduce by <OutputImpliedDo> ::= tlparen:T_LPAREN Expr:<Expr> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr2:<Expr> tcomma2:T_COMMA Expr3:<Expr> trparen:T_RPAREN  :production942
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <OutputImpliedDo> ::= tlparen:T_LPAREN Expr:<Expr> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr2:<Expr> tcomma2:T_COMMA Expr3:<Expr> trparen:T_RPAREN  :production942
            Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v8 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v6 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTImpliedDoVariableNode v4 = (ASTImpliedDoVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v2 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTOutputImpliedDoNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8, v9);

            // The production has 9 symbols on its RHS
            parser.reduce(Nonterminal.OutputImpliedDoNonterminal.getInstance(), 9, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("Expr"))
                    return 1;
                else
                    if (name.equals("tcomma"))
                        return 2;
                    else
                        if (name.equals("ImpliedDoVariable"))
                            return 3;
                        else
                            if (name.equals("tequals"))
                                return 4;
                            else
                                if (name.equals("Expr2"))
                                    return 5;
                                else
                                    if (name.equals("tcomma2"))
                                        return 6;
                                    else
                                        if (name.equals("Expr3"))
                                            return 7;
                                        else
                                            if (name.equals("trparen"))
                                                return 8;
                                            else
                                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <OutputImpliedDo> ::= tlparen:T_LPAREN Expr:<Expr> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr2:<Expr> tcomma2:T_COMMA Expr3:<Expr> trparen:T_RPAREN  :production942
         */
        protected ASTOutputImpliedDoNode userAction(Token v1, ASTExprNode v2, Token v3, ASTImpliedDoVariableNode v4, Token v5, ASTExprNode v6, Token v7, ASTExprNode v8, Token v9)
        {
            return null;
        }
    }
    public static final Productions.Production942Production PRODUCTION942 = Production942Production.getInstance();

    public static class Production943Production extends Production
    {
        private Production943Production() {;} // Singleton
        private static Production943Production singletonInstance = null;
        public static final Production943Production getInstance() { if (singletonInstance == null) singletonInstance = new Production943Production(); return singletonInstance; }

        public String getDescription() { return "<OutputImpliedDo> ::= tlparen:T_LPAREN Expr:<Expr> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr2:<Expr> tcomma2:T_COMMA Expr3:<Expr> tcomma3:T_COMMA Expr4:<Expr> trparen:T_RPAREN  :production943"; }

        /**
         * Reduce by <OutputImpliedDo> ::= tlparen:T_LPAREN Expr:<Expr> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr2:<Expr> tcomma2:T_COMMA Expr3:<Expr> tcomma3:T_COMMA Expr4:<Expr> trparen:T_RPAREN  :production943
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <OutputImpliedDo> ::= tlparen:T_LPAREN Expr:<Expr> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr2:<Expr> tcomma2:T_COMMA Expr3:<Expr> tcomma3:T_COMMA Expr4:<Expr> trparen:T_RPAREN  :production943
            Token v11 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v10 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v8 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v6 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTImpliedDoVariableNode v4 = (ASTImpliedDoVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v2 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTOutputImpliedDoNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);

            // The production has 11 symbols on its RHS
            parser.reduce(Nonterminal.OutputImpliedDoNonterminal.getInstance(), 11, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("Expr"))
                    return 1;
                else
                    if (name.equals("tcomma"))
                        return 2;
                    else
                        if (name.equals("ImpliedDoVariable"))
                            return 3;
                        else
                            if (name.equals("tequals"))
                                return 4;
                            else
                                if (name.equals("Expr2"))
                                    return 5;
                                else
                                    if (name.equals("tcomma2"))
                                        return 6;
                                    else
                                        if (name.equals("Expr3"))
                                            return 7;
                                        else
                                            if (name.equals("tcomma3"))
                                                return 8;
                                            else
                                                if (name.equals("Expr4"))
                                                    return 9;
                                                else
                                                    if (name.equals("trparen"))
                                                        return 10;
                                                    else
                                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <OutputImpliedDo> ::= tlparen:T_LPAREN Expr:<Expr> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr2:<Expr> tcomma2:T_COMMA Expr3:<Expr> tcomma3:T_COMMA Expr4:<Expr> trparen:T_RPAREN  :production943
         */
        protected ASTOutputImpliedDoNode userAction(Token v1, ASTExprNode v2, Token v3, ASTImpliedDoVariableNode v4, Token v5, ASTExprNode v6, Token v7, ASTExprNode v8, Token v9, ASTExprNode v10, Token v11)
        {
            return null;
        }
    }
    public static final Productions.Production943Production PRODUCTION943 = Production943Production.getInstance();

    public static class Production944Production extends Production
    {
        private Production944Production() {;} // Singleton
        private static Production944Production singletonInstance = null;
        public static final Production944Production getInstance() { if (singletonInstance == null) singletonInstance = new Production944Production(); return singletonInstance; }

        public String getDescription() { return "<OutputImpliedDo> ::= tlparen:T_LPAREN OutputItemList1:<OutputItemList1> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr:<Expr> tcomma2:T_COMMA Expr2:<Expr> trparen:T_RPAREN  :production944"; }

        /**
         * Reduce by <OutputImpliedDo> ::= tlparen:T_LPAREN OutputItemList1:<OutputItemList1> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr:<Expr> tcomma2:T_COMMA Expr2:<Expr> trparen:T_RPAREN  :production944
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <OutputImpliedDo> ::= tlparen:T_LPAREN OutputItemList1:<OutputItemList1> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr:<Expr> tcomma2:T_COMMA Expr2:<Expr> trparen:T_RPAREN  :production944
            Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v8 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v6 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTImpliedDoVariableNode v4 = (ASTImpliedDoVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTOutputItemList1Node v2 = (ASTOutputItemList1Node)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTOutputImpliedDoNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8, v9);

            // The production has 9 symbols on its RHS
            parser.reduce(Nonterminal.OutputImpliedDoNonterminal.getInstance(), 9, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("OutputItemList1"))
                    return 1;
                else
                    if (name.equals("tcomma"))
                        return 2;
                    else
                        if (name.equals("ImpliedDoVariable"))
                            return 3;
                        else
                            if (name.equals("tequals"))
                                return 4;
                            else
                                if (name.equals("Expr"))
                                    return 5;
                                else
                                    if (name.equals("tcomma2"))
                                        return 6;
                                    else
                                        if (name.equals("Expr2"))
                                            return 7;
                                        else
                                            if (name.equals("trparen"))
                                                return 8;
                                            else
                                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <OutputImpliedDo> ::= tlparen:T_LPAREN OutputItemList1:<OutputItemList1> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr:<Expr> tcomma2:T_COMMA Expr2:<Expr> trparen:T_RPAREN  :production944
         */
        protected ASTOutputImpliedDoNode userAction(Token v1, ASTOutputItemList1Node v2, Token v3, ASTImpliedDoVariableNode v4, Token v5, ASTExprNode v6, Token v7, ASTExprNode v8, Token v9)
        {
            return null;
        }
    }
    public static final Productions.Production944Production PRODUCTION944 = Production944Production.getInstance();

    public static class Production945Production extends Production
    {
        private Production945Production() {;} // Singleton
        private static Production945Production singletonInstance = null;
        public static final Production945Production getInstance() { if (singletonInstance == null) singletonInstance = new Production945Production(); return singletonInstance; }

        public String getDescription() { return "<OutputImpliedDo> ::= tlparen:T_LPAREN OutputItemList1:<OutputItemList1> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr:<Expr> tcomma2:T_COMMA Expr2:<Expr> tcomma3:T_COMMA Expr3:<Expr> trparen:T_RPAREN  :production945"; }

        /**
         * Reduce by <OutputImpliedDo> ::= tlparen:T_LPAREN OutputItemList1:<OutputItemList1> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr:<Expr> tcomma2:T_COMMA Expr2:<Expr> tcomma3:T_COMMA Expr3:<Expr> trparen:T_RPAREN  :production945
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <OutputImpliedDo> ::= tlparen:T_LPAREN OutputItemList1:<OutputItemList1> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr:<Expr> tcomma2:T_COMMA Expr2:<Expr> tcomma3:T_COMMA Expr3:<Expr> trparen:T_RPAREN  :production945
            Token v11 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v10 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v8 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v6 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTImpliedDoVariableNode v4 = (ASTImpliedDoVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTOutputItemList1Node v2 = (ASTOutputItemList1Node)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTOutputImpliedDoNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);

            // The production has 11 symbols on its RHS
            parser.reduce(Nonterminal.OutputImpliedDoNonterminal.getInstance(), 11, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("OutputItemList1"))
                    return 1;
                else
                    if (name.equals("tcomma"))
                        return 2;
                    else
                        if (name.equals("ImpliedDoVariable"))
                            return 3;
                        else
                            if (name.equals("tequals"))
                                return 4;
                            else
                                if (name.equals("Expr"))
                                    return 5;
                                else
                                    if (name.equals("tcomma2"))
                                        return 6;
                                    else
                                        if (name.equals("Expr2"))
                                            return 7;
                                        else
                                            if (name.equals("tcomma3"))
                                                return 8;
                                            else
                                                if (name.equals("Expr3"))
                                                    return 9;
                                                else
                                                    if (name.equals("trparen"))
                                                        return 10;
                                                    else
                                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <OutputImpliedDo> ::= tlparen:T_LPAREN OutputItemList1:<OutputItemList1> tcomma:T_COMMA ImpliedDoVariable:<ImpliedDoVariable> tequals:T_EQUALS Expr:<Expr> tcomma2:T_COMMA Expr2:<Expr> tcomma3:T_COMMA Expr3:<Expr> trparen:T_RPAREN  :production945
         */
        protected ASTOutputImpliedDoNode userAction(Token v1, ASTOutputItemList1Node v2, Token v3, ASTImpliedDoVariableNode v4, Token v5, ASTExprNode v6, Token v7, ASTExprNode v8, Token v9, ASTExprNode v10, Token v11)
        {
            return null;
        }
    }
    public static final Productions.Production945Production PRODUCTION945 = Production945Production.getInstance();

    public static class Production946Production extends Production
    {
        private Production946Production() {;} // Singleton
        private static Production946Production singletonInstance = null;
        public static final Production946Production getInstance() { if (singletonInstance == null) singletonInstance = new Production946Production(); return singletonInstance; }

        public String getDescription() { return "<BackspaceStmt> ::= tbackspace:T_BACKSPACE UnitIdentifier:<UnitIdentifier> teos:T_EOS  :production946"; }

        /**
         * Reduce by <BackspaceStmt> ::= tbackspace:T_BACKSPACE UnitIdentifier:<UnitIdentifier> teos:T_EOS  :production946
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <BackspaceStmt> ::= tbackspace:T_BACKSPACE UnitIdentifier:<UnitIdentifier> teos:T_EOS  :production946
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTUnitIdentifierNode v2 = (ASTUnitIdentifierNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTBackspaceStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.BackspaceStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tbackspace"))
                return 0;
            else
                if (name.equals("UnitIdentifier"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <BackspaceStmt> ::= tbackspace:T_BACKSPACE UnitIdentifier:<UnitIdentifier> teos:T_EOS  :production946
         */
        protected ASTBackspaceStmtNode userAction(Token v1, ASTUnitIdentifierNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production946Production PRODUCTION946 = Production946Production.getInstance();

    public static class Production947Production extends Production
    {
        private Production947Production() {;} // Singleton
        private static Production947Production singletonInstance = null;
        public static final Production947Production getInstance() { if (singletonInstance == null) singletonInstance = new Production947Production(); return singletonInstance; }

        public String getDescription() { return "<BackspaceStmt> ::= LblDef:<LblDef> tbackspace:T_BACKSPACE UnitIdentifier:<UnitIdentifier> teos:T_EOS  :production947"; }

        /**
         * Reduce by <BackspaceStmt> ::= LblDef:<LblDef> tbackspace:T_BACKSPACE UnitIdentifier:<UnitIdentifier> teos:T_EOS  :production947
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <BackspaceStmt> ::= LblDef:<LblDef> tbackspace:T_BACKSPACE UnitIdentifier:<UnitIdentifier> teos:T_EOS  :production947
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTUnitIdentifierNode v3 = (ASTUnitIdentifierNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTBackspaceStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.BackspaceStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tbackspace"))
                    return 1;
                else
                    if (name.equals("UnitIdentifier"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <BackspaceStmt> ::= LblDef:<LblDef> tbackspace:T_BACKSPACE UnitIdentifier:<UnitIdentifier> teos:T_EOS  :production947
         */
        protected ASTBackspaceStmtNode userAction(ASTLblDefNode v1, Token v2, ASTUnitIdentifierNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production947Production PRODUCTION947 = Production947Production.getInstance();

    public static class Production948Production extends Production
    {
        private Production948Production() {;} // Singleton
        private static Production948Production singletonInstance = null;
        public static final Production948Production getInstance() { if (singletonInstance == null) singletonInstance = new Production948Production(); return singletonInstance; }

        public String getDescription() { return "<BackspaceStmt> ::= tbackspace:T_BACKSPACE tlparen:T_LPAREN PositionSpecList:<PositionSpecList> trparen:T_RPAREN teos:T_EOS  :production948"; }

        /**
         * Reduce by <BackspaceStmt> ::= tbackspace:T_BACKSPACE tlparen:T_LPAREN PositionSpecList:<PositionSpecList> trparen:T_RPAREN teos:T_EOS  :production948
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <BackspaceStmt> ::= tbackspace:T_BACKSPACE tlparen:T_LPAREN PositionSpecList:<PositionSpecList> trparen:T_RPAREN teos:T_EOS  :production948
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTPositionSpecListNode v3 = (ASTPositionSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTBackspaceStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.BackspaceStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tbackspace"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("PositionSpecList"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <BackspaceStmt> ::= tbackspace:T_BACKSPACE tlparen:T_LPAREN PositionSpecList:<PositionSpecList> trparen:T_RPAREN teos:T_EOS  :production948
         */
        protected ASTBackspaceStmtNode userAction(Token v1, Token v2, ASTPositionSpecListNode v3, Token v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production948Production PRODUCTION948 = Production948Production.getInstance();

    public static class Production949Production extends Production
    {
        private Production949Production() {;} // Singleton
        private static Production949Production singletonInstance = null;
        public static final Production949Production getInstance() { if (singletonInstance == null) singletonInstance = new Production949Production(); return singletonInstance; }

        public String getDescription() { return "<BackspaceStmt> ::= LblDef:<LblDef> tbackspace:T_BACKSPACE tlparen:T_LPAREN PositionSpecList:<PositionSpecList> trparen:T_RPAREN teos:T_EOS  :production949"; }

        /**
         * Reduce by <BackspaceStmt> ::= LblDef:<LblDef> tbackspace:T_BACKSPACE tlparen:T_LPAREN PositionSpecList:<PositionSpecList> trparen:T_RPAREN teos:T_EOS  :production949
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <BackspaceStmt> ::= LblDef:<LblDef> tbackspace:T_BACKSPACE tlparen:T_LPAREN PositionSpecList:<PositionSpecList> trparen:T_RPAREN teos:T_EOS  :production949
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTPositionSpecListNode v4 = (ASTPositionSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTBackspaceStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.BackspaceStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tbackspace"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("PositionSpecList"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <BackspaceStmt> ::= LblDef:<LblDef> tbackspace:T_BACKSPACE tlparen:T_LPAREN PositionSpecList:<PositionSpecList> trparen:T_RPAREN teos:T_EOS  :production949
         */
        protected ASTBackspaceStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, ASTPositionSpecListNode v4, Token v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production949Production PRODUCTION949 = Production949Production.getInstance();

    public static class Production950Production extends Production
    {
        private Production950Production() {;} // Singleton
        private static Production950Production singletonInstance = null;
        public static final Production950Production getInstance() { if (singletonInstance == null) singletonInstance = new Production950Production(); return singletonInstance; }

        public String getDescription() { return "<EndfileStmt> ::= tendfile:T_ENDFILE UnitIdentifier:<UnitIdentifier> teos:T_EOS  :production950"; }

        /**
         * Reduce by <EndfileStmt> ::= tendfile:T_ENDFILE UnitIdentifier:<UnitIdentifier> teos:T_EOS  :production950
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndfileStmt> ::= tendfile:T_ENDFILE UnitIdentifier:<UnitIdentifier> teos:T_EOS  :production950
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTUnitIdentifierNode v2 = (ASTUnitIdentifierNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndfileStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EndfileStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tendfile"))
                return 0;
            else
                if (name.equals("UnitIdentifier"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndfileStmt> ::= tendfile:T_ENDFILE UnitIdentifier:<UnitIdentifier> teos:T_EOS  :production950
         */
        protected ASTEndfileStmtNode userAction(Token v1, ASTUnitIdentifierNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production950Production PRODUCTION950 = Production950Production.getInstance();

    public static class Production951Production extends Production
    {
        private Production951Production() {;} // Singleton
        private static Production951Production singletonInstance = null;
        public static final Production951Production getInstance() { if (singletonInstance == null) singletonInstance = new Production951Production(); return singletonInstance; }

        public String getDescription() { return "<EndfileStmt> ::= LblDef:<LblDef> tendfile:T_ENDFILE UnitIdentifier:<UnitIdentifier> teos:T_EOS  :production951"; }

        /**
         * Reduce by <EndfileStmt> ::= LblDef:<LblDef> tendfile:T_ENDFILE UnitIdentifier:<UnitIdentifier> teos:T_EOS  :production951
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndfileStmt> ::= LblDef:<LblDef> tendfile:T_ENDFILE UnitIdentifier:<UnitIdentifier> teos:T_EOS  :production951
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTUnitIdentifierNode v3 = (ASTUnitIdentifierNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndfileStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EndfileStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tendfile"))
                    return 1;
                else
                    if (name.equals("UnitIdentifier"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndfileStmt> ::= LblDef:<LblDef> tendfile:T_ENDFILE UnitIdentifier:<UnitIdentifier> teos:T_EOS  :production951
         */
        protected ASTEndfileStmtNode userAction(ASTLblDefNode v1, Token v2, ASTUnitIdentifierNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production951Production PRODUCTION951 = Production951Production.getInstance();

    public static class Production952Production extends Production
    {
        private Production952Production() {;} // Singleton
        private static Production952Production singletonInstance = null;
        public static final Production952Production getInstance() { if (singletonInstance == null) singletonInstance = new Production952Production(); return singletonInstance; }

        public String getDescription() { return "<EndfileStmt> ::= tendfile:T_ENDFILE tlparen:T_LPAREN PositionSpecList:<PositionSpecList> trparen:T_RPAREN teos:T_EOS  :production952"; }

        /**
         * Reduce by <EndfileStmt> ::= tendfile:T_ENDFILE tlparen:T_LPAREN PositionSpecList:<PositionSpecList> trparen:T_RPAREN teos:T_EOS  :production952
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndfileStmt> ::= tendfile:T_ENDFILE tlparen:T_LPAREN PositionSpecList:<PositionSpecList> trparen:T_RPAREN teos:T_EOS  :production952
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTPositionSpecListNode v3 = (ASTPositionSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndfileStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.EndfileStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tendfile"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("PositionSpecList"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndfileStmt> ::= tendfile:T_ENDFILE tlparen:T_LPAREN PositionSpecList:<PositionSpecList> trparen:T_RPAREN teos:T_EOS  :production952
         */
        protected ASTEndfileStmtNode userAction(Token v1, Token v2, ASTPositionSpecListNode v3, Token v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production952Production PRODUCTION952 = Production952Production.getInstance();

    public static class Production953Production extends Production
    {
        private Production953Production() {;} // Singleton
        private static Production953Production singletonInstance = null;
        public static final Production953Production getInstance() { if (singletonInstance == null) singletonInstance = new Production953Production(); return singletonInstance; }

        public String getDescription() { return "<EndfileStmt> ::= LblDef:<LblDef> tendfile:T_ENDFILE tlparen:T_LPAREN PositionSpecList:<PositionSpecList> trparen:T_RPAREN teos:T_EOS  :production953"; }

        /**
         * Reduce by <EndfileStmt> ::= LblDef:<LblDef> tendfile:T_ENDFILE tlparen:T_LPAREN PositionSpecList:<PositionSpecList> trparen:T_RPAREN teos:T_EOS  :production953
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndfileStmt> ::= LblDef:<LblDef> tendfile:T_ENDFILE tlparen:T_LPAREN PositionSpecList:<PositionSpecList> trparen:T_RPAREN teos:T_EOS  :production953
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTPositionSpecListNode v4 = (ASTPositionSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndfileStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.EndfileStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tendfile"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("PositionSpecList"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndfileStmt> ::= LblDef:<LblDef> tendfile:T_ENDFILE tlparen:T_LPAREN PositionSpecList:<PositionSpecList> trparen:T_RPAREN teos:T_EOS  :production953
         */
        protected ASTEndfileStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, ASTPositionSpecListNode v4, Token v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production953Production PRODUCTION953 = Production953Production.getInstance();

    public static class Production954Production extends Production
    {
        private Production954Production() {;} // Singleton
        private static Production954Production singletonInstance = null;
        public static final Production954Production getInstance() { if (singletonInstance == null) singletonInstance = new Production954Production(); return singletonInstance; }

        public String getDescription() { return "<EndfileStmt> ::= tend:T_END tfile:T_FILE UnitIdentifier:<UnitIdentifier> teos:T_EOS  :production954"; }

        /**
         * Reduce by <EndfileStmt> ::= tend:T_END tfile:T_FILE UnitIdentifier:<UnitIdentifier> teos:T_EOS  :production954
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndfileStmt> ::= tend:T_END tfile:T_FILE UnitIdentifier:<UnitIdentifier> teos:T_EOS  :production954
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTUnitIdentifierNode v3 = (ASTUnitIdentifierNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndfileStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EndfileStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tend"))
                return 0;
            else
                if (name.equals("tfile"))
                    return 1;
                else
                    if (name.equals("UnitIdentifier"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndfileStmt> ::= tend:T_END tfile:T_FILE UnitIdentifier:<UnitIdentifier> teos:T_EOS  :production954
         */
        protected ASTEndfileStmtNode userAction(Token v1, Token v2, ASTUnitIdentifierNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production954Production PRODUCTION954 = Production954Production.getInstance();

    public static class Production955Production extends Production
    {
        private Production955Production() {;} // Singleton
        private static Production955Production singletonInstance = null;
        public static final Production955Production getInstance() { if (singletonInstance == null) singletonInstance = new Production955Production(); return singletonInstance; }

        public String getDescription() { return "<EndfileStmt> ::= LblDef:<LblDef> tend:T_END tfile:T_FILE UnitIdentifier:<UnitIdentifier> teos:T_EOS  :production955"; }

        /**
         * Reduce by <EndfileStmt> ::= LblDef:<LblDef> tend:T_END tfile:T_FILE UnitIdentifier:<UnitIdentifier> teos:T_EOS  :production955
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndfileStmt> ::= LblDef:<LblDef> tend:T_END tfile:T_FILE UnitIdentifier:<UnitIdentifier> teos:T_EOS  :production955
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTUnitIdentifierNode v4 = (ASTUnitIdentifierNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndfileStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.EndfileStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tend"))
                    return 1;
                else
                    if (name.equals("tfile"))
                        return 2;
                    else
                        if (name.equals("UnitIdentifier"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndfileStmt> ::= LblDef:<LblDef> tend:T_END tfile:T_FILE UnitIdentifier:<UnitIdentifier> teos:T_EOS  :production955
         */
        protected ASTEndfileStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, ASTUnitIdentifierNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production955Production PRODUCTION955 = Production955Production.getInstance();

    public static class Production956Production extends Production
    {
        private Production956Production() {;} // Singleton
        private static Production956Production singletonInstance = null;
        public static final Production956Production getInstance() { if (singletonInstance == null) singletonInstance = new Production956Production(); return singletonInstance; }

        public String getDescription() { return "<EndfileStmt> ::= tend:T_END tfile:T_FILE tlparen:T_LPAREN PositionSpecList:<PositionSpecList> trparen:T_RPAREN teos:T_EOS  :production956"; }

        /**
         * Reduce by <EndfileStmt> ::= tend:T_END tfile:T_FILE tlparen:T_LPAREN PositionSpecList:<PositionSpecList> trparen:T_RPAREN teos:T_EOS  :production956
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndfileStmt> ::= tend:T_END tfile:T_FILE tlparen:T_LPAREN PositionSpecList:<PositionSpecList> trparen:T_RPAREN teos:T_EOS  :production956
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTPositionSpecListNode v4 = (ASTPositionSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndfileStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.EndfileStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tend"))
                return 0;
            else
                if (name.equals("tfile"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("PositionSpecList"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndfileStmt> ::= tend:T_END tfile:T_FILE tlparen:T_LPAREN PositionSpecList:<PositionSpecList> trparen:T_RPAREN teos:T_EOS  :production956
         */
        protected ASTEndfileStmtNode userAction(Token v1, Token v2, Token v3, ASTPositionSpecListNode v4, Token v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production956Production PRODUCTION956 = Production956Production.getInstance();

    public static class Production957Production extends Production
    {
        private Production957Production() {;} // Singleton
        private static Production957Production singletonInstance = null;
        public static final Production957Production getInstance() { if (singletonInstance == null) singletonInstance = new Production957Production(); return singletonInstance; }

        public String getDescription() { return "<EndfileStmt> ::= LblDef:<LblDef> tend:T_END tfile:T_FILE tlparen:T_LPAREN PositionSpecList:<PositionSpecList> trparen:T_RPAREN teos:T_EOS  :production957"; }

        /**
         * Reduce by <EndfileStmt> ::= LblDef:<LblDef> tend:T_END tfile:T_FILE tlparen:T_LPAREN PositionSpecList:<PositionSpecList> trparen:T_RPAREN teos:T_EOS  :production957
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndfileStmt> ::= LblDef:<LblDef> tend:T_END tfile:T_FILE tlparen:T_LPAREN PositionSpecList:<PositionSpecList> trparen:T_RPAREN teos:T_EOS  :production957
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTPositionSpecListNode v5 = (ASTPositionSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndfileStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7);

            // The production has 7 symbols on its RHS
            parser.reduce(Nonterminal.EndfileStmtNonterminal.getInstance(), 7, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tend"))
                    return 1;
                else
                    if (name.equals("tfile"))
                        return 2;
                    else
                        if (name.equals("tlparen"))
                            return 3;
                        else
                            if (name.equals("PositionSpecList"))
                                return 4;
                            else
                                if (name.equals("trparen"))
                                    return 5;
                                else
                                    if (name.equals("teos"))
                                        return 6;
                                    else
                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndfileStmt> ::= LblDef:<LblDef> tend:T_END tfile:T_FILE tlparen:T_LPAREN PositionSpecList:<PositionSpecList> trparen:T_RPAREN teos:T_EOS  :production957
         */
        protected ASTEndfileStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, Token v4, ASTPositionSpecListNode v5, Token v6, Token v7)
        {
            return null;
        }
    }
    public static final Productions.Production957Production PRODUCTION957 = Production957Production.getInstance();

    public static class Production958Production extends Production
    {
        private Production958Production() {;} // Singleton
        private static Production958Production singletonInstance = null;
        public static final Production958Production getInstance() { if (singletonInstance == null) singletonInstance = new Production958Production(); return singletonInstance; }

        public String getDescription() { return "<RewindStmt> ::= trewind:T_REWIND UnitIdentifier:<UnitIdentifier> teos:T_EOS  :production958"; }

        /**
         * Reduce by <RewindStmt> ::= trewind:T_REWIND UnitIdentifier:<UnitIdentifier> teos:T_EOS  :production958
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <RewindStmt> ::= trewind:T_REWIND UnitIdentifier:<UnitIdentifier> teos:T_EOS  :production958
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTUnitIdentifierNode v2 = (ASTUnitIdentifierNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTRewindStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.RewindStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("trewind"))
                return 0;
            else
                if (name.equals("UnitIdentifier"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <RewindStmt> ::= trewind:T_REWIND UnitIdentifier:<UnitIdentifier> teos:T_EOS  :production958
         */
        protected ASTRewindStmtNode userAction(Token v1, ASTUnitIdentifierNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production958Production PRODUCTION958 = Production958Production.getInstance();

    public static class Production959Production extends Production
    {
        private Production959Production() {;} // Singleton
        private static Production959Production singletonInstance = null;
        public static final Production959Production getInstance() { if (singletonInstance == null) singletonInstance = new Production959Production(); return singletonInstance; }

        public String getDescription() { return "<RewindStmt> ::= LblDef:<LblDef> trewind:T_REWIND UnitIdentifier:<UnitIdentifier> teos:T_EOS  :production959"; }

        /**
         * Reduce by <RewindStmt> ::= LblDef:<LblDef> trewind:T_REWIND UnitIdentifier:<UnitIdentifier> teos:T_EOS  :production959
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <RewindStmt> ::= LblDef:<LblDef> trewind:T_REWIND UnitIdentifier:<UnitIdentifier> teos:T_EOS  :production959
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTUnitIdentifierNode v3 = (ASTUnitIdentifierNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTRewindStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.RewindStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("trewind"))
                    return 1;
                else
                    if (name.equals("UnitIdentifier"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <RewindStmt> ::= LblDef:<LblDef> trewind:T_REWIND UnitIdentifier:<UnitIdentifier> teos:T_EOS  :production959
         */
        protected ASTRewindStmtNode userAction(ASTLblDefNode v1, Token v2, ASTUnitIdentifierNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production959Production PRODUCTION959 = Production959Production.getInstance();

    public static class Production960Production extends Production
    {
        private Production960Production() {;} // Singleton
        private static Production960Production singletonInstance = null;
        public static final Production960Production getInstance() { if (singletonInstance == null) singletonInstance = new Production960Production(); return singletonInstance; }

        public String getDescription() { return "<RewindStmt> ::= trewind:T_REWIND tlparen:T_LPAREN PositionSpecList:<PositionSpecList> trparen:T_RPAREN teos:T_EOS  :production960"; }

        /**
         * Reduce by <RewindStmt> ::= trewind:T_REWIND tlparen:T_LPAREN PositionSpecList:<PositionSpecList> trparen:T_RPAREN teos:T_EOS  :production960
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <RewindStmt> ::= trewind:T_REWIND tlparen:T_LPAREN PositionSpecList:<PositionSpecList> trparen:T_RPAREN teos:T_EOS  :production960
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTPositionSpecListNode v3 = (ASTPositionSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTRewindStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.RewindStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("trewind"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("PositionSpecList"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <RewindStmt> ::= trewind:T_REWIND tlparen:T_LPAREN PositionSpecList:<PositionSpecList> trparen:T_RPAREN teos:T_EOS  :production960
         */
        protected ASTRewindStmtNode userAction(Token v1, Token v2, ASTPositionSpecListNode v3, Token v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production960Production PRODUCTION960 = Production960Production.getInstance();

    public static class Production961Production extends Production
    {
        private Production961Production() {;} // Singleton
        private static Production961Production singletonInstance = null;
        public static final Production961Production getInstance() { if (singletonInstance == null) singletonInstance = new Production961Production(); return singletonInstance; }

        public String getDescription() { return "<RewindStmt> ::= LblDef:<LblDef> trewind:T_REWIND tlparen:T_LPAREN PositionSpecList:<PositionSpecList> trparen:T_RPAREN teos:T_EOS  :production961"; }

        /**
         * Reduce by <RewindStmt> ::= LblDef:<LblDef> trewind:T_REWIND tlparen:T_LPAREN PositionSpecList:<PositionSpecList> trparen:T_RPAREN teos:T_EOS  :production961
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <RewindStmt> ::= LblDef:<LblDef> trewind:T_REWIND tlparen:T_LPAREN PositionSpecList:<PositionSpecList> trparen:T_RPAREN teos:T_EOS  :production961
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTPositionSpecListNode v4 = (ASTPositionSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTRewindStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.RewindStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("trewind"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("PositionSpecList"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <RewindStmt> ::= LblDef:<LblDef> trewind:T_REWIND tlparen:T_LPAREN PositionSpecList:<PositionSpecList> trparen:T_RPAREN teos:T_EOS  :production961
         */
        protected ASTRewindStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, ASTPositionSpecListNode v4, Token v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production961Production PRODUCTION961 = Production961Production.getInstance();

    public static class Production962Production extends Production
    {
        private Production962Production() {;} // Singleton
        private static Production962Production singletonInstance = null;
        public static final Production962Production getInstance() { if (singletonInstance == null) singletonInstance = new Production962Production(); return singletonInstance; }

        public String getDescription() { return "<PositionSpecList> ::= UnitIdentifier:<UnitIdentifier> tcomma:T_COMMA PositionSpec:<PositionSpec>  :production962"; }

        /**
         * Reduce by <PositionSpecList> ::= UnitIdentifier:<UnitIdentifier> tcomma:T_COMMA PositionSpec:<PositionSpec>  :production962
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PositionSpecList> ::= UnitIdentifier:<UnitIdentifier> tcomma:T_COMMA PositionSpec:<PositionSpec>  :production962
            ASTPositionSpecNode v3 = (ASTPositionSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTUnitIdentifierNode v1 = (ASTUnitIdentifierNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPositionSpecListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.PositionSpecListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("UnitIdentifier"))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("PositionSpec"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PositionSpecList> ::= UnitIdentifier:<UnitIdentifier> tcomma:T_COMMA PositionSpec:<PositionSpec>  :production962
         */
        protected ASTPositionSpecListNode userAction(ASTUnitIdentifierNode v1, Token v2, ASTPositionSpecNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production962Production PRODUCTION962 = Production962Production.getInstance();

    public static class Production963Production extends Production
    {
        private Production963Production() {;} // Singleton
        private static Production963Production singletonInstance = null;
        public static final Production963Production getInstance() { if (singletonInstance == null) singletonInstance = new Production963Production(); return singletonInstance; }

        public String getDescription() { return "<PositionSpecList> ::= PositionSpec:<PositionSpec>  :production963"; }

        /**
         * Reduce by <PositionSpecList> ::= PositionSpec:<PositionSpec>  :production963
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PositionSpecList> ::= PositionSpec:<PositionSpec>  :production963
            ASTPositionSpecNode v1 = (ASTPositionSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPositionSpecListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.PositionSpecListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("PositionSpec"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PositionSpecList> ::= PositionSpec:<PositionSpec>  :production963
         */
        protected ASTPositionSpecListNode userAction(ASTPositionSpecNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production963Production PRODUCTION963 = Production963Production.getInstance();

    public static class Production964Production extends Production
    {
        private Production964Production() {;} // Singleton
        private static Production964Production singletonInstance = null;
        public static final Production964Production getInstance() { if (singletonInstance == null) singletonInstance = new Production964Production(); return singletonInstance; }

        public String getDescription() { return "<PositionSpecList> ::= @:<PositionSpecList> tcomma:T_COMMA PositionSpec:<PositionSpec>  :production964"; }

        /**
         * Reduce by <PositionSpecList> ::= @:<PositionSpecList> tcomma:T_COMMA PositionSpec:<PositionSpec>  :production964
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PositionSpecList> ::= @:<PositionSpecList> tcomma:T_COMMA PositionSpec:<PositionSpec>  :production964
            ASTPositionSpecNode v3 = (ASTPositionSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTPositionSpecListNode v1 = (ASTPositionSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPositionSpecListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.PositionSpecListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("PositionSpec"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PositionSpecList> ::= @:<PositionSpecList> tcomma:T_COMMA PositionSpec:<PositionSpec>  :production964
         */
        protected ASTPositionSpecListNode userAction(ASTPositionSpecListNode v1, Token v2, ASTPositionSpecNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production964Production PRODUCTION964 = Production964Production.getInstance();

    public static class Production965Production extends Production
    {
        private Production965Production() {;} // Singleton
        private static Production965Production singletonInstance = null;
        public static final Production965Production getInstance() { if (singletonInstance == null) singletonInstance = new Production965Production(); return singletonInstance; }

        public String getDescription() { return "<PositionSpec> ::= tuniteq:T_UNITEQ UnitIdentifier:<UnitIdentifier>  :production965"; }

        /**
         * Reduce by <PositionSpec> ::= tuniteq:T_UNITEQ UnitIdentifier:<UnitIdentifier>  :production965
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PositionSpec> ::= tuniteq:T_UNITEQ UnitIdentifier:<UnitIdentifier>  :production965
            ASTUnitIdentifierNode v2 = (ASTUnitIdentifierNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPositionSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.PositionSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tuniteq"))
                return 0;
            else
                if (name.equals("UnitIdentifier"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PositionSpec> ::= tuniteq:T_UNITEQ UnitIdentifier:<UnitIdentifier>  :production965
         */
        protected ASTPositionSpecNode userAction(Token v1, ASTUnitIdentifierNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production965Production PRODUCTION965 = Production965Production.getInstance();

    public static class Production966Production extends Production
    {
        private Production966Production() {;} // Singleton
        private static Production966Production singletonInstance = null;
        public static final Production966Production getInstance() { if (singletonInstance == null) singletonInstance = new Production966Production(); return singletonInstance; }

        public String getDescription() { return "<PositionSpec> ::= terreq:T_ERREQ LblRef:<LblRef>  :production966"; }

        /**
         * Reduce by <PositionSpec> ::= terreq:T_ERREQ LblRef:<LblRef>  :production966
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PositionSpec> ::= terreq:T_ERREQ LblRef:<LblRef>  :production966
            ASTLblRefNode v2 = (ASTLblRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPositionSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.PositionSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("terreq"))
                return 0;
            else
                if (name.equals("LblRef"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PositionSpec> ::= terreq:T_ERREQ LblRef:<LblRef>  :production966
         */
        protected ASTPositionSpecNode userAction(Token v1, ASTLblRefNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production966Production PRODUCTION966 = Production966Production.getInstance();

    public static class Production967Production extends Production
    {
        private Production967Production() {;} // Singleton
        private static Production967Production singletonInstance = null;
        public static final Production967Production getInstance() { if (singletonInstance == null) singletonInstance = new Production967Production(); return singletonInstance; }

        public String getDescription() { return "<PositionSpec> ::= tiostateq:T_IOSTATEQ ScalarVariable:<ScalarVariable>  :production967"; }

        /**
         * Reduce by <PositionSpec> ::= tiostateq:T_IOSTATEQ ScalarVariable:<ScalarVariable>  :production967
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PositionSpec> ::= tiostateq:T_IOSTATEQ ScalarVariable:<ScalarVariable>  :production967
            ASTScalarVariableNode v2 = (ASTScalarVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPositionSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.PositionSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tiostateq"))
                return 0;
            else
                if (name.equals("ScalarVariable"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PositionSpec> ::= tiostateq:T_IOSTATEQ ScalarVariable:<ScalarVariable>  :production967
         */
        protected ASTPositionSpecNode userAction(Token v1, ASTScalarVariableNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production967Production PRODUCTION967 = Production967Production.getInstance();

    public static class Production968Production extends Production
    {
        private Production968Production() {;} // Singleton
        private static Production968Production singletonInstance = null;
        public static final Production968Production getInstance() { if (singletonInstance == null) singletonInstance = new Production968Production(); return singletonInstance; }

        public String getDescription() { return "<InquireStmt> ::= tinquire:T_INQUIRE tlparen:T_LPAREN InquireSpecList:<InquireSpecList> trparen:T_RPAREN teos:T_EOS  :production968"; }

        /**
         * Reduce by <InquireStmt> ::= tinquire:T_INQUIRE tlparen:T_LPAREN InquireSpecList:<InquireSpecList> trparen:T_RPAREN teos:T_EOS  :production968
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InquireStmt> ::= tinquire:T_INQUIRE tlparen:T_LPAREN InquireSpecList:<InquireSpecList> trparen:T_RPAREN teos:T_EOS  :production968
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTInquireSpecListNode v3 = (ASTInquireSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInquireStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.InquireStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tinquire"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("InquireSpecList"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InquireStmt> ::= tinquire:T_INQUIRE tlparen:T_LPAREN InquireSpecList:<InquireSpecList> trparen:T_RPAREN teos:T_EOS  :production968
         */
        protected ASTInquireStmtNode userAction(Token v1, Token v2, ASTInquireSpecListNode v3, Token v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production968Production PRODUCTION968 = Production968Production.getInstance();

    public static class Production969Production extends Production
    {
        private Production969Production() {;} // Singleton
        private static Production969Production singletonInstance = null;
        public static final Production969Production getInstance() { if (singletonInstance == null) singletonInstance = new Production969Production(); return singletonInstance; }

        public String getDescription() { return "<InquireStmt> ::= LblDef:<LblDef> tinquire:T_INQUIRE tlparen:T_LPAREN InquireSpecList:<InquireSpecList> trparen:T_RPAREN teos:T_EOS  :production969"; }

        /**
         * Reduce by <InquireStmt> ::= LblDef:<LblDef> tinquire:T_INQUIRE tlparen:T_LPAREN InquireSpecList:<InquireSpecList> trparen:T_RPAREN teos:T_EOS  :production969
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InquireStmt> ::= LblDef:<LblDef> tinquire:T_INQUIRE tlparen:T_LPAREN InquireSpecList:<InquireSpecList> trparen:T_RPAREN teos:T_EOS  :production969
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTInquireSpecListNode v4 = (ASTInquireSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInquireStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.InquireStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tinquire"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("InquireSpecList"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InquireStmt> ::= LblDef:<LblDef> tinquire:T_INQUIRE tlparen:T_LPAREN InquireSpecList:<InquireSpecList> trparen:T_RPAREN teos:T_EOS  :production969
         */
        protected ASTInquireStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, ASTInquireSpecListNode v4, Token v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production969Production PRODUCTION969 = Production969Production.getInstance();

    public static class Production970Production extends Production
    {
        private Production970Production() {;} // Singleton
        private static Production970Production singletonInstance = null;
        public static final Production970Production getInstance() { if (singletonInstance == null) singletonInstance = new Production970Production(); return singletonInstance; }

        public String getDescription() { return "<InquireStmt> ::= tinquire:T_INQUIRE tlparen:T_LPAREN tiolengtheq:T_IOLENGTHEQ ScalarVariable:<ScalarVariable> trparen:T_RPAREN OutputItemList:<OutputItemList> teos:T_EOS  :production970"; }

        /**
         * Reduce by <InquireStmt> ::= tinquire:T_INQUIRE tlparen:T_LPAREN tiolengtheq:T_IOLENGTHEQ ScalarVariable:<ScalarVariable> trparen:T_RPAREN OutputItemList:<OutputItemList> teos:T_EOS  :production970
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InquireStmt> ::= tinquire:T_INQUIRE tlparen:T_LPAREN tiolengtheq:T_IOLENGTHEQ ScalarVariable:<ScalarVariable> trparen:T_RPAREN OutputItemList:<OutputItemList> teos:T_EOS  :production970
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTOutputItemListNode v6 = (ASTOutputItemListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTScalarVariableNode v4 = (ASTScalarVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInquireStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7);

            // The production has 7 symbols on its RHS
            parser.reduce(Nonterminal.InquireStmtNonterminal.getInstance(), 7, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tinquire"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("tiolengtheq"))
                        return 2;
                    else
                        if (name.equals("ScalarVariable"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("OutputItemList"))
                                    return 5;
                                else
                                    if (name.equals("teos"))
                                        return 6;
                                    else
                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InquireStmt> ::= tinquire:T_INQUIRE tlparen:T_LPAREN tiolengtheq:T_IOLENGTHEQ ScalarVariable:<ScalarVariable> trparen:T_RPAREN OutputItemList:<OutputItemList> teos:T_EOS  :production970
         */
        protected ASTInquireStmtNode userAction(Token v1, Token v2, Token v3, ASTScalarVariableNode v4, Token v5, ASTOutputItemListNode v6, Token v7)
        {
            return null;
        }
    }
    public static final Productions.Production970Production PRODUCTION970 = Production970Production.getInstance();

    public static class Production971Production extends Production
    {
        private Production971Production() {;} // Singleton
        private static Production971Production singletonInstance = null;
        public static final Production971Production getInstance() { if (singletonInstance == null) singletonInstance = new Production971Production(); return singletonInstance; }

        public String getDescription() { return "<InquireStmt> ::= LblDef:<LblDef> tinquire:T_INQUIRE tlparen:T_LPAREN tiolengtheq:T_IOLENGTHEQ ScalarVariable:<ScalarVariable> trparen:T_RPAREN OutputItemList:<OutputItemList> teos:T_EOS  :production971"; }

        /**
         * Reduce by <InquireStmt> ::= LblDef:<LblDef> tinquire:T_INQUIRE tlparen:T_LPAREN tiolengtheq:T_IOLENGTHEQ ScalarVariable:<ScalarVariable> trparen:T_RPAREN OutputItemList:<OutputItemList> teos:T_EOS  :production971
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InquireStmt> ::= LblDef:<LblDef> tinquire:T_INQUIRE tlparen:T_LPAREN tiolengtheq:T_IOLENGTHEQ ScalarVariable:<ScalarVariable> trparen:T_RPAREN OutputItemList:<OutputItemList> teos:T_EOS  :production971
            Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTOutputItemListNode v7 = (ASTOutputItemListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTScalarVariableNode v5 = (ASTScalarVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInquireStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8);

            // The production has 8 symbols on its RHS
            parser.reduce(Nonterminal.InquireStmtNonterminal.getInstance(), 8, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tinquire"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("tiolengtheq"))
                            return 3;
                        else
                            if (name.equals("ScalarVariable"))
                                return 4;
                            else
                                if (name.equals("trparen"))
                                    return 5;
                                else
                                    if (name.equals("OutputItemList"))
                                        return 6;
                                    else
                                        if (name.equals("teos"))
                                            return 7;
                                        else
                                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InquireStmt> ::= LblDef:<LblDef> tinquire:T_INQUIRE tlparen:T_LPAREN tiolengtheq:T_IOLENGTHEQ ScalarVariable:<ScalarVariable> trparen:T_RPAREN OutputItemList:<OutputItemList> teos:T_EOS  :production971
         */
        protected ASTInquireStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, Token v4, ASTScalarVariableNode v5, Token v6, ASTOutputItemListNode v7, Token v8)
        {
            return null;
        }
    }
    public static final Productions.Production971Production PRODUCTION971 = Production971Production.getInstance();

    public static class Production972Production extends Production
    {
        private Production972Production() {;} // Singleton
        private static Production972Production singletonInstance = null;
        public static final Production972Production getInstance() { if (singletonInstance == null) singletonInstance = new Production972Production(); return singletonInstance; }

        public String getDescription() { return "<InquireSpecList> ::= UnitIdentifier:<UnitIdentifier>  :production972"; }

        /**
         * Reduce by <InquireSpecList> ::= UnitIdentifier:<UnitIdentifier>  :production972
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InquireSpecList> ::= UnitIdentifier:<UnitIdentifier>  :production972
            ASTUnitIdentifierNode v1 = (ASTUnitIdentifierNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInquireSpecListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.InquireSpecListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("UnitIdentifier"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InquireSpecList> ::= UnitIdentifier:<UnitIdentifier>  :production972
         */
        protected ASTInquireSpecListNode userAction(ASTUnitIdentifierNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production972Production PRODUCTION972 = Production972Production.getInstance();

    public static class Production973Production extends Production
    {
        private Production973Production() {;} // Singleton
        private static Production973Production singletonInstance = null;
        public static final Production973Production getInstance() { if (singletonInstance == null) singletonInstance = new Production973Production(); return singletonInstance; }

        public String getDescription() { return "<InquireSpecList> ::= InquireSpec:<InquireSpec>  :production973"; }

        /**
         * Reduce by <InquireSpecList> ::= InquireSpec:<InquireSpec>  :production973
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InquireSpecList> ::= InquireSpec:<InquireSpec>  :production973
            ASTInquireSpecNode v1 = (ASTInquireSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInquireSpecListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.InquireSpecListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("InquireSpec"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InquireSpecList> ::= InquireSpec:<InquireSpec>  :production973
         */
        protected ASTInquireSpecListNode userAction(ASTInquireSpecNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production973Production PRODUCTION973 = Production973Production.getInstance();

    public static class Production974Production extends Production
    {
        private Production974Production() {;} // Singleton
        private static Production974Production singletonInstance = null;
        public static final Production974Production getInstance() { if (singletonInstance == null) singletonInstance = new Production974Production(); return singletonInstance; }

        public String getDescription() { return "<InquireSpecList> ::= @:<InquireSpecList> tcomma:T_COMMA InquireSpec:<InquireSpec>  :production974"; }

        /**
         * Reduce by <InquireSpecList> ::= @:<InquireSpecList> tcomma:T_COMMA InquireSpec:<InquireSpec>  :production974
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InquireSpecList> ::= @:<InquireSpecList> tcomma:T_COMMA InquireSpec:<InquireSpec>  :production974
            ASTInquireSpecNode v3 = (ASTInquireSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTInquireSpecListNode v1 = (ASTInquireSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInquireSpecListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.InquireSpecListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("InquireSpec"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InquireSpecList> ::= @:<InquireSpecList> tcomma:T_COMMA InquireSpec:<InquireSpec>  :production974
         */
        protected ASTInquireSpecListNode userAction(ASTInquireSpecListNode v1, Token v2, ASTInquireSpecNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production974Production PRODUCTION974 = Production974Production.getInstance();

    public static class Production975Production extends Production
    {
        private Production975Production() {;} // Singleton
        private static Production975Production singletonInstance = null;
        public static final Production975Production getInstance() { if (singletonInstance == null) singletonInstance = new Production975Production(); return singletonInstance; }

        public String getDescription() { return "<InquireSpec> ::= tuniteq:T_UNITEQ UnitIdentifier:<UnitIdentifier>  :production975"; }

        /**
         * Reduce by <InquireSpec> ::= tuniteq:T_UNITEQ UnitIdentifier:<UnitIdentifier>  :production975
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InquireSpec> ::= tuniteq:T_UNITEQ UnitIdentifier:<UnitIdentifier>  :production975
            ASTUnitIdentifierNode v2 = (ASTUnitIdentifierNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInquireSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.InquireSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tuniteq"))
                return 0;
            else
                if (name.equals("UnitIdentifier"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InquireSpec> ::= tuniteq:T_UNITEQ UnitIdentifier:<UnitIdentifier>  :production975
         */
        protected ASTInquireSpecNode userAction(Token v1, ASTUnitIdentifierNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production975Production PRODUCTION975 = Production975Production.getInstance();

    public static class Production976Production extends Production
    {
        private Production976Production() {;} // Singleton
        private static Production976Production singletonInstance = null;
        public static final Production976Production getInstance() { if (singletonInstance == null) singletonInstance = new Production976Production(); return singletonInstance; }

        public String getDescription() { return "<InquireSpec> ::= tfileeq:T_FILEEQ CExpr:<CExpr>  :production976"; }

        /**
         * Reduce by <InquireSpec> ::= tfileeq:T_FILEEQ CExpr:<CExpr>  :production976
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InquireSpec> ::= tfileeq:T_FILEEQ CExpr:<CExpr>  :production976
            ASTCExprNode v2 = (ASTCExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInquireSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.InquireSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tfileeq"))
                return 0;
            else
                if (name.equals("CExpr"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InquireSpec> ::= tfileeq:T_FILEEQ CExpr:<CExpr>  :production976
         */
        protected ASTInquireSpecNode userAction(Token v1, ASTCExprNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production976Production PRODUCTION976 = Production976Production.getInstance();

    public static class Production977Production extends Production
    {
        private Production977Production() {;} // Singleton
        private static Production977Production singletonInstance = null;
        public static final Production977Production getInstance() { if (singletonInstance == null) singletonInstance = new Production977Production(); return singletonInstance; }

        public String getDescription() { return "<InquireSpec> ::= terreq:T_ERREQ LblRef:<LblRef>  :production977"; }

        /**
         * Reduce by <InquireSpec> ::= terreq:T_ERREQ LblRef:<LblRef>  :production977
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InquireSpec> ::= terreq:T_ERREQ LblRef:<LblRef>  :production977
            ASTLblRefNode v2 = (ASTLblRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInquireSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.InquireSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("terreq"))
                return 0;
            else
                if (name.equals("LblRef"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InquireSpec> ::= terreq:T_ERREQ LblRef:<LblRef>  :production977
         */
        protected ASTInquireSpecNode userAction(Token v1, ASTLblRefNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production977Production PRODUCTION977 = Production977Production.getInstance();

    public static class Production978Production extends Production
    {
        private Production978Production() {;} // Singleton
        private static Production978Production singletonInstance = null;
        public static final Production978Production getInstance() { if (singletonInstance == null) singletonInstance = new Production978Production(); return singletonInstance; }

        public String getDescription() { return "<InquireSpec> ::= tiostateq:T_IOSTATEQ ScalarVariable:<ScalarVariable>  :production978"; }

        /**
         * Reduce by <InquireSpec> ::= tiostateq:T_IOSTATEQ ScalarVariable:<ScalarVariable>  :production978
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InquireSpec> ::= tiostateq:T_IOSTATEQ ScalarVariable:<ScalarVariable>  :production978
            ASTScalarVariableNode v2 = (ASTScalarVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInquireSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.InquireSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tiostateq"))
                return 0;
            else
                if (name.equals("ScalarVariable"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InquireSpec> ::= tiostateq:T_IOSTATEQ ScalarVariable:<ScalarVariable>  :production978
         */
        protected ASTInquireSpecNode userAction(Token v1, ASTScalarVariableNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production978Production PRODUCTION978 = Production978Production.getInstance();

    public static class Production979Production extends Production
    {
        private Production979Production() {;} // Singleton
        private static Production979Production singletonInstance = null;
        public static final Production979Production getInstance() { if (singletonInstance == null) singletonInstance = new Production979Production(); return singletonInstance; }

        public String getDescription() { return "<InquireSpec> ::= texisteq:T_EXISTEQ ScalarVariable:<ScalarVariable>  :production979"; }

        /**
         * Reduce by <InquireSpec> ::= texisteq:T_EXISTEQ ScalarVariable:<ScalarVariable>  :production979
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InquireSpec> ::= texisteq:T_EXISTEQ ScalarVariable:<ScalarVariable>  :production979
            ASTScalarVariableNode v2 = (ASTScalarVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInquireSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.InquireSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("texisteq"))
                return 0;
            else
                if (name.equals("ScalarVariable"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InquireSpec> ::= texisteq:T_EXISTEQ ScalarVariable:<ScalarVariable>  :production979
         */
        protected ASTInquireSpecNode userAction(Token v1, ASTScalarVariableNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production979Production PRODUCTION979 = Production979Production.getInstance();

    public static class Production980Production extends Production
    {
        private Production980Production() {;} // Singleton
        private static Production980Production singletonInstance = null;
        public static final Production980Production getInstance() { if (singletonInstance == null) singletonInstance = new Production980Production(); return singletonInstance; }

        public String getDescription() { return "<InquireSpec> ::= topenedeq:T_OPENEDEQ ScalarVariable:<ScalarVariable>  :production980"; }

        /**
         * Reduce by <InquireSpec> ::= topenedeq:T_OPENEDEQ ScalarVariable:<ScalarVariable>  :production980
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InquireSpec> ::= topenedeq:T_OPENEDEQ ScalarVariable:<ScalarVariable>  :production980
            ASTScalarVariableNode v2 = (ASTScalarVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInquireSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.InquireSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("topenedeq"))
                return 0;
            else
                if (name.equals("ScalarVariable"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InquireSpec> ::= topenedeq:T_OPENEDEQ ScalarVariable:<ScalarVariable>  :production980
         */
        protected ASTInquireSpecNode userAction(Token v1, ASTScalarVariableNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production980Production PRODUCTION980 = Production980Production.getInstance();

    public static class Production981Production extends Production
    {
        private Production981Production() {;} // Singleton
        private static Production981Production singletonInstance = null;
        public static final Production981Production getInstance() { if (singletonInstance == null) singletonInstance = new Production981Production(); return singletonInstance; }

        public String getDescription() { return "<InquireSpec> ::= tnumbereq:T_NUMBEREQ ScalarVariable:<ScalarVariable>  :production981"; }

        /**
         * Reduce by <InquireSpec> ::= tnumbereq:T_NUMBEREQ ScalarVariable:<ScalarVariable>  :production981
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InquireSpec> ::= tnumbereq:T_NUMBEREQ ScalarVariable:<ScalarVariable>  :production981
            ASTScalarVariableNode v2 = (ASTScalarVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInquireSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.InquireSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tnumbereq"))
                return 0;
            else
                if (name.equals("ScalarVariable"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InquireSpec> ::= tnumbereq:T_NUMBEREQ ScalarVariable:<ScalarVariable>  :production981
         */
        protected ASTInquireSpecNode userAction(Token v1, ASTScalarVariableNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production981Production PRODUCTION981 = Production981Production.getInstance();

    public static class Production982Production extends Production
    {
        private Production982Production() {;} // Singleton
        private static Production982Production singletonInstance = null;
        public static final Production982Production getInstance() { if (singletonInstance == null) singletonInstance = new Production982Production(); return singletonInstance; }

        public String getDescription() { return "<InquireSpec> ::= tnamedeq:T_NAMEDEQ ScalarVariable:<ScalarVariable>  :production982"; }

        /**
         * Reduce by <InquireSpec> ::= tnamedeq:T_NAMEDEQ ScalarVariable:<ScalarVariable>  :production982
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InquireSpec> ::= tnamedeq:T_NAMEDEQ ScalarVariable:<ScalarVariable>  :production982
            ASTScalarVariableNode v2 = (ASTScalarVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInquireSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.InquireSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tnamedeq"))
                return 0;
            else
                if (name.equals("ScalarVariable"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InquireSpec> ::= tnamedeq:T_NAMEDEQ ScalarVariable:<ScalarVariable>  :production982
         */
        protected ASTInquireSpecNode userAction(Token v1, ASTScalarVariableNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production982Production PRODUCTION982 = Production982Production.getInstance();

    public static class Production983Production extends Production
    {
        private Production983Production() {;} // Singleton
        private static Production983Production singletonInstance = null;
        public static final Production983Production getInstance() { if (singletonInstance == null) singletonInstance = new Production983Production(); return singletonInstance; }

        public String getDescription() { return "<InquireSpec> ::= tnameeq:T_NAMEEQ ScalarVariable:<ScalarVariable>  :production983"; }

        /**
         * Reduce by <InquireSpec> ::= tnameeq:T_NAMEEQ ScalarVariable:<ScalarVariable>  :production983
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InquireSpec> ::= tnameeq:T_NAMEEQ ScalarVariable:<ScalarVariable>  :production983
            ASTScalarVariableNode v2 = (ASTScalarVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInquireSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.InquireSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tnameeq"))
                return 0;
            else
                if (name.equals("ScalarVariable"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InquireSpec> ::= tnameeq:T_NAMEEQ ScalarVariable:<ScalarVariable>  :production983
         */
        protected ASTInquireSpecNode userAction(Token v1, ASTScalarVariableNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production983Production PRODUCTION983 = Production983Production.getInstance();

    public static class Production984Production extends Production
    {
        private Production984Production() {;} // Singleton
        private static Production984Production singletonInstance = null;
        public static final Production984Production getInstance() { if (singletonInstance == null) singletonInstance = new Production984Production(); return singletonInstance; }

        public String getDescription() { return "<InquireSpec> ::= taccesseq:T_ACCESSEQ ScalarVariable:<ScalarVariable>  :production984"; }

        /**
         * Reduce by <InquireSpec> ::= taccesseq:T_ACCESSEQ ScalarVariable:<ScalarVariable>  :production984
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InquireSpec> ::= taccesseq:T_ACCESSEQ ScalarVariable:<ScalarVariable>  :production984
            ASTScalarVariableNode v2 = (ASTScalarVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInquireSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.InquireSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("taccesseq"))
                return 0;
            else
                if (name.equals("ScalarVariable"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InquireSpec> ::= taccesseq:T_ACCESSEQ ScalarVariable:<ScalarVariable>  :production984
         */
        protected ASTInquireSpecNode userAction(Token v1, ASTScalarVariableNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production984Production PRODUCTION984 = Production984Production.getInstance();

    public static class Production985Production extends Production
    {
        private Production985Production() {;} // Singleton
        private static Production985Production singletonInstance = null;
        public static final Production985Production getInstance() { if (singletonInstance == null) singletonInstance = new Production985Production(); return singletonInstance; }

        public String getDescription() { return "<InquireSpec> ::= tsequentialeq:T_SEQUENTIALEQ ScalarVariable:<ScalarVariable>  :production985"; }

        /**
         * Reduce by <InquireSpec> ::= tsequentialeq:T_SEQUENTIALEQ ScalarVariable:<ScalarVariable>  :production985
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InquireSpec> ::= tsequentialeq:T_SEQUENTIALEQ ScalarVariable:<ScalarVariable>  :production985
            ASTScalarVariableNode v2 = (ASTScalarVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInquireSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.InquireSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tsequentialeq"))
                return 0;
            else
                if (name.equals("ScalarVariable"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InquireSpec> ::= tsequentialeq:T_SEQUENTIALEQ ScalarVariable:<ScalarVariable>  :production985
         */
        protected ASTInquireSpecNode userAction(Token v1, ASTScalarVariableNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production985Production PRODUCTION985 = Production985Production.getInstance();

    public static class Production986Production extends Production
    {
        private Production986Production() {;} // Singleton
        private static Production986Production singletonInstance = null;
        public static final Production986Production getInstance() { if (singletonInstance == null) singletonInstance = new Production986Production(); return singletonInstance; }

        public String getDescription() { return "<InquireSpec> ::= tdirecteq:T_DIRECTEQ ScalarVariable:<ScalarVariable>  :production986"; }

        /**
         * Reduce by <InquireSpec> ::= tdirecteq:T_DIRECTEQ ScalarVariable:<ScalarVariable>  :production986
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InquireSpec> ::= tdirecteq:T_DIRECTEQ ScalarVariable:<ScalarVariable>  :production986
            ASTScalarVariableNode v2 = (ASTScalarVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInquireSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.InquireSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tdirecteq"))
                return 0;
            else
                if (name.equals("ScalarVariable"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InquireSpec> ::= tdirecteq:T_DIRECTEQ ScalarVariable:<ScalarVariable>  :production986
         */
        protected ASTInquireSpecNode userAction(Token v1, ASTScalarVariableNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production986Production PRODUCTION986 = Production986Production.getInstance();

    public static class Production987Production extends Production
    {
        private Production987Production() {;} // Singleton
        private static Production987Production singletonInstance = null;
        public static final Production987Production getInstance() { if (singletonInstance == null) singletonInstance = new Production987Production(); return singletonInstance; }

        public String getDescription() { return "<InquireSpec> ::= tformeq:T_FORMEQ ScalarVariable:<ScalarVariable>  :production987"; }

        /**
         * Reduce by <InquireSpec> ::= tformeq:T_FORMEQ ScalarVariable:<ScalarVariable>  :production987
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InquireSpec> ::= tformeq:T_FORMEQ ScalarVariable:<ScalarVariable>  :production987
            ASTScalarVariableNode v2 = (ASTScalarVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInquireSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.InquireSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tformeq"))
                return 0;
            else
                if (name.equals("ScalarVariable"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InquireSpec> ::= tformeq:T_FORMEQ ScalarVariable:<ScalarVariable>  :production987
         */
        protected ASTInquireSpecNode userAction(Token v1, ASTScalarVariableNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production987Production PRODUCTION987 = Production987Production.getInstance();

    public static class Production988Production extends Production
    {
        private Production988Production() {;} // Singleton
        private static Production988Production singletonInstance = null;
        public static final Production988Production getInstance() { if (singletonInstance == null) singletonInstance = new Production988Production(); return singletonInstance; }

        public String getDescription() { return "<InquireSpec> ::= tformattedeq:T_FORMATTEDEQ ScalarVariable:<ScalarVariable>  :production988"; }

        /**
         * Reduce by <InquireSpec> ::= tformattedeq:T_FORMATTEDEQ ScalarVariable:<ScalarVariable>  :production988
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InquireSpec> ::= tformattedeq:T_FORMATTEDEQ ScalarVariable:<ScalarVariable>  :production988
            ASTScalarVariableNode v2 = (ASTScalarVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInquireSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.InquireSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tformattedeq"))
                return 0;
            else
                if (name.equals("ScalarVariable"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InquireSpec> ::= tformattedeq:T_FORMATTEDEQ ScalarVariable:<ScalarVariable>  :production988
         */
        protected ASTInquireSpecNode userAction(Token v1, ASTScalarVariableNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production988Production PRODUCTION988 = Production988Production.getInstance();

    public static class Production989Production extends Production
    {
        private Production989Production() {;} // Singleton
        private static Production989Production singletonInstance = null;
        public static final Production989Production getInstance() { if (singletonInstance == null) singletonInstance = new Production989Production(); return singletonInstance; }

        public String getDescription() { return "<InquireSpec> ::= tunformattedeq:T_UNFORMATTEDEQ ScalarVariable:<ScalarVariable>  :production989"; }

        /**
         * Reduce by <InquireSpec> ::= tunformattedeq:T_UNFORMATTEDEQ ScalarVariable:<ScalarVariable>  :production989
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InquireSpec> ::= tunformattedeq:T_UNFORMATTEDEQ ScalarVariable:<ScalarVariable>  :production989
            ASTScalarVariableNode v2 = (ASTScalarVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInquireSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.InquireSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tunformattedeq"))
                return 0;
            else
                if (name.equals("ScalarVariable"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InquireSpec> ::= tunformattedeq:T_UNFORMATTEDEQ ScalarVariable:<ScalarVariable>  :production989
         */
        protected ASTInquireSpecNode userAction(Token v1, ASTScalarVariableNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production989Production PRODUCTION989 = Production989Production.getInstance();

    public static class Production990Production extends Production
    {
        private Production990Production() {;} // Singleton
        private static Production990Production singletonInstance = null;
        public static final Production990Production getInstance() { if (singletonInstance == null) singletonInstance = new Production990Production(); return singletonInstance; }

        public String getDescription() { return "<InquireSpec> ::= trecleq:T_RECLEQ Expr:<Expr>  :production990"; }

        /**
         * Reduce by <InquireSpec> ::= trecleq:T_RECLEQ Expr:<Expr>  :production990
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InquireSpec> ::= trecleq:T_RECLEQ Expr:<Expr>  :production990
            ASTExprNode v2 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInquireSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.InquireSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("trecleq"))
                return 0;
            else
                if (name.equals("Expr"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InquireSpec> ::= trecleq:T_RECLEQ Expr:<Expr>  :production990
         */
        protected ASTInquireSpecNode userAction(Token v1, ASTExprNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production990Production PRODUCTION990 = Production990Production.getInstance();

    public static class Production991Production extends Production
    {
        private Production991Production() {;} // Singleton
        private static Production991Production singletonInstance = null;
        public static final Production991Production getInstance() { if (singletonInstance == null) singletonInstance = new Production991Production(); return singletonInstance; }

        public String getDescription() { return "<InquireSpec> ::= tnextreceq:T_NEXTRECEQ ScalarVariable:<ScalarVariable>  :production991"; }

        /**
         * Reduce by <InquireSpec> ::= tnextreceq:T_NEXTRECEQ ScalarVariable:<ScalarVariable>  :production991
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InquireSpec> ::= tnextreceq:T_NEXTRECEQ ScalarVariable:<ScalarVariable>  :production991
            ASTScalarVariableNode v2 = (ASTScalarVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInquireSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.InquireSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tnextreceq"))
                return 0;
            else
                if (name.equals("ScalarVariable"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InquireSpec> ::= tnextreceq:T_NEXTRECEQ ScalarVariable:<ScalarVariable>  :production991
         */
        protected ASTInquireSpecNode userAction(Token v1, ASTScalarVariableNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production991Production PRODUCTION991 = Production991Production.getInstance();

    public static class Production992Production extends Production
    {
        private Production992Production() {;} // Singleton
        private static Production992Production singletonInstance = null;
        public static final Production992Production getInstance() { if (singletonInstance == null) singletonInstance = new Production992Production(); return singletonInstance; }

        public String getDescription() { return "<InquireSpec> ::= tblankeq:T_BLANKEQ ScalarVariable:<ScalarVariable>  :production992"; }

        /**
         * Reduce by <InquireSpec> ::= tblankeq:T_BLANKEQ ScalarVariable:<ScalarVariable>  :production992
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InquireSpec> ::= tblankeq:T_BLANKEQ ScalarVariable:<ScalarVariable>  :production992
            ASTScalarVariableNode v2 = (ASTScalarVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInquireSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.InquireSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tblankeq"))
                return 0;
            else
                if (name.equals("ScalarVariable"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InquireSpec> ::= tblankeq:T_BLANKEQ ScalarVariable:<ScalarVariable>  :production992
         */
        protected ASTInquireSpecNode userAction(Token v1, ASTScalarVariableNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production992Production PRODUCTION992 = Production992Production.getInstance();

    public static class Production993Production extends Production
    {
        private Production993Production() {;} // Singleton
        private static Production993Production singletonInstance = null;
        public static final Production993Production getInstance() { if (singletonInstance == null) singletonInstance = new Production993Production(); return singletonInstance; }

        public String getDescription() { return "<InquireSpec> ::= tpositioneq:T_POSITIONEQ ScalarVariable:<ScalarVariable>  :production993"; }

        /**
         * Reduce by <InquireSpec> ::= tpositioneq:T_POSITIONEQ ScalarVariable:<ScalarVariable>  :production993
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InquireSpec> ::= tpositioneq:T_POSITIONEQ ScalarVariable:<ScalarVariable>  :production993
            ASTScalarVariableNode v2 = (ASTScalarVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInquireSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.InquireSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tpositioneq"))
                return 0;
            else
                if (name.equals("ScalarVariable"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InquireSpec> ::= tpositioneq:T_POSITIONEQ ScalarVariable:<ScalarVariable>  :production993
         */
        protected ASTInquireSpecNode userAction(Token v1, ASTScalarVariableNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production993Production PRODUCTION993 = Production993Production.getInstance();

    public static class Production994Production extends Production
    {
        private Production994Production() {;} // Singleton
        private static Production994Production singletonInstance = null;
        public static final Production994Production getInstance() { if (singletonInstance == null) singletonInstance = new Production994Production(); return singletonInstance; }

        public String getDescription() { return "<InquireSpec> ::= tactioneq:T_ACTIONEQ ScalarVariable:<ScalarVariable>  :production994"; }

        /**
         * Reduce by <InquireSpec> ::= tactioneq:T_ACTIONEQ ScalarVariable:<ScalarVariable>  :production994
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InquireSpec> ::= tactioneq:T_ACTIONEQ ScalarVariable:<ScalarVariable>  :production994
            ASTScalarVariableNode v2 = (ASTScalarVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInquireSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.InquireSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tactioneq"))
                return 0;
            else
                if (name.equals("ScalarVariable"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InquireSpec> ::= tactioneq:T_ACTIONEQ ScalarVariable:<ScalarVariable>  :production994
         */
        protected ASTInquireSpecNode userAction(Token v1, ASTScalarVariableNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production994Production PRODUCTION994 = Production994Production.getInstance();

    public static class Production995Production extends Production
    {
        private Production995Production() {;} // Singleton
        private static Production995Production singletonInstance = null;
        public static final Production995Production getInstance() { if (singletonInstance == null) singletonInstance = new Production995Production(); return singletonInstance; }

        public String getDescription() { return "<InquireSpec> ::= treadeq:T_READEQ ScalarVariable:<ScalarVariable>  :production995"; }

        /**
         * Reduce by <InquireSpec> ::= treadeq:T_READEQ ScalarVariable:<ScalarVariable>  :production995
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InquireSpec> ::= treadeq:T_READEQ ScalarVariable:<ScalarVariable>  :production995
            ASTScalarVariableNode v2 = (ASTScalarVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInquireSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.InquireSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("treadeq"))
                return 0;
            else
                if (name.equals("ScalarVariable"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InquireSpec> ::= treadeq:T_READEQ ScalarVariable:<ScalarVariable>  :production995
         */
        protected ASTInquireSpecNode userAction(Token v1, ASTScalarVariableNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production995Production PRODUCTION995 = Production995Production.getInstance();

    public static class Production996Production extends Production
    {
        private Production996Production() {;} // Singleton
        private static Production996Production singletonInstance = null;
        public static final Production996Production getInstance() { if (singletonInstance == null) singletonInstance = new Production996Production(); return singletonInstance; }

        public String getDescription() { return "<InquireSpec> ::= twriteeq:T_WRITEEQ ScalarVariable:<ScalarVariable>  :production996"; }

        /**
         * Reduce by <InquireSpec> ::= twriteeq:T_WRITEEQ ScalarVariable:<ScalarVariable>  :production996
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InquireSpec> ::= twriteeq:T_WRITEEQ ScalarVariable:<ScalarVariable>  :production996
            ASTScalarVariableNode v2 = (ASTScalarVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInquireSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.InquireSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("twriteeq"))
                return 0;
            else
                if (name.equals("ScalarVariable"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InquireSpec> ::= twriteeq:T_WRITEEQ ScalarVariable:<ScalarVariable>  :production996
         */
        protected ASTInquireSpecNode userAction(Token v1, ASTScalarVariableNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production996Production PRODUCTION996 = Production996Production.getInstance();

    public static class Production997Production extends Production
    {
        private Production997Production() {;} // Singleton
        private static Production997Production singletonInstance = null;
        public static final Production997Production getInstance() { if (singletonInstance == null) singletonInstance = new Production997Production(); return singletonInstance; }

        public String getDescription() { return "<InquireSpec> ::= treadwriteeq:T_READWRITEEQ ScalarVariable:<ScalarVariable>  :production997"; }

        /**
         * Reduce by <InquireSpec> ::= treadwriteeq:T_READWRITEEQ ScalarVariable:<ScalarVariable>  :production997
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InquireSpec> ::= treadwriteeq:T_READWRITEEQ ScalarVariable:<ScalarVariable>  :production997
            ASTScalarVariableNode v2 = (ASTScalarVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInquireSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.InquireSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("treadwriteeq"))
                return 0;
            else
                if (name.equals("ScalarVariable"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InquireSpec> ::= treadwriteeq:T_READWRITEEQ ScalarVariable:<ScalarVariable>  :production997
         */
        protected ASTInquireSpecNode userAction(Token v1, ASTScalarVariableNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production997Production PRODUCTION997 = Production997Production.getInstance();

    public static class Production998Production extends Production
    {
        private Production998Production() {;} // Singleton
        private static Production998Production singletonInstance = null;
        public static final Production998Production getInstance() { if (singletonInstance == null) singletonInstance = new Production998Production(); return singletonInstance; }

        public String getDescription() { return "<InquireSpec> ::= tdelimeq:T_DELIMEQ ScalarVariable:<ScalarVariable>  :production998"; }

        /**
         * Reduce by <InquireSpec> ::= tdelimeq:T_DELIMEQ ScalarVariable:<ScalarVariable>  :production998
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InquireSpec> ::= tdelimeq:T_DELIMEQ ScalarVariable:<ScalarVariable>  :production998
            ASTScalarVariableNode v2 = (ASTScalarVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInquireSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.InquireSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tdelimeq"))
                return 0;
            else
                if (name.equals("ScalarVariable"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InquireSpec> ::= tdelimeq:T_DELIMEQ ScalarVariable:<ScalarVariable>  :production998
         */
        protected ASTInquireSpecNode userAction(Token v1, ASTScalarVariableNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production998Production PRODUCTION998 = Production998Production.getInstance();

    public static class Production999Production extends Production
    {
        private Production999Production() {;} // Singleton
        private static Production999Production singletonInstance = null;
        public static final Production999Production getInstance() { if (singletonInstance == null) singletonInstance = new Production999Production(); return singletonInstance; }

        public String getDescription() { return "<InquireSpec> ::= tpadeq:T_PADEQ ScalarVariable:<ScalarVariable>  :production999"; }

        /**
         * Reduce by <InquireSpec> ::= tpadeq:T_PADEQ ScalarVariable:<ScalarVariable>  :production999
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InquireSpec> ::= tpadeq:T_PADEQ ScalarVariable:<ScalarVariable>  :production999
            ASTScalarVariableNode v2 = (ASTScalarVariableNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInquireSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.InquireSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tpadeq"))
                return 0;
            else
                if (name.equals("ScalarVariable"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InquireSpec> ::= tpadeq:T_PADEQ ScalarVariable:<ScalarVariable>  :production999
         */
        protected ASTInquireSpecNode userAction(Token v1, ASTScalarVariableNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production999Production PRODUCTION999 = Production999Production.getInstance();

    public static class Production1000Production extends Production
    {
        private Production1000Production() {;} // Singleton
        private static Production1000Production singletonInstance = null;
        public static final Production1000Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1000Production(); return singletonInstance; }

        public String getDescription() { return "<FormatStmt> ::= tformat:T_FORMAT tlparen:T_LPAREN trparen:T_RPAREN teos:T_EOS  :production1000"; }

        /**
         * Reduce by <FormatStmt> ::= tformat:T_FORMAT tlparen:T_LPAREN trparen:T_RPAREN teos:T_EOS  :production1000
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FormatStmt> ::= tformat:T_FORMAT tlparen:T_LPAREN trparen:T_RPAREN teos:T_EOS  :production1000
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFormatStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.FormatStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tformat"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("trparen"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FormatStmt> ::= tformat:T_FORMAT tlparen:T_LPAREN trparen:T_RPAREN teos:T_EOS  :production1000
         */
        protected ASTFormatStmtNode userAction(Token v1, Token v2, Token v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production1000Production PRODUCTION1000 = Production1000Production.getInstance();

    public static class Production1001Production extends Production
    {
        private Production1001Production() {;} // Singleton
        private static Production1001Production singletonInstance = null;
        public static final Production1001Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1001Production(); return singletonInstance; }

        public String getDescription() { return "<FormatStmt> ::= tformat:T_FORMAT tlparen:T_LPAREN <FormatStmt@67> trparen:T_RPAREN teos:T_EOS  :production1001"; }

        /**
         * Reduce by <FormatStmt> ::= tformat:T_FORMAT tlparen:T_LPAREN <FormatStmt@67> trparen:T_RPAREN teos:T_EOS  :production1001
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FormatStmt> ::= tformat:T_FORMAT tlparen:T_LPAREN <FormatStmt@67> trparen:T_RPAREN teos:T_EOS  :production1001
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFmtSpecNode v3 = (ASTFmtSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFormatStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.FormatStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tformat"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("FmtSpec"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FormatStmt> ::= tformat:T_FORMAT tlparen:T_LPAREN <FormatStmt@67> trparen:T_RPAREN teos:T_EOS  :production1001
         */
        protected ASTFormatStmtNode userAction(Token v1, Token v2, ASTFmtSpecNode v3, Token v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production1001Production PRODUCTION1001 = Production1001Production.getInstance();

    public static class Production1002Production extends Production
    {
        private Production1002Production() {;} // Singleton
        private static Production1002Production singletonInstance = null;
        public static final Production1002Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1002Production(); return singletonInstance; }

        public String getDescription() { return "<FormatStmt> ::= LblDef:<LblDef> tformat:T_FORMAT tlparen:T_LPAREN trparen:T_RPAREN teos:T_EOS  :production1002"; }

        /**
         * Reduce by <FormatStmt> ::= LblDef:<LblDef> tformat:T_FORMAT tlparen:T_LPAREN trparen:T_RPAREN teos:T_EOS  :production1002
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FormatStmt> ::= LblDef:<LblDef> tformat:T_FORMAT tlparen:T_LPAREN trparen:T_RPAREN teos:T_EOS  :production1002
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFormatStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.FormatStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tformat"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FormatStmt> ::= LblDef:<LblDef> tformat:T_FORMAT tlparen:T_LPAREN trparen:T_RPAREN teos:T_EOS  :production1002
         */
        protected ASTFormatStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, Token v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production1002Production PRODUCTION1002 = Production1002Production.getInstance();

    public static class Production1003Production extends Production
    {
        private Production1003Production() {;} // Singleton
        private static Production1003Production singletonInstance = null;
        public static final Production1003Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1003Production(); return singletonInstance; }

        public String getDescription() { return "<FormatStmt> ::= LblDef:<LblDef> tformat:T_FORMAT tlparen:T_LPAREN <FormatStmt@67> trparen:T_RPAREN teos:T_EOS  :production1003"; }

        /**
         * Reduce by <FormatStmt> ::= LblDef:<LblDef> tformat:T_FORMAT tlparen:T_LPAREN <FormatStmt@67> trparen:T_RPAREN teos:T_EOS  :production1003
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FormatStmt> ::= LblDef:<LblDef> tformat:T_FORMAT tlparen:T_LPAREN <FormatStmt@67> trparen:T_RPAREN teos:T_EOS  :production1003
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFmtSpecNode v4 = (ASTFmtSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFormatStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.FormatStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tformat"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("FmtSpec"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FormatStmt> ::= LblDef:<LblDef> tformat:T_FORMAT tlparen:T_LPAREN <FormatStmt@67> trparen:T_RPAREN teos:T_EOS  :production1003
         */
        protected ASTFormatStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, ASTFmtSpecNode v4, Token v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production1003Production PRODUCTION1003 = Production1003Production.getInstance();

    public static class Production1004Production extends Production
    {
        private Production1004Production() {;} // Singleton
        private static Production1004Production singletonInstance = null;
        public static final Production1004Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1004Production(); return singletonInstance; }

        public String getDescription() { return "<FormatStmt> ::= tformat:T_FORMAT error:%error lookahead:T_EOS  :production1004"; }

        /**
         * Reduce by <FormatStmt> ::= tformat:T_FORMAT error:%error lookahead:T_EOS  :production1004
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FormatStmt> ::= tformat:T_FORMAT error:%error lookahead:T_EOS  :production1004
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            LinkedList v2 = (LinkedList)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFormatStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.FormatStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tformat"))
                return 0;
            else
                if (name.equals("error"))
                    return 1;
                else
                    if (name.equals("lookahead"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FormatStmt> ::= tformat:T_FORMAT error:%error lookahead:T_EOS  :production1004
         */
        protected ASTFormatStmtNode userAction(Token v1, LinkedList v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1004Production PRODUCTION1004 = Production1004Production.getInstance();

    public static class Production1005Production extends Production
    {
        private Production1005Production() {;} // Singleton
        private static Production1005Production singletonInstance = null;
        public static final Production1005Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1005Production(); return singletonInstance; }

        public String getDescription() { return "<FormatStmt> ::= LblDef:<LblDef> tformat:T_FORMAT error:%error lookahead:T_EOS  :production1005"; }

        /**
         * Reduce by <FormatStmt> ::= LblDef:<LblDef> tformat:T_FORMAT error:%error lookahead:T_EOS  :production1005
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FormatStmt> ::= LblDef:<LblDef> tformat:T_FORMAT error:%error lookahead:T_EOS  :production1005
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            LinkedList v3 = (LinkedList)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFormatStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.FormatStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tformat"))
                    return 1;
                else
                    if (name.equals("error"))
                        return 2;
                    else
                        if (name.equals("lookahead"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FormatStmt> ::= LblDef:<LblDef> tformat:T_FORMAT error:%error lookahead:T_EOS  :production1005
         */
        protected ASTFormatStmtNode userAction(ASTLblDefNode v1, Token v2, LinkedList v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production1005Production PRODUCTION1005 = Production1005Production.getInstance();

    public static class Production1006Production extends Production
    {
        private Production1006Production() {;} // Singleton
        private static Production1006Production singletonInstance = null;
        public static final Production1006Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1006Production(); return singletonInstance; }

        public String getDescription() { return "<FmtSpec> ::= Formatedit:<Formatedit>  :production1006"; }

        /**
         * Reduce by <FmtSpec> ::= Formatedit:<Formatedit>  :production1006
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FmtSpec> ::= Formatedit:<Formatedit>  :production1006
            ASTFormateditNode v1 = (ASTFormateditNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFmtSpecNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.FmtSpecNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Formatedit"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FmtSpec> ::= Formatedit:<Formatedit>  :production1006
         */
        protected ASTFmtSpecNode userAction(ASTFormateditNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production1006Production PRODUCTION1006 = Production1006Production.getInstance();

    public static class Production1007Production extends Production
    {
        private Production1007Production() {;} // Singleton
        private static Production1007Production singletonInstance = null;
        public static final Production1007Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1007Production(); return singletonInstance; }

        public String getDescription() { return "<FmtSpec> ::= Formatsep:<Formatsep>  :production1007"; }

        /**
         * Reduce by <FmtSpec> ::= Formatsep:<Formatsep>  :production1007
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FmtSpec> ::= Formatsep:<Formatsep>  :production1007
            ASTFormatsepNode v1 = (ASTFormatsepNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFmtSpecNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.FmtSpecNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Formatsep"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FmtSpec> ::= Formatsep:<Formatsep>  :production1007
         */
        protected ASTFmtSpecNode userAction(ASTFormatsepNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production1007Production PRODUCTION1007 = Production1007Production.getInstance();

    public static class Production1008Production extends Production
    {
        private Production1008Production() {;} // Singleton
        private static Production1008Production singletonInstance = null;
        public static final Production1008Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1008Production(); return singletonInstance; }

        public String getDescription() { return "<FmtSpec> ::= Formatsep:<Formatsep> Formatedit:<Formatedit>  :production1008"; }

        /**
         * Reduce by <FmtSpec> ::= Formatsep:<Formatsep> Formatedit:<Formatedit>  :production1008
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FmtSpec> ::= Formatsep:<Formatsep> Formatedit:<Formatedit>  :production1008
            ASTFormateditNode v2 = (ASTFormateditNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFormatsepNode v1 = (ASTFormatsepNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFmtSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.FmtSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Formatsep"))
                return 0;
            else
                if (name.equals("Formatedit"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FmtSpec> ::= Formatsep:<Formatsep> Formatedit:<Formatedit>  :production1008
         */
        protected ASTFmtSpecNode userAction(ASTFormatsepNode v1, ASTFormateditNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production1008Production PRODUCTION1008 = Production1008Production.getInstance();

    public static class Production1009Production extends Production
    {
        private Production1009Production() {;} // Singleton
        private static Production1009Production singletonInstance = null;
        public static final Production1009Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1009Production(); return singletonInstance; }

        public String getDescription() { return "<FmtSpec> ::= FmtSpec:<FmtSpec> Formatsep:<Formatsep>  :production1009"; }

        /**
         * Reduce by <FmtSpec> ::= FmtSpec:<FmtSpec> Formatsep:<Formatsep>  :production1009
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FmtSpec> ::= FmtSpec:<FmtSpec> Formatsep:<Formatsep>  :production1009
            ASTFormatsepNode v2 = (ASTFormatsepNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFmtSpecNode v1 = (ASTFmtSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFmtSpecNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.FmtSpecNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("FmtSpec"))
                return 0;
            else
                if (name.equals("Formatsep"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FmtSpec> ::= FmtSpec:<FmtSpec> Formatsep:<Formatsep>  :production1009
         */
        protected ASTFmtSpecNode userAction(ASTFmtSpecNode v1, ASTFormatsepNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production1009Production PRODUCTION1009 = Production1009Production.getInstance();

    public static class Production1010Production extends Production
    {
        private Production1010Production() {;} // Singleton
        private static Production1010Production singletonInstance = null;
        public static final Production1010Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1010Production(); return singletonInstance; }

        public String getDescription() { return "<FmtSpec> ::= FmtSpec:<FmtSpec> Formatsep:<Formatsep> Formatedit:<Formatedit>  :production1010"; }

        /**
         * Reduce by <FmtSpec> ::= FmtSpec:<FmtSpec> Formatsep:<Formatsep> Formatedit:<Formatedit>  :production1010
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FmtSpec> ::= FmtSpec:<FmtSpec> Formatsep:<Formatsep> Formatedit:<Formatedit>  :production1010
            ASTFormateditNode v3 = (ASTFormateditNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFormatsepNode v2 = (ASTFormatsepNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFmtSpecNode v1 = (ASTFmtSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFmtSpecNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.FmtSpecNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("FmtSpec"))
                return 0;
            else
                if (name.equals("Formatsep"))
                    return 1;
                else
                    if (name.equals("Formatedit"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FmtSpec> ::= FmtSpec:<FmtSpec> Formatsep:<Formatsep> Formatedit:<Formatedit>  :production1010
         */
        protected ASTFmtSpecNode userAction(ASTFmtSpecNode v1, ASTFormatsepNode v2, ASTFormateditNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production1010Production PRODUCTION1010 = Production1010Production.getInstance();

    public static class Production1011Production extends Production
    {
        private Production1011Production() {;} // Singleton
        private static Production1011Production singletonInstance = null;
        public static final Production1011Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1011Production(); return singletonInstance; }

        public String getDescription() { return "<FmtSpec> ::= FmtSpec:<FmtSpec> tcomma:T_COMMA Formatedit:<Formatedit>  :production1011"; }

        /**
         * Reduce by <FmtSpec> ::= FmtSpec:<FmtSpec> tcomma:T_COMMA Formatedit:<Formatedit>  :production1011
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FmtSpec> ::= FmtSpec:<FmtSpec> tcomma:T_COMMA Formatedit:<Formatedit>  :production1011
            ASTFormateditNode v3 = (ASTFormateditNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFmtSpecNode v1 = (ASTFmtSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFmtSpecNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.FmtSpecNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("FmtSpec"))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("Formatedit"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FmtSpec> ::= FmtSpec:<FmtSpec> tcomma:T_COMMA Formatedit:<Formatedit>  :production1011
         */
        protected ASTFmtSpecNode userAction(ASTFmtSpecNode v1, Token v2, ASTFormateditNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production1011Production PRODUCTION1011 = Production1011Production.getInstance();

    public static class Production1012Production extends Production
    {
        private Production1012Production() {;} // Singleton
        private static Production1012Production singletonInstance = null;
        public static final Production1012Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1012Production(); return singletonInstance; }

        public String getDescription() { return "<FmtSpec> ::= FmtSpec:<FmtSpec> tcomma:T_COMMA Formatsep:<Formatsep>  :production1012"; }

        /**
         * Reduce by <FmtSpec> ::= FmtSpec:<FmtSpec> tcomma:T_COMMA Formatsep:<Formatsep>  :production1012
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FmtSpec> ::= FmtSpec:<FmtSpec> tcomma:T_COMMA Formatsep:<Formatsep>  :production1012
            ASTFormatsepNode v3 = (ASTFormatsepNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFmtSpecNode v1 = (ASTFmtSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFmtSpecNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.FmtSpecNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("FmtSpec"))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("Formatsep"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FmtSpec> ::= FmtSpec:<FmtSpec> tcomma:T_COMMA Formatsep:<Formatsep>  :production1012
         */
        protected ASTFmtSpecNode userAction(ASTFmtSpecNode v1, Token v2, ASTFormatsepNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production1012Production PRODUCTION1012 = Production1012Production.getInstance();

    public static class Production1013Production extends Production
    {
        private Production1013Production() {;} // Singleton
        private static Production1013Production singletonInstance = null;
        public static final Production1013Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1013Production(); return singletonInstance; }

        public String getDescription() { return "<FmtSpec> ::= FmtSpec:<FmtSpec> tcomma:T_COMMA Formatsep:<Formatsep> Formatedit:<Formatedit>  :production1013"; }

        /**
         * Reduce by <FmtSpec> ::= FmtSpec:<FmtSpec> tcomma:T_COMMA Formatsep:<Formatsep> Formatedit:<Formatedit>  :production1013
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FmtSpec> ::= FmtSpec:<FmtSpec> tcomma:T_COMMA Formatsep:<Formatsep> Formatedit:<Formatedit>  :production1013
            ASTFormateditNode v4 = (ASTFormateditNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFormatsepNode v3 = (ASTFormatsepNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFmtSpecNode v1 = (ASTFmtSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFmtSpecNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.FmtSpecNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("FmtSpec"))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("Formatsep"))
                        return 2;
                    else
                        if (name.equals("Formatedit"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FmtSpec> ::= FmtSpec:<FmtSpec> tcomma:T_COMMA Formatsep:<Formatsep> Formatedit:<Formatedit>  :production1013
         */
        protected ASTFmtSpecNode userAction(ASTFmtSpecNode v1, Token v2, ASTFormatsepNode v3, ASTFormateditNode v4)
        {
            return null;
        }
    }
    public static final Productions.Production1013Production PRODUCTION1013 = Production1013Production.getInstance();

    public static class Production1014Production extends Production
    {
        private Production1014Production() {;} // Singleton
        private static Production1014Production singletonInstance = null;
        public static final Production1014Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1014Production(); return singletonInstance; }

        public String getDescription() { return "<Formatedit> ::= EditElement:<EditElement>  :production1014"; }

        /**
         * Reduce by <Formatedit> ::= EditElement:<EditElement>  :production1014
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Formatedit> ::= EditElement:<EditElement>  :production1014
            ASTEditElementNode v1 = (ASTEditElementNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFormateditNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.FormateditNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EditElement"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Formatedit> ::= EditElement:<EditElement>  :production1014
         */
        protected ASTFormateditNode userAction(ASTEditElementNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production1014Production PRODUCTION1014 = Production1014Production.getInstance();

    public static class Production1015Production extends Production
    {
        private Production1015Production() {;} // Singleton
        private static Production1015Production singletonInstance = null;
        public static final Production1015Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1015Production(); return singletonInstance; }

        public String getDescription() { return "<Formatedit> ::= ticon:T_ICON EditElement:<EditElement>  :production1015"; }

        /**
         * Reduce by <Formatedit> ::= ticon:T_ICON EditElement:<EditElement>  :production1015
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Formatedit> ::= ticon:T_ICON EditElement:<EditElement>  :production1015
            ASTEditElementNode v2 = (ASTEditElementNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFormateditNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.FormateditNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ticon"))
                return 0;
            else
                if (name.equals("EditElement"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Formatedit> ::= ticon:T_ICON EditElement:<EditElement>  :production1015
         */
        protected ASTFormateditNode userAction(Token v1, ASTEditElementNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production1015Production PRODUCTION1015 = Production1015Production.getInstance();

    public static class Production1016Production extends Production
    {
        private Production1016Production() {;} // Singleton
        private static Production1016Production singletonInstance = null;
        public static final Production1016Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1016Production(); return singletonInstance; }

        public String getDescription() { return "<Formatedit> ::= txcon:T_XCON  :production1016"; }

        /**
         * Reduce by <Formatedit> ::= txcon:T_XCON  :production1016
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Formatedit> ::= txcon:T_XCON  :production1016
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFormateditNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.FormateditNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("txcon"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Formatedit> ::= txcon:T_XCON  :production1016
         */
        protected ASTFormateditNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production1016Production PRODUCTION1016 = Production1016Production.getInstance();

    public static class Production1017Production extends Production
    {
        private Production1017Production() {;} // Singleton
        private static Production1017Production singletonInstance = null;
        public static final Production1017Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1017Production(); return singletonInstance; }

        public String getDescription() { return "<Formatedit> ::= tpcon:T_PCON  :production1017"; }

        /**
         * Reduce by <Formatedit> ::= tpcon:T_PCON  :production1017
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Formatedit> ::= tpcon:T_PCON  :production1017
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFormateditNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.FormateditNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tpcon"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Formatedit> ::= tpcon:T_PCON  :production1017
         */
        protected ASTFormateditNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production1017Production PRODUCTION1017 = Production1017Production.getInstance();

    public static class Production1018Production extends Production
    {
        private Production1018Production() {;} // Singleton
        private static Production1018Production singletonInstance = null;
        public static final Production1018Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1018Production(); return singletonInstance; }

        public String getDescription() { return "<Formatedit> ::= tpcon:T_PCON EditElement:<EditElement>  :production1018"; }

        /**
         * Reduce by <Formatedit> ::= tpcon:T_PCON EditElement:<EditElement>  :production1018
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Formatedit> ::= tpcon:T_PCON EditElement:<EditElement>  :production1018
            ASTEditElementNode v2 = (ASTEditElementNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFormateditNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.FormateditNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tpcon"))
                return 0;
            else
                if (name.equals("EditElement"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Formatedit> ::= tpcon:T_PCON EditElement:<EditElement>  :production1018
         */
        protected ASTFormateditNode userAction(Token v1, ASTEditElementNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production1018Production PRODUCTION1018 = Production1018Production.getInstance();

    public static class Production1019Production extends Production
    {
        private Production1019Production() {;} // Singleton
        private static Production1019Production singletonInstance = null;
        public static final Production1019Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1019Production(); return singletonInstance; }

        public String getDescription() { return "<Formatedit> ::= tpcon:T_PCON ticon:T_ICON EditElement:<EditElement>  :production1019"; }

        /**
         * Reduce by <Formatedit> ::= tpcon:T_PCON ticon:T_ICON EditElement:<EditElement>  :production1019
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Formatedit> ::= tpcon:T_PCON ticon:T_ICON EditElement:<EditElement>  :production1019
            ASTEditElementNode v3 = (ASTEditElementNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFormateditNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.FormateditNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tpcon"))
                return 0;
            else
                if (name.equals("ticon"))
                    return 1;
                else
                    if (name.equals("EditElement"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Formatedit> ::= tpcon:T_PCON ticon:T_ICON EditElement:<EditElement>  :production1019
         */
        protected ASTFormateditNode userAction(Token v1, Token v2, ASTEditElementNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production1019Production PRODUCTION1019 = Production1019Production.getInstance();

    public static class Production1020Production extends Production
    {
        private Production1020Production() {;} // Singleton
        private static Production1020Production singletonInstance = null;
        public static final Production1020Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1020Production(); return singletonInstance; }

        public String getDescription() { return "<EditElement> ::= tfcon:T_FCON  :production1020"; }

        /**
         * Reduce by <EditElement> ::= tfcon:T_FCON  :production1020
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EditElement> ::= tfcon:T_FCON  :production1020
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEditElementNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.EditElementNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tfcon"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EditElement> ::= tfcon:T_FCON  :production1020
         */
        protected ASTEditElementNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production1020Production PRODUCTION1020 = Production1020Production.getInstance();

    public static class Production1021Production extends Production
    {
        private Production1021Production() {;} // Singleton
        private static Production1021Production singletonInstance = null;
        public static final Production1021Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1021Production(); return singletonInstance; }

        public String getDescription() { return "<EditElement> ::= tscon:T_SCON  :production1021"; }

        /**
         * Reduce by <EditElement> ::= tscon:T_SCON  :production1021
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EditElement> ::= tscon:T_SCON  :production1021
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEditElementNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.EditElementNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tscon"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EditElement> ::= tscon:T_SCON  :production1021
         */
        protected ASTEditElementNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production1021Production PRODUCTION1021 = Production1021Production.getInstance();

    public static class Production1022Production extends Production
    {
        private Production1022Production() {;} // Singleton
        private static Production1022Production singletonInstance = null;
        public static final Production1022Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1022Production(); return singletonInstance; }

        public String getDescription() { return "<EditElement> ::= tident:T_IDENT  :production1022"; }

        /**
         * Reduce by <EditElement> ::= tident:T_IDENT  :production1022
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EditElement> ::= tident:T_IDENT  :production1022
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEditElementNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.EditElementNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tident"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EditElement> ::= tident:T_IDENT  :production1022
         */
        protected ASTEditElementNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production1022Production PRODUCTION1022 = Production1022Production.getInstance();

    public static class Production1023Production extends Production
    {
        private Production1023Production() {;} // Singleton
        private static Production1023Production singletonInstance = null;
        public static final Production1023Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1023Production(); return singletonInstance; }

        public String getDescription() { return "<EditElement> ::= tlparen:T_LPAREN FmtSpec:<FmtSpec> trparen:T_RPAREN  :production1023"; }

        /**
         * Reduce by <EditElement> ::= tlparen:T_LPAREN FmtSpec:<FmtSpec> trparen:T_RPAREN  :production1023
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EditElement> ::= tlparen:T_LPAREN FmtSpec:<FmtSpec> trparen:T_RPAREN  :production1023
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFmtSpecNode v2 = (ASTFmtSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEditElementNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EditElementNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("FmtSpec"))
                    return 1;
                else
                    if (name.equals("trparen"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EditElement> ::= tlparen:T_LPAREN FmtSpec:<FmtSpec> trparen:T_RPAREN  :production1023
         */
        protected ASTEditElementNode userAction(Token v1, ASTFmtSpecNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1023Production PRODUCTION1023 = Production1023Production.getInstance();

    public static class Production1024Production extends Production
    {
        private Production1024Production() {;} // Singleton
        private static Production1024Production singletonInstance = null;
        public static final Production1024Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1024Production(); return singletonInstance; }

        public String getDescription() { return "<EditElement> ::= thcon:T_HCON  :production1024"; }

        /**
         * Reduce by <EditElement> ::= thcon:T_HCON  :production1024
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EditElement> ::= thcon:T_HCON  :production1024
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEditElementNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.EditElementNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("thcon"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EditElement> ::= thcon:T_HCON  :production1024
         */
        protected ASTEditElementNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production1024Production PRODUCTION1024 = Production1024Production.getInstance();

    public static class Production1025Production extends Production
    {
        private Production1025Production() {;} // Singleton
        private static Production1025Production singletonInstance = null;
        public static final Production1025Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1025Production(); return singletonInstance; }

        public String getDescription() { return "<Formatsep> ::= tslash:T_SLASH  :production1025"; }

        /**
         * Reduce by <Formatsep> ::= tslash:T_SLASH  :production1025
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Formatsep> ::= tslash:T_SLASH  :production1025
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFormatsepNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.FormatsepNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tslash"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Formatsep> ::= tslash:T_SLASH  :production1025
         */
        protected ASTFormatsepNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production1025Production PRODUCTION1025 = Production1025Production.getInstance();

    public static class Production1026Production extends Production
    {
        private Production1026Production() {;} // Singleton
        private static Production1026Production singletonInstance = null;
        public static final Production1026Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1026Production(); return singletonInstance; }

        public String getDescription() { return "<Formatsep> ::= tcolon:T_COLON  :production1026"; }

        /**
         * Reduce by <Formatsep> ::= tcolon:T_COLON  :production1026
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Formatsep> ::= tcolon:T_COLON  :production1026
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFormatsepNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.FormatsepNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tcolon"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Formatsep> ::= tcolon:T_COLON  :production1026
         */
        protected ASTFormatsepNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production1026Production PRODUCTION1026 = Production1026Production.getInstance();

    public static class Production1027Production extends Production
    {
        private Production1027Production() {;} // Singleton
        private static Production1027Production singletonInstance = null;
        public static final Production1027Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1027Production(); return singletonInstance; }

        public String getDescription() { return "<ProgramStmt> ::= tprogram:T_PROGRAM ProgramName:<ProgramName> teos:T_EOS  :production1027"; }

        /**
         * Reduce by <ProgramStmt> ::= tprogram:T_PROGRAM ProgramName:<ProgramName> teos:T_EOS  :production1027
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ProgramStmt> ::= tprogram:T_PROGRAM ProgramName:<ProgramName> teos:T_EOS  :production1027
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTProgramNameNode v2 = (ASTProgramNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTProgramStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.ProgramStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tprogram"))
                return 0;
            else
                if (name.equals("ProgramName"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ProgramStmt> ::= tprogram:T_PROGRAM ProgramName:<ProgramName> teos:T_EOS  :production1027
         */
        protected ASTProgramStmtNode userAction(Token v1, ASTProgramNameNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1027Production PRODUCTION1027 = Production1027Production.getInstance();

    public static class Production1028Production extends Production
    {
        private Production1028Production() {;} // Singleton
        private static Production1028Production singletonInstance = null;
        public static final Production1028Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1028Production(); return singletonInstance; }

        public String getDescription() { return "<ProgramStmt> ::= LblDef:<LblDef> tprogram:T_PROGRAM ProgramName:<ProgramName> teos:T_EOS  :production1028"; }

        /**
         * Reduce by <ProgramStmt> ::= LblDef:<LblDef> tprogram:T_PROGRAM ProgramName:<ProgramName> teos:T_EOS  :production1028
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ProgramStmt> ::= LblDef:<LblDef> tprogram:T_PROGRAM ProgramName:<ProgramName> teos:T_EOS  :production1028
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTProgramNameNode v3 = (ASTProgramNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTProgramStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.ProgramStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tprogram"))
                    return 1;
                else
                    if (name.equals("ProgramName"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ProgramStmt> ::= LblDef:<LblDef> tprogram:T_PROGRAM ProgramName:<ProgramName> teos:T_EOS  :production1028
         */
        protected ASTProgramStmtNode userAction(ASTLblDefNode v1, Token v2, ASTProgramNameNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production1028Production PRODUCTION1028 = Production1028Production.getInstance();

    public static class Production1029Production extends Production
    {
        private Production1029Production() {;} // Singleton
        private static Production1029Production singletonInstance = null;
        public static final Production1029Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1029Production(); return singletonInstance; }

        public String getDescription() { return "<EndProgramStmt> ::= tend:T_END teos:T_EOS  :production1029"; }

        /**
         * Reduce by <EndProgramStmt> ::= tend:T_END teos:T_EOS  :production1029
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndProgramStmt> ::= tend:T_END teos:T_EOS  :production1029
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndProgramStmtNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.EndProgramStmtNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tend"))
                return 0;
            else
                if (name.equals("teos"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndProgramStmt> ::= tend:T_END teos:T_EOS  :production1029
         */
        protected ASTEndProgramStmtNode userAction(Token v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production1029Production PRODUCTION1029 = Production1029Production.getInstance();

    public static class Production1030Production extends Production
    {
        private Production1030Production() {;} // Singleton
        private static Production1030Production singletonInstance = null;
        public static final Production1030Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1030Production(); return singletonInstance; }

        public String getDescription() { return "<EndProgramStmt> ::= LblDef:<LblDef> tend:T_END teos:T_EOS  :production1030"; }

        /**
         * Reduce by <EndProgramStmt> ::= LblDef:<LblDef> tend:T_END teos:T_EOS  :production1030
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndProgramStmt> ::= LblDef:<LblDef> tend:T_END teos:T_EOS  :production1030
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndProgramStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EndProgramStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tend"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndProgramStmt> ::= LblDef:<LblDef> tend:T_END teos:T_EOS  :production1030
         */
        protected ASTEndProgramStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1030Production PRODUCTION1030 = Production1030Production.getInstance();

    public static class Production1031Production extends Production
    {
        private Production1031Production() {;} // Singleton
        private static Production1031Production singletonInstance = null;
        public static final Production1031Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1031Production(); return singletonInstance; }

        public String getDescription() { return "<EndProgramStmt> ::= tendprogram:T_ENDPROGRAM teos:T_EOS  :production1031"; }

        /**
         * Reduce by <EndProgramStmt> ::= tendprogram:T_ENDPROGRAM teos:T_EOS  :production1031
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndProgramStmt> ::= tendprogram:T_ENDPROGRAM teos:T_EOS  :production1031
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndProgramStmtNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.EndProgramStmtNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tendprogram"))
                return 0;
            else
                if (name.equals("teos"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndProgramStmt> ::= tendprogram:T_ENDPROGRAM teos:T_EOS  :production1031
         */
        protected ASTEndProgramStmtNode userAction(Token v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production1031Production PRODUCTION1031 = Production1031Production.getInstance();

    public static class Production1032Production extends Production
    {
        private Production1032Production() {;} // Singleton
        private static Production1032Production singletonInstance = null;
        public static final Production1032Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1032Production(); return singletonInstance; }

        public String getDescription() { return "<EndProgramStmt> ::= tendprogram:T_ENDPROGRAM <EndProgramStmt@68> teos:T_EOS  :production1032"; }

        /**
         * Reduce by <EndProgramStmt> ::= tendprogram:T_ENDPROGRAM <EndProgramStmt@68> teos:T_EOS  :production1032
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndProgramStmt> ::= tendprogram:T_ENDPROGRAM <EndProgramStmt@68> teos:T_EOS  :production1032
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v2 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndProgramStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EndProgramStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tendprogram"))
                return 0;
            else
                if (name.equals("EndName"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndProgramStmt> ::= tendprogram:T_ENDPROGRAM <EndProgramStmt@68> teos:T_EOS  :production1032
         */
        protected ASTEndProgramStmtNode userAction(Token v1, ASTEndNameNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1032Production PRODUCTION1032 = Production1032Production.getInstance();

    public static class Production1033Production extends Production
    {
        private Production1033Production() {;} // Singleton
        private static Production1033Production singletonInstance = null;
        public static final Production1033Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1033Production(); return singletonInstance; }

        public String getDescription() { return "<EndProgramStmt> ::= LblDef:<LblDef> tendprogram:T_ENDPROGRAM teos:T_EOS  :production1033"; }

        /**
         * Reduce by <EndProgramStmt> ::= LblDef:<LblDef> tendprogram:T_ENDPROGRAM teos:T_EOS  :production1033
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndProgramStmt> ::= LblDef:<LblDef> tendprogram:T_ENDPROGRAM teos:T_EOS  :production1033
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndProgramStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EndProgramStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tendprogram"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndProgramStmt> ::= LblDef:<LblDef> tendprogram:T_ENDPROGRAM teos:T_EOS  :production1033
         */
        protected ASTEndProgramStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1033Production PRODUCTION1033 = Production1033Production.getInstance();

    public static class Production1034Production extends Production
    {
        private Production1034Production() {;} // Singleton
        private static Production1034Production singletonInstance = null;
        public static final Production1034Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1034Production(); return singletonInstance; }

        public String getDescription() { return "<EndProgramStmt> ::= LblDef:<LblDef> tendprogram:T_ENDPROGRAM <EndProgramStmt@68> teos:T_EOS  :production1034"; }

        /**
         * Reduce by <EndProgramStmt> ::= LblDef:<LblDef> tendprogram:T_ENDPROGRAM <EndProgramStmt@68> teos:T_EOS  :production1034
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndProgramStmt> ::= LblDef:<LblDef> tendprogram:T_ENDPROGRAM <EndProgramStmt@68> teos:T_EOS  :production1034
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v3 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndProgramStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EndProgramStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tendprogram"))
                    return 1;
                else
                    if (name.equals("EndName"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndProgramStmt> ::= LblDef:<LblDef> tendprogram:T_ENDPROGRAM <EndProgramStmt@68> teos:T_EOS  :production1034
         */
        protected ASTEndProgramStmtNode userAction(ASTLblDefNode v1, Token v2, ASTEndNameNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production1034Production PRODUCTION1034 = Production1034Production.getInstance();

    public static class Production1035Production extends Production
    {
        private Production1035Production() {;} // Singleton
        private static Production1035Production singletonInstance = null;
        public static final Production1035Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1035Production(); return singletonInstance; }

        public String getDescription() { return "<EndProgramStmt> ::= tend:T_END tprogram:T_PROGRAM teos:T_EOS  :production1035"; }

        /**
         * Reduce by <EndProgramStmt> ::= tend:T_END tprogram:T_PROGRAM teos:T_EOS  :production1035
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndProgramStmt> ::= tend:T_END tprogram:T_PROGRAM teos:T_EOS  :production1035
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndProgramStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EndProgramStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tend"))
                return 0;
            else
                if (name.equals("tprogram"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndProgramStmt> ::= tend:T_END tprogram:T_PROGRAM teos:T_EOS  :production1035
         */
        protected ASTEndProgramStmtNode userAction(Token v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1035Production PRODUCTION1035 = Production1035Production.getInstance();

    public static class Production1036Production extends Production
    {
        private Production1036Production() {;} // Singleton
        private static Production1036Production singletonInstance = null;
        public static final Production1036Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1036Production(); return singletonInstance; }

        public String getDescription() { return "<EndProgramStmt> ::= tend:T_END tprogram:T_PROGRAM <EndProgramStmt@69> teos:T_EOS  :production1036"; }

        /**
         * Reduce by <EndProgramStmt> ::= tend:T_END tprogram:T_PROGRAM <EndProgramStmt@69> teos:T_EOS  :production1036
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndProgramStmt> ::= tend:T_END tprogram:T_PROGRAM <EndProgramStmt@69> teos:T_EOS  :production1036
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v3 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndProgramStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EndProgramStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tend"))
                return 0;
            else
                if (name.equals("tprogram"))
                    return 1;
                else
                    if (name.equals("EndName"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndProgramStmt> ::= tend:T_END tprogram:T_PROGRAM <EndProgramStmt@69> teos:T_EOS  :production1036
         */
        protected ASTEndProgramStmtNode userAction(Token v1, Token v2, ASTEndNameNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production1036Production PRODUCTION1036 = Production1036Production.getInstance();

    public static class Production1037Production extends Production
    {
        private Production1037Production() {;} // Singleton
        private static Production1037Production singletonInstance = null;
        public static final Production1037Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1037Production(); return singletonInstance; }

        public String getDescription() { return "<EndProgramStmt> ::= LblDef:<LblDef> tend:T_END tprogram:T_PROGRAM teos:T_EOS  :production1037"; }

        /**
         * Reduce by <EndProgramStmt> ::= LblDef:<LblDef> tend:T_END tprogram:T_PROGRAM teos:T_EOS  :production1037
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndProgramStmt> ::= LblDef:<LblDef> tend:T_END tprogram:T_PROGRAM teos:T_EOS  :production1037
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndProgramStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EndProgramStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tend"))
                    return 1;
                else
                    if (name.equals("tprogram"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndProgramStmt> ::= LblDef:<LblDef> tend:T_END tprogram:T_PROGRAM teos:T_EOS  :production1037
         */
        protected ASTEndProgramStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production1037Production PRODUCTION1037 = Production1037Production.getInstance();

    public static class Production1038Production extends Production
    {
        private Production1038Production() {;} // Singleton
        private static Production1038Production singletonInstance = null;
        public static final Production1038Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1038Production(); return singletonInstance; }

        public String getDescription() { return "<EndProgramStmt> ::= LblDef:<LblDef> tend:T_END tprogram:T_PROGRAM <EndProgramStmt@69> teos:T_EOS  :production1038"; }

        /**
         * Reduce by <EndProgramStmt> ::= LblDef:<LblDef> tend:T_END tprogram:T_PROGRAM <EndProgramStmt@69> teos:T_EOS  :production1038
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndProgramStmt> ::= LblDef:<LblDef> tend:T_END tprogram:T_PROGRAM <EndProgramStmt@69> teos:T_EOS  :production1038
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v4 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndProgramStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.EndProgramStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tend"))
                    return 1;
                else
                    if (name.equals("tprogram"))
                        return 2;
                    else
                        if (name.equals("EndName"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndProgramStmt> ::= LblDef:<LblDef> tend:T_END tprogram:T_PROGRAM <EndProgramStmt@69> teos:T_EOS  :production1038
         */
        protected ASTEndProgramStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, ASTEndNameNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production1038Production PRODUCTION1038 = Production1038Production.getInstance();

    public static class Production1039Production extends Production
    {
        private Production1039Production() {;} // Singleton
        private static Production1039Production singletonInstance = null;
        public static final Production1039Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1039Production(); return singletonInstance; }

        public String getDescription() { return "<ModuleStmt> ::= tmodule:T_MODULE ModuleName:<ModuleName> teos:T_EOS  :production1039"; }

        /**
         * Reduce by <ModuleStmt> ::= tmodule:T_MODULE ModuleName:<ModuleName> teos:T_EOS  :production1039
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ModuleStmt> ::= tmodule:T_MODULE ModuleName:<ModuleName> teos:T_EOS  :production1039
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTModuleNameNode v2 = (ASTModuleNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTModuleStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.ModuleStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tmodule"))
                return 0;
            else
                if (name.equals("ModuleName"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ModuleStmt> ::= tmodule:T_MODULE ModuleName:<ModuleName> teos:T_EOS  :production1039
         */
        protected ASTModuleStmtNode userAction(Token v1, ASTModuleNameNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1039Production PRODUCTION1039 = Production1039Production.getInstance();

    public static class Production1040Production extends Production
    {
        private Production1040Production() {;} // Singleton
        private static Production1040Production singletonInstance = null;
        public static final Production1040Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1040Production(); return singletonInstance; }

        public String getDescription() { return "<ModuleStmt> ::= LblDef:<LblDef> tmodule:T_MODULE ModuleName:<ModuleName> teos:T_EOS  :production1040"; }

        /**
         * Reduce by <ModuleStmt> ::= LblDef:<LblDef> tmodule:T_MODULE ModuleName:<ModuleName> teos:T_EOS  :production1040
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ModuleStmt> ::= LblDef:<LblDef> tmodule:T_MODULE ModuleName:<ModuleName> teos:T_EOS  :production1040
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTModuleNameNode v3 = (ASTModuleNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTModuleStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.ModuleStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tmodule"))
                    return 1;
                else
                    if (name.equals("ModuleName"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ModuleStmt> ::= LblDef:<LblDef> tmodule:T_MODULE ModuleName:<ModuleName> teos:T_EOS  :production1040
         */
        protected ASTModuleStmtNode userAction(ASTLblDefNode v1, Token v2, ASTModuleNameNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production1040Production PRODUCTION1040 = Production1040Production.getInstance();

    public static class Production1041Production extends Production
    {
        private Production1041Production() {;} // Singleton
        private static Production1041Production singletonInstance = null;
        public static final Production1041Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1041Production(); return singletonInstance; }

        public String getDescription() { return "<EndModuleStmt> ::= tend:T_END teos:T_EOS  :production1041"; }

        /**
         * Reduce by <EndModuleStmt> ::= tend:T_END teos:T_EOS  :production1041
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndModuleStmt> ::= tend:T_END teos:T_EOS  :production1041
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndModuleStmtNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.EndModuleStmtNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tend"))
                return 0;
            else
                if (name.equals("teos"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndModuleStmt> ::= tend:T_END teos:T_EOS  :production1041
         */
        protected ASTEndModuleStmtNode userAction(Token v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production1041Production PRODUCTION1041 = Production1041Production.getInstance();

    public static class Production1042Production extends Production
    {
        private Production1042Production() {;} // Singleton
        private static Production1042Production singletonInstance = null;
        public static final Production1042Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1042Production(); return singletonInstance; }

        public String getDescription() { return "<EndModuleStmt> ::= LblDef:<LblDef> tend:T_END teos:T_EOS  :production1042"; }

        /**
         * Reduce by <EndModuleStmt> ::= LblDef:<LblDef> tend:T_END teos:T_EOS  :production1042
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndModuleStmt> ::= LblDef:<LblDef> tend:T_END teos:T_EOS  :production1042
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndModuleStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EndModuleStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tend"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndModuleStmt> ::= LblDef:<LblDef> tend:T_END teos:T_EOS  :production1042
         */
        protected ASTEndModuleStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1042Production PRODUCTION1042 = Production1042Production.getInstance();

    public static class Production1043Production extends Production
    {
        private Production1043Production() {;} // Singleton
        private static Production1043Production singletonInstance = null;
        public static final Production1043Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1043Production(); return singletonInstance; }

        public String getDescription() { return "<EndModuleStmt> ::= tendmodule:T_ENDMODULE teos:T_EOS  :production1043"; }

        /**
         * Reduce by <EndModuleStmt> ::= tendmodule:T_ENDMODULE teos:T_EOS  :production1043
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndModuleStmt> ::= tendmodule:T_ENDMODULE teos:T_EOS  :production1043
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndModuleStmtNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.EndModuleStmtNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tendmodule"))
                return 0;
            else
                if (name.equals("teos"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndModuleStmt> ::= tendmodule:T_ENDMODULE teos:T_EOS  :production1043
         */
        protected ASTEndModuleStmtNode userAction(Token v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production1043Production PRODUCTION1043 = Production1043Production.getInstance();

    public static class Production1044Production extends Production
    {
        private Production1044Production() {;} // Singleton
        private static Production1044Production singletonInstance = null;
        public static final Production1044Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1044Production(); return singletonInstance; }

        public String getDescription() { return "<EndModuleStmt> ::= tendmodule:T_ENDMODULE <EndModuleStmt@70> teos:T_EOS  :production1044"; }

        /**
         * Reduce by <EndModuleStmt> ::= tendmodule:T_ENDMODULE <EndModuleStmt@70> teos:T_EOS  :production1044
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndModuleStmt> ::= tendmodule:T_ENDMODULE <EndModuleStmt@70> teos:T_EOS  :production1044
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v2 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndModuleStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EndModuleStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tendmodule"))
                return 0;
            else
                if (name.equals("EndName"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndModuleStmt> ::= tendmodule:T_ENDMODULE <EndModuleStmt@70> teos:T_EOS  :production1044
         */
        protected ASTEndModuleStmtNode userAction(Token v1, ASTEndNameNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1044Production PRODUCTION1044 = Production1044Production.getInstance();

    public static class Production1045Production extends Production
    {
        private Production1045Production() {;} // Singleton
        private static Production1045Production singletonInstance = null;
        public static final Production1045Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1045Production(); return singletonInstance; }

        public String getDescription() { return "<EndModuleStmt> ::= LblDef:<LblDef> tendmodule:T_ENDMODULE teos:T_EOS  :production1045"; }

        /**
         * Reduce by <EndModuleStmt> ::= LblDef:<LblDef> tendmodule:T_ENDMODULE teos:T_EOS  :production1045
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndModuleStmt> ::= LblDef:<LblDef> tendmodule:T_ENDMODULE teos:T_EOS  :production1045
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndModuleStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EndModuleStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tendmodule"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndModuleStmt> ::= LblDef:<LblDef> tendmodule:T_ENDMODULE teos:T_EOS  :production1045
         */
        protected ASTEndModuleStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1045Production PRODUCTION1045 = Production1045Production.getInstance();

    public static class Production1046Production extends Production
    {
        private Production1046Production() {;} // Singleton
        private static Production1046Production singletonInstance = null;
        public static final Production1046Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1046Production(); return singletonInstance; }

        public String getDescription() { return "<EndModuleStmt> ::= LblDef:<LblDef> tendmodule:T_ENDMODULE <EndModuleStmt@70> teos:T_EOS  :production1046"; }

        /**
         * Reduce by <EndModuleStmt> ::= LblDef:<LblDef> tendmodule:T_ENDMODULE <EndModuleStmt@70> teos:T_EOS  :production1046
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndModuleStmt> ::= LblDef:<LblDef> tendmodule:T_ENDMODULE <EndModuleStmt@70> teos:T_EOS  :production1046
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v3 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndModuleStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EndModuleStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tendmodule"))
                    return 1;
                else
                    if (name.equals("EndName"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndModuleStmt> ::= LblDef:<LblDef> tendmodule:T_ENDMODULE <EndModuleStmt@70> teos:T_EOS  :production1046
         */
        protected ASTEndModuleStmtNode userAction(ASTLblDefNode v1, Token v2, ASTEndNameNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production1046Production PRODUCTION1046 = Production1046Production.getInstance();

    public static class Production1047Production extends Production
    {
        private Production1047Production() {;} // Singleton
        private static Production1047Production singletonInstance = null;
        public static final Production1047Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1047Production(); return singletonInstance; }

        public String getDescription() { return "<EndModuleStmt> ::= tend:T_END tmodule:T_MODULE teos:T_EOS  :production1047"; }

        /**
         * Reduce by <EndModuleStmt> ::= tend:T_END tmodule:T_MODULE teos:T_EOS  :production1047
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndModuleStmt> ::= tend:T_END tmodule:T_MODULE teos:T_EOS  :production1047
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndModuleStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EndModuleStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tend"))
                return 0;
            else
                if (name.equals("tmodule"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndModuleStmt> ::= tend:T_END tmodule:T_MODULE teos:T_EOS  :production1047
         */
        protected ASTEndModuleStmtNode userAction(Token v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1047Production PRODUCTION1047 = Production1047Production.getInstance();

    public static class Production1048Production extends Production
    {
        private Production1048Production() {;} // Singleton
        private static Production1048Production singletonInstance = null;
        public static final Production1048Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1048Production(); return singletonInstance; }

        public String getDescription() { return "<EndModuleStmt> ::= tend:T_END tmodule:T_MODULE <EndModuleStmt@71> teos:T_EOS  :production1048"; }

        /**
         * Reduce by <EndModuleStmt> ::= tend:T_END tmodule:T_MODULE <EndModuleStmt@71> teos:T_EOS  :production1048
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndModuleStmt> ::= tend:T_END tmodule:T_MODULE <EndModuleStmt@71> teos:T_EOS  :production1048
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v3 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndModuleStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EndModuleStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tend"))
                return 0;
            else
                if (name.equals("tmodule"))
                    return 1;
                else
                    if (name.equals("EndName"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndModuleStmt> ::= tend:T_END tmodule:T_MODULE <EndModuleStmt@71> teos:T_EOS  :production1048
         */
        protected ASTEndModuleStmtNode userAction(Token v1, Token v2, ASTEndNameNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production1048Production PRODUCTION1048 = Production1048Production.getInstance();

    public static class Production1049Production extends Production
    {
        private Production1049Production() {;} // Singleton
        private static Production1049Production singletonInstance = null;
        public static final Production1049Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1049Production(); return singletonInstance; }

        public String getDescription() { return "<EndModuleStmt> ::= LblDef:<LblDef> tend:T_END tmodule:T_MODULE teos:T_EOS  :production1049"; }

        /**
         * Reduce by <EndModuleStmt> ::= LblDef:<LblDef> tend:T_END tmodule:T_MODULE teos:T_EOS  :production1049
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndModuleStmt> ::= LblDef:<LblDef> tend:T_END tmodule:T_MODULE teos:T_EOS  :production1049
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndModuleStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EndModuleStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tend"))
                    return 1;
                else
                    if (name.equals("tmodule"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndModuleStmt> ::= LblDef:<LblDef> tend:T_END tmodule:T_MODULE teos:T_EOS  :production1049
         */
        protected ASTEndModuleStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production1049Production PRODUCTION1049 = Production1049Production.getInstance();

    public static class Production1050Production extends Production
    {
        private Production1050Production() {;} // Singleton
        private static Production1050Production singletonInstance = null;
        public static final Production1050Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1050Production(); return singletonInstance; }

        public String getDescription() { return "<EndModuleStmt> ::= LblDef:<LblDef> tend:T_END tmodule:T_MODULE <EndModuleStmt@71> teos:T_EOS  :production1050"; }

        /**
         * Reduce by <EndModuleStmt> ::= LblDef:<LblDef> tend:T_END tmodule:T_MODULE <EndModuleStmt@71> teos:T_EOS  :production1050
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndModuleStmt> ::= LblDef:<LblDef> tend:T_END tmodule:T_MODULE <EndModuleStmt@71> teos:T_EOS  :production1050
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v4 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndModuleStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.EndModuleStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tend"))
                    return 1;
                else
                    if (name.equals("tmodule"))
                        return 2;
                    else
                        if (name.equals("EndName"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndModuleStmt> ::= LblDef:<LblDef> tend:T_END tmodule:T_MODULE <EndModuleStmt@71> teos:T_EOS  :production1050
         */
        protected ASTEndModuleStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, ASTEndNameNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production1050Production PRODUCTION1050 = Production1050Production.getInstance();

    public static class Production1051Production extends Production
    {
        private Production1051Production() {;} // Singleton
        private static Production1051Production singletonInstance = null;
        public static final Production1051Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1051Production(); return singletonInstance; }

        public String getDescription() { return "<UseStmt> ::= tuse:T_USE Name:<Name> teos:T_EOS  :production1051"; }

        /**
         * Reduce by <UseStmt> ::= tuse:T_USE Name:<Name> teos:T_EOS  :production1051
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UseStmt> ::= tuse:T_USE Name:<Name> teos:T_EOS  :production1051
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v2 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTUseStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.UseStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tuse"))
                return 0;
            else
                if (name.equals("Name"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <UseStmt> ::= tuse:T_USE Name:<Name> teos:T_EOS  :production1051
         */
        protected ASTUseStmtNode userAction(Token v1, ASTNameNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1051Production PRODUCTION1051 = Production1051Production.getInstance();

    public static class Production1052Production extends Production
    {
        private Production1052Production() {;} // Singleton
        private static Production1052Production singletonInstance = null;
        public static final Production1052Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1052Production(); return singletonInstance; }

        public String getDescription() { return "<UseStmt> ::= LblDef:<LblDef> tuse:T_USE Name:<Name> teos:T_EOS  :production1052"; }

        /**
         * Reduce by <UseStmt> ::= LblDef:<LblDef> tuse:T_USE Name:<Name> teos:T_EOS  :production1052
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UseStmt> ::= LblDef:<LblDef> tuse:T_USE Name:<Name> teos:T_EOS  :production1052
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v3 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTUseStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.UseStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tuse"))
                    return 1;
                else
                    if (name.equals("Name"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <UseStmt> ::= LblDef:<LblDef> tuse:T_USE Name:<Name> teos:T_EOS  :production1052
         */
        protected ASTUseStmtNode userAction(ASTLblDefNode v1, Token v2, ASTNameNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production1052Production PRODUCTION1052 = Production1052Production.getInstance();

    public static class Production1053Production extends Production
    {
        private Production1053Production() {;} // Singleton
        private static Production1053Production singletonInstance = null;
        public static final Production1053Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1053Production(); return singletonInstance; }

        public String getDescription() { return "<UseStmt> ::= tuse:T_USE Name:<Name> tcomma:T_COMMA RenameList:<RenameList> teos:T_EOS  :production1053"; }

        /**
         * Reduce by <UseStmt> ::= tuse:T_USE Name:<Name> tcomma:T_COMMA RenameList:<RenameList> teos:T_EOS  :production1053
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UseStmt> ::= tuse:T_USE Name:<Name> tcomma:T_COMMA RenameList:<RenameList> teos:T_EOS  :production1053
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTRenameListNode v4 = (ASTRenameListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v2 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTUseStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.UseStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tuse"))
                return 0;
            else
                if (name.equals("Name"))
                    return 1;
                else
                    if (name.equals("tcomma"))
                        return 2;
                    else
                        if (name.equals("RenameList"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <UseStmt> ::= tuse:T_USE Name:<Name> tcomma:T_COMMA RenameList:<RenameList> teos:T_EOS  :production1053
         */
        protected ASTUseStmtNode userAction(Token v1, ASTNameNode v2, Token v3, ASTRenameListNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production1053Production PRODUCTION1053 = Production1053Production.getInstance();

    public static class Production1054Production extends Production
    {
        private Production1054Production() {;} // Singleton
        private static Production1054Production singletonInstance = null;
        public static final Production1054Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1054Production(); return singletonInstance; }

        public String getDescription() { return "<UseStmt> ::= LblDef:<LblDef> tuse:T_USE Name:<Name> tcomma:T_COMMA RenameList:<RenameList> teos:T_EOS  :production1054"; }

        /**
         * Reduce by <UseStmt> ::= LblDef:<LblDef> tuse:T_USE Name:<Name> tcomma:T_COMMA RenameList:<RenameList> teos:T_EOS  :production1054
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UseStmt> ::= LblDef:<LblDef> tuse:T_USE Name:<Name> tcomma:T_COMMA RenameList:<RenameList> teos:T_EOS  :production1054
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTRenameListNode v5 = (ASTRenameListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v3 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTUseStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.UseStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tuse"))
                    return 1;
                else
                    if (name.equals("Name"))
                        return 2;
                    else
                        if (name.equals("tcomma"))
                            return 3;
                        else
                            if (name.equals("RenameList"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <UseStmt> ::= LblDef:<LblDef> tuse:T_USE Name:<Name> tcomma:T_COMMA RenameList:<RenameList> teos:T_EOS  :production1054
         */
        protected ASTUseStmtNode userAction(ASTLblDefNode v1, Token v2, ASTNameNode v3, Token v4, ASTRenameListNode v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production1054Production PRODUCTION1054 = Production1054Production.getInstance();

    public static class Production1055Production extends Production
    {
        private Production1055Production() {;} // Singleton
        private static Production1055Production singletonInstance = null;
        public static final Production1055Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1055Production(); return singletonInstance; }

        public String getDescription() { return "<UseStmt> ::= tuse:T_USE Name:<Name> tcomma:T_COMMA tonly:T_ONLY tcolon:T_COLON teos:T_EOS  :production1055"; }

        /**
         * Reduce by <UseStmt> ::= tuse:T_USE Name:<Name> tcomma:T_COMMA tonly:T_ONLY tcolon:T_COLON teos:T_EOS  :production1055
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UseStmt> ::= tuse:T_USE Name:<Name> tcomma:T_COMMA tonly:T_ONLY tcolon:T_COLON teos:T_EOS  :production1055
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v2 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTUseStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.UseStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tuse"))
                return 0;
            else
                if (name.equals("Name"))
                    return 1;
                else
                    if (name.equals("tcomma"))
                        return 2;
                    else
                        if (name.equals("tonly"))
                            return 3;
                        else
                            if (name.equals("tcolon"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <UseStmt> ::= tuse:T_USE Name:<Name> tcomma:T_COMMA tonly:T_ONLY tcolon:T_COLON teos:T_EOS  :production1055
         */
        protected ASTUseStmtNode userAction(Token v1, ASTNameNode v2, Token v3, Token v4, Token v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production1055Production PRODUCTION1055 = Production1055Production.getInstance();

    public static class Production1056Production extends Production
    {
        private Production1056Production() {;} // Singleton
        private static Production1056Production singletonInstance = null;
        public static final Production1056Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1056Production(); return singletonInstance; }

        public String getDescription() { return "<UseStmt> ::= tuse:T_USE Name:<Name> tcomma:T_COMMA tonly:T_ONLY tcolon:T_COLON <UseStmt@72> teos:T_EOS  :production1056"; }

        /**
         * Reduce by <UseStmt> ::= tuse:T_USE Name:<Name> tcomma:T_COMMA tonly:T_ONLY tcolon:T_COLON <UseStmt@72> teos:T_EOS  :production1056
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UseStmt> ::= tuse:T_USE Name:<Name> tcomma:T_COMMA tonly:T_ONLY tcolon:T_COLON <UseStmt@72> teos:T_EOS  :production1056
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTOnlyListNode v6 = (ASTOnlyListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v2 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTUseStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7);

            // The production has 7 symbols on its RHS
            parser.reduce(Nonterminal.UseStmtNonterminal.getInstance(), 7, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tuse"))
                return 0;
            else
                if (name.equals("Name"))
                    return 1;
                else
                    if (name.equals("tcomma"))
                        return 2;
                    else
                        if (name.equals("tonly"))
                            return 3;
                        else
                            if (name.equals("tcolon"))
                                return 4;
                            else
                                if (name.equals("OnlyList"))
                                    return 5;
                                else
                                    if (name.equals("teos"))
                                        return 6;
                                    else
                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <UseStmt> ::= tuse:T_USE Name:<Name> tcomma:T_COMMA tonly:T_ONLY tcolon:T_COLON <UseStmt@72> teos:T_EOS  :production1056
         */
        protected ASTUseStmtNode userAction(Token v1, ASTNameNode v2, Token v3, Token v4, Token v5, ASTOnlyListNode v6, Token v7)
        {
            return null;
        }
    }
    public static final Productions.Production1056Production PRODUCTION1056 = Production1056Production.getInstance();

    public static class Production1057Production extends Production
    {
        private Production1057Production() {;} // Singleton
        private static Production1057Production singletonInstance = null;
        public static final Production1057Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1057Production(); return singletonInstance; }

        public String getDescription() { return "<UseStmt> ::= LblDef:<LblDef> tuse:T_USE Name:<Name> tcomma:T_COMMA tonly:T_ONLY tcolon:T_COLON teos:T_EOS  :production1057"; }

        /**
         * Reduce by <UseStmt> ::= LblDef:<LblDef> tuse:T_USE Name:<Name> tcomma:T_COMMA tonly:T_ONLY tcolon:T_COLON teos:T_EOS  :production1057
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UseStmt> ::= LblDef:<LblDef> tuse:T_USE Name:<Name> tcomma:T_COMMA tonly:T_ONLY tcolon:T_COLON teos:T_EOS  :production1057
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v3 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTUseStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7);

            // The production has 7 symbols on its RHS
            parser.reduce(Nonterminal.UseStmtNonterminal.getInstance(), 7, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tuse"))
                    return 1;
                else
                    if (name.equals("Name"))
                        return 2;
                    else
                        if (name.equals("tcomma"))
                            return 3;
                        else
                            if (name.equals("tonly"))
                                return 4;
                            else
                                if (name.equals("tcolon"))
                                    return 5;
                                else
                                    if (name.equals("teos"))
                                        return 6;
                                    else
                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <UseStmt> ::= LblDef:<LblDef> tuse:T_USE Name:<Name> tcomma:T_COMMA tonly:T_ONLY tcolon:T_COLON teos:T_EOS  :production1057
         */
        protected ASTUseStmtNode userAction(ASTLblDefNode v1, Token v2, ASTNameNode v3, Token v4, Token v5, Token v6, Token v7)
        {
            return null;
        }
    }
    public static final Productions.Production1057Production PRODUCTION1057 = Production1057Production.getInstance();

    public static class Production1058Production extends Production
    {
        private Production1058Production() {;} // Singleton
        private static Production1058Production singletonInstance = null;
        public static final Production1058Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1058Production(); return singletonInstance; }

        public String getDescription() { return "<UseStmt> ::= LblDef:<LblDef> tuse:T_USE Name:<Name> tcomma:T_COMMA tonly:T_ONLY tcolon:T_COLON <UseStmt@72> teos:T_EOS  :production1058"; }

        /**
         * Reduce by <UseStmt> ::= LblDef:<LblDef> tuse:T_USE Name:<Name> tcomma:T_COMMA tonly:T_ONLY tcolon:T_COLON <UseStmt@72> teos:T_EOS  :production1058
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UseStmt> ::= LblDef:<LblDef> tuse:T_USE Name:<Name> tcomma:T_COMMA tonly:T_ONLY tcolon:T_COLON <UseStmt@72> teos:T_EOS  :production1058
            Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTOnlyListNode v7 = (ASTOnlyListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v3 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTUseStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8);

            // The production has 8 symbols on its RHS
            parser.reduce(Nonterminal.UseStmtNonterminal.getInstance(), 8, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tuse"))
                    return 1;
                else
                    if (name.equals("Name"))
                        return 2;
                    else
                        if (name.equals("tcomma"))
                            return 3;
                        else
                            if (name.equals("tonly"))
                                return 4;
                            else
                                if (name.equals("tcolon"))
                                    return 5;
                                else
                                    if (name.equals("OnlyList"))
                                        return 6;
                                    else
                                        if (name.equals("teos"))
                                            return 7;
                                        else
                                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <UseStmt> ::= LblDef:<LblDef> tuse:T_USE Name:<Name> tcomma:T_COMMA tonly:T_ONLY tcolon:T_COLON <UseStmt@72> teos:T_EOS  :production1058
         */
        protected ASTUseStmtNode userAction(ASTLblDefNode v1, Token v2, ASTNameNode v3, Token v4, Token v5, Token v6, ASTOnlyListNode v7, Token v8)
        {
            return null;
        }
    }
    public static final Productions.Production1058Production PRODUCTION1058 = Production1058Production.getInstance();

    public static class Production1059Production extends Production
    {
        private Production1059Production() {;} // Singleton
        private static Production1059Production singletonInstance = null;
        public static final Production1059Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1059Production(); return singletonInstance; }

        public String getDescription() { return "<RenameList> ::= Rename:<Rename>  :production1059"; }

        /**
         * Reduce by <RenameList> ::= Rename:<Rename>  :production1059
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <RenameList> ::= Rename:<Rename>  :production1059
            ASTRenameNode v1 = (ASTRenameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTRenameListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.RenameListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Rename"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <RenameList> ::= Rename:<Rename>  :production1059
         */
        protected ASTRenameListNode userAction(ASTRenameNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production1059Production PRODUCTION1059 = Production1059Production.getInstance();

    public static class Production1060Production extends Production
    {
        private Production1060Production() {;} // Singleton
        private static Production1060Production singletonInstance = null;
        public static final Production1060Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1060Production(); return singletonInstance; }

        public String getDescription() { return "<RenameList> ::= @:<RenameList> tcomma:T_COMMA Rename:<Rename>  :production1060"; }

        /**
         * Reduce by <RenameList> ::= @:<RenameList> tcomma:T_COMMA Rename:<Rename>  :production1060
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <RenameList> ::= @:<RenameList> tcomma:T_COMMA Rename:<Rename>  :production1060
            ASTRenameNode v3 = (ASTRenameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTRenameListNode v1 = (ASTRenameListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTRenameListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.RenameListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("Rename"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <RenameList> ::= @:<RenameList> tcomma:T_COMMA Rename:<Rename>  :production1060
         */
        protected ASTRenameListNode userAction(ASTRenameListNode v1, Token v2, ASTRenameNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production1060Production PRODUCTION1060 = Production1060Production.getInstance();

    public static class Production1061Production extends Production
    {
        private Production1061Production() {;} // Singleton
        private static Production1061Production singletonInstance = null;
        public static final Production1061Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1061Production(); return singletonInstance; }

        public String getDescription() { return "<OnlyList> ::= Only:<Only>  :production1061"; }

        /**
         * Reduce by <OnlyList> ::= Only:<Only>  :production1061
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <OnlyList> ::= Only:<Only>  :production1061
            ASTOnlyNode v1 = (ASTOnlyNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTOnlyListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.OnlyListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Only"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <OnlyList> ::= Only:<Only>  :production1061
         */
        protected ASTOnlyListNode userAction(ASTOnlyNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production1061Production PRODUCTION1061 = Production1061Production.getInstance();

    public static class Production1062Production extends Production
    {
        private Production1062Production() {;} // Singleton
        private static Production1062Production singletonInstance = null;
        public static final Production1062Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1062Production(); return singletonInstance; }

        public String getDescription() { return "<OnlyList> ::= @:<OnlyList> tcomma:T_COMMA Only:<Only>  :production1062"; }

        /**
         * Reduce by <OnlyList> ::= @:<OnlyList> tcomma:T_COMMA Only:<Only>  :production1062
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <OnlyList> ::= @:<OnlyList> tcomma:T_COMMA Only:<Only>  :production1062
            ASTOnlyNode v3 = (ASTOnlyNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTOnlyListNode v1 = (ASTOnlyListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTOnlyListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.OnlyListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("Only"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <OnlyList> ::= @:<OnlyList> tcomma:T_COMMA Only:<Only>  :production1062
         */
        protected ASTOnlyListNode userAction(ASTOnlyListNode v1, Token v2, ASTOnlyNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production1062Production PRODUCTION1062 = Production1062Production.getInstance();

    public static class Production1063Production extends Production
    {
        private Production1063Production() {;} // Singleton
        private static Production1063Production singletonInstance = null;
        public static final Production1063Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1063Production(); return singletonInstance; }

        public String getDescription() { return "<Rename> ::= tident:T_IDENT teqgreaterthan:T_EQGREATERTHAN UseName:<UseName>  :production1063"; }

        /**
         * Reduce by <Rename> ::= tident:T_IDENT teqgreaterthan:T_EQGREATERTHAN UseName:<UseName>  :production1063
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Rename> ::= tident:T_IDENT teqgreaterthan:T_EQGREATERTHAN UseName:<UseName>  :production1063
            ASTUseNameNode v3 = (ASTUseNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTRenameNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.RenameNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tident"))
                return 0;
            else
                if (name.equals("teqgreaterthan"))
                    return 1;
                else
                    if (name.equals("UseName"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Rename> ::= tident:T_IDENT teqgreaterthan:T_EQGREATERTHAN UseName:<UseName>  :production1063
         */
        protected ASTRenameNode userAction(Token v1, Token v2, ASTUseNameNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production1063Production PRODUCTION1063 = Production1063Production.getInstance();

    public static class Production1064Production extends Production
    {
        private Production1064Production() {;} // Singleton
        private static Production1064Production singletonInstance = null;
        public static final Production1064Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1064Production(); return singletonInstance; }

        public String getDescription() { return "<Only> ::= GenericSpec:<GenericSpec>  :production1064"; }

        /**
         * Reduce by <Only> ::= GenericSpec:<GenericSpec>  :production1064
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Only> ::= GenericSpec:<GenericSpec>  :production1064
            ASTGenericSpecNode v1 = (ASTGenericSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTOnlyNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.OnlyNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("GenericSpec"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Only> ::= GenericSpec:<GenericSpec>  :production1064
         */
        protected ASTOnlyNode userAction(ASTGenericSpecNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production1064Production PRODUCTION1064 = Production1064Production.getInstance();

    public static class Production1065Production extends Production
    {
        private Production1065Production() {;} // Singleton
        private static Production1065Production singletonInstance = null;
        public static final Production1065Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1065Production(); return singletonInstance; }

        public String getDescription() { return "<Only> ::= tident:T_IDENT teqgreaterthan:T_EQGREATERTHAN UseName:<UseName>  :production1065"; }

        /**
         * Reduce by <Only> ::= tident:T_IDENT teqgreaterthan:T_EQGREATERTHAN UseName:<UseName>  :production1065
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Only> ::= tident:T_IDENT teqgreaterthan:T_EQGREATERTHAN UseName:<UseName>  :production1065
            ASTUseNameNode v3 = (ASTUseNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTOnlyNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.OnlyNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tident"))
                return 0;
            else
                if (name.equals("teqgreaterthan"))
                    return 1;
                else
                    if (name.equals("UseName"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Only> ::= tident:T_IDENT teqgreaterthan:T_EQGREATERTHAN UseName:<UseName>  :production1065
         */
        protected ASTOnlyNode userAction(Token v1, Token v2, ASTUseNameNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production1065Production PRODUCTION1065 = Production1065Production.getInstance();

    public static class Production1066Production extends Production
    {
        private Production1066Production() {;} // Singleton
        private static Production1066Production singletonInstance = null;
        public static final Production1066Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1066Production(); return singletonInstance; }

        public String getDescription() { return "<Only> ::= UseName:<UseName>  :production1066"; }

        /**
         * Reduce by <Only> ::= UseName:<UseName>  :production1066
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Only> ::= UseName:<UseName>  :production1066
            ASTUseNameNode v1 = (ASTUseNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTOnlyNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.OnlyNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("UseName"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <Only> ::= UseName:<UseName>  :production1066
         */
        protected ASTOnlyNode userAction(ASTUseNameNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production1066Production PRODUCTION1066 = Production1066Production.getInstance();

    public static class Production1067Production extends Production
    {
        private Production1067Production() {;} // Singleton
        private static Production1067Production singletonInstance = null;
        public static final Production1067Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1067Production(); return singletonInstance; }

        public String getDescription() { return "<BlockDataStmt> ::= tblockdata:T_BLOCKDATA BlockDataName:<BlockDataName> teos:T_EOS  :production1067"; }

        /**
         * Reduce by <BlockDataStmt> ::= tblockdata:T_BLOCKDATA BlockDataName:<BlockDataName> teos:T_EOS  :production1067
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <BlockDataStmt> ::= tblockdata:T_BLOCKDATA BlockDataName:<BlockDataName> teos:T_EOS  :production1067
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTBlockDataNameNode v2 = (ASTBlockDataNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTBlockDataStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.BlockDataStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tblockdata"))
                return 0;
            else
                if (name.equals("BlockDataName"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <BlockDataStmt> ::= tblockdata:T_BLOCKDATA BlockDataName:<BlockDataName> teos:T_EOS  :production1067
         */
        protected ASTBlockDataStmtNode userAction(Token v1, ASTBlockDataNameNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1067Production PRODUCTION1067 = Production1067Production.getInstance();

    public static class Production1068Production extends Production
    {
        private Production1068Production() {;} // Singleton
        private static Production1068Production singletonInstance = null;
        public static final Production1068Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1068Production(); return singletonInstance; }

        public String getDescription() { return "<BlockDataStmt> ::= LblDef:<LblDef> tblockdata:T_BLOCKDATA BlockDataName:<BlockDataName> teos:T_EOS  :production1068"; }

        /**
         * Reduce by <BlockDataStmt> ::= LblDef:<LblDef> tblockdata:T_BLOCKDATA BlockDataName:<BlockDataName> teos:T_EOS  :production1068
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <BlockDataStmt> ::= LblDef:<LblDef> tblockdata:T_BLOCKDATA BlockDataName:<BlockDataName> teos:T_EOS  :production1068
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTBlockDataNameNode v3 = (ASTBlockDataNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTBlockDataStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.BlockDataStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tblockdata"))
                    return 1;
                else
                    if (name.equals("BlockDataName"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <BlockDataStmt> ::= LblDef:<LblDef> tblockdata:T_BLOCKDATA BlockDataName:<BlockDataName> teos:T_EOS  :production1068
         */
        protected ASTBlockDataStmtNode userAction(ASTLblDefNode v1, Token v2, ASTBlockDataNameNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production1068Production PRODUCTION1068 = Production1068Production.getInstance();

    public static class Production1069Production extends Production
    {
        private Production1069Production() {;} // Singleton
        private static Production1069Production singletonInstance = null;
        public static final Production1069Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1069Production(); return singletonInstance; }

        public String getDescription() { return "<BlockDataStmt> ::= tblockdata:T_BLOCKDATA teos:T_EOS  :production1069"; }

        /**
         * Reduce by <BlockDataStmt> ::= tblockdata:T_BLOCKDATA teos:T_EOS  :production1069
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <BlockDataStmt> ::= tblockdata:T_BLOCKDATA teos:T_EOS  :production1069
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTBlockDataStmtNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.BlockDataStmtNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tblockdata"))
                return 0;
            else
                if (name.equals("teos"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <BlockDataStmt> ::= tblockdata:T_BLOCKDATA teos:T_EOS  :production1069
         */
        protected ASTBlockDataStmtNode userAction(Token v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production1069Production PRODUCTION1069 = Production1069Production.getInstance();

    public static class Production1070Production extends Production
    {
        private Production1070Production() {;} // Singleton
        private static Production1070Production singletonInstance = null;
        public static final Production1070Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1070Production(); return singletonInstance; }

        public String getDescription() { return "<BlockDataStmt> ::= LblDef:<LblDef> tblockdata:T_BLOCKDATA teos:T_EOS  :production1070"; }

        /**
         * Reduce by <BlockDataStmt> ::= LblDef:<LblDef> tblockdata:T_BLOCKDATA teos:T_EOS  :production1070
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <BlockDataStmt> ::= LblDef:<LblDef> tblockdata:T_BLOCKDATA teos:T_EOS  :production1070
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTBlockDataStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.BlockDataStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tblockdata"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <BlockDataStmt> ::= LblDef:<LblDef> tblockdata:T_BLOCKDATA teos:T_EOS  :production1070
         */
        protected ASTBlockDataStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1070Production PRODUCTION1070 = Production1070Production.getInstance();

    public static class Production1071Production extends Production
    {
        private Production1071Production() {;} // Singleton
        private static Production1071Production singletonInstance = null;
        public static final Production1071Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1071Production(); return singletonInstance; }

        public String getDescription() { return "<EndBlockDataStmt> ::= tend:T_END teos:T_EOS  :production1071"; }

        /**
         * Reduce by <EndBlockDataStmt> ::= tend:T_END teos:T_EOS  :production1071
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndBlockDataStmt> ::= tend:T_END teos:T_EOS  :production1071
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndBlockDataStmtNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.EndBlockDataStmtNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tend"))
                return 0;
            else
                if (name.equals("teos"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndBlockDataStmt> ::= tend:T_END teos:T_EOS  :production1071
         */
        protected ASTEndBlockDataStmtNode userAction(Token v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production1071Production PRODUCTION1071 = Production1071Production.getInstance();

    public static class Production1072Production extends Production
    {
        private Production1072Production() {;} // Singleton
        private static Production1072Production singletonInstance = null;
        public static final Production1072Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1072Production(); return singletonInstance; }

        public String getDescription() { return "<EndBlockDataStmt> ::= LblDef:<LblDef> tend:T_END teos:T_EOS  :production1072"; }

        /**
         * Reduce by <EndBlockDataStmt> ::= LblDef:<LblDef> tend:T_END teos:T_EOS  :production1072
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndBlockDataStmt> ::= LblDef:<LblDef> tend:T_END teos:T_EOS  :production1072
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndBlockDataStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EndBlockDataStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tend"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndBlockDataStmt> ::= LblDef:<LblDef> tend:T_END teos:T_EOS  :production1072
         */
        protected ASTEndBlockDataStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1072Production PRODUCTION1072 = Production1072Production.getInstance();

    public static class Production1073Production extends Production
    {
        private Production1073Production() {;} // Singleton
        private static Production1073Production singletonInstance = null;
        public static final Production1073Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1073Production(); return singletonInstance; }

        public String getDescription() { return "<EndBlockDataStmt> ::= tendblockdata:T_ENDBLOCKDATA teos:T_EOS  :production1073"; }

        /**
         * Reduce by <EndBlockDataStmt> ::= tendblockdata:T_ENDBLOCKDATA teos:T_EOS  :production1073
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndBlockDataStmt> ::= tendblockdata:T_ENDBLOCKDATA teos:T_EOS  :production1073
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndBlockDataStmtNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.EndBlockDataStmtNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tendblockdata"))
                return 0;
            else
                if (name.equals("teos"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndBlockDataStmt> ::= tendblockdata:T_ENDBLOCKDATA teos:T_EOS  :production1073
         */
        protected ASTEndBlockDataStmtNode userAction(Token v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production1073Production PRODUCTION1073 = Production1073Production.getInstance();

    public static class Production1074Production extends Production
    {
        private Production1074Production() {;} // Singleton
        private static Production1074Production singletonInstance = null;
        public static final Production1074Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1074Production(); return singletonInstance; }

        public String getDescription() { return "<EndBlockDataStmt> ::= tendblockdata:T_ENDBLOCKDATA <EndBlockDataStmt@73> teos:T_EOS  :production1074"; }

        /**
         * Reduce by <EndBlockDataStmt> ::= tendblockdata:T_ENDBLOCKDATA <EndBlockDataStmt@73> teos:T_EOS  :production1074
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndBlockDataStmt> ::= tendblockdata:T_ENDBLOCKDATA <EndBlockDataStmt@73> teos:T_EOS  :production1074
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v2 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndBlockDataStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EndBlockDataStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tendblockdata"))
                return 0;
            else
                if (name.equals("EndName"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndBlockDataStmt> ::= tendblockdata:T_ENDBLOCKDATA <EndBlockDataStmt@73> teos:T_EOS  :production1074
         */
        protected ASTEndBlockDataStmtNode userAction(Token v1, ASTEndNameNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1074Production PRODUCTION1074 = Production1074Production.getInstance();

    public static class Production1075Production extends Production
    {
        private Production1075Production() {;} // Singleton
        private static Production1075Production singletonInstance = null;
        public static final Production1075Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1075Production(); return singletonInstance; }

        public String getDescription() { return "<EndBlockDataStmt> ::= LblDef:<LblDef> tendblockdata:T_ENDBLOCKDATA teos:T_EOS  :production1075"; }

        /**
         * Reduce by <EndBlockDataStmt> ::= LblDef:<LblDef> tendblockdata:T_ENDBLOCKDATA teos:T_EOS  :production1075
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndBlockDataStmt> ::= LblDef:<LblDef> tendblockdata:T_ENDBLOCKDATA teos:T_EOS  :production1075
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndBlockDataStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EndBlockDataStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tendblockdata"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndBlockDataStmt> ::= LblDef:<LblDef> tendblockdata:T_ENDBLOCKDATA teos:T_EOS  :production1075
         */
        protected ASTEndBlockDataStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1075Production PRODUCTION1075 = Production1075Production.getInstance();

    public static class Production1076Production extends Production
    {
        private Production1076Production() {;} // Singleton
        private static Production1076Production singletonInstance = null;
        public static final Production1076Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1076Production(); return singletonInstance; }

        public String getDescription() { return "<EndBlockDataStmt> ::= LblDef:<LblDef> tendblockdata:T_ENDBLOCKDATA <EndBlockDataStmt@73> teos:T_EOS  :production1076"; }

        /**
         * Reduce by <EndBlockDataStmt> ::= LblDef:<LblDef> tendblockdata:T_ENDBLOCKDATA <EndBlockDataStmt@73> teos:T_EOS  :production1076
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndBlockDataStmt> ::= LblDef:<LblDef> tendblockdata:T_ENDBLOCKDATA <EndBlockDataStmt@73> teos:T_EOS  :production1076
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v3 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndBlockDataStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EndBlockDataStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tendblockdata"))
                    return 1;
                else
                    if (name.equals("EndName"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndBlockDataStmt> ::= LblDef:<LblDef> tendblockdata:T_ENDBLOCKDATA <EndBlockDataStmt@73> teos:T_EOS  :production1076
         */
        protected ASTEndBlockDataStmtNode userAction(ASTLblDefNode v1, Token v2, ASTEndNameNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production1076Production PRODUCTION1076 = Production1076Production.getInstance();

    public static class Production1077Production extends Production
    {
        private Production1077Production() {;} // Singleton
        private static Production1077Production singletonInstance = null;
        public static final Production1077Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1077Production(); return singletonInstance; }

        public String getDescription() { return "<EndBlockDataStmt> ::= tend:T_END tblockdata:T_BLOCKDATA teos:T_EOS  :production1077"; }

        /**
         * Reduce by <EndBlockDataStmt> ::= tend:T_END tblockdata:T_BLOCKDATA teos:T_EOS  :production1077
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndBlockDataStmt> ::= tend:T_END tblockdata:T_BLOCKDATA teos:T_EOS  :production1077
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndBlockDataStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EndBlockDataStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tend"))
                return 0;
            else
                if (name.equals("tblockdata"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndBlockDataStmt> ::= tend:T_END tblockdata:T_BLOCKDATA teos:T_EOS  :production1077
         */
        protected ASTEndBlockDataStmtNode userAction(Token v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1077Production PRODUCTION1077 = Production1077Production.getInstance();

    public static class Production1078Production extends Production
    {
        private Production1078Production() {;} // Singleton
        private static Production1078Production singletonInstance = null;
        public static final Production1078Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1078Production(); return singletonInstance; }

        public String getDescription() { return "<EndBlockDataStmt> ::= tend:T_END tblockdata:T_BLOCKDATA <EndBlockDataStmt@74> teos:T_EOS  :production1078"; }

        /**
         * Reduce by <EndBlockDataStmt> ::= tend:T_END tblockdata:T_BLOCKDATA <EndBlockDataStmt@74> teos:T_EOS  :production1078
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndBlockDataStmt> ::= tend:T_END tblockdata:T_BLOCKDATA <EndBlockDataStmt@74> teos:T_EOS  :production1078
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v3 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndBlockDataStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EndBlockDataStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tend"))
                return 0;
            else
                if (name.equals("tblockdata"))
                    return 1;
                else
                    if (name.equals("EndName"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndBlockDataStmt> ::= tend:T_END tblockdata:T_BLOCKDATA <EndBlockDataStmt@74> teos:T_EOS  :production1078
         */
        protected ASTEndBlockDataStmtNode userAction(Token v1, Token v2, ASTEndNameNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production1078Production PRODUCTION1078 = Production1078Production.getInstance();

    public static class Production1079Production extends Production
    {
        private Production1079Production() {;} // Singleton
        private static Production1079Production singletonInstance = null;
        public static final Production1079Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1079Production(); return singletonInstance; }

        public String getDescription() { return "<EndBlockDataStmt> ::= LblDef:<LblDef> tend:T_END tblockdata:T_BLOCKDATA teos:T_EOS  :production1079"; }

        /**
         * Reduce by <EndBlockDataStmt> ::= LblDef:<LblDef> tend:T_END tblockdata:T_BLOCKDATA teos:T_EOS  :production1079
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndBlockDataStmt> ::= LblDef:<LblDef> tend:T_END tblockdata:T_BLOCKDATA teos:T_EOS  :production1079
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndBlockDataStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EndBlockDataStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tend"))
                    return 1;
                else
                    if (name.equals("tblockdata"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndBlockDataStmt> ::= LblDef:<LblDef> tend:T_END tblockdata:T_BLOCKDATA teos:T_EOS  :production1079
         */
        protected ASTEndBlockDataStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production1079Production PRODUCTION1079 = Production1079Production.getInstance();

    public static class Production1080Production extends Production
    {
        private Production1080Production() {;} // Singleton
        private static Production1080Production singletonInstance = null;
        public static final Production1080Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1080Production(); return singletonInstance; }

        public String getDescription() { return "<EndBlockDataStmt> ::= LblDef:<LblDef> tend:T_END tblockdata:T_BLOCKDATA <EndBlockDataStmt@74> teos:T_EOS  :production1080"; }

        /**
         * Reduce by <EndBlockDataStmt> ::= LblDef:<LblDef> tend:T_END tblockdata:T_BLOCKDATA <EndBlockDataStmt@74> teos:T_EOS  :production1080
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndBlockDataStmt> ::= LblDef:<LblDef> tend:T_END tblockdata:T_BLOCKDATA <EndBlockDataStmt@74> teos:T_EOS  :production1080
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v4 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndBlockDataStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.EndBlockDataStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tend"))
                    return 1;
                else
                    if (name.equals("tblockdata"))
                        return 2;
                    else
                        if (name.equals("EndName"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndBlockDataStmt> ::= LblDef:<LblDef> tend:T_END tblockdata:T_BLOCKDATA <EndBlockDataStmt@74> teos:T_EOS  :production1080
         */
        protected ASTEndBlockDataStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, ASTEndNameNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production1080Production PRODUCTION1080 = Production1080Production.getInstance();

    public static class Production1081Production extends Production
    {
        private Production1081Production() {;} // Singleton
        private static Production1081Production singletonInstance = null;
        public static final Production1081Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1081Production(); return singletonInstance; }

        public String getDescription() { return "<EndBlockDataStmt> ::= tendblock:T_ENDBLOCK tdata:T_DATA teos:T_EOS  :production1081"; }

        /**
         * Reduce by <EndBlockDataStmt> ::= tendblock:T_ENDBLOCK tdata:T_DATA teos:T_EOS  :production1081
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndBlockDataStmt> ::= tendblock:T_ENDBLOCK tdata:T_DATA teos:T_EOS  :production1081
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndBlockDataStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EndBlockDataStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tendblock"))
                return 0;
            else
                if (name.equals("tdata"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndBlockDataStmt> ::= tendblock:T_ENDBLOCK tdata:T_DATA teos:T_EOS  :production1081
         */
        protected ASTEndBlockDataStmtNode userAction(Token v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1081Production PRODUCTION1081 = Production1081Production.getInstance();

    public static class Production1082Production extends Production
    {
        private Production1082Production() {;} // Singleton
        private static Production1082Production singletonInstance = null;
        public static final Production1082Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1082Production(); return singletonInstance; }

        public String getDescription() { return "<EndBlockDataStmt> ::= tendblock:T_ENDBLOCK tdata:T_DATA <EndBlockDataStmt@75> teos:T_EOS  :production1082"; }

        /**
         * Reduce by <EndBlockDataStmt> ::= tendblock:T_ENDBLOCK tdata:T_DATA <EndBlockDataStmt@75> teos:T_EOS  :production1082
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndBlockDataStmt> ::= tendblock:T_ENDBLOCK tdata:T_DATA <EndBlockDataStmt@75> teos:T_EOS  :production1082
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v3 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndBlockDataStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EndBlockDataStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tendblock"))
                return 0;
            else
                if (name.equals("tdata"))
                    return 1;
                else
                    if (name.equals("EndName"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndBlockDataStmt> ::= tendblock:T_ENDBLOCK tdata:T_DATA <EndBlockDataStmt@75> teos:T_EOS  :production1082
         */
        protected ASTEndBlockDataStmtNode userAction(Token v1, Token v2, ASTEndNameNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production1082Production PRODUCTION1082 = Production1082Production.getInstance();

    public static class Production1083Production extends Production
    {
        private Production1083Production() {;} // Singleton
        private static Production1083Production singletonInstance = null;
        public static final Production1083Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1083Production(); return singletonInstance; }

        public String getDescription() { return "<EndBlockDataStmt> ::= LblDef:<LblDef> tendblock:T_ENDBLOCK tdata:T_DATA teos:T_EOS  :production1083"; }

        /**
         * Reduce by <EndBlockDataStmt> ::= LblDef:<LblDef> tendblock:T_ENDBLOCK tdata:T_DATA teos:T_EOS  :production1083
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndBlockDataStmt> ::= LblDef:<LblDef> tendblock:T_ENDBLOCK tdata:T_DATA teos:T_EOS  :production1083
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndBlockDataStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EndBlockDataStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tendblock"))
                    return 1;
                else
                    if (name.equals("tdata"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndBlockDataStmt> ::= LblDef:<LblDef> tendblock:T_ENDBLOCK tdata:T_DATA teos:T_EOS  :production1083
         */
        protected ASTEndBlockDataStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production1083Production PRODUCTION1083 = Production1083Production.getInstance();

    public static class Production1084Production extends Production
    {
        private Production1084Production() {;} // Singleton
        private static Production1084Production singletonInstance = null;
        public static final Production1084Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1084Production(); return singletonInstance; }

        public String getDescription() { return "<EndBlockDataStmt> ::= LblDef:<LblDef> tendblock:T_ENDBLOCK tdata:T_DATA <EndBlockDataStmt@75> teos:T_EOS  :production1084"; }

        /**
         * Reduce by <EndBlockDataStmt> ::= LblDef:<LblDef> tendblock:T_ENDBLOCK tdata:T_DATA <EndBlockDataStmt@75> teos:T_EOS  :production1084
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndBlockDataStmt> ::= LblDef:<LblDef> tendblock:T_ENDBLOCK tdata:T_DATA <EndBlockDataStmt@75> teos:T_EOS  :production1084
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v4 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndBlockDataStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.EndBlockDataStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tendblock"))
                    return 1;
                else
                    if (name.equals("tdata"))
                        return 2;
                    else
                        if (name.equals("EndName"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndBlockDataStmt> ::= LblDef:<LblDef> tendblock:T_ENDBLOCK tdata:T_DATA <EndBlockDataStmt@75> teos:T_EOS  :production1084
         */
        protected ASTEndBlockDataStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, ASTEndNameNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production1084Production PRODUCTION1084 = Production1084Production.getInstance();

    public static class Production1085Production extends Production
    {
        private Production1085Production() {;} // Singleton
        private static Production1085Production singletonInstance = null;
        public static final Production1085Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1085Production(); return singletonInstance; }

        public String getDescription() { return "<EndBlockDataStmt> ::= tend:T_END tblock:T_BLOCK tdata:T_DATA teos:T_EOS  :production1085"; }

        /**
         * Reduce by <EndBlockDataStmt> ::= tend:T_END tblock:T_BLOCK tdata:T_DATA teos:T_EOS  :production1085
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndBlockDataStmt> ::= tend:T_END tblock:T_BLOCK tdata:T_DATA teos:T_EOS  :production1085
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndBlockDataStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EndBlockDataStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tend"))
                return 0;
            else
                if (name.equals("tblock"))
                    return 1;
                else
                    if (name.equals("tdata"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndBlockDataStmt> ::= tend:T_END tblock:T_BLOCK tdata:T_DATA teos:T_EOS  :production1085
         */
        protected ASTEndBlockDataStmtNode userAction(Token v1, Token v2, Token v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production1085Production PRODUCTION1085 = Production1085Production.getInstance();

    public static class Production1086Production extends Production
    {
        private Production1086Production() {;} // Singleton
        private static Production1086Production singletonInstance = null;
        public static final Production1086Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1086Production(); return singletonInstance; }

        public String getDescription() { return "<EndBlockDataStmt> ::= tend:T_END tblock:T_BLOCK tdata:T_DATA <EndBlockDataStmt@76> teos:T_EOS  :production1086"; }

        /**
         * Reduce by <EndBlockDataStmt> ::= tend:T_END tblock:T_BLOCK tdata:T_DATA <EndBlockDataStmt@76> teos:T_EOS  :production1086
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndBlockDataStmt> ::= tend:T_END tblock:T_BLOCK tdata:T_DATA <EndBlockDataStmt@76> teos:T_EOS  :production1086
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v4 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndBlockDataStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.EndBlockDataStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tend"))
                return 0;
            else
                if (name.equals("tblock"))
                    return 1;
                else
                    if (name.equals("tdata"))
                        return 2;
                    else
                        if (name.equals("EndName"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndBlockDataStmt> ::= tend:T_END tblock:T_BLOCK tdata:T_DATA <EndBlockDataStmt@76> teos:T_EOS  :production1086
         */
        protected ASTEndBlockDataStmtNode userAction(Token v1, Token v2, Token v3, ASTEndNameNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production1086Production PRODUCTION1086 = Production1086Production.getInstance();

    public static class Production1087Production extends Production
    {
        private Production1087Production() {;} // Singleton
        private static Production1087Production singletonInstance = null;
        public static final Production1087Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1087Production(); return singletonInstance; }

        public String getDescription() { return "<EndBlockDataStmt> ::= LblDef:<LblDef> tend:T_END tblock:T_BLOCK tdata:T_DATA teos:T_EOS  :production1087"; }

        /**
         * Reduce by <EndBlockDataStmt> ::= LblDef:<LblDef> tend:T_END tblock:T_BLOCK tdata:T_DATA teos:T_EOS  :production1087
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndBlockDataStmt> ::= LblDef:<LblDef> tend:T_END tblock:T_BLOCK tdata:T_DATA teos:T_EOS  :production1087
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndBlockDataStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.EndBlockDataStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tend"))
                    return 1;
                else
                    if (name.equals("tblock"))
                        return 2;
                    else
                        if (name.equals("tdata"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndBlockDataStmt> ::= LblDef:<LblDef> tend:T_END tblock:T_BLOCK tdata:T_DATA teos:T_EOS  :production1087
         */
        protected ASTEndBlockDataStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, Token v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production1087Production PRODUCTION1087 = Production1087Production.getInstance();

    public static class Production1088Production extends Production
    {
        private Production1088Production() {;} // Singleton
        private static Production1088Production singletonInstance = null;
        public static final Production1088Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1088Production(); return singletonInstance; }

        public String getDescription() { return "<EndBlockDataStmt> ::= LblDef:<LblDef> tend:T_END tblock:T_BLOCK tdata:T_DATA <EndBlockDataStmt@76> teos:T_EOS  :production1088"; }

        /**
         * Reduce by <EndBlockDataStmt> ::= LblDef:<LblDef> tend:T_END tblock:T_BLOCK tdata:T_DATA <EndBlockDataStmt@76> teos:T_EOS  :production1088
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndBlockDataStmt> ::= LblDef:<LblDef> tend:T_END tblock:T_BLOCK tdata:T_DATA <EndBlockDataStmt@76> teos:T_EOS  :production1088
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v5 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndBlockDataStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.EndBlockDataStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tend"))
                    return 1;
                else
                    if (name.equals("tblock"))
                        return 2;
                    else
                        if (name.equals("tdata"))
                            return 3;
                        else
                            if (name.equals("EndName"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndBlockDataStmt> ::= LblDef:<LblDef> tend:T_END tblock:T_BLOCK tdata:T_DATA <EndBlockDataStmt@76> teos:T_EOS  :production1088
         */
        protected ASTEndBlockDataStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, Token v4, ASTEndNameNode v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production1088Production PRODUCTION1088 = Production1088Production.getInstance();

    public static class Production1089Production extends Production
    {
        private Production1089Production() {;} // Singleton
        private static Production1089Production singletonInstance = null;
        public static final Production1089Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1089Production(); return singletonInstance; }

        public String getDescription() { return "<InterfaceBlock> ::= InterfaceStmt:<InterfaceStmt> InterfaceRange:<InterfaceRange>  :production1089"; }

        /**
         * Reduce by <InterfaceBlock> ::= InterfaceStmt:<InterfaceStmt> InterfaceRange:<InterfaceRange>  :production1089
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InterfaceBlock> ::= InterfaceStmt:<InterfaceStmt> InterfaceRange:<InterfaceRange>  :production1089
            ASTInterfaceRangeNode v2 = (ASTInterfaceRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTInterfaceStmtNode v1 = (ASTInterfaceStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInterfaceBlockNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.InterfaceBlockNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("InterfaceStmt"))
                return 0;
            else
                if (name.equals("InterfaceRange"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InterfaceBlock> ::= InterfaceStmt:<InterfaceStmt> InterfaceRange:<InterfaceRange>  :production1089
         */
        protected ASTInterfaceBlockNode userAction(ASTInterfaceStmtNode v1, ASTInterfaceRangeNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production1089Production PRODUCTION1089 = Production1089Production.getInstance();

    public static class Production1090Production extends Production
    {
        private Production1090Production() {;} // Singleton
        private static Production1090Production singletonInstance = null;
        public static final Production1090Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1090Production(); return singletonInstance; }

        public String getDescription() { return "<InterfaceRange> ::= InterfaceBlockBody:<InterfaceBlockBody> EndInterfaceStmt:<EndInterfaceStmt>  :production1090"; }

        /**
         * Reduce by <InterfaceRange> ::= InterfaceBlockBody:<InterfaceBlockBody> EndInterfaceStmt:<EndInterfaceStmt>  :production1090
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InterfaceRange> ::= InterfaceBlockBody:<InterfaceBlockBody> EndInterfaceStmt:<EndInterfaceStmt>  :production1090
            ASTEndInterfaceStmtNode v2 = (ASTEndInterfaceStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTInterfaceBlockBodyNode v1 = (ASTInterfaceBlockBodyNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInterfaceRangeNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.InterfaceRangeNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("InterfaceBlockBody"))
                return 0;
            else
                if (name.equals("EndInterfaceStmt"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InterfaceRange> ::= InterfaceBlockBody:<InterfaceBlockBody> EndInterfaceStmt:<EndInterfaceStmt>  :production1090
         */
        protected ASTInterfaceRangeNode userAction(ASTInterfaceBlockBodyNode v1, ASTEndInterfaceStmtNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production1090Production PRODUCTION1090 = Production1090Production.getInstance();

    public static class Production1091Production extends Production
    {
        private Production1091Production() {;} // Singleton
        private static Production1091Production singletonInstance = null;
        public static final Production1091Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1091Production(); return singletonInstance; }

        public String getDescription() { return "<InterfaceBlockBody> ::= InterfaceSpecification:<InterfaceSpecification>  :production1091"; }

        /**
         * Reduce by <InterfaceBlockBody> ::= InterfaceSpecification:<InterfaceSpecification>  :production1091
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InterfaceBlockBody> ::= InterfaceSpecification:<InterfaceSpecification>  :production1091
            ASTInterfaceSpecificationNode v1 = (ASTInterfaceSpecificationNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInterfaceBlockBodyNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.InterfaceBlockBodyNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("InterfaceSpecification"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InterfaceBlockBody> ::= InterfaceSpecification:<InterfaceSpecification>  :production1091
         */
        protected ASTInterfaceBlockBodyNode userAction(ASTInterfaceSpecificationNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production1091Production PRODUCTION1091 = Production1091Production.getInstance();

    public static class Production1092Production extends Production
    {
        private Production1092Production() {;} // Singleton
        private static Production1092Production singletonInstance = null;
        public static final Production1092Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1092Production(); return singletonInstance; }

        public String getDescription() { return "<InterfaceBlockBody> ::= InterfaceBlockBody:<InterfaceBlockBody> InterfaceSpecification:<InterfaceSpecification>  :production1092"; }

        /**
         * Reduce by <InterfaceBlockBody> ::= InterfaceBlockBody:<InterfaceBlockBody> InterfaceSpecification:<InterfaceSpecification>  :production1092
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InterfaceBlockBody> ::= InterfaceBlockBody:<InterfaceBlockBody> InterfaceSpecification:<InterfaceSpecification>  :production1092
            ASTInterfaceSpecificationNode v2 = (ASTInterfaceSpecificationNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTInterfaceBlockBodyNode v1 = (ASTInterfaceBlockBodyNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInterfaceBlockBodyNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.InterfaceBlockBodyNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("InterfaceBlockBody"))
                return 0;
            else
                if (name.equals("InterfaceSpecification"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InterfaceBlockBody> ::= InterfaceBlockBody:<InterfaceBlockBody> InterfaceSpecification:<InterfaceSpecification>  :production1092
         */
        protected ASTInterfaceBlockBodyNode userAction(ASTInterfaceBlockBodyNode v1, ASTInterfaceSpecificationNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production1092Production PRODUCTION1092 = Production1092Production.getInstance();

    public static class Production1093Production extends Production
    {
        private Production1093Production() {;} // Singleton
        private static Production1093Production singletonInstance = null;
        public static final Production1093Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1093Production(); return singletonInstance; }

        public String getDescription() { return "<InterfaceSpecification> ::= InterfaceBody:<InterfaceBody>  :production1093"; }

        /**
         * Reduce by <InterfaceSpecification> ::= InterfaceBody:<InterfaceBody>  :production1093
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InterfaceSpecification> ::= InterfaceBody:<InterfaceBody>  :production1093
            ASTInterfaceBodyNode v1 = (ASTInterfaceBodyNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInterfaceSpecificationNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.InterfaceSpecificationNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("InterfaceBody"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InterfaceSpecification> ::= InterfaceBody:<InterfaceBody>  :production1093
         */
        protected ASTInterfaceSpecificationNode userAction(ASTInterfaceBodyNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production1093Production PRODUCTION1093 = Production1093Production.getInstance();

    public static class Production1094Production extends Production
    {
        private Production1094Production() {;} // Singleton
        private static Production1094Production singletonInstance = null;
        public static final Production1094Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1094Production(); return singletonInstance; }

        public String getDescription() { return "<InterfaceSpecification> ::= ModuleProcedureStmt:<ModuleProcedureStmt>  :production1094"; }

        /**
         * Reduce by <InterfaceSpecification> ::= ModuleProcedureStmt:<ModuleProcedureStmt>  :production1094
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InterfaceSpecification> ::= ModuleProcedureStmt:<ModuleProcedureStmt>  :production1094
            ASTModuleProcedureStmtNode v1 = (ASTModuleProcedureStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInterfaceSpecificationNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.InterfaceSpecificationNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ModuleProcedureStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InterfaceSpecification> ::= ModuleProcedureStmt:<ModuleProcedureStmt>  :production1094
         */
        protected ASTInterfaceSpecificationNode userAction(ASTModuleProcedureStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production1094Production PRODUCTION1094 = Production1094Production.getInstance();

    public static class Production1095Production extends Production
    {
        private Production1095Production() {;} // Singleton
        private static Production1095Production singletonInstance = null;
        public static final Production1095Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1095Production(); return singletonInstance; }

        public String getDescription() { return "<InterfaceStmt> ::= tinterface:T_INTERFACE GenericName:<GenericName> teos:T_EOS  :production1095"; }

        /**
         * Reduce by <InterfaceStmt> ::= tinterface:T_INTERFACE GenericName:<GenericName> teos:T_EOS  :production1095
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InterfaceStmt> ::= tinterface:T_INTERFACE GenericName:<GenericName> teos:T_EOS  :production1095
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTGenericNameNode v2 = (ASTGenericNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInterfaceStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.InterfaceStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tinterface"))
                return 0;
            else
                if (name.equals("GenericName"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InterfaceStmt> ::= tinterface:T_INTERFACE GenericName:<GenericName> teos:T_EOS  :production1095
         */
        protected ASTInterfaceStmtNode userAction(Token v1, ASTGenericNameNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1095Production PRODUCTION1095 = Production1095Production.getInstance();

    public static class Production1096Production extends Production
    {
        private Production1096Production() {;} // Singleton
        private static Production1096Production singletonInstance = null;
        public static final Production1096Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1096Production(); return singletonInstance; }

        public String getDescription() { return "<InterfaceStmt> ::= LblDef:<LblDef> tinterface:T_INTERFACE GenericName:<GenericName> teos:T_EOS  :production1096"; }

        /**
         * Reduce by <InterfaceStmt> ::= LblDef:<LblDef> tinterface:T_INTERFACE GenericName:<GenericName> teos:T_EOS  :production1096
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InterfaceStmt> ::= LblDef:<LblDef> tinterface:T_INTERFACE GenericName:<GenericName> teos:T_EOS  :production1096
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTGenericNameNode v3 = (ASTGenericNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInterfaceStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.InterfaceStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tinterface"))
                    return 1;
                else
                    if (name.equals("GenericName"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InterfaceStmt> ::= LblDef:<LblDef> tinterface:T_INTERFACE GenericName:<GenericName> teos:T_EOS  :production1096
         */
        protected ASTInterfaceStmtNode userAction(ASTLblDefNode v1, Token v2, ASTGenericNameNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production1096Production PRODUCTION1096 = Production1096Production.getInstance();

    public static class Production1097Production extends Production
    {
        private Production1097Production() {;} // Singleton
        private static Production1097Production singletonInstance = null;
        public static final Production1097Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1097Production(); return singletonInstance; }

        public String getDescription() { return "<InterfaceStmt> ::= tinterface:T_INTERFACE GenericSpec:<GenericSpec> teos:T_EOS  :production1097"; }

        /**
         * Reduce by <InterfaceStmt> ::= tinterface:T_INTERFACE GenericSpec:<GenericSpec> teos:T_EOS  :production1097
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InterfaceStmt> ::= tinterface:T_INTERFACE GenericSpec:<GenericSpec> teos:T_EOS  :production1097
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTGenericSpecNode v2 = (ASTGenericSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInterfaceStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.InterfaceStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tinterface"))
                return 0;
            else
                if (name.equals("GenericSpec"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InterfaceStmt> ::= tinterface:T_INTERFACE GenericSpec:<GenericSpec> teos:T_EOS  :production1097
         */
        protected ASTInterfaceStmtNode userAction(Token v1, ASTGenericSpecNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1097Production PRODUCTION1097 = Production1097Production.getInstance();

    public static class Production1098Production extends Production
    {
        private Production1098Production() {;} // Singleton
        private static Production1098Production singletonInstance = null;
        public static final Production1098Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1098Production(); return singletonInstance; }

        public String getDescription() { return "<InterfaceStmt> ::= LblDef:<LblDef> tinterface:T_INTERFACE GenericSpec:<GenericSpec> teos:T_EOS  :production1098"; }

        /**
         * Reduce by <InterfaceStmt> ::= LblDef:<LblDef> tinterface:T_INTERFACE GenericSpec:<GenericSpec> teos:T_EOS  :production1098
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InterfaceStmt> ::= LblDef:<LblDef> tinterface:T_INTERFACE GenericSpec:<GenericSpec> teos:T_EOS  :production1098
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTGenericSpecNode v3 = (ASTGenericSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInterfaceStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.InterfaceStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tinterface"))
                    return 1;
                else
                    if (name.equals("GenericSpec"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InterfaceStmt> ::= LblDef:<LblDef> tinterface:T_INTERFACE GenericSpec:<GenericSpec> teos:T_EOS  :production1098
         */
        protected ASTInterfaceStmtNode userAction(ASTLblDefNode v1, Token v2, ASTGenericSpecNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production1098Production PRODUCTION1098 = Production1098Production.getInstance();

    public static class Production1099Production extends Production
    {
        private Production1099Production() {;} // Singleton
        private static Production1099Production singletonInstance = null;
        public static final Production1099Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1099Production(); return singletonInstance; }

        public String getDescription() { return "<InterfaceStmt> ::= tinterface:T_INTERFACE teos:T_EOS  :production1099"; }

        /**
         * Reduce by <InterfaceStmt> ::= tinterface:T_INTERFACE teos:T_EOS  :production1099
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InterfaceStmt> ::= tinterface:T_INTERFACE teos:T_EOS  :production1099
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInterfaceStmtNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.InterfaceStmtNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tinterface"))
                return 0;
            else
                if (name.equals("teos"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InterfaceStmt> ::= tinterface:T_INTERFACE teos:T_EOS  :production1099
         */
        protected ASTInterfaceStmtNode userAction(Token v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production1099Production PRODUCTION1099 = Production1099Production.getInstance();

    public static class Production1100Production extends Production
    {
        private Production1100Production() {;} // Singleton
        private static Production1100Production singletonInstance = null;
        public static final Production1100Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1100Production(); return singletonInstance; }

        public String getDescription() { return "<InterfaceStmt> ::= LblDef:<LblDef> tinterface:T_INTERFACE teos:T_EOS  :production1100"; }

        /**
         * Reduce by <InterfaceStmt> ::= LblDef:<LblDef> tinterface:T_INTERFACE teos:T_EOS  :production1100
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InterfaceStmt> ::= LblDef:<LblDef> tinterface:T_INTERFACE teos:T_EOS  :production1100
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInterfaceStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.InterfaceStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tinterface"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InterfaceStmt> ::= LblDef:<LblDef> tinterface:T_INTERFACE teos:T_EOS  :production1100
         */
        protected ASTInterfaceStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1100Production PRODUCTION1100 = Production1100Production.getInstance();

    public static class Production1101Production extends Production
    {
        private Production1101Production() {;} // Singleton
        private static Production1101Production singletonInstance = null;
        public static final Production1101Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1101Production(); return singletonInstance; }

        public String getDescription() { return "<EndInterfaceStmt> ::= tendinterface:T_ENDINTERFACE teos:T_EOS  :production1101"; }

        /**
         * Reduce by <EndInterfaceStmt> ::= tendinterface:T_ENDINTERFACE teos:T_EOS  :production1101
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndInterfaceStmt> ::= tendinterface:T_ENDINTERFACE teos:T_EOS  :production1101
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndInterfaceStmtNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.EndInterfaceStmtNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tendinterface"))
                return 0;
            else
                if (name.equals("teos"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndInterfaceStmt> ::= tendinterface:T_ENDINTERFACE teos:T_EOS  :production1101
         */
        protected ASTEndInterfaceStmtNode userAction(Token v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production1101Production PRODUCTION1101 = Production1101Production.getInstance();

    public static class Production1102Production extends Production
    {
        private Production1102Production() {;} // Singleton
        private static Production1102Production singletonInstance = null;
        public static final Production1102Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1102Production(); return singletonInstance; }

        public String getDescription() { return "<EndInterfaceStmt> ::= tendinterface:T_ENDINTERFACE <EndInterfaceStmt@77> teos:T_EOS  :production1102"; }

        /**
         * Reduce by <EndInterfaceStmt> ::= tendinterface:T_ENDINTERFACE <EndInterfaceStmt@77> teos:T_EOS  :production1102
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndInterfaceStmt> ::= tendinterface:T_ENDINTERFACE <EndInterfaceStmt@77> teos:T_EOS  :production1102
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v2 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndInterfaceStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EndInterfaceStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tendinterface"))
                return 0;
            else
                if (name.equals("EndName"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndInterfaceStmt> ::= tendinterface:T_ENDINTERFACE <EndInterfaceStmt@77> teos:T_EOS  :production1102
         */
        protected ASTEndInterfaceStmtNode userAction(Token v1, ASTEndNameNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1102Production PRODUCTION1102 = Production1102Production.getInstance();

    public static class Production1103Production extends Production
    {
        private Production1103Production() {;} // Singleton
        private static Production1103Production singletonInstance = null;
        public static final Production1103Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1103Production(); return singletonInstance; }

        public String getDescription() { return "<EndInterfaceStmt> ::= LblDef:<LblDef> tendinterface:T_ENDINTERFACE teos:T_EOS  :production1103"; }

        /**
         * Reduce by <EndInterfaceStmt> ::= LblDef:<LblDef> tendinterface:T_ENDINTERFACE teos:T_EOS  :production1103
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndInterfaceStmt> ::= LblDef:<LblDef> tendinterface:T_ENDINTERFACE teos:T_EOS  :production1103
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndInterfaceStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EndInterfaceStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tendinterface"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndInterfaceStmt> ::= LblDef:<LblDef> tendinterface:T_ENDINTERFACE teos:T_EOS  :production1103
         */
        protected ASTEndInterfaceStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1103Production PRODUCTION1103 = Production1103Production.getInstance();

    public static class Production1104Production extends Production
    {
        private Production1104Production() {;} // Singleton
        private static Production1104Production singletonInstance = null;
        public static final Production1104Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1104Production(); return singletonInstance; }

        public String getDescription() { return "<EndInterfaceStmt> ::= LblDef:<LblDef> tendinterface:T_ENDINTERFACE <EndInterfaceStmt@77> teos:T_EOS  :production1104"; }

        /**
         * Reduce by <EndInterfaceStmt> ::= LblDef:<LblDef> tendinterface:T_ENDINTERFACE <EndInterfaceStmt@77> teos:T_EOS  :production1104
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndInterfaceStmt> ::= LblDef:<LblDef> tendinterface:T_ENDINTERFACE <EndInterfaceStmt@77> teos:T_EOS  :production1104
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v3 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndInterfaceStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EndInterfaceStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tendinterface"))
                    return 1;
                else
                    if (name.equals("EndName"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndInterfaceStmt> ::= LblDef:<LblDef> tendinterface:T_ENDINTERFACE <EndInterfaceStmt@77> teos:T_EOS  :production1104
         */
        protected ASTEndInterfaceStmtNode userAction(ASTLblDefNode v1, Token v2, ASTEndNameNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production1104Production PRODUCTION1104 = Production1104Production.getInstance();

    public static class Production1105Production extends Production
    {
        private Production1105Production() {;} // Singleton
        private static Production1105Production singletonInstance = null;
        public static final Production1105Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1105Production(); return singletonInstance; }

        public String getDescription() { return "<EndInterfaceStmt> ::= tend:T_END tinterface:T_INTERFACE teos:T_EOS  :production1105"; }

        /**
         * Reduce by <EndInterfaceStmt> ::= tend:T_END tinterface:T_INTERFACE teos:T_EOS  :production1105
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndInterfaceStmt> ::= tend:T_END tinterface:T_INTERFACE teos:T_EOS  :production1105
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndInterfaceStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EndInterfaceStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tend"))
                return 0;
            else
                if (name.equals("tinterface"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndInterfaceStmt> ::= tend:T_END tinterface:T_INTERFACE teos:T_EOS  :production1105
         */
        protected ASTEndInterfaceStmtNode userAction(Token v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1105Production PRODUCTION1105 = Production1105Production.getInstance();

    public static class Production1106Production extends Production
    {
        private Production1106Production() {;} // Singleton
        private static Production1106Production singletonInstance = null;
        public static final Production1106Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1106Production(); return singletonInstance; }

        public String getDescription() { return "<EndInterfaceStmt> ::= tend:T_END tinterface:T_INTERFACE <EndInterfaceStmt@78> teos:T_EOS  :production1106"; }

        /**
         * Reduce by <EndInterfaceStmt> ::= tend:T_END tinterface:T_INTERFACE <EndInterfaceStmt@78> teos:T_EOS  :production1106
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndInterfaceStmt> ::= tend:T_END tinterface:T_INTERFACE <EndInterfaceStmt@78> teos:T_EOS  :production1106
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v3 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndInterfaceStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EndInterfaceStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tend"))
                return 0;
            else
                if (name.equals("tinterface"))
                    return 1;
                else
                    if (name.equals("EndName"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndInterfaceStmt> ::= tend:T_END tinterface:T_INTERFACE <EndInterfaceStmt@78> teos:T_EOS  :production1106
         */
        protected ASTEndInterfaceStmtNode userAction(Token v1, Token v2, ASTEndNameNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production1106Production PRODUCTION1106 = Production1106Production.getInstance();

    public static class Production1107Production extends Production
    {
        private Production1107Production() {;} // Singleton
        private static Production1107Production singletonInstance = null;
        public static final Production1107Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1107Production(); return singletonInstance; }

        public String getDescription() { return "<EndInterfaceStmt> ::= LblDef:<LblDef> tend:T_END tinterface:T_INTERFACE teos:T_EOS  :production1107"; }

        /**
         * Reduce by <EndInterfaceStmt> ::= LblDef:<LblDef> tend:T_END tinterface:T_INTERFACE teos:T_EOS  :production1107
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndInterfaceStmt> ::= LblDef:<LblDef> tend:T_END tinterface:T_INTERFACE teos:T_EOS  :production1107
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndInterfaceStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EndInterfaceStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tend"))
                    return 1;
                else
                    if (name.equals("tinterface"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndInterfaceStmt> ::= LblDef:<LblDef> tend:T_END tinterface:T_INTERFACE teos:T_EOS  :production1107
         */
        protected ASTEndInterfaceStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production1107Production PRODUCTION1107 = Production1107Production.getInstance();

    public static class Production1108Production extends Production
    {
        private Production1108Production() {;} // Singleton
        private static Production1108Production singletonInstance = null;
        public static final Production1108Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1108Production(); return singletonInstance; }

        public String getDescription() { return "<EndInterfaceStmt> ::= LblDef:<LblDef> tend:T_END tinterface:T_INTERFACE <EndInterfaceStmt@78> teos:T_EOS  :production1108"; }

        /**
         * Reduce by <EndInterfaceStmt> ::= LblDef:<LblDef> tend:T_END tinterface:T_INTERFACE <EndInterfaceStmt@78> teos:T_EOS  :production1108
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndInterfaceStmt> ::= LblDef:<LblDef> tend:T_END tinterface:T_INTERFACE <EndInterfaceStmt@78> teos:T_EOS  :production1108
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v4 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndInterfaceStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.EndInterfaceStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tend"))
                    return 1;
                else
                    if (name.equals("tinterface"))
                        return 2;
                    else
                        if (name.equals("EndName"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndInterfaceStmt> ::= LblDef:<LblDef> tend:T_END tinterface:T_INTERFACE <EndInterfaceStmt@78> teos:T_EOS  :production1108
         */
        protected ASTEndInterfaceStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, ASTEndNameNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production1108Production PRODUCTION1108 = Production1108Production.getInstance();

    public static class Production1109Production extends Production
    {
        private Production1109Production() {;} // Singleton
        private static Production1109Production singletonInstance = null;
        public static final Production1109Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1109Production(); return singletonInstance; }

        public String getDescription() { return "<InterfaceBody> ::= FunctionStmt:<FunctionStmt> FunctionInterfaceRange:<FunctionInterfaceRange>  :production1109"; }

        /**
         * Reduce by <InterfaceBody> ::= FunctionStmt:<FunctionStmt> FunctionInterfaceRange:<FunctionInterfaceRange>  :production1109
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InterfaceBody> ::= FunctionStmt:<FunctionStmt> FunctionInterfaceRange:<FunctionInterfaceRange>  :production1109
            ASTFunctionInterfaceRangeNode v2 = (ASTFunctionInterfaceRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFunctionStmtNode v1 = (ASTFunctionStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInterfaceBodyNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.InterfaceBodyNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("FunctionStmt"))
                return 0;
            else
                if (name.equals("FunctionInterfaceRange"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InterfaceBody> ::= FunctionStmt:<FunctionStmt> FunctionInterfaceRange:<FunctionInterfaceRange>  :production1109
         */
        protected ASTInterfaceBodyNode userAction(ASTFunctionStmtNode v1, ASTFunctionInterfaceRangeNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production1109Production PRODUCTION1109 = Production1109Production.getInstance();

    public static class Production1110Production extends Production
    {
        private Production1110Production() {;} // Singleton
        private static Production1110Production singletonInstance = null;
        public static final Production1110Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1110Production(); return singletonInstance; }

        public String getDescription() { return "<InterfaceBody> ::= SubroutineStmt:<SubroutineStmt> SubroutineInterfaceRange:<SubroutineInterfaceRange>  :production1110"; }

        /**
         * Reduce by <InterfaceBody> ::= SubroutineStmt:<SubroutineStmt> SubroutineInterfaceRange:<SubroutineInterfaceRange>  :production1110
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InterfaceBody> ::= SubroutineStmt:<SubroutineStmt> SubroutineInterfaceRange:<SubroutineInterfaceRange>  :production1110
            ASTSubroutineInterfaceRangeNode v2 = (ASTSubroutineInterfaceRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubroutineStmtNode v1 = (ASTSubroutineStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTInterfaceBodyNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.InterfaceBodyNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SubroutineStmt"))
                return 0;
            else
                if (name.equals("SubroutineInterfaceRange"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <InterfaceBody> ::= SubroutineStmt:<SubroutineStmt> SubroutineInterfaceRange:<SubroutineInterfaceRange>  :production1110
         */
        protected ASTInterfaceBodyNode userAction(ASTSubroutineStmtNode v1, ASTSubroutineInterfaceRangeNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production1110Production PRODUCTION1110 = Production1110Production.getInstance();

    public static class Production1111Production extends Production
    {
        private Production1111Production() {;} // Singleton
        private static Production1111Production singletonInstance = null;
        public static final Production1111Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1111Production(); return singletonInstance; }

        public String getDescription() { return "<FunctionInterfaceRange> ::= SubprogramInterfaceBody:<SubprogramInterfaceBody> EndFunctionStmt:<EndFunctionStmt>  :production1111"; }

        /**
         * Reduce by <FunctionInterfaceRange> ::= SubprogramInterfaceBody:<SubprogramInterfaceBody> EndFunctionStmt:<EndFunctionStmt>  :production1111
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FunctionInterfaceRange> ::= SubprogramInterfaceBody:<SubprogramInterfaceBody> EndFunctionStmt:<EndFunctionStmt>  :production1111
            ASTEndFunctionStmtNode v2 = (ASTEndFunctionStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubprogramInterfaceBodyNode v1 = (ASTSubprogramInterfaceBodyNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFunctionInterfaceRangeNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.FunctionInterfaceRangeNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SubprogramInterfaceBody"))
                return 0;
            else
                if (name.equals("EndFunctionStmt"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FunctionInterfaceRange> ::= SubprogramInterfaceBody:<SubprogramInterfaceBody> EndFunctionStmt:<EndFunctionStmt>  :production1111
         */
        protected ASTFunctionInterfaceRangeNode userAction(ASTSubprogramInterfaceBodyNode v1, ASTEndFunctionStmtNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production1111Production PRODUCTION1111 = Production1111Production.getInstance();

    public static class Production1112Production extends Production
    {
        private Production1112Production() {;} // Singleton
        private static Production1112Production singletonInstance = null;
        public static final Production1112Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1112Production(); return singletonInstance; }

        public String getDescription() { return "<FunctionInterfaceRange> ::= EndFunctionStmt:<EndFunctionStmt>  :production1112"; }

        /**
         * Reduce by <FunctionInterfaceRange> ::= EndFunctionStmt:<EndFunctionStmt>  :production1112
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FunctionInterfaceRange> ::= EndFunctionStmt:<EndFunctionStmt>  :production1112
            ASTEndFunctionStmtNode v1 = (ASTEndFunctionStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFunctionInterfaceRangeNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.FunctionInterfaceRangeNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EndFunctionStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FunctionInterfaceRange> ::= EndFunctionStmt:<EndFunctionStmt>  :production1112
         */
        protected ASTFunctionInterfaceRangeNode userAction(ASTEndFunctionStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production1112Production PRODUCTION1112 = Production1112Production.getInstance();

    public static class Production1113Production extends Production
    {
        private Production1113Production() {;} // Singleton
        private static Production1113Production singletonInstance = null;
        public static final Production1113Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1113Production(); return singletonInstance; }

        public String getDescription() { return "<SubroutineInterfaceRange> ::= SubprogramInterfaceBody:<SubprogramInterfaceBody> EndSubroutineStmt:<EndSubroutineStmt>  :production1113"; }

        /**
         * Reduce by <SubroutineInterfaceRange> ::= SubprogramInterfaceBody:<SubprogramInterfaceBody> EndSubroutineStmt:<EndSubroutineStmt>  :production1113
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SubroutineInterfaceRange> ::= SubprogramInterfaceBody:<SubprogramInterfaceBody> EndSubroutineStmt:<EndSubroutineStmt>  :production1113
            ASTEndSubroutineStmtNode v2 = (ASTEndSubroutineStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubprogramInterfaceBodyNode v1 = (ASTSubprogramInterfaceBodyNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSubroutineInterfaceRangeNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.SubroutineInterfaceRangeNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SubprogramInterfaceBody"))
                return 0;
            else
                if (name.equals("EndSubroutineStmt"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SubroutineInterfaceRange> ::= SubprogramInterfaceBody:<SubprogramInterfaceBody> EndSubroutineStmt:<EndSubroutineStmt>  :production1113
         */
        protected ASTSubroutineInterfaceRangeNode userAction(ASTSubprogramInterfaceBodyNode v1, ASTEndSubroutineStmtNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production1113Production PRODUCTION1113 = Production1113Production.getInstance();

    public static class Production1114Production extends Production
    {
        private Production1114Production() {;} // Singleton
        private static Production1114Production singletonInstance = null;
        public static final Production1114Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1114Production(); return singletonInstance; }

        public String getDescription() { return "<SubroutineInterfaceRange> ::= EndSubroutineStmt:<EndSubroutineStmt>  :production1114"; }

        /**
         * Reduce by <SubroutineInterfaceRange> ::= EndSubroutineStmt:<EndSubroutineStmt>  :production1114
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SubroutineInterfaceRange> ::= EndSubroutineStmt:<EndSubroutineStmt>  :production1114
            ASTEndSubroutineStmtNode v1 = (ASTEndSubroutineStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSubroutineInterfaceRangeNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SubroutineInterfaceRangeNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EndSubroutineStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SubroutineInterfaceRange> ::= EndSubroutineStmt:<EndSubroutineStmt>  :production1114
         */
        protected ASTSubroutineInterfaceRangeNode userAction(ASTEndSubroutineStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production1114Production PRODUCTION1114 = Production1114Production.getInstance();

    public static class Production1115Production extends Production
    {
        private Production1115Production() {;} // Singleton
        private static Production1115Production singletonInstance = null;
        public static final Production1115Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1115Production(); return singletonInstance; }

        public String getDescription() { return "<SubprogramInterfaceBody> ::= SpecificationPartConstruct:<SpecificationPartConstruct>  :production1115"; }

        /**
         * Reduce by <SubprogramInterfaceBody> ::= SpecificationPartConstruct:<SpecificationPartConstruct>  :production1115
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SubprogramInterfaceBody> ::= SpecificationPartConstruct:<SpecificationPartConstruct>  :production1115
            ASTSpecificationPartConstructNode v1 = (ASTSpecificationPartConstructNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSubprogramInterfaceBodyNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SubprogramInterfaceBodyNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SpecificationPartConstruct"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SubprogramInterfaceBody> ::= SpecificationPartConstruct:<SpecificationPartConstruct>  :production1115
         */
        protected ASTSubprogramInterfaceBodyNode userAction(ASTSpecificationPartConstructNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production1115Production PRODUCTION1115 = Production1115Production.getInstance();

    public static class Production1116Production extends Production
    {
        private Production1116Production() {;} // Singleton
        private static Production1116Production singletonInstance = null;
        public static final Production1116Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1116Production(); return singletonInstance; }

        public String getDescription() { return "<SubprogramInterfaceBody> ::= SubprogramInterfaceBody:<SubprogramInterfaceBody> SpecificationPartConstruct:<SpecificationPartConstruct>  :production1116"; }

        /**
         * Reduce by <SubprogramInterfaceBody> ::= SubprogramInterfaceBody:<SubprogramInterfaceBody> SpecificationPartConstruct:<SpecificationPartConstruct>  :production1116
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SubprogramInterfaceBody> ::= SubprogramInterfaceBody:<SubprogramInterfaceBody> SpecificationPartConstruct:<SpecificationPartConstruct>  :production1116
            ASTSpecificationPartConstructNode v2 = (ASTSpecificationPartConstructNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubprogramInterfaceBodyNode v1 = (ASTSubprogramInterfaceBodyNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSubprogramInterfaceBodyNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.SubprogramInterfaceBodyNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SubprogramInterfaceBody"))
                return 0;
            else
                if (name.equals("SpecificationPartConstruct"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SubprogramInterfaceBody> ::= SubprogramInterfaceBody:<SubprogramInterfaceBody> SpecificationPartConstruct:<SpecificationPartConstruct>  :production1116
         */
        protected ASTSubprogramInterfaceBodyNode userAction(ASTSubprogramInterfaceBodyNode v1, ASTSpecificationPartConstructNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production1116Production PRODUCTION1116 = Production1116Production.getInstance();

    public static class Production1117Production extends Production
    {
        private Production1117Production() {;} // Singleton
        private static Production1117Production singletonInstance = null;
        public static final Production1117Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1117Production(); return singletonInstance; }

        public String getDescription() { return "<ModuleProcedureStmt> ::= tmodule:T_MODULE tprocedure:T_PROCEDURE ProcedureNameList:<ProcedureNameList> teos:T_EOS  :production1117"; }

        /**
         * Reduce by <ModuleProcedureStmt> ::= tmodule:T_MODULE tprocedure:T_PROCEDURE ProcedureNameList:<ProcedureNameList> teos:T_EOS  :production1117
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ModuleProcedureStmt> ::= tmodule:T_MODULE tprocedure:T_PROCEDURE ProcedureNameList:<ProcedureNameList> teos:T_EOS  :production1117
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTProcedureNameListNode v3 = (ASTProcedureNameListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTModuleProcedureStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.ModuleProcedureStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tmodule"))
                return 0;
            else
                if (name.equals("tprocedure"))
                    return 1;
                else
                    if (name.equals("ProcedureNameList"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ModuleProcedureStmt> ::= tmodule:T_MODULE tprocedure:T_PROCEDURE ProcedureNameList:<ProcedureNameList> teos:T_EOS  :production1117
         */
        protected ASTModuleProcedureStmtNode userAction(Token v1, Token v2, ASTProcedureNameListNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production1117Production PRODUCTION1117 = Production1117Production.getInstance();

    public static class Production1118Production extends Production
    {
        private Production1118Production() {;} // Singleton
        private static Production1118Production singletonInstance = null;
        public static final Production1118Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1118Production(); return singletonInstance; }

        public String getDescription() { return "<ModuleProcedureStmt> ::= LblDef:<LblDef> tmodule:T_MODULE tprocedure:T_PROCEDURE ProcedureNameList:<ProcedureNameList> teos:T_EOS  :production1118"; }

        /**
         * Reduce by <ModuleProcedureStmt> ::= LblDef:<LblDef> tmodule:T_MODULE tprocedure:T_PROCEDURE ProcedureNameList:<ProcedureNameList> teos:T_EOS  :production1118
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ModuleProcedureStmt> ::= LblDef:<LblDef> tmodule:T_MODULE tprocedure:T_PROCEDURE ProcedureNameList:<ProcedureNameList> teos:T_EOS  :production1118
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTProcedureNameListNode v4 = (ASTProcedureNameListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTModuleProcedureStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.ModuleProcedureStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tmodule"))
                    return 1;
                else
                    if (name.equals("tprocedure"))
                        return 2;
                    else
                        if (name.equals("ProcedureNameList"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ModuleProcedureStmt> ::= LblDef:<LblDef> tmodule:T_MODULE tprocedure:T_PROCEDURE ProcedureNameList:<ProcedureNameList> teos:T_EOS  :production1118
         */
        protected ASTModuleProcedureStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, ASTProcedureNameListNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production1118Production PRODUCTION1118 = Production1118Production.getInstance();

    public static class Production1119Production extends Production
    {
        private Production1119Production() {;} // Singleton
        private static Production1119Production singletonInstance = null;
        public static final Production1119Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1119Production(); return singletonInstance; }

        public String getDescription() { return "<ProcedureNameList> ::= ProcedureName:<ProcedureName>  :production1119"; }

        /**
         * Reduce by <ProcedureNameList> ::= ProcedureName:<ProcedureName>  :production1119
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ProcedureNameList> ::= ProcedureName:<ProcedureName>  :production1119
            ASTProcedureNameNode v1 = (ASTProcedureNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTProcedureNameListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ProcedureNameListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ProcedureName"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ProcedureNameList> ::= ProcedureName:<ProcedureName>  :production1119
         */
        protected ASTProcedureNameListNode userAction(ASTProcedureNameNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production1119Production PRODUCTION1119 = Production1119Production.getInstance();

    public static class Production1120Production extends Production
    {
        private Production1120Production() {;} // Singleton
        private static Production1120Production singletonInstance = null;
        public static final Production1120Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1120Production(); return singletonInstance; }

        public String getDescription() { return "<ProcedureNameList> ::= @:<ProcedureNameList> tcomma:T_COMMA ProcedureName:<ProcedureName>  :production1120"; }

        /**
         * Reduce by <ProcedureNameList> ::= @:<ProcedureNameList> tcomma:T_COMMA ProcedureName:<ProcedureName>  :production1120
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ProcedureNameList> ::= @:<ProcedureNameList> tcomma:T_COMMA ProcedureName:<ProcedureName>  :production1120
            ASTProcedureNameNode v3 = (ASTProcedureNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTProcedureNameListNode v1 = (ASTProcedureNameListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTProcedureNameListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.ProcedureNameListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("ProcedureName"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ProcedureNameList> ::= @:<ProcedureNameList> tcomma:T_COMMA ProcedureName:<ProcedureName>  :production1120
         */
        protected ASTProcedureNameListNode userAction(ASTProcedureNameListNode v1, Token v2, ASTProcedureNameNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production1120Production PRODUCTION1120 = Production1120Production.getInstance();

    public static class Production1121Production extends Production
    {
        private Production1121Production() {;} // Singleton
        private static Production1121Production singletonInstance = null;
        public static final Production1121Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1121Production(); return singletonInstance; }

        public String getDescription() { return "<ProcedureName> ::= tident:T_IDENT  :production1121"; }

        /**
         * Reduce by <ProcedureName> ::= tident:T_IDENT  :production1121
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ProcedureName> ::= tident:T_IDENT  :production1121
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTProcedureNameNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ProcedureNameNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tident"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ProcedureName> ::= tident:T_IDENT  :production1121
         */
        protected ASTProcedureNameNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production1121Production PRODUCTION1121 = Production1121Production.getInstance();

    public static class Production1122Production extends Production
    {
        private Production1122Production() {;} // Singleton
        private static Production1122Production singletonInstance = null;
        public static final Production1122Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1122Production(); return singletonInstance; }

        public String getDescription() { return "<GenericSpec> ::= toperator:T_OPERATOR tlparen:T_LPAREN DefinedOperator:<DefinedOperator> trparen:T_RPAREN  :production1122"; }

        /**
         * Reduce by <GenericSpec> ::= toperator:T_OPERATOR tlparen:T_LPAREN DefinedOperator:<DefinedOperator> trparen:T_RPAREN  :production1122
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <GenericSpec> ::= toperator:T_OPERATOR tlparen:T_LPAREN DefinedOperator:<DefinedOperator> trparen:T_RPAREN  :production1122
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTDefinedOperatorNode v3 = (ASTDefinedOperatorNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTGenericSpecNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.GenericSpecNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("toperator"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("DefinedOperator"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <GenericSpec> ::= toperator:T_OPERATOR tlparen:T_LPAREN DefinedOperator:<DefinedOperator> trparen:T_RPAREN  :production1122
         */
        protected ASTGenericSpecNode userAction(Token v1, Token v2, ASTDefinedOperatorNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production1122Production PRODUCTION1122 = Production1122Production.getInstance();

    public static class Production1123Production extends Production
    {
        private Production1123Production() {;} // Singleton
        private static Production1123Production singletonInstance = null;
        public static final Production1123Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1123Production(); return singletonInstance; }

        public String getDescription() { return "<GenericSpec> ::= tassignment:T_ASSIGNMENT tlparen:T_LPAREN tequals:T_EQUALS trparen:T_RPAREN  :production1123"; }

        /**
         * Reduce by <GenericSpec> ::= tassignment:T_ASSIGNMENT tlparen:T_LPAREN tequals:T_EQUALS trparen:T_RPAREN  :production1123
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <GenericSpec> ::= tassignment:T_ASSIGNMENT tlparen:T_LPAREN tequals:T_EQUALS trparen:T_RPAREN  :production1123
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTGenericSpecNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.GenericSpecNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tassignment"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("tequals"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <GenericSpec> ::= tassignment:T_ASSIGNMENT tlparen:T_LPAREN tequals:T_EQUALS trparen:T_RPAREN  :production1123
         */
        protected ASTGenericSpecNode userAction(Token v1, Token v2, Token v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production1123Production PRODUCTION1123 = Production1123Production.getInstance();

    public static class Production1124Production extends Production
    {
        private Production1124Production() {;} // Singleton
        private static Production1124Production singletonInstance = null;
        public static final Production1124Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1124Production(); return singletonInstance; }

        public String getDescription() { return "<ExternalStmt> ::= texternal:T_EXTERNAL ExternalNameList:<ExternalNameList> teos:T_EOS  :production1124"; }

        /**
         * Reduce by <ExternalStmt> ::= texternal:T_EXTERNAL ExternalNameList:<ExternalNameList> teos:T_EOS  :production1124
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ExternalStmt> ::= texternal:T_EXTERNAL ExternalNameList:<ExternalNameList> teos:T_EOS  :production1124
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExternalNameListNode v2 = (ASTExternalNameListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTExternalStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.ExternalStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("texternal"))
                return 0;
            else
                if (name.equals("ExternalNameList"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ExternalStmt> ::= texternal:T_EXTERNAL ExternalNameList:<ExternalNameList> teos:T_EOS  :production1124
         */
        protected ASTExternalStmtNode userAction(Token v1, ASTExternalNameListNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1124Production PRODUCTION1124 = Production1124Production.getInstance();

    public static class Production1125Production extends Production
    {
        private Production1125Production() {;} // Singleton
        private static Production1125Production singletonInstance = null;
        public static final Production1125Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1125Production(); return singletonInstance; }

        public String getDescription() { return "<ExternalStmt> ::= LblDef:<LblDef> texternal:T_EXTERNAL ExternalNameList:<ExternalNameList> teos:T_EOS  :production1125"; }

        /**
         * Reduce by <ExternalStmt> ::= LblDef:<LblDef> texternal:T_EXTERNAL ExternalNameList:<ExternalNameList> teos:T_EOS  :production1125
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ExternalStmt> ::= LblDef:<LblDef> texternal:T_EXTERNAL ExternalNameList:<ExternalNameList> teos:T_EOS  :production1125
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExternalNameListNode v3 = (ASTExternalNameListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTExternalStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.ExternalStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("texternal"))
                    return 1;
                else
                    if (name.equals("ExternalNameList"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ExternalStmt> ::= LblDef:<LblDef> texternal:T_EXTERNAL ExternalNameList:<ExternalNameList> teos:T_EOS  :production1125
         */
        protected ASTExternalStmtNode userAction(ASTLblDefNode v1, Token v2, ASTExternalNameListNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production1125Production PRODUCTION1125 = Production1125Production.getInstance();

    public static class Production1126Production extends Production
    {
        private Production1126Production() {;} // Singleton
        private static Production1126Production singletonInstance = null;
        public static final Production1126Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1126Production(); return singletonInstance; }

        public String getDescription() { return "<ExternalStmt> ::= texternal:T_EXTERNAL tcolon:T_COLON tcolon2:T_COLON ExternalNameList:<ExternalNameList> teos:T_EOS  :production1126"; }

        /**
         * Reduce by <ExternalStmt> ::= texternal:T_EXTERNAL tcolon:T_COLON tcolon2:T_COLON ExternalNameList:<ExternalNameList> teos:T_EOS  :production1126
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ExternalStmt> ::= texternal:T_EXTERNAL tcolon:T_COLON tcolon2:T_COLON ExternalNameList:<ExternalNameList> teos:T_EOS  :production1126
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExternalNameListNode v4 = (ASTExternalNameListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTExternalStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.ExternalStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("texternal"))
                return 0;
            else
                if (name.equals("tcolon"))
                    return 1;
                else
                    if (name.equals("tcolon2"))
                        return 2;
                    else
                        if (name.equals("ExternalNameList"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ExternalStmt> ::= texternal:T_EXTERNAL tcolon:T_COLON tcolon2:T_COLON ExternalNameList:<ExternalNameList> teos:T_EOS  :production1126
         */
        protected ASTExternalStmtNode userAction(Token v1, Token v2, Token v3, ASTExternalNameListNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production1126Production PRODUCTION1126 = Production1126Production.getInstance();

    public static class Production1127Production extends Production
    {
        private Production1127Production() {;} // Singleton
        private static Production1127Production singletonInstance = null;
        public static final Production1127Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1127Production(); return singletonInstance; }

        public String getDescription() { return "<ExternalStmt> ::= LblDef:<LblDef> texternal:T_EXTERNAL tcolon:T_COLON tcolon2:T_COLON ExternalNameList:<ExternalNameList> teos:T_EOS  :production1127"; }

        /**
         * Reduce by <ExternalStmt> ::= LblDef:<LblDef> texternal:T_EXTERNAL tcolon:T_COLON tcolon2:T_COLON ExternalNameList:<ExternalNameList> teos:T_EOS  :production1127
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ExternalStmt> ::= LblDef:<LblDef> texternal:T_EXTERNAL tcolon:T_COLON tcolon2:T_COLON ExternalNameList:<ExternalNameList> teos:T_EOS  :production1127
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExternalNameListNode v5 = (ASTExternalNameListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTExternalStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.ExternalStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("texternal"))
                    return 1;
                else
                    if (name.equals("tcolon"))
                        return 2;
                    else
                        if (name.equals("tcolon2"))
                            return 3;
                        else
                            if (name.equals("ExternalNameList"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ExternalStmt> ::= LblDef:<LblDef> texternal:T_EXTERNAL tcolon:T_COLON tcolon2:T_COLON ExternalNameList:<ExternalNameList> teos:T_EOS  :production1127
         */
        protected ASTExternalStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, Token v4, ASTExternalNameListNode v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production1127Production PRODUCTION1127 = Production1127Production.getInstance();

    public static class Production1128Production extends Production
    {
        private Production1128Production() {;} // Singleton
        private static Production1128Production singletonInstance = null;
        public static final Production1128Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1128Production(); return singletonInstance; }

        public String getDescription() { return "<ExternalNameList> ::= ExternalName:<ExternalName>  :production1128"; }

        /**
         * Reduce by <ExternalNameList> ::= ExternalName:<ExternalName>  :production1128
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ExternalNameList> ::= ExternalName:<ExternalName>  :production1128
            ASTExternalNameNode v1 = (ASTExternalNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTExternalNameListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ExternalNameListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("ExternalName"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ExternalNameList> ::= ExternalName:<ExternalName>  :production1128
         */
        protected ASTExternalNameListNode userAction(ASTExternalNameNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production1128Production PRODUCTION1128 = Production1128Production.getInstance();

    public static class Production1129Production extends Production
    {
        private Production1129Production() {;} // Singleton
        private static Production1129Production singletonInstance = null;
        public static final Production1129Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1129Production(); return singletonInstance; }

        public String getDescription() { return "<ExternalNameList> ::= @:<ExternalNameList> tcomma:T_COMMA ExternalName:<ExternalName>  :production1129"; }

        /**
         * Reduce by <ExternalNameList> ::= @:<ExternalNameList> tcomma:T_COMMA ExternalName:<ExternalName>  :production1129
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ExternalNameList> ::= @:<ExternalNameList> tcomma:T_COMMA ExternalName:<ExternalName>  :production1129
            ASTExternalNameNode v3 = (ASTExternalNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExternalNameListNode v1 = (ASTExternalNameListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTExternalNameListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.ExternalNameListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("ExternalName"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ExternalNameList> ::= @:<ExternalNameList> tcomma:T_COMMA ExternalName:<ExternalName>  :production1129
         */
        protected ASTExternalNameListNode userAction(ASTExternalNameListNode v1, Token v2, ASTExternalNameNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production1129Production PRODUCTION1129 = Production1129Production.getInstance();

    public static class Production1130Production extends Production
    {
        private Production1130Production() {;} // Singleton
        private static Production1130Production singletonInstance = null;
        public static final Production1130Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1130Production(); return singletonInstance; }

        public String getDescription() { return "<IntrinsicStmt> ::= tintrinsic:T_INTRINSIC IntrinsicList:<IntrinsicList> teos:T_EOS  :production1130"; }

        /**
         * Reduce by <IntrinsicStmt> ::= tintrinsic:T_INTRINSIC IntrinsicList:<IntrinsicList> teos:T_EOS  :production1130
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <IntrinsicStmt> ::= tintrinsic:T_INTRINSIC IntrinsicList:<IntrinsicList> teos:T_EOS  :production1130
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTIntrinsicListNode v2 = (ASTIntrinsicListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTIntrinsicStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.IntrinsicStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tintrinsic"))
                return 0;
            else
                if (name.equals("IntrinsicList"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <IntrinsicStmt> ::= tintrinsic:T_INTRINSIC IntrinsicList:<IntrinsicList> teos:T_EOS  :production1130
         */
        protected ASTIntrinsicStmtNode userAction(Token v1, ASTIntrinsicListNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1130Production PRODUCTION1130 = Production1130Production.getInstance();

    public static class Production1131Production extends Production
    {
        private Production1131Production() {;} // Singleton
        private static Production1131Production singletonInstance = null;
        public static final Production1131Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1131Production(); return singletonInstance; }

        public String getDescription() { return "<IntrinsicStmt> ::= LblDef:<LblDef> tintrinsic:T_INTRINSIC IntrinsicList:<IntrinsicList> teos:T_EOS  :production1131"; }

        /**
         * Reduce by <IntrinsicStmt> ::= LblDef:<LblDef> tintrinsic:T_INTRINSIC IntrinsicList:<IntrinsicList> teos:T_EOS  :production1131
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <IntrinsicStmt> ::= LblDef:<LblDef> tintrinsic:T_INTRINSIC IntrinsicList:<IntrinsicList> teos:T_EOS  :production1131
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTIntrinsicListNode v3 = (ASTIntrinsicListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTIntrinsicStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.IntrinsicStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tintrinsic"))
                    return 1;
                else
                    if (name.equals("IntrinsicList"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <IntrinsicStmt> ::= LblDef:<LblDef> tintrinsic:T_INTRINSIC IntrinsicList:<IntrinsicList> teos:T_EOS  :production1131
         */
        protected ASTIntrinsicStmtNode userAction(ASTLblDefNode v1, Token v2, ASTIntrinsicListNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production1131Production PRODUCTION1131 = Production1131Production.getInstance();

    public static class Production1132Production extends Production
    {
        private Production1132Production() {;} // Singleton
        private static Production1132Production singletonInstance = null;
        public static final Production1132Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1132Production(); return singletonInstance; }

        public String getDescription() { return "<IntrinsicStmt> ::= tintrinsic:T_INTRINSIC tcolon:T_COLON tcolon2:T_COLON IntrinsicList:<IntrinsicList> teos:T_EOS  :production1132"; }

        /**
         * Reduce by <IntrinsicStmt> ::= tintrinsic:T_INTRINSIC tcolon:T_COLON tcolon2:T_COLON IntrinsicList:<IntrinsicList> teos:T_EOS  :production1132
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <IntrinsicStmt> ::= tintrinsic:T_INTRINSIC tcolon:T_COLON tcolon2:T_COLON IntrinsicList:<IntrinsicList> teos:T_EOS  :production1132
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTIntrinsicListNode v4 = (ASTIntrinsicListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTIntrinsicStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.IntrinsicStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tintrinsic"))
                return 0;
            else
                if (name.equals("tcolon"))
                    return 1;
                else
                    if (name.equals("tcolon2"))
                        return 2;
                    else
                        if (name.equals("IntrinsicList"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <IntrinsicStmt> ::= tintrinsic:T_INTRINSIC tcolon:T_COLON tcolon2:T_COLON IntrinsicList:<IntrinsicList> teos:T_EOS  :production1132
         */
        protected ASTIntrinsicStmtNode userAction(Token v1, Token v2, Token v3, ASTIntrinsicListNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production1132Production PRODUCTION1132 = Production1132Production.getInstance();

    public static class Production1133Production extends Production
    {
        private Production1133Production() {;} // Singleton
        private static Production1133Production singletonInstance = null;
        public static final Production1133Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1133Production(); return singletonInstance; }

        public String getDescription() { return "<IntrinsicStmt> ::= LblDef:<LblDef> tintrinsic:T_INTRINSIC tcolon:T_COLON tcolon2:T_COLON IntrinsicList:<IntrinsicList> teos:T_EOS  :production1133"; }

        /**
         * Reduce by <IntrinsicStmt> ::= LblDef:<LblDef> tintrinsic:T_INTRINSIC tcolon:T_COLON tcolon2:T_COLON IntrinsicList:<IntrinsicList> teos:T_EOS  :production1133
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <IntrinsicStmt> ::= LblDef:<LblDef> tintrinsic:T_INTRINSIC tcolon:T_COLON tcolon2:T_COLON IntrinsicList:<IntrinsicList> teos:T_EOS  :production1133
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTIntrinsicListNode v5 = (ASTIntrinsicListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTIntrinsicStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.IntrinsicStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tintrinsic"))
                    return 1;
                else
                    if (name.equals("tcolon"))
                        return 2;
                    else
                        if (name.equals("tcolon2"))
                            return 3;
                        else
                            if (name.equals("IntrinsicList"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <IntrinsicStmt> ::= LblDef:<LblDef> tintrinsic:T_INTRINSIC tcolon:T_COLON tcolon2:T_COLON IntrinsicList:<IntrinsicList> teos:T_EOS  :production1133
         */
        protected ASTIntrinsicStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, Token v4, ASTIntrinsicListNode v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production1133Production PRODUCTION1133 = Production1133Production.getInstance();

    public static class Production1134Production extends Production
    {
        private Production1134Production() {;} // Singleton
        private static Production1134Production singletonInstance = null;
        public static final Production1134Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1134Production(); return singletonInstance; }

        public String getDescription() { return "<IntrinsicList> ::= IntrinsicProcedureName:<IntrinsicProcedureName>  :production1134"; }

        /**
         * Reduce by <IntrinsicList> ::= IntrinsicProcedureName:<IntrinsicProcedureName>  :production1134
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <IntrinsicList> ::= IntrinsicProcedureName:<IntrinsicProcedureName>  :production1134
            ASTIntrinsicProcedureNameNode v1 = (ASTIntrinsicProcedureNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTIntrinsicListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.IntrinsicListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("IntrinsicProcedureName"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <IntrinsicList> ::= IntrinsicProcedureName:<IntrinsicProcedureName>  :production1134
         */
        protected ASTIntrinsicListNode userAction(ASTIntrinsicProcedureNameNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production1134Production PRODUCTION1134 = Production1134Production.getInstance();

    public static class Production1135Production extends Production
    {
        private Production1135Production() {;} // Singleton
        private static Production1135Production singletonInstance = null;
        public static final Production1135Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1135Production(); return singletonInstance; }

        public String getDescription() { return "<IntrinsicList> ::= @:<IntrinsicList> tcomma:T_COMMA IntrinsicProcedureName:<IntrinsicProcedureName>  :production1135"; }

        /**
         * Reduce by <IntrinsicList> ::= @:<IntrinsicList> tcomma:T_COMMA IntrinsicProcedureName:<IntrinsicProcedureName>  :production1135
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <IntrinsicList> ::= @:<IntrinsicList> tcomma:T_COMMA IntrinsicProcedureName:<IntrinsicProcedureName>  :production1135
            ASTIntrinsicProcedureNameNode v3 = (ASTIntrinsicProcedureNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTIntrinsicListNode v1 = (ASTIntrinsicListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTIntrinsicListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.IntrinsicListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("IntrinsicProcedureName"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <IntrinsicList> ::= @:<IntrinsicList> tcomma:T_COMMA IntrinsicProcedureName:<IntrinsicProcedureName>  :production1135
         */
        protected ASTIntrinsicListNode userAction(ASTIntrinsicListNode v1, Token v2, ASTIntrinsicProcedureNameNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production1135Production PRODUCTION1135 = Production1135Production.getInstance();

    public static class Production1136Production extends Production
    {
        private Production1136Production() {;} // Singleton
        private static Production1136Production singletonInstance = null;
        public static final Production1136Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1136Production(); return singletonInstance; }

        public String getDescription() { return "<FunctionReference> ::= Name:<Name> tlparen:T_LPAREN trparen:T_RPAREN  :production1136"; }

        /**
         * Reduce by <FunctionReference> ::= Name:<Name> tlparen:T_LPAREN trparen:T_RPAREN  :production1136
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FunctionReference> ::= Name:<Name> tlparen:T_LPAREN trparen:T_RPAREN  :production1136
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFunctionReferenceNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.FunctionReferenceNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("trparen"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FunctionReference> ::= Name:<Name> tlparen:T_LPAREN trparen:T_RPAREN  :production1136
         */
        protected ASTFunctionReferenceNode userAction(ASTNameNode v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1136Production PRODUCTION1136 = Production1136Production.getInstance();

    public static class Production1137Production extends Production
    {
        private Production1137Production() {;} // Singleton
        private static Production1137Production singletonInstance = null;
        public static final Production1137Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1137Production(); return singletonInstance; }

        public String getDescription() { return "<FunctionReference> ::= Name:<Name> tlparen:T_LPAREN FunctionArgList:<FunctionArgList> trparen:T_RPAREN  :production1137"; }

        /**
         * Reduce by <FunctionReference> ::= Name:<Name> tlparen:T_LPAREN FunctionArgList:<FunctionArgList> trparen:T_RPAREN  :production1137
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FunctionReference> ::= Name:<Name> tlparen:T_LPAREN FunctionArgList:<FunctionArgList> trparen:T_RPAREN  :production1137
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFunctionArgListNode v3 = (ASTFunctionArgListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFunctionReferenceNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.FunctionReferenceNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tlparen"))
                    return 1;
                else
                    if (name.equals("FunctionArgList"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FunctionReference> ::= Name:<Name> tlparen:T_LPAREN FunctionArgList:<FunctionArgList> trparen:T_RPAREN  :production1137
         */
        protected ASTFunctionReferenceNode userAction(ASTNameNode v1, Token v2, ASTFunctionArgListNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production1137Production PRODUCTION1137 = Production1137Production.getInstance();

    public static class Production1138Production extends Production
    {
        private Production1138Production() {;} // Singleton
        private static Production1138Production singletonInstance = null;
        public static final Production1138Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1138Production(); return singletonInstance; }

        public String getDescription() { return "<CallStmt> ::= tcall:T_CALL SubroutineNameUse:<SubroutineNameUse> teos:T_EOS  :production1138"; }

        /**
         * Reduce by <CallStmt> ::= tcall:T_CALL SubroutineNameUse:<SubroutineNameUse> teos:T_EOS  :production1138
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CallStmt> ::= tcall:T_CALL SubroutineNameUse:<SubroutineNameUse> teos:T_EOS  :production1138
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubroutineNameUseNode v2 = (ASTSubroutineNameUseNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCallStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.CallStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tcall"))
                return 0;
            else
                if (name.equals("SubroutineNameUse"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CallStmt> ::= tcall:T_CALL SubroutineNameUse:<SubroutineNameUse> teos:T_EOS  :production1138
         */
        protected ASTCallStmtNode userAction(Token v1, ASTSubroutineNameUseNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1138Production PRODUCTION1138 = Production1138Production.getInstance();

    public static class Production1139Production extends Production
    {
        private Production1139Production() {;} // Singleton
        private static Production1139Production singletonInstance = null;
        public static final Production1139Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1139Production(); return singletonInstance; }

        public String getDescription() { return "<CallStmt> ::= LblDef:<LblDef> tcall:T_CALL SubroutineNameUse:<SubroutineNameUse> teos:T_EOS  :production1139"; }

        /**
         * Reduce by <CallStmt> ::= LblDef:<LblDef> tcall:T_CALL SubroutineNameUse:<SubroutineNameUse> teos:T_EOS  :production1139
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CallStmt> ::= LblDef:<LblDef> tcall:T_CALL SubroutineNameUse:<SubroutineNameUse> teos:T_EOS  :production1139
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubroutineNameUseNode v3 = (ASTSubroutineNameUseNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCallStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.CallStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tcall"))
                    return 1;
                else
                    if (name.equals("SubroutineNameUse"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CallStmt> ::= LblDef:<LblDef> tcall:T_CALL SubroutineNameUse:<SubroutineNameUse> teos:T_EOS  :production1139
         */
        protected ASTCallStmtNode userAction(ASTLblDefNode v1, Token v2, ASTSubroutineNameUseNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production1139Production PRODUCTION1139 = Production1139Production.getInstance();

    public static class Production1140Production extends Production
    {
        private Production1140Production() {;} // Singleton
        private static Production1140Production singletonInstance = null;
        public static final Production1140Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1140Production(); return singletonInstance; }

        public String getDescription() { return "<CallStmt> ::= tcall:T_CALL SubroutineNameUse:<SubroutineNameUse> tlparen:T_LPAREN trparen:T_RPAREN teos:T_EOS  :production1140"; }

        /**
         * Reduce by <CallStmt> ::= tcall:T_CALL SubroutineNameUse:<SubroutineNameUse> tlparen:T_LPAREN trparen:T_RPAREN teos:T_EOS  :production1140
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CallStmt> ::= tcall:T_CALL SubroutineNameUse:<SubroutineNameUse> tlparen:T_LPAREN trparen:T_RPAREN teos:T_EOS  :production1140
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubroutineNameUseNode v2 = (ASTSubroutineNameUseNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCallStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.CallStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tcall"))
                return 0;
            else
                if (name.equals("SubroutineNameUse"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CallStmt> ::= tcall:T_CALL SubroutineNameUse:<SubroutineNameUse> tlparen:T_LPAREN trparen:T_RPAREN teos:T_EOS  :production1140
         */
        protected ASTCallStmtNode userAction(Token v1, ASTSubroutineNameUseNode v2, Token v3, Token v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production1140Production PRODUCTION1140 = Production1140Production.getInstance();

    public static class Production1141Production extends Production
    {
        private Production1141Production() {;} // Singleton
        private static Production1141Production singletonInstance = null;
        public static final Production1141Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1141Production(); return singletonInstance; }

        public String getDescription() { return "<CallStmt> ::= tcall:T_CALL SubroutineNameUse:<SubroutineNameUse> tlparen:T_LPAREN SubroutineArgList:<SubroutineArgList> trparen:T_RPAREN teos:T_EOS  :production1141"; }

        /**
         * Reduce by <CallStmt> ::= tcall:T_CALL SubroutineNameUse:<SubroutineNameUse> tlparen:T_LPAREN SubroutineArgList:<SubroutineArgList> trparen:T_RPAREN teos:T_EOS  :production1141
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CallStmt> ::= tcall:T_CALL SubroutineNameUse:<SubroutineNameUse> tlparen:T_LPAREN SubroutineArgList:<SubroutineArgList> trparen:T_RPAREN teos:T_EOS  :production1141
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubroutineArgListNode v4 = (ASTSubroutineArgListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubroutineNameUseNode v2 = (ASTSubroutineNameUseNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCallStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.CallStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tcall"))
                return 0;
            else
                if (name.equals("SubroutineNameUse"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("SubroutineArgList"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CallStmt> ::= tcall:T_CALL SubroutineNameUse:<SubroutineNameUse> tlparen:T_LPAREN SubroutineArgList:<SubroutineArgList> trparen:T_RPAREN teos:T_EOS  :production1141
         */
        protected ASTCallStmtNode userAction(Token v1, ASTSubroutineNameUseNode v2, Token v3, ASTSubroutineArgListNode v4, Token v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production1141Production PRODUCTION1141 = Production1141Production.getInstance();

    public static class Production1142Production extends Production
    {
        private Production1142Production() {;} // Singleton
        private static Production1142Production singletonInstance = null;
        public static final Production1142Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1142Production(); return singletonInstance; }

        public String getDescription() { return "<CallStmt> ::= LblDef:<LblDef> tcall:T_CALL SubroutineNameUse:<SubroutineNameUse> tlparen:T_LPAREN trparen:T_RPAREN teos:T_EOS  :production1142"; }

        /**
         * Reduce by <CallStmt> ::= LblDef:<LblDef> tcall:T_CALL SubroutineNameUse:<SubroutineNameUse> tlparen:T_LPAREN trparen:T_RPAREN teos:T_EOS  :production1142
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CallStmt> ::= LblDef:<LblDef> tcall:T_CALL SubroutineNameUse:<SubroutineNameUse> tlparen:T_LPAREN trparen:T_RPAREN teos:T_EOS  :production1142
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubroutineNameUseNode v3 = (ASTSubroutineNameUseNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCallStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.CallStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tcall"))
                    return 1;
                else
                    if (name.equals("SubroutineNameUse"))
                        return 2;
                    else
                        if (name.equals("tlparen"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CallStmt> ::= LblDef:<LblDef> tcall:T_CALL SubroutineNameUse:<SubroutineNameUse> tlparen:T_LPAREN trparen:T_RPAREN teos:T_EOS  :production1142
         */
        protected ASTCallStmtNode userAction(ASTLblDefNode v1, Token v2, ASTSubroutineNameUseNode v3, Token v4, Token v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production1142Production PRODUCTION1142 = Production1142Production.getInstance();

    public static class Production1143Production extends Production
    {
        private Production1143Production() {;} // Singleton
        private static Production1143Production singletonInstance = null;
        public static final Production1143Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1143Production(); return singletonInstance; }

        public String getDescription() { return "<CallStmt> ::= LblDef:<LblDef> tcall:T_CALL SubroutineNameUse:<SubroutineNameUse> tlparen:T_LPAREN SubroutineArgList:<SubroutineArgList> trparen:T_RPAREN teos:T_EOS  :production1143"; }

        /**
         * Reduce by <CallStmt> ::= LblDef:<LblDef> tcall:T_CALL SubroutineNameUse:<SubroutineNameUse> tlparen:T_LPAREN SubroutineArgList:<SubroutineArgList> trparen:T_RPAREN teos:T_EOS  :production1143
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CallStmt> ::= LblDef:<LblDef> tcall:T_CALL SubroutineNameUse:<SubroutineNameUse> tlparen:T_LPAREN SubroutineArgList:<SubroutineArgList> trparen:T_RPAREN teos:T_EOS  :production1143
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubroutineArgListNode v5 = (ASTSubroutineArgListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubroutineNameUseNode v3 = (ASTSubroutineNameUseNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCallStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7);

            // The production has 7 symbols on its RHS
            parser.reduce(Nonterminal.CallStmtNonterminal.getInstance(), 7, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tcall"))
                    return 1;
                else
                    if (name.equals("SubroutineNameUse"))
                        return 2;
                    else
                        if (name.equals("tlparen"))
                            return 3;
                        else
                            if (name.equals("SubroutineArgList"))
                                return 4;
                            else
                                if (name.equals("trparen"))
                                    return 5;
                                else
                                    if (name.equals("teos"))
                                        return 6;
                                    else
                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CallStmt> ::= LblDef:<LblDef> tcall:T_CALL SubroutineNameUse:<SubroutineNameUse> tlparen:T_LPAREN SubroutineArgList:<SubroutineArgList> trparen:T_RPAREN teos:T_EOS  :production1143
         */
        protected ASTCallStmtNode userAction(ASTLblDefNode v1, Token v2, ASTSubroutineNameUseNode v3, Token v4, ASTSubroutineArgListNode v5, Token v6, Token v7)
        {
            return null;
        }
    }
    public static final Productions.Production1143Production PRODUCTION1143 = Production1143Production.getInstance();

    public static class Production1144Production extends Production
    {
        private Production1144Production() {;} // Singleton
        private static Production1144Production singletonInstance = null;
        public static final Production1144Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1144Production(); return singletonInstance; }

        public String getDescription() { return "<SubroutineArgList> ::= SubroutineArg:<SubroutineArg>  :production1144"; }

        /**
         * Reduce by <SubroutineArgList> ::= SubroutineArg:<SubroutineArg>  :production1144
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SubroutineArgList> ::= SubroutineArg:<SubroutineArg>  :production1144
            ASTSubroutineArgNode v1 = (ASTSubroutineArgNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSubroutineArgListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SubroutineArgListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SubroutineArg"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SubroutineArgList> ::= SubroutineArg:<SubroutineArg>  :production1144
         */
        protected ASTSubroutineArgListNode userAction(ASTSubroutineArgNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production1144Production PRODUCTION1144 = Production1144Production.getInstance();

    public static class Production1145Production extends Production
    {
        private Production1145Production() {;} // Singleton
        private static Production1145Production singletonInstance = null;
        public static final Production1145Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1145Production(); return singletonInstance; }

        public String getDescription() { return "<SubroutineArgList> ::= tcomma:T_COMMA SubroutineArg:<SubroutineArg>  :production1145"; }

        /**
         * Reduce by <SubroutineArgList> ::= tcomma:T_COMMA SubroutineArg:<SubroutineArg>  :production1145
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SubroutineArgList> ::= tcomma:T_COMMA SubroutineArg:<SubroutineArg>  :production1145
            ASTSubroutineArgNode v2 = (ASTSubroutineArgNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSubroutineArgListNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.SubroutineArgListNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tcomma"))
                return 0;
            else
                if (name.equals("SubroutineArg"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SubroutineArgList> ::= tcomma:T_COMMA SubroutineArg:<SubroutineArg>  :production1145
         */
        protected ASTSubroutineArgListNode userAction(Token v1, ASTSubroutineArgNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production1145Production PRODUCTION1145 = Production1145Production.getInstance();

    public static class Production1146Production extends Production
    {
        private Production1146Production() {;} // Singleton
        private static Production1146Production singletonInstance = null;
        public static final Production1146Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1146Production(); return singletonInstance; }

        public String getDescription() { return "<SubroutineArgList> ::= @:<SubroutineArgList> tcomma:T_COMMA SubroutineArg:<SubroutineArg>  :production1146"; }

        /**
         * Reduce by <SubroutineArgList> ::= @:<SubroutineArgList> tcomma:T_COMMA SubroutineArg:<SubroutineArg>  :production1146
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SubroutineArgList> ::= @:<SubroutineArgList> tcomma:T_COMMA SubroutineArg:<SubroutineArg>  :production1146
            ASTSubroutineArgNode v3 = (ASTSubroutineArgNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubroutineArgListNode v1 = (ASTSubroutineArgListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSubroutineArgListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.SubroutineArgListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("SubroutineArg"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SubroutineArgList> ::= @:<SubroutineArgList> tcomma:T_COMMA SubroutineArg:<SubroutineArg>  :production1146
         */
        protected ASTSubroutineArgListNode userAction(ASTSubroutineArgListNode v1, Token v2, ASTSubroutineArgNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production1146Production PRODUCTION1146 = Production1146Production.getInstance();

    public static class Production1147Production extends Production
    {
        private Production1147Production() {;} // Singleton
        private static Production1147Production singletonInstance = null;
        public static final Production1147Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1147Production(); return singletonInstance; }

        public String getDescription() { return "<FunctionArgList> ::= FunctionArg:<FunctionArg>  :production1147"; }

        /**
         * Reduce by <FunctionArgList> ::= FunctionArg:<FunctionArg>  :production1147
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FunctionArgList> ::= FunctionArg:<FunctionArg>  :production1147
            ASTFunctionArgNode v1 = (ASTFunctionArgNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFunctionArgListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.FunctionArgListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("FunctionArg"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FunctionArgList> ::= FunctionArg:<FunctionArg>  :production1147
         */
        protected ASTFunctionArgListNode userAction(ASTFunctionArgNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production1147Production PRODUCTION1147 = Production1147Production.getInstance();

    public static class Production1148Production extends Production
    {
        private Production1148Production() {;} // Singleton
        private static Production1148Production singletonInstance = null;
        public static final Production1148Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1148Production(); return singletonInstance; }

        public String getDescription() { return "<FunctionArgList> ::= @:<FunctionArgList> tcomma:T_COMMA FunctionArg:<FunctionArg>  :production1148"; }

        /**
         * Reduce by <FunctionArgList> ::= @:<FunctionArgList> tcomma:T_COMMA FunctionArg:<FunctionArg>  :production1148
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FunctionArgList> ::= @:<FunctionArgList> tcomma:T_COMMA FunctionArg:<FunctionArg>  :production1148
            ASTFunctionArgNode v3 = (ASTFunctionArgNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFunctionArgListNode v1 = (ASTFunctionArgListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFunctionArgListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.FunctionArgListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("FunctionArg"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FunctionArgList> ::= @:<FunctionArgList> tcomma:T_COMMA FunctionArg:<FunctionArg>  :production1148
         */
        protected ASTFunctionArgListNode userAction(ASTFunctionArgListNode v1, Token v2, ASTFunctionArgNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production1148Production PRODUCTION1148 = Production1148Production.getInstance();

    public static class Production1149Production extends Production
    {
        private Production1149Production() {;} // Singleton
        private static Production1149Production singletonInstance = null;
        public static final Production1149Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1149Production(); return singletonInstance; }

        public String getDescription() { return "<FunctionArgList> ::= SectionSubscriptList:<SectionSubscriptList> tcomma:T_COMMA FunctionArg:<FunctionArg>  :production1149"; }

        /**
         * Reduce by <FunctionArgList> ::= SectionSubscriptList:<SectionSubscriptList> tcomma:T_COMMA FunctionArg:<FunctionArg>  :production1149
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FunctionArgList> ::= SectionSubscriptList:<SectionSubscriptList> tcomma:T_COMMA FunctionArg:<FunctionArg>  :production1149
            ASTFunctionArgNode v3 = (ASTFunctionArgNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v1 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFunctionArgListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.FunctionArgListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SectionSubscriptList"))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("FunctionArg"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FunctionArgList> ::= SectionSubscriptList:<SectionSubscriptList> tcomma:T_COMMA FunctionArg:<FunctionArg>  :production1149
         */
        protected ASTFunctionArgListNode userAction(ASTSectionSubscriptListNode v1, Token v2, ASTFunctionArgNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production1149Production PRODUCTION1149 = Production1149Production.getInstance();

    public static class Production1150Production extends Production
    {
        private Production1150Production() {;} // Singleton
        private static Production1150Production singletonInstance = null;
        public static final Production1150Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1150Production(); return singletonInstance; }

        public String getDescription() { return "<FunctionArg> ::= Name:<Name> tequals:T_EQUALS Expr:<Expr>  :production1150"; }

        /**
         * Reduce by <FunctionArg> ::= Name:<Name> tequals:T_EQUALS Expr:<Expr>  :production1150
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FunctionArg> ::= Name:<Name> tequals:T_EQUALS Expr:<Expr>  :production1150
            ASTExprNode v3 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFunctionArgNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.FunctionArgNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tequals"))
                    return 1;
                else
                    if (name.equals("Expr"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FunctionArg> ::= Name:<Name> tequals:T_EQUALS Expr:<Expr>  :production1150
         */
        protected ASTFunctionArgNode userAction(ASTNameNode v1, Token v2, ASTExprNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production1150Production PRODUCTION1150 = Production1150Production.getInstance();

    public static class Production1151Production extends Production
    {
        private Production1151Production() {;} // Singleton
        private static Production1151Production singletonInstance = null;
        public static final Production1151Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1151Production(); return singletonInstance; }

        public String getDescription() { return "<SubroutineArg> ::= Expr:<Expr>  :production1151"; }

        /**
         * Reduce by <SubroutineArg> ::= Expr:<Expr>  :production1151
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SubroutineArg> ::= Expr:<Expr>  :production1151
            ASTExprNode v1 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSubroutineArgNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SubroutineArgNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Expr"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SubroutineArg> ::= Expr:<Expr>  :production1151
         */
        protected ASTSubroutineArgNode userAction(ASTExprNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production1151Production PRODUCTION1151 = Production1151Production.getInstance();

    public static class Production1152Production extends Production
    {
        private Production1152Production() {;} // Singleton
        private static Production1152Production singletonInstance = null;
        public static final Production1152Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1152Production(); return singletonInstance; }

        public String getDescription() { return "<SubroutineArg> ::= tasterisk:T_ASTERISK LblRef:<LblRef>  :production1152"; }

        /**
         * Reduce by <SubroutineArg> ::= tasterisk:T_ASTERISK LblRef:<LblRef>  :production1152
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SubroutineArg> ::= tasterisk:T_ASTERISK LblRef:<LblRef>  :production1152
            ASTLblRefNode v2 = (ASTLblRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSubroutineArgNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.SubroutineArgNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tasterisk"))
                return 0;
            else
                if (name.equals("LblRef"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SubroutineArg> ::= tasterisk:T_ASTERISK LblRef:<LblRef>  :production1152
         */
        protected ASTSubroutineArgNode userAction(Token v1, ASTLblRefNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production1152Production PRODUCTION1152 = Production1152Production.getInstance();

    public static class Production1153Production extends Production
    {
        private Production1153Production() {;} // Singleton
        private static Production1153Production singletonInstance = null;
        public static final Production1153Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1153Production(); return singletonInstance; }

        public String getDescription() { return "<SubroutineArg> ::= Name:<Name> tequals:T_EQUALS Expr:<Expr>  :production1153"; }

        /**
         * Reduce by <SubroutineArg> ::= Name:<Name> tequals:T_EQUALS Expr:<Expr>  :production1153
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SubroutineArg> ::= Name:<Name> tequals:T_EQUALS Expr:<Expr>  :production1153
            ASTExprNode v3 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSubroutineArgNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.SubroutineArgNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tequals"))
                    return 1;
                else
                    if (name.equals("Expr"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SubroutineArg> ::= Name:<Name> tequals:T_EQUALS Expr:<Expr>  :production1153
         */
        protected ASTSubroutineArgNode userAction(ASTNameNode v1, Token v2, ASTExprNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production1153Production PRODUCTION1153 = Production1153Production.getInstance();

    public static class Production1154Production extends Production
    {
        private Production1154Production() {;} // Singleton
        private static Production1154Production singletonInstance = null;
        public static final Production1154Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1154Production(); return singletonInstance; }

        public String getDescription() { return "<SubroutineArg> ::= Name:<Name> tequals:T_EQUALS tasterisk:T_ASTERISK LblRef:<LblRef>  :production1154"; }

        /**
         * Reduce by <SubroutineArg> ::= Name:<Name> tequals:T_EQUALS tasterisk:T_ASTERISK LblRef:<LblRef>  :production1154
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SubroutineArg> ::= Name:<Name> tequals:T_EQUALS tasterisk:T_ASTERISK LblRef:<LblRef>  :production1154
            ASTLblRefNode v4 = (ASTLblRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSubroutineArgNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.SubroutineArgNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tequals"))
                    return 1;
                else
                    if (name.equals("tasterisk"))
                        return 2;
                    else
                        if (name.equals("LblRef"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SubroutineArg> ::= Name:<Name> tequals:T_EQUALS tasterisk:T_ASTERISK LblRef:<LblRef>  :production1154
         */
        protected ASTSubroutineArgNode userAction(ASTNameNode v1, Token v2, Token v3, ASTLblRefNode v4)
        {
            return null;
        }
    }
    public static final Productions.Production1154Production PRODUCTION1154 = Production1154Production.getInstance();

    public static class Production1155Production extends Production
    {
        private Production1155Production() {;} // Singleton
        private static Production1155Production singletonInstance = null;
        public static final Production1155Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1155Production(); return singletonInstance; }

        public String getDescription() { return "<SubroutineArg> ::= thcon:T_HCON  :production1155"; }

        /**
         * Reduce by <SubroutineArg> ::= thcon:T_HCON  :production1155
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SubroutineArg> ::= thcon:T_HCON  :production1155
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSubroutineArgNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SubroutineArgNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("thcon"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SubroutineArg> ::= thcon:T_HCON  :production1155
         */
        protected ASTSubroutineArgNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production1155Production PRODUCTION1155 = Production1155Production.getInstance();

    public static class Production1156Production extends Production
    {
        private Production1156Production() {;} // Singleton
        private static Production1156Production singletonInstance = null;
        public static final Production1156Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1156Production(); return singletonInstance; }

        public String getDescription() { return "<SubroutineArg> ::= Name:<Name> tequals:T_EQUALS thcon:T_HCON  :production1156"; }

        /**
         * Reduce by <SubroutineArg> ::= Name:<Name> tequals:T_EQUALS thcon:T_HCON  :production1156
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SubroutineArg> ::= Name:<Name> tequals:T_EQUALS thcon:T_HCON  :production1156
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSubroutineArgNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.SubroutineArgNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("tequals"))
                    return 1;
                else
                    if (name.equals("thcon"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SubroutineArg> ::= Name:<Name> tequals:T_EQUALS thcon:T_HCON  :production1156
         */
        protected ASTSubroutineArgNode userAction(ASTNameNode v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1156Production PRODUCTION1156 = Production1156Production.getInstance();

    public static class Production1157Production extends Production
    {
        private Production1157Production() {;} // Singleton
        private static Production1157Production singletonInstance = null;
        public static final Production1157Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1157Production(); return singletonInstance; }

        public String getDescription() { return "<FunctionStmt> ::= FunctionPrefix:<FunctionPrefix> FunctionName:<FunctionName> tlparen:T_LPAREN trparen:T_RPAREN teos:T_EOS  :production1157"; }

        /**
         * Reduce by <FunctionStmt> ::= FunctionPrefix:<FunctionPrefix> FunctionName:<FunctionName> tlparen:T_LPAREN trparen:T_RPAREN teos:T_EOS  :production1157
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FunctionStmt> ::= FunctionPrefix:<FunctionPrefix> FunctionName:<FunctionName> tlparen:T_LPAREN trparen:T_RPAREN teos:T_EOS  :production1157
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFunctionNameNode v2 = (ASTFunctionNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFunctionPrefixNode v1 = (ASTFunctionPrefixNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFunctionStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.FunctionStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("FunctionPrefix"))
                return 0;
            else
                if (name.equals("FunctionName"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FunctionStmt> ::= FunctionPrefix:<FunctionPrefix> FunctionName:<FunctionName> tlparen:T_LPAREN trparen:T_RPAREN teos:T_EOS  :production1157
         */
        protected ASTFunctionStmtNode userAction(ASTFunctionPrefixNode v1, ASTFunctionNameNode v2, Token v3, Token v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production1157Production PRODUCTION1157 = Production1157Production.getInstance();

    public static class Production1158Production extends Production
    {
        private Production1158Production() {;} // Singleton
        private static Production1158Production singletonInstance = null;
        public static final Production1158Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1158Production(); return singletonInstance; }

        public String getDescription() { return "<FunctionStmt> ::= FunctionPrefix:<FunctionPrefix> FunctionName:<FunctionName> tlparen:T_LPAREN trparen:T_RPAREN <FunctionStmt@79> teos:T_EOS  :production1158"; }

        /**
         * Reduce by <FunctionStmt> ::= FunctionPrefix:<FunctionPrefix> FunctionName:<FunctionName> tlparen:T_LPAREN trparen:T_RPAREN <FunctionStmt@79> teos:T_EOS  :production1158
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FunctionStmt> ::= FunctionPrefix:<FunctionPrefix> FunctionName:<FunctionName> tlparen:T_LPAREN trparen:T_RPAREN <FunctionStmt@79> teos:T_EOS  :production1158
            Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v7 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFunctionNameNode v2 = (ASTFunctionNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFunctionPrefixNode v1 = (ASTFunctionPrefixNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFunctionStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8, v9);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.FunctionStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("FunctionPrefix"))
                return 0;
            else
                if (name.equals("FunctionName"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("trparen"))
                            return 3;
                        else
                            if (name.equals("tresult"))
                                return 4;
                            else
                                if (name.equals("tlparen2"))
                                    return 5;
                                else
                                    if (name.equals("Name"))
                                        return 6;
                                    else
                                        if (name.equals("trparen2"))
                                            return 7;
                                        else
                                            if (name.equals("teos"))
                                                return 8;
                                            else
                                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FunctionStmt> ::= FunctionPrefix:<FunctionPrefix> FunctionName:<FunctionName> tlparen:T_LPAREN trparen:T_RPAREN <FunctionStmt@79> teos:T_EOS  :production1158
         */
        protected ASTFunctionStmtNode userAction(ASTFunctionPrefixNode v1, ASTFunctionNameNode v2, Token v3, Token v4, Token v5, Token v6, ASTNameNode v7, Token v8, Token v9)
        {
            return null;
        }
    }
    public static final Productions.Production1158Production PRODUCTION1158 = Production1158Production.getInstance();

    public static class Production1159Production extends Production
    {
        private Production1159Production() {;} // Singleton
        private static Production1159Production singletonInstance = null;
        public static final Production1159Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1159Production(); return singletonInstance; }

        public String getDescription() { return "<FunctionStmt> ::= FunctionPrefix:<FunctionPrefix> FunctionName:<FunctionName> tlparen:T_LPAREN FunctionPars:<FunctionPars> trparen:T_RPAREN teos:T_EOS  :production1159"; }

        /**
         * Reduce by <FunctionStmt> ::= FunctionPrefix:<FunctionPrefix> FunctionName:<FunctionName> tlparen:T_LPAREN FunctionPars:<FunctionPars> trparen:T_RPAREN teos:T_EOS  :production1159
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FunctionStmt> ::= FunctionPrefix:<FunctionPrefix> FunctionName:<FunctionName> tlparen:T_LPAREN FunctionPars:<FunctionPars> trparen:T_RPAREN teos:T_EOS  :production1159
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFunctionParsNode v4 = (ASTFunctionParsNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFunctionNameNode v2 = (ASTFunctionNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFunctionPrefixNode v1 = (ASTFunctionPrefixNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFunctionStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.FunctionStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("FunctionPrefix"))
                return 0;
            else
                if (name.equals("FunctionName"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("FunctionPars"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FunctionStmt> ::= FunctionPrefix:<FunctionPrefix> FunctionName:<FunctionName> tlparen:T_LPAREN FunctionPars:<FunctionPars> trparen:T_RPAREN teos:T_EOS  :production1159
         */
        protected ASTFunctionStmtNode userAction(ASTFunctionPrefixNode v1, ASTFunctionNameNode v2, Token v3, ASTFunctionParsNode v4, Token v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production1159Production PRODUCTION1159 = Production1159Production.getInstance();

    public static class Production1160Production extends Production
    {
        private Production1160Production() {;} // Singleton
        private static Production1160Production singletonInstance = null;
        public static final Production1160Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1160Production(); return singletonInstance; }

        public String getDescription() { return "<FunctionStmt> ::= FunctionPrefix:<FunctionPrefix> FunctionName:<FunctionName> tlparen:T_LPAREN FunctionPars:<FunctionPars> trparen:T_RPAREN <FunctionStmt@79> teos:T_EOS  :production1160"; }

        /**
         * Reduce by <FunctionStmt> ::= FunctionPrefix:<FunctionPrefix> FunctionName:<FunctionName> tlparen:T_LPAREN FunctionPars:<FunctionPars> trparen:T_RPAREN <FunctionStmt@79> teos:T_EOS  :production1160
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FunctionStmt> ::= FunctionPrefix:<FunctionPrefix> FunctionName:<FunctionName> tlparen:T_LPAREN FunctionPars:<FunctionPars> trparen:T_RPAREN <FunctionStmt@79> teos:T_EOS  :production1160
            Token v10 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v8 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFunctionParsNode v4 = (ASTFunctionParsNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFunctionNameNode v2 = (ASTFunctionNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFunctionPrefixNode v1 = (ASTFunctionPrefixNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFunctionStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);

            // The production has 7 symbols on its RHS
            parser.reduce(Nonterminal.FunctionStmtNonterminal.getInstance(), 7, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("FunctionPrefix"))
                return 0;
            else
                if (name.equals("FunctionName"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("FunctionPars"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("tresult"))
                                    return 5;
                                else
                                    if (name.equals("tlparen2"))
                                        return 6;
                                    else
                                        if (name.equals("Name"))
                                            return 7;
                                        else
                                            if (name.equals("trparen2"))
                                                return 8;
                                            else
                                                if (name.equals("teos"))
                                                    return 9;
                                                else
                                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FunctionStmt> ::= FunctionPrefix:<FunctionPrefix> FunctionName:<FunctionName> tlparen:T_LPAREN FunctionPars:<FunctionPars> trparen:T_RPAREN <FunctionStmt@79> teos:T_EOS  :production1160
         */
        protected ASTFunctionStmtNode userAction(ASTFunctionPrefixNode v1, ASTFunctionNameNode v2, Token v3, ASTFunctionParsNode v4, Token v5, Token v6, Token v7, ASTNameNode v8, Token v9, Token v10)
        {
            return null;
        }
    }
    public static final Productions.Production1160Production PRODUCTION1160 = Production1160Production.getInstance();

    public static class Production1161Production extends Production
    {
        private Production1161Production() {;} // Singleton
        private static Production1161Production singletonInstance = null;
        public static final Production1161Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1161Production(); return singletonInstance; }

        public String getDescription() { return "<FunctionStmt> ::= LblDef:<LblDef> FunctionPrefix:<FunctionPrefix> FunctionName:<FunctionName> tlparen:T_LPAREN trparen:T_RPAREN teos:T_EOS  :production1161"; }

        /**
         * Reduce by <FunctionStmt> ::= LblDef:<LblDef> FunctionPrefix:<FunctionPrefix> FunctionName:<FunctionName> tlparen:T_LPAREN trparen:T_RPAREN teos:T_EOS  :production1161
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FunctionStmt> ::= LblDef:<LblDef> FunctionPrefix:<FunctionPrefix> FunctionName:<FunctionName> tlparen:T_LPAREN trparen:T_RPAREN teos:T_EOS  :production1161
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFunctionNameNode v3 = (ASTFunctionNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFunctionPrefixNode v2 = (ASTFunctionPrefixNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFunctionStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.FunctionStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("FunctionPrefix"))
                    return 1;
                else
                    if (name.equals("FunctionName"))
                        return 2;
                    else
                        if (name.equals("tlparen"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FunctionStmt> ::= LblDef:<LblDef> FunctionPrefix:<FunctionPrefix> FunctionName:<FunctionName> tlparen:T_LPAREN trparen:T_RPAREN teos:T_EOS  :production1161
         */
        protected ASTFunctionStmtNode userAction(ASTLblDefNode v1, ASTFunctionPrefixNode v2, ASTFunctionNameNode v3, Token v4, Token v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production1161Production PRODUCTION1161 = Production1161Production.getInstance();

    public static class Production1162Production extends Production
    {
        private Production1162Production() {;} // Singleton
        private static Production1162Production singletonInstance = null;
        public static final Production1162Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1162Production(); return singletonInstance; }

        public String getDescription() { return "<FunctionStmt> ::= LblDef:<LblDef> FunctionPrefix:<FunctionPrefix> FunctionName:<FunctionName> tlparen:T_LPAREN trparen:T_RPAREN <FunctionStmt@79> teos:T_EOS  :production1162"; }

        /**
         * Reduce by <FunctionStmt> ::= LblDef:<LblDef> FunctionPrefix:<FunctionPrefix> FunctionName:<FunctionName> tlparen:T_LPAREN trparen:T_RPAREN <FunctionStmt@79> teos:T_EOS  :production1162
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FunctionStmt> ::= LblDef:<LblDef> FunctionPrefix:<FunctionPrefix> FunctionName:<FunctionName> tlparen:T_LPAREN trparen:T_RPAREN <FunctionStmt@79> teos:T_EOS  :production1162
            Token v10 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v8 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFunctionNameNode v3 = (ASTFunctionNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFunctionPrefixNode v2 = (ASTFunctionPrefixNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFunctionStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);

            // The production has 7 symbols on its RHS
            parser.reduce(Nonterminal.FunctionStmtNonterminal.getInstance(), 7, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("FunctionPrefix"))
                    return 1;
                else
                    if (name.equals("FunctionName"))
                        return 2;
                    else
                        if (name.equals("tlparen"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("tresult"))
                                    return 5;
                                else
                                    if (name.equals("tlparen2"))
                                        return 6;
                                    else
                                        if (name.equals("Name"))
                                            return 7;
                                        else
                                            if (name.equals("trparen2"))
                                                return 8;
                                            else
                                                if (name.equals("teos"))
                                                    return 9;
                                                else
                                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FunctionStmt> ::= LblDef:<LblDef> FunctionPrefix:<FunctionPrefix> FunctionName:<FunctionName> tlparen:T_LPAREN trparen:T_RPAREN <FunctionStmt@79> teos:T_EOS  :production1162
         */
        protected ASTFunctionStmtNode userAction(ASTLblDefNode v1, ASTFunctionPrefixNode v2, ASTFunctionNameNode v3, Token v4, Token v5, Token v6, Token v7, ASTNameNode v8, Token v9, Token v10)
        {
            return null;
        }
    }
    public static final Productions.Production1162Production PRODUCTION1162 = Production1162Production.getInstance();

    public static class Production1163Production extends Production
    {
        private Production1163Production() {;} // Singleton
        private static Production1163Production singletonInstance = null;
        public static final Production1163Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1163Production(); return singletonInstance; }

        public String getDescription() { return "<FunctionStmt> ::= LblDef:<LblDef> FunctionPrefix:<FunctionPrefix> FunctionName:<FunctionName> tlparen:T_LPAREN FunctionPars:<FunctionPars> trparen:T_RPAREN teos:T_EOS  :production1163"; }

        /**
         * Reduce by <FunctionStmt> ::= LblDef:<LblDef> FunctionPrefix:<FunctionPrefix> FunctionName:<FunctionName> tlparen:T_LPAREN FunctionPars:<FunctionPars> trparen:T_RPAREN teos:T_EOS  :production1163
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FunctionStmt> ::= LblDef:<LblDef> FunctionPrefix:<FunctionPrefix> FunctionName:<FunctionName> tlparen:T_LPAREN FunctionPars:<FunctionPars> trparen:T_RPAREN teos:T_EOS  :production1163
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFunctionParsNode v5 = (ASTFunctionParsNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFunctionNameNode v3 = (ASTFunctionNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFunctionPrefixNode v2 = (ASTFunctionPrefixNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFunctionStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7);

            // The production has 7 symbols on its RHS
            parser.reduce(Nonterminal.FunctionStmtNonterminal.getInstance(), 7, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("FunctionPrefix"))
                    return 1;
                else
                    if (name.equals("FunctionName"))
                        return 2;
                    else
                        if (name.equals("tlparen"))
                            return 3;
                        else
                            if (name.equals("FunctionPars"))
                                return 4;
                            else
                                if (name.equals("trparen"))
                                    return 5;
                                else
                                    if (name.equals("teos"))
                                        return 6;
                                    else
                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FunctionStmt> ::= LblDef:<LblDef> FunctionPrefix:<FunctionPrefix> FunctionName:<FunctionName> tlparen:T_LPAREN FunctionPars:<FunctionPars> trparen:T_RPAREN teos:T_EOS  :production1163
         */
        protected ASTFunctionStmtNode userAction(ASTLblDefNode v1, ASTFunctionPrefixNode v2, ASTFunctionNameNode v3, Token v4, ASTFunctionParsNode v5, Token v6, Token v7)
        {
            return null;
        }
    }
    public static final Productions.Production1163Production PRODUCTION1163 = Production1163Production.getInstance();

    public static class Production1164Production extends Production
    {
        private Production1164Production() {;} // Singleton
        private static Production1164Production singletonInstance = null;
        public static final Production1164Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1164Production(); return singletonInstance; }

        public String getDescription() { return "<FunctionStmt> ::= LblDef:<LblDef> FunctionPrefix:<FunctionPrefix> FunctionName:<FunctionName> tlparen:T_LPAREN FunctionPars:<FunctionPars> trparen:T_RPAREN <FunctionStmt@79> teos:T_EOS  :production1164"; }

        /**
         * Reduce by <FunctionStmt> ::= LblDef:<LblDef> FunctionPrefix:<FunctionPrefix> FunctionName:<FunctionName> tlparen:T_LPAREN FunctionPars:<FunctionPars> trparen:T_RPAREN <FunctionStmt@79> teos:T_EOS  :production1164
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FunctionStmt> ::= LblDef:<LblDef> FunctionPrefix:<FunctionPrefix> FunctionName:<FunctionName> tlparen:T_LPAREN FunctionPars:<FunctionPars> trparen:T_RPAREN <FunctionStmt@79> teos:T_EOS  :production1164
            Token v11 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v10 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v9 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFunctionParsNode v5 = (ASTFunctionParsNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFunctionNameNode v3 = (ASTFunctionNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFunctionPrefixNode v2 = (ASTFunctionPrefixNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFunctionStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);

            // The production has 8 symbols on its RHS
            parser.reduce(Nonterminal.FunctionStmtNonterminal.getInstance(), 8, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("FunctionPrefix"))
                    return 1;
                else
                    if (name.equals("FunctionName"))
                        return 2;
                    else
                        if (name.equals("tlparen"))
                            return 3;
                        else
                            if (name.equals("FunctionPars"))
                                return 4;
                            else
                                if (name.equals("trparen"))
                                    return 5;
                                else
                                    if (name.equals("tresult"))
                                        return 6;
                                    else
                                        if (name.equals("tlparen2"))
                                            return 7;
                                        else
                                            if (name.equals("Name"))
                                                return 8;
                                            else
                                                if (name.equals("trparen2"))
                                                    return 9;
                                                else
                                                    if (name.equals("teos"))
                                                        return 10;
                                                    else
                                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FunctionStmt> ::= LblDef:<LblDef> FunctionPrefix:<FunctionPrefix> FunctionName:<FunctionName> tlparen:T_LPAREN FunctionPars:<FunctionPars> trparen:T_RPAREN <FunctionStmt@79> teos:T_EOS  :production1164
         */
        protected ASTFunctionStmtNode userAction(ASTLblDefNode v1, ASTFunctionPrefixNode v2, ASTFunctionNameNode v3, Token v4, ASTFunctionParsNode v5, Token v6, Token v7, Token v8, ASTNameNode v9, Token v10, Token v11)
        {
            return null;
        }
    }
    public static final Productions.Production1164Production PRODUCTION1164 = Production1164Production.getInstance();

    public static class Production1165Production extends Production
    {
        private Production1165Production() {;} // Singleton
        private static Production1165Production singletonInstance = null;
        public static final Production1165Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1165Production(); return singletonInstance; }

        public String getDescription() { return "<FunctionStmt> ::= FunctionPrefix:<FunctionPrefix> FunctionName:<FunctionName> error:%error lookahead:T_EOS  :production1165"; }

        /**
         * Reduce by <FunctionStmt> ::= FunctionPrefix:<FunctionPrefix> FunctionName:<FunctionName> error:%error lookahead:T_EOS  :production1165
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FunctionStmt> ::= FunctionPrefix:<FunctionPrefix> FunctionName:<FunctionName> error:%error lookahead:T_EOS  :production1165
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            LinkedList v3 = (LinkedList)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFunctionNameNode v2 = (ASTFunctionNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFunctionPrefixNode v1 = (ASTFunctionPrefixNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFunctionStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.FunctionStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("FunctionPrefix"))
                return 0;
            else
                if (name.equals("FunctionName"))
                    return 1;
                else
                    if (name.equals("error"))
                        return 2;
                    else
                        if (name.equals("lookahead"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FunctionStmt> ::= FunctionPrefix:<FunctionPrefix> FunctionName:<FunctionName> error:%error lookahead:T_EOS  :production1165
         */
        protected ASTFunctionStmtNode userAction(ASTFunctionPrefixNode v1, ASTFunctionNameNode v2, LinkedList v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production1165Production PRODUCTION1165 = Production1165Production.getInstance();

    public static class Production1166Production extends Production
    {
        private Production1166Production() {;} // Singleton
        private static Production1166Production singletonInstance = null;
        public static final Production1166Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1166Production(); return singletonInstance; }

        public String getDescription() { return "<FunctionStmt> ::= LblDef:<LblDef> FunctionPrefix:<FunctionPrefix> FunctionName:<FunctionName> error:%error lookahead:T_EOS  :production1166"; }

        /**
         * Reduce by <FunctionStmt> ::= LblDef:<LblDef> FunctionPrefix:<FunctionPrefix> FunctionName:<FunctionName> error:%error lookahead:T_EOS  :production1166
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FunctionStmt> ::= LblDef:<LblDef> FunctionPrefix:<FunctionPrefix> FunctionName:<FunctionName> error:%error lookahead:T_EOS  :production1166
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            LinkedList v4 = (LinkedList)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFunctionNameNode v3 = (ASTFunctionNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFunctionPrefixNode v2 = (ASTFunctionPrefixNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFunctionStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.FunctionStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("FunctionPrefix"))
                    return 1;
                else
                    if (name.equals("FunctionName"))
                        return 2;
                    else
                        if (name.equals("error"))
                            return 3;
                        else
                            if (name.equals("lookahead"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FunctionStmt> ::= LblDef:<LblDef> FunctionPrefix:<FunctionPrefix> FunctionName:<FunctionName> error:%error lookahead:T_EOS  :production1166
         */
        protected ASTFunctionStmtNode userAction(ASTLblDefNode v1, ASTFunctionPrefixNode v2, ASTFunctionNameNode v3, LinkedList v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production1166Production PRODUCTION1166 = Production1166Production.getInstance();

    public static class Production1167Production extends Production
    {
        private Production1167Production() {;} // Singleton
        private static Production1167Production singletonInstance = null;
        public static final Production1167Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1167Production(); return singletonInstance; }

        public String getDescription() { return "<FunctionPars> ::= FunctionPar:<FunctionPar>  :production1167"; }

        /**
         * Reduce by <FunctionPars> ::= FunctionPar:<FunctionPar>  :production1167
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FunctionPars> ::= FunctionPar:<FunctionPar>  :production1167
            ASTFunctionParNode v1 = (ASTFunctionParNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFunctionParsNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.FunctionParsNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("FunctionPar"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FunctionPars> ::= FunctionPar:<FunctionPar>  :production1167
         */
        protected ASTFunctionParsNode userAction(ASTFunctionParNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production1167Production PRODUCTION1167 = Production1167Production.getInstance();

    public static class Production1168Production extends Production
    {
        private Production1168Production() {;} // Singleton
        private static Production1168Production singletonInstance = null;
        public static final Production1168Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1168Production(); return singletonInstance; }

        public String getDescription() { return "<FunctionPars> ::= tcomma:T_COMMA FunctionPar:<FunctionPar>  :production1168"; }

        /**
         * Reduce by <FunctionPars> ::= tcomma:T_COMMA FunctionPar:<FunctionPar>  :production1168
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FunctionPars> ::= tcomma:T_COMMA FunctionPar:<FunctionPar>  :production1168
            ASTFunctionParNode v2 = (ASTFunctionParNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFunctionParsNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.FunctionParsNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tcomma"))
                return 0;
            else
                if (name.equals("FunctionPar"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FunctionPars> ::= tcomma:T_COMMA FunctionPar:<FunctionPar>  :production1168
         */
        protected ASTFunctionParsNode userAction(Token v1, ASTFunctionParNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production1168Production PRODUCTION1168 = Production1168Production.getInstance();

    public static class Production1169Production extends Production
    {
        private Production1169Production() {;} // Singleton
        private static Production1169Production singletonInstance = null;
        public static final Production1169Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1169Production(); return singletonInstance; }

        public String getDescription() { return "<FunctionPars> ::= FunctionPars:<FunctionPars> tcomma:T_COMMA FunctionPar:<FunctionPar>  :production1169"; }

        /**
         * Reduce by <FunctionPars> ::= FunctionPars:<FunctionPars> tcomma:T_COMMA FunctionPar:<FunctionPar>  :production1169
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FunctionPars> ::= FunctionPars:<FunctionPars> tcomma:T_COMMA FunctionPar:<FunctionPar>  :production1169
            ASTFunctionParNode v3 = (ASTFunctionParNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTFunctionParsNode v1 = (ASTFunctionParsNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFunctionParsNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.FunctionParsNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("FunctionPars"))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("FunctionPar"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FunctionPars> ::= FunctionPars:<FunctionPars> tcomma:T_COMMA FunctionPar:<FunctionPar>  :production1169
         */
        protected ASTFunctionParsNode userAction(ASTFunctionParsNode v1, Token v2, ASTFunctionParNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production1169Production PRODUCTION1169 = Production1169Production.getInstance();

    public static class Production1170Production extends Production
    {
        private Production1170Production() {;} // Singleton
        private static Production1170Production singletonInstance = null;
        public static final Production1170Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1170Production(); return singletonInstance; }

        public String getDescription() { return "<FunctionPar> ::= DummyArgName:<DummyArgName>  :production1170"; }

        /**
         * Reduce by <FunctionPar> ::= DummyArgName:<DummyArgName>  :production1170
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FunctionPar> ::= DummyArgName:<DummyArgName>  :production1170
            ASTDummyArgNameNode v1 = (ASTDummyArgNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFunctionParNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.FunctionParNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("DummyArgName"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FunctionPar> ::= DummyArgName:<DummyArgName>  :production1170
         */
        protected ASTFunctionParNode userAction(ASTDummyArgNameNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production1170Production PRODUCTION1170 = Production1170Production.getInstance();

    public static class Production1171Production extends Production
    {
        private Production1171Production() {;} // Singleton
        private static Production1171Production singletonInstance = null;
        public static final Production1171Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1171Production(); return singletonInstance; }

        public String getDescription() { return "<FunctionPrefix> ::= tfunction:T_FUNCTION  :production1171"; }

        /**
         * Reduce by <FunctionPrefix> ::= tfunction:T_FUNCTION  :production1171
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FunctionPrefix> ::= tfunction:T_FUNCTION  :production1171
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFunctionPrefixNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.FunctionPrefixNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tfunction"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FunctionPrefix> ::= tfunction:T_FUNCTION  :production1171
         */
        protected ASTFunctionPrefixNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production1171Production PRODUCTION1171 = Production1171Production.getInstance();

    public static class Production1172Production extends Production
    {
        private Production1172Production() {;} // Singleton
        private static Production1172Production singletonInstance = null;
        public static final Production1172Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1172Production(); return singletonInstance; }

        public String getDescription() { return "<FunctionPrefix> ::= PrefixSpecList:<PrefixSpecList> tfunction:T_FUNCTION  :production1172"; }

        /**
         * Reduce by <FunctionPrefix> ::= PrefixSpecList:<PrefixSpecList> tfunction:T_FUNCTION  :production1172
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FunctionPrefix> ::= PrefixSpecList:<PrefixSpecList> tfunction:T_FUNCTION  :production1172
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTPrefixSpecListNode v1 = (ASTPrefixSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFunctionPrefixNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.FunctionPrefixNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("PrefixSpecList"))
                return 0;
            else
                if (name.equals("tfunction"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FunctionPrefix> ::= PrefixSpecList:<PrefixSpecList> tfunction:T_FUNCTION  :production1172
         */
        protected ASTFunctionPrefixNode userAction(ASTPrefixSpecListNode v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production1172Production PRODUCTION1172 = Production1172Production.getInstance();

    public static class Production1173Production extends Production
    {
        private Production1173Production() {;} // Singleton
        private static Production1173Production singletonInstance = null;
        public static final Production1173Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1173Production(); return singletonInstance; }

        public String getDescription() { return "<PrefixSpecList> ::= PrefixSpec:<PrefixSpec>  :production1173"; }

        /**
         * Reduce by <PrefixSpecList> ::= PrefixSpec:<PrefixSpec>  :production1173
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PrefixSpecList> ::= PrefixSpec:<PrefixSpec>  :production1173
            ASTPrefixSpecNode v1 = (ASTPrefixSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPrefixSpecListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.PrefixSpecListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("PrefixSpec"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PrefixSpecList> ::= PrefixSpec:<PrefixSpec>  :production1173
         */
        protected ASTPrefixSpecListNode userAction(ASTPrefixSpecNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production1173Production PRODUCTION1173 = Production1173Production.getInstance();

    public static class Production1174Production extends Production
    {
        private Production1174Production() {;} // Singleton
        private static Production1174Production singletonInstance = null;
        public static final Production1174Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1174Production(); return singletonInstance; }

        public String getDescription() { return "<PrefixSpecList> ::= @:<PrefixSpecList> PrefixSpec:<PrefixSpec>  :production1174"; }

        /**
         * Reduce by <PrefixSpecList> ::= @:<PrefixSpecList> PrefixSpec:<PrefixSpec>  :production1174
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PrefixSpecList> ::= @:<PrefixSpecList> PrefixSpec:<PrefixSpec>  :production1174
            ASTPrefixSpecNode v2 = (ASTPrefixSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTPrefixSpecListNode v1 = (ASTPrefixSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPrefixSpecListNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.PrefixSpecListNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("PrefixSpec"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PrefixSpecList> ::= @:<PrefixSpecList> PrefixSpec:<PrefixSpec>  :production1174
         */
        protected ASTPrefixSpecListNode userAction(ASTPrefixSpecListNode v1, ASTPrefixSpecNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production1174Production PRODUCTION1174 = Production1174Production.getInstance();

    public static class Production1175Production extends Production
    {
        private Production1175Production() {;} // Singleton
        private static Production1175Production singletonInstance = null;
        public static final Production1175Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1175Production(); return singletonInstance; }

        public String getDescription() { return "<PrefixSpec> ::= TypeSpec:<TypeSpec>  :production1175"; }

        /**
         * Reduce by <PrefixSpec> ::= TypeSpec:<TypeSpec>  :production1175
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PrefixSpec> ::= TypeSpec:<TypeSpec>  :production1175
            ASTTypeSpecNode v1 = (ASTTypeSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPrefixSpecNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.PrefixSpecNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("TypeSpec"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PrefixSpec> ::= TypeSpec:<TypeSpec>  :production1175
         */
        protected ASTPrefixSpecNode userAction(ASTTypeSpecNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production1175Production PRODUCTION1175 = Production1175Production.getInstance();

    public static class Production1176Production extends Production
    {
        private Production1176Production() {;} // Singleton
        private static Production1176Production singletonInstance = null;
        public static final Production1176Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1176Production(); return singletonInstance; }

        public String getDescription() { return "<PrefixSpec> ::= trecursive:T_RECURSIVE  :production1176"; }

        /**
         * Reduce by <PrefixSpec> ::= trecursive:T_RECURSIVE  :production1176
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PrefixSpec> ::= trecursive:T_RECURSIVE  :production1176
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPrefixSpecNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.PrefixSpecNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("trecursive"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PrefixSpec> ::= trecursive:T_RECURSIVE  :production1176
         */
        protected ASTPrefixSpecNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production1176Production PRODUCTION1176 = Production1176Production.getInstance();

    public static class Production1177Production extends Production
    {
        private Production1177Production() {;} // Singleton
        private static Production1177Production singletonInstance = null;
        public static final Production1177Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1177Production(); return singletonInstance; }

        public String getDescription() { return "<PrefixSpec> ::= tpure:T_PURE  :production1177"; }

        /**
         * Reduce by <PrefixSpec> ::= tpure:T_PURE  :production1177
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PrefixSpec> ::= tpure:T_PURE  :production1177
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPrefixSpecNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.PrefixSpecNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tpure"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PrefixSpec> ::= tpure:T_PURE  :production1177
         */
        protected ASTPrefixSpecNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production1177Production PRODUCTION1177 = Production1177Production.getInstance();

    public static class Production1178Production extends Production
    {
        private Production1178Production() {;} // Singleton
        private static Production1178Production singletonInstance = null;
        public static final Production1178Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1178Production(); return singletonInstance; }

        public String getDescription() { return "<PrefixSpec> ::= telemental:T_ELEMENTAL  :production1178"; }

        /**
         * Reduce by <PrefixSpec> ::= telemental:T_ELEMENTAL  :production1178
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PrefixSpec> ::= telemental:T_ELEMENTAL  :production1178
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPrefixSpecNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.PrefixSpecNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("telemental"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PrefixSpec> ::= telemental:T_ELEMENTAL  :production1178
         */
        protected ASTPrefixSpecNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production1178Production PRODUCTION1178 = Production1178Production.getInstance();

    public static class Production1179Production extends Production
    {
        private Production1179Production() {;} // Singleton
        private static Production1179Production singletonInstance = null;
        public static final Production1179Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1179Production(); return singletonInstance; }

        public String getDescription() { return "<EndFunctionStmt> ::= tend:T_END teos:T_EOS  :production1179"; }

        /**
         * Reduce by <EndFunctionStmt> ::= tend:T_END teos:T_EOS  :production1179
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndFunctionStmt> ::= tend:T_END teos:T_EOS  :production1179
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndFunctionStmtNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.EndFunctionStmtNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tend"))
                return 0;
            else
                if (name.equals("teos"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndFunctionStmt> ::= tend:T_END teos:T_EOS  :production1179
         */
        protected ASTEndFunctionStmtNode userAction(Token v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production1179Production PRODUCTION1179 = Production1179Production.getInstance();

    public static class Production1180Production extends Production
    {
        private Production1180Production() {;} // Singleton
        private static Production1180Production singletonInstance = null;
        public static final Production1180Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1180Production(); return singletonInstance; }

        public String getDescription() { return "<EndFunctionStmt> ::= LblDef:<LblDef> tend:T_END teos:T_EOS  :production1180"; }

        /**
         * Reduce by <EndFunctionStmt> ::= LblDef:<LblDef> tend:T_END teos:T_EOS  :production1180
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndFunctionStmt> ::= LblDef:<LblDef> tend:T_END teos:T_EOS  :production1180
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndFunctionStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EndFunctionStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tend"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndFunctionStmt> ::= LblDef:<LblDef> tend:T_END teos:T_EOS  :production1180
         */
        protected ASTEndFunctionStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1180Production PRODUCTION1180 = Production1180Production.getInstance();

    public static class Production1181Production extends Production
    {
        private Production1181Production() {;} // Singleton
        private static Production1181Production singletonInstance = null;
        public static final Production1181Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1181Production(); return singletonInstance; }

        public String getDescription() { return "<EndFunctionStmt> ::= tendfunction:T_ENDFUNCTION teos:T_EOS  :production1181"; }

        /**
         * Reduce by <EndFunctionStmt> ::= tendfunction:T_ENDFUNCTION teos:T_EOS  :production1181
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndFunctionStmt> ::= tendfunction:T_ENDFUNCTION teos:T_EOS  :production1181
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndFunctionStmtNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.EndFunctionStmtNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tendfunction"))
                return 0;
            else
                if (name.equals("teos"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndFunctionStmt> ::= tendfunction:T_ENDFUNCTION teos:T_EOS  :production1181
         */
        protected ASTEndFunctionStmtNode userAction(Token v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production1181Production PRODUCTION1181 = Production1181Production.getInstance();

    public static class Production1182Production extends Production
    {
        private Production1182Production() {;} // Singleton
        private static Production1182Production singletonInstance = null;
        public static final Production1182Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1182Production(); return singletonInstance; }

        public String getDescription() { return "<EndFunctionStmt> ::= tendfunction:T_ENDFUNCTION <EndFunctionStmt@80> teos:T_EOS  :production1182"; }

        /**
         * Reduce by <EndFunctionStmt> ::= tendfunction:T_ENDFUNCTION <EndFunctionStmt@80> teos:T_EOS  :production1182
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndFunctionStmt> ::= tendfunction:T_ENDFUNCTION <EndFunctionStmt@80> teos:T_EOS  :production1182
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v2 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndFunctionStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EndFunctionStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tendfunction"))
                return 0;
            else
                if (name.equals("EndName"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndFunctionStmt> ::= tendfunction:T_ENDFUNCTION <EndFunctionStmt@80> teos:T_EOS  :production1182
         */
        protected ASTEndFunctionStmtNode userAction(Token v1, ASTEndNameNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1182Production PRODUCTION1182 = Production1182Production.getInstance();

    public static class Production1183Production extends Production
    {
        private Production1183Production() {;} // Singleton
        private static Production1183Production singletonInstance = null;
        public static final Production1183Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1183Production(); return singletonInstance; }

        public String getDescription() { return "<EndFunctionStmt> ::= LblDef:<LblDef> tendfunction:T_ENDFUNCTION teos:T_EOS  :production1183"; }

        /**
         * Reduce by <EndFunctionStmt> ::= LblDef:<LblDef> tendfunction:T_ENDFUNCTION teos:T_EOS  :production1183
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndFunctionStmt> ::= LblDef:<LblDef> tendfunction:T_ENDFUNCTION teos:T_EOS  :production1183
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndFunctionStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EndFunctionStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tendfunction"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndFunctionStmt> ::= LblDef:<LblDef> tendfunction:T_ENDFUNCTION teos:T_EOS  :production1183
         */
        protected ASTEndFunctionStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1183Production PRODUCTION1183 = Production1183Production.getInstance();

    public static class Production1184Production extends Production
    {
        private Production1184Production() {;} // Singleton
        private static Production1184Production singletonInstance = null;
        public static final Production1184Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1184Production(); return singletonInstance; }

        public String getDescription() { return "<EndFunctionStmt> ::= LblDef:<LblDef> tendfunction:T_ENDFUNCTION <EndFunctionStmt@80> teos:T_EOS  :production1184"; }

        /**
         * Reduce by <EndFunctionStmt> ::= LblDef:<LblDef> tendfunction:T_ENDFUNCTION <EndFunctionStmt@80> teos:T_EOS  :production1184
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndFunctionStmt> ::= LblDef:<LblDef> tendfunction:T_ENDFUNCTION <EndFunctionStmt@80> teos:T_EOS  :production1184
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v3 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndFunctionStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EndFunctionStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tendfunction"))
                    return 1;
                else
                    if (name.equals("EndName"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndFunctionStmt> ::= LblDef:<LblDef> tendfunction:T_ENDFUNCTION <EndFunctionStmt@80> teos:T_EOS  :production1184
         */
        protected ASTEndFunctionStmtNode userAction(ASTLblDefNode v1, Token v2, ASTEndNameNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production1184Production PRODUCTION1184 = Production1184Production.getInstance();

    public static class Production1185Production extends Production
    {
        private Production1185Production() {;} // Singleton
        private static Production1185Production singletonInstance = null;
        public static final Production1185Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1185Production(); return singletonInstance; }

        public String getDescription() { return "<EndFunctionStmt> ::= tend:T_END tfunction:T_FUNCTION teos:T_EOS  :production1185"; }

        /**
         * Reduce by <EndFunctionStmt> ::= tend:T_END tfunction:T_FUNCTION teos:T_EOS  :production1185
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndFunctionStmt> ::= tend:T_END tfunction:T_FUNCTION teos:T_EOS  :production1185
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndFunctionStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EndFunctionStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tend"))
                return 0;
            else
                if (name.equals("tfunction"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndFunctionStmt> ::= tend:T_END tfunction:T_FUNCTION teos:T_EOS  :production1185
         */
        protected ASTEndFunctionStmtNode userAction(Token v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1185Production PRODUCTION1185 = Production1185Production.getInstance();

    public static class Production1186Production extends Production
    {
        private Production1186Production() {;} // Singleton
        private static Production1186Production singletonInstance = null;
        public static final Production1186Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1186Production(); return singletonInstance; }

        public String getDescription() { return "<EndFunctionStmt> ::= tend:T_END tfunction:T_FUNCTION <EndFunctionStmt@81> teos:T_EOS  :production1186"; }

        /**
         * Reduce by <EndFunctionStmt> ::= tend:T_END tfunction:T_FUNCTION <EndFunctionStmt@81> teos:T_EOS  :production1186
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndFunctionStmt> ::= tend:T_END tfunction:T_FUNCTION <EndFunctionStmt@81> teos:T_EOS  :production1186
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v3 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndFunctionStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EndFunctionStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tend"))
                return 0;
            else
                if (name.equals("tfunction"))
                    return 1;
                else
                    if (name.equals("EndName"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndFunctionStmt> ::= tend:T_END tfunction:T_FUNCTION <EndFunctionStmt@81> teos:T_EOS  :production1186
         */
        protected ASTEndFunctionStmtNode userAction(Token v1, Token v2, ASTEndNameNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production1186Production PRODUCTION1186 = Production1186Production.getInstance();

    public static class Production1187Production extends Production
    {
        private Production1187Production() {;} // Singleton
        private static Production1187Production singletonInstance = null;
        public static final Production1187Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1187Production(); return singletonInstance; }

        public String getDescription() { return "<EndFunctionStmt> ::= LblDef:<LblDef> tend:T_END tfunction:T_FUNCTION teos:T_EOS  :production1187"; }

        /**
         * Reduce by <EndFunctionStmt> ::= LblDef:<LblDef> tend:T_END tfunction:T_FUNCTION teos:T_EOS  :production1187
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndFunctionStmt> ::= LblDef:<LblDef> tend:T_END tfunction:T_FUNCTION teos:T_EOS  :production1187
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndFunctionStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EndFunctionStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tend"))
                    return 1;
                else
                    if (name.equals("tfunction"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndFunctionStmt> ::= LblDef:<LblDef> tend:T_END tfunction:T_FUNCTION teos:T_EOS  :production1187
         */
        protected ASTEndFunctionStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production1187Production PRODUCTION1187 = Production1187Production.getInstance();

    public static class Production1188Production extends Production
    {
        private Production1188Production() {;} // Singleton
        private static Production1188Production singletonInstance = null;
        public static final Production1188Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1188Production(); return singletonInstance; }

        public String getDescription() { return "<EndFunctionStmt> ::= LblDef:<LblDef> tend:T_END tfunction:T_FUNCTION <EndFunctionStmt@81> teos:T_EOS  :production1188"; }

        /**
         * Reduce by <EndFunctionStmt> ::= LblDef:<LblDef> tend:T_END tfunction:T_FUNCTION <EndFunctionStmt@81> teos:T_EOS  :production1188
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndFunctionStmt> ::= LblDef:<LblDef> tend:T_END tfunction:T_FUNCTION <EndFunctionStmt@81> teos:T_EOS  :production1188
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v4 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndFunctionStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.EndFunctionStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tend"))
                    return 1;
                else
                    if (name.equals("tfunction"))
                        return 2;
                    else
                        if (name.equals("EndName"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndFunctionStmt> ::= LblDef:<LblDef> tend:T_END tfunction:T_FUNCTION <EndFunctionStmt@81> teos:T_EOS  :production1188
         */
        protected ASTEndFunctionStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, ASTEndNameNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production1188Production PRODUCTION1188 = Production1188Production.getInstance();

    public static class Production1189Production extends Production
    {
        private Production1189Production() {;} // Singleton
        private static Production1189Production singletonInstance = null;
        public static final Production1189Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1189Production(); return singletonInstance; }

        public String getDescription() { return "<SubroutineStmt> ::= SubroutinePrefix:<SubroutinePrefix> SubroutineName:<SubroutineName> teos:T_EOS  :production1189"; }

        /**
         * Reduce by <SubroutineStmt> ::= SubroutinePrefix:<SubroutinePrefix> SubroutineName:<SubroutineName> teos:T_EOS  :production1189
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SubroutineStmt> ::= SubroutinePrefix:<SubroutinePrefix> SubroutineName:<SubroutineName> teos:T_EOS  :production1189
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubroutineNameNode v2 = (ASTSubroutineNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubroutinePrefixNode v1 = (ASTSubroutinePrefixNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSubroutineStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.SubroutineStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SubroutinePrefix"))
                return 0;
            else
                if (name.equals("SubroutineName"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SubroutineStmt> ::= SubroutinePrefix:<SubroutinePrefix> SubroutineName:<SubroutineName> teos:T_EOS  :production1189
         */
        protected ASTSubroutineStmtNode userAction(ASTSubroutinePrefixNode v1, ASTSubroutineNameNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1189Production PRODUCTION1189 = Production1189Production.getInstance();

    public static class Production1190Production extends Production
    {
        private Production1190Production() {;} // Singleton
        private static Production1190Production singletonInstance = null;
        public static final Production1190Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1190Production(); return singletonInstance; }

        public String getDescription() { return "<SubroutineStmt> ::= SubroutinePrefix:<SubroutinePrefix> SubroutineName:<SubroutineName> <SubroutineStmt@82> teos:T_EOS  :production1190"; }

        /**
         * Reduce by <SubroutineStmt> ::= SubroutinePrefix:<SubroutinePrefix> SubroutineName:<SubroutineName> <SubroutineStmt@82> teos:T_EOS  :production1190
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SubroutineStmt> ::= SubroutinePrefix:<SubroutinePrefix> SubroutineName:<SubroutineName> <SubroutineStmt@82> teos:T_EOS  :production1190
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubroutineParsNode v4 = (ASTSubroutineParsNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubroutineNameNode v2 = (ASTSubroutineNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubroutinePrefixNode v1 = (ASTSubroutinePrefixNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSubroutineStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.SubroutineStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SubroutinePrefix"))
                return 0;
            else
                if (name.equals("SubroutineName"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("SubroutinePars"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SubroutineStmt> ::= SubroutinePrefix:<SubroutinePrefix> SubroutineName:<SubroutineName> <SubroutineStmt@82> teos:T_EOS  :production1190
         */
        protected ASTSubroutineStmtNode userAction(ASTSubroutinePrefixNode v1, ASTSubroutineNameNode v2, Token v3, ASTSubroutineParsNode v4, Token v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production1190Production PRODUCTION1190 = Production1190Production.getInstance();

    public static class Production1191Production extends Production
    {
        private Production1191Production() {;} // Singleton
        private static Production1191Production singletonInstance = null;
        public static final Production1191Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1191Production(); return singletonInstance; }

        public String getDescription() { return "<SubroutineStmt> ::= LblDef:<LblDef> SubroutinePrefix:<SubroutinePrefix> SubroutineName:<SubroutineName> teos:T_EOS  :production1191"; }

        /**
         * Reduce by <SubroutineStmt> ::= LblDef:<LblDef> SubroutinePrefix:<SubroutinePrefix> SubroutineName:<SubroutineName> teos:T_EOS  :production1191
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SubroutineStmt> ::= LblDef:<LblDef> SubroutinePrefix:<SubroutinePrefix> SubroutineName:<SubroutineName> teos:T_EOS  :production1191
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubroutineNameNode v3 = (ASTSubroutineNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubroutinePrefixNode v2 = (ASTSubroutinePrefixNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSubroutineStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.SubroutineStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("SubroutinePrefix"))
                    return 1;
                else
                    if (name.equals("SubroutineName"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SubroutineStmt> ::= LblDef:<LblDef> SubroutinePrefix:<SubroutinePrefix> SubroutineName:<SubroutineName> teos:T_EOS  :production1191
         */
        protected ASTSubroutineStmtNode userAction(ASTLblDefNode v1, ASTSubroutinePrefixNode v2, ASTSubroutineNameNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production1191Production PRODUCTION1191 = Production1191Production.getInstance();

    public static class Production1192Production extends Production
    {
        private Production1192Production() {;} // Singleton
        private static Production1192Production singletonInstance = null;
        public static final Production1192Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1192Production(); return singletonInstance; }

        public String getDescription() { return "<SubroutineStmt> ::= LblDef:<LblDef> SubroutinePrefix:<SubroutinePrefix> SubroutineName:<SubroutineName> <SubroutineStmt@82> teos:T_EOS  :production1192"; }

        /**
         * Reduce by <SubroutineStmt> ::= LblDef:<LblDef> SubroutinePrefix:<SubroutinePrefix> SubroutineName:<SubroutineName> <SubroutineStmt@82> teos:T_EOS  :production1192
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SubroutineStmt> ::= LblDef:<LblDef> SubroutinePrefix:<SubroutinePrefix> SubroutineName:<SubroutineName> <SubroutineStmt@82> teos:T_EOS  :production1192
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubroutineParsNode v5 = (ASTSubroutineParsNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubroutineNameNode v3 = (ASTSubroutineNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubroutinePrefixNode v2 = (ASTSubroutinePrefixNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSubroutineStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.SubroutineStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("SubroutinePrefix"))
                    return 1;
                else
                    if (name.equals("SubroutineName"))
                        return 2;
                    else
                        if (name.equals("tlparen"))
                            return 3;
                        else
                            if (name.equals("SubroutinePars"))
                                return 4;
                            else
                                if (name.equals("trparen"))
                                    return 5;
                                else
                                    if (name.equals("teos"))
                                        return 6;
                                    else
                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SubroutineStmt> ::= LblDef:<LblDef> SubroutinePrefix:<SubroutinePrefix> SubroutineName:<SubroutineName> <SubroutineStmt@82> teos:T_EOS  :production1192
         */
        protected ASTSubroutineStmtNode userAction(ASTLblDefNode v1, ASTSubroutinePrefixNode v2, ASTSubroutineNameNode v3, Token v4, ASTSubroutineParsNode v5, Token v6, Token v7)
        {
            return null;
        }
    }
    public static final Productions.Production1192Production PRODUCTION1192 = Production1192Production.getInstance();

    public static class Production1193Production extends Production
    {
        private Production1193Production() {;} // Singleton
        private static Production1193Production singletonInstance = null;
        public static final Production1193Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1193Production(); return singletonInstance; }

        public String getDescription() { return "<SubroutineStmt> ::= SubroutinePrefix:<SubroutinePrefix> SubroutineName:<SubroutineName> error:%error lookahead:T_EOS  :production1193"; }

        /**
         * Reduce by <SubroutineStmt> ::= SubroutinePrefix:<SubroutinePrefix> SubroutineName:<SubroutineName> error:%error lookahead:T_EOS  :production1193
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SubroutineStmt> ::= SubroutinePrefix:<SubroutinePrefix> SubroutineName:<SubroutineName> error:%error lookahead:T_EOS  :production1193
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            LinkedList v3 = (LinkedList)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubroutineNameNode v2 = (ASTSubroutineNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubroutinePrefixNode v1 = (ASTSubroutinePrefixNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSubroutineStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.SubroutineStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SubroutinePrefix"))
                return 0;
            else
                if (name.equals("SubroutineName"))
                    return 1;
                else
                    if (name.equals("error"))
                        return 2;
                    else
                        if (name.equals("lookahead"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SubroutineStmt> ::= SubroutinePrefix:<SubroutinePrefix> SubroutineName:<SubroutineName> error:%error lookahead:T_EOS  :production1193
         */
        protected ASTSubroutineStmtNode userAction(ASTSubroutinePrefixNode v1, ASTSubroutineNameNode v2, LinkedList v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production1193Production PRODUCTION1193 = Production1193Production.getInstance();

    public static class Production1194Production extends Production
    {
        private Production1194Production() {;} // Singleton
        private static Production1194Production singletonInstance = null;
        public static final Production1194Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1194Production(); return singletonInstance; }

        public String getDescription() { return "<SubroutineStmt> ::= LblDef:<LblDef> SubroutinePrefix:<SubroutinePrefix> SubroutineName:<SubroutineName> error:%error lookahead:T_EOS  :production1194"; }

        /**
         * Reduce by <SubroutineStmt> ::= LblDef:<LblDef> SubroutinePrefix:<SubroutinePrefix> SubroutineName:<SubroutineName> error:%error lookahead:T_EOS  :production1194
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SubroutineStmt> ::= LblDef:<LblDef> SubroutinePrefix:<SubroutinePrefix> SubroutineName:<SubroutineName> error:%error lookahead:T_EOS  :production1194
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            LinkedList v4 = (LinkedList)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubroutineNameNode v3 = (ASTSubroutineNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubroutinePrefixNode v2 = (ASTSubroutinePrefixNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSubroutineStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.SubroutineStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("SubroutinePrefix"))
                    return 1;
                else
                    if (name.equals("SubroutineName"))
                        return 2;
                    else
                        if (name.equals("error"))
                            return 3;
                        else
                            if (name.equals("lookahead"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SubroutineStmt> ::= LblDef:<LblDef> SubroutinePrefix:<SubroutinePrefix> SubroutineName:<SubroutineName> error:%error lookahead:T_EOS  :production1194
         */
        protected ASTSubroutineStmtNode userAction(ASTLblDefNode v1, ASTSubroutinePrefixNode v2, ASTSubroutineNameNode v3, LinkedList v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production1194Production PRODUCTION1194 = Production1194Production.getInstance();

    public static class Production1195Production extends Production
    {
        private Production1195Production() {;} // Singleton
        private static Production1195Production singletonInstance = null;
        public static final Production1195Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1195Production(); return singletonInstance; }

        public String getDescription() { return "<SubroutinePrefix> ::= tsubroutine:T_SUBROUTINE  :production1195"; }

        /**
         * Reduce by <SubroutinePrefix> ::= tsubroutine:T_SUBROUTINE  :production1195
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SubroutinePrefix> ::= tsubroutine:T_SUBROUTINE  :production1195
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSubroutinePrefixNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SubroutinePrefixNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tsubroutine"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SubroutinePrefix> ::= tsubroutine:T_SUBROUTINE  :production1195
         */
        protected ASTSubroutinePrefixNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production1195Production PRODUCTION1195 = Production1195Production.getInstance();

    public static class Production1196Production extends Production
    {
        private Production1196Production() {;} // Singleton
        private static Production1196Production singletonInstance = null;
        public static final Production1196Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1196Production(); return singletonInstance; }

        public String getDescription() { return "<SubroutinePrefix> ::= PrefixSpecList:<PrefixSpecList> tsubroutine:T_SUBROUTINE  :production1196"; }

        /**
         * Reduce by <SubroutinePrefix> ::= PrefixSpecList:<PrefixSpecList> tsubroutine:T_SUBROUTINE  :production1196
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SubroutinePrefix> ::= PrefixSpecList:<PrefixSpecList> tsubroutine:T_SUBROUTINE  :production1196
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTPrefixSpecListNode v1 = (ASTPrefixSpecListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSubroutinePrefixNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.SubroutinePrefixNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("PrefixSpecList"))
                return 0;
            else
                if (name.equals("tsubroutine"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SubroutinePrefix> ::= PrefixSpecList:<PrefixSpecList> tsubroutine:T_SUBROUTINE  :production1196
         */
        protected ASTSubroutinePrefixNode userAction(ASTPrefixSpecListNode v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production1196Production PRODUCTION1196 = Production1196Production.getInstance();

    public static class Production1197Production extends Production
    {
        private Production1197Production() {;} // Singleton
        private static Production1197Production singletonInstance = null;
        public static final Production1197Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1197Production(); return singletonInstance; }

        public String getDescription() { return "<SubroutinePars> ::= SubroutinePar:<SubroutinePar>  :production1197"; }

        /**
         * Reduce by <SubroutinePars> ::= SubroutinePar:<SubroutinePar>  :production1197
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SubroutinePars> ::= SubroutinePar:<SubroutinePar>  :production1197
            ASTSubroutineParNode v1 = (ASTSubroutineParNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSubroutineParsNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SubroutineParsNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SubroutinePar"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SubroutinePars> ::= SubroutinePar:<SubroutinePar>  :production1197
         */
        protected ASTSubroutineParsNode userAction(ASTSubroutineParNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production1197Production PRODUCTION1197 = Production1197Production.getInstance();

    public static class Production1198Production extends Production
    {
        private Production1198Production() {;} // Singleton
        private static Production1198Production singletonInstance = null;
        public static final Production1198Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1198Production(); return singletonInstance; }

        public String getDescription() { return "<SubroutinePars> ::= tcomma:T_COMMA SubroutinePar:<SubroutinePar>  :production1198"; }

        /**
         * Reduce by <SubroutinePars> ::= tcomma:T_COMMA SubroutinePar:<SubroutinePar>  :production1198
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SubroutinePars> ::= tcomma:T_COMMA SubroutinePar:<SubroutinePar>  :production1198
            ASTSubroutineParNode v2 = (ASTSubroutineParNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSubroutineParsNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.SubroutineParsNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tcomma"))
                return 0;
            else
                if (name.equals("SubroutinePar"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SubroutinePars> ::= tcomma:T_COMMA SubroutinePar:<SubroutinePar>  :production1198
         */
        protected ASTSubroutineParsNode userAction(Token v1, ASTSubroutineParNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production1198Production PRODUCTION1198 = Production1198Production.getInstance();

    public static class Production1199Production extends Production
    {
        private Production1199Production() {;} // Singleton
        private static Production1199Production singletonInstance = null;
        public static final Production1199Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1199Production(); return singletonInstance; }

        public String getDescription() { return "<SubroutinePars> ::= SubroutinePars:<SubroutinePars> tcomma:T_COMMA SubroutinePar:<SubroutinePar>  :production1199"; }

        /**
         * Reduce by <SubroutinePars> ::= SubroutinePars:<SubroutinePars> tcomma:T_COMMA SubroutinePar:<SubroutinePar>  :production1199
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SubroutinePars> ::= SubroutinePars:<SubroutinePars> tcomma:T_COMMA SubroutinePar:<SubroutinePar>  :production1199
            ASTSubroutineParNode v3 = (ASTSubroutineParNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubroutineParsNode v1 = (ASTSubroutineParsNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSubroutineParsNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.SubroutineParsNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SubroutinePars"))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("SubroutinePar"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SubroutinePars> ::= SubroutinePars:<SubroutinePars> tcomma:T_COMMA SubroutinePar:<SubroutinePar>  :production1199
         */
        protected ASTSubroutineParsNode userAction(ASTSubroutineParsNode v1, Token v2, ASTSubroutineParNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production1199Production PRODUCTION1199 = Production1199Production.getInstance();

    public static class Production1200Production extends Production
    {
        private Production1200Production() {;} // Singleton
        private static Production1200Production singletonInstance = null;
        public static final Production1200Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1200Production(); return singletonInstance; }

        public String getDescription() { return "<SubroutinePar> ::= DummyArgName:<DummyArgName>  :production1200"; }

        /**
         * Reduce by <SubroutinePar> ::= DummyArgName:<DummyArgName>  :production1200
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SubroutinePar> ::= DummyArgName:<DummyArgName>  :production1200
            ASTDummyArgNameNode v1 = (ASTDummyArgNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSubroutineParNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SubroutineParNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("DummyArgName"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SubroutinePar> ::= DummyArgName:<DummyArgName>  :production1200
         */
        protected ASTSubroutineParNode userAction(ASTDummyArgNameNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production1200Production PRODUCTION1200 = Production1200Production.getInstance();

    public static class Production1201Production extends Production
    {
        private Production1201Production() {;} // Singleton
        private static Production1201Production singletonInstance = null;
        public static final Production1201Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1201Production(); return singletonInstance; }

        public String getDescription() { return "<SubroutinePar> ::= tasterisk:T_ASTERISK  :production1201"; }

        /**
         * Reduce by <SubroutinePar> ::= tasterisk:T_ASTERISK  :production1201
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SubroutinePar> ::= tasterisk:T_ASTERISK  :production1201
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSubroutineParNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SubroutineParNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tasterisk"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SubroutinePar> ::= tasterisk:T_ASTERISK  :production1201
         */
        protected ASTSubroutineParNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production1201Production PRODUCTION1201 = Production1201Production.getInstance();

    public static class Production1202Production extends Production
    {
        private Production1202Production() {;} // Singleton
        private static Production1202Production singletonInstance = null;
        public static final Production1202Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1202Production(); return singletonInstance; }

        public String getDescription() { return "<EndSubroutineStmt> ::= tend:T_END teos:T_EOS  :production1202"; }

        /**
         * Reduce by <EndSubroutineStmt> ::= tend:T_END teos:T_EOS  :production1202
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndSubroutineStmt> ::= tend:T_END teos:T_EOS  :production1202
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndSubroutineStmtNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.EndSubroutineStmtNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tend"))
                return 0;
            else
                if (name.equals("teos"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndSubroutineStmt> ::= tend:T_END teos:T_EOS  :production1202
         */
        protected ASTEndSubroutineStmtNode userAction(Token v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production1202Production PRODUCTION1202 = Production1202Production.getInstance();

    public static class Production1203Production extends Production
    {
        private Production1203Production() {;} // Singleton
        private static Production1203Production singletonInstance = null;
        public static final Production1203Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1203Production(); return singletonInstance; }

        public String getDescription() { return "<EndSubroutineStmt> ::= LblDef:<LblDef> tend:T_END teos:T_EOS  :production1203"; }

        /**
         * Reduce by <EndSubroutineStmt> ::= LblDef:<LblDef> tend:T_END teos:T_EOS  :production1203
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndSubroutineStmt> ::= LblDef:<LblDef> tend:T_END teos:T_EOS  :production1203
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndSubroutineStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EndSubroutineStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tend"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndSubroutineStmt> ::= LblDef:<LblDef> tend:T_END teos:T_EOS  :production1203
         */
        protected ASTEndSubroutineStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1203Production PRODUCTION1203 = Production1203Production.getInstance();

    public static class Production1204Production extends Production
    {
        private Production1204Production() {;} // Singleton
        private static Production1204Production singletonInstance = null;
        public static final Production1204Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1204Production(); return singletonInstance; }

        public String getDescription() { return "<EndSubroutineStmt> ::= tendsubroutine:T_ENDSUBROUTINE teos:T_EOS  :production1204"; }

        /**
         * Reduce by <EndSubroutineStmt> ::= tendsubroutine:T_ENDSUBROUTINE teos:T_EOS  :production1204
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndSubroutineStmt> ::= tendsubroutine:T_ENDSUBROUTINE teos:T_EOS  :production1204
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndSubroutineStmtNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.EndSubroutineStmtNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tendsubroutine"))
                return 0;
            else
                if (name.equals("teos"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndSubroutineStmt> ::= tendsubroutine:T_ENDSUBROUTINE teos:T_EOS  :production1204
         */
        protected ASTEndSubroutineStmtNode userAction(Token v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production1204Production PRODUCTION1204 = Production1204Production.getInstance();

    public static class Production1205Production extends Production
    {
        private Production1205Production() {;} // Singleton
        private static Production1205Production singletonInstance = null;
        public static final Production1205Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1205Production(); return singletonInstance; }

        public String getDescription() { return "<EndSubroutineStmt> ::= tendsubroutine:T_ENDSUBROUTINE <EndSubroutineStmt@83> teos:T_EOS  :production1205"; }

        /**
         * Reduce by <EndSubroutineStmt> ::= tendsubroutine:T_ENDSUBROUTINE <EndSubroutineStmt@83> teos:T_EOS  :production1205
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndSubroutineStmt> ::= tendsubroutine:T_ENDSUBROUTINE <EndSubroutineStmt@83> teos:T_EOS  :production1205
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v2 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndSubroutineStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EndSubroutineStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tendsubroutine"))
                return 0;
            else
                if (name.equals("EndName"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndSubroutineStmt> ::= tendsubroutine:T_ENDSUBROUTINE <EndSubroutineStmt@83> teos:T_EOS  :production1205
         */
        protected ASTEndSubroutineStmtNode userAction(Token v1, ASTEndNameNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1205Production PRODUCTION1205 = Production1205Production.getInstance();

    public static class Production1206Production extends Production
    {
        private Production1206Production() {;} // Singleton
        private static Production1206Production singletonInstance = null;
        public static final Production1206Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1206Production(); return singletonInstance; }

        public String getDescription() { return "<EndSubroutineStmt> ::= LblDef:<LblDef> tendsubroutine:T_ENDSUBROUTINE teos:T_EOS  :production1206"; }

        /**
         * Reduce by <EndSubroutineStmt> ::= LblDef:<LblDef> tendsubroutine:T_ENDSUBROUTINE teos:T_EOS  :production1206
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndSubroutineStmt> ::= LblDef:<LblDef> tendsubroutine:T_ENDSUBROUTINE teos:T_EOS  :production1206
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndSubroutineStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EndSubroutineStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tendsubroutine"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndSubroutineStmt> ::= LblDef:<LblDef> tendsubroutine:T_ENDSUBROUTINE teos:T_EOS  :production1206
         */
        protected ASTEndSubroutineStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1206Production PRODUCTION1206 = Production1206Production.getInstance();

    public static class Production1207Production extends Production
    {
        private Production1207Production() {;} // Singleton
        private static Production1207Production singletonInstance = null;
        public static final Production1207Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1207Production(); return singletonInstance; }

        public String getDescription() { return "<EndSubroutineStmt> ::= LblDef:<LblDef> tendsubroutine:T_ENDSUBROUTINE <EndSubroutineStmt@83> teos:T_EOS  :production1207"; }

        /**
         * Reduce by <EndSubroutineStmt> ::= LblDef:<LblDef> tendsubroutine:T_ENDSUBROUTINE <EndSubroutineStmt@83> teos:T_EOS  :production1207
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndSubroutineStmt> ::= LblDef:<LblDef> tendsubroutine:T_ENDSUBROUTINE <EndSubroutineStmt@83> teos:T_EOS  :production1207
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v3 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndSubroutineStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EndSubroutineStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tendsubroutine"))
                    return 1;
                else
                    if (name.equals("EndName"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndSubroutineStmt> ::= LblDef:<LblDef> tendsubroutine:T_ENDSUBROUTINE <EndSubroutineStmt@83> teos:T_EOS  :production1207
         */
        protected ASTEndSubroutineStmtNode userAction(ASTLblDefNode v1, Token v2, ASTEndNameNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production1207Production PRODUCTION1207 = Production1207Production.getInstance();

    public static class Production1208Production extends Production
    {
        private Production1208Production() {;} // Singleton
        private static Production1208Production singletonInstance = null;
        public static final Production1208Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1208Production(); return singletonInstance; }

        public String getDescription() { return "<EndSubroutineStmt> ::= tend:T_END tsubroutine:T_SUBROUTINE teos:T_EOS  :production1208"; }

        /**
         * Reduce by <EndSubroutineStmt> ::= tend:T_END tsubroutine:T_SUBROUTINE teos:T_EOS  :production1208
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndSubroutineStmt> ::= tend:T_END tsubroutine:T_SUBROUTINE teos:T_EOS  :production1208
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndSubroutineStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EndSubroutineStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tend"))
                return 0;
            else
                if (name.equals("tsubroutine"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndSubroutineStmt> ::= tend:T_END tsubroutine:T_SUBROUTINE teos:T_EOS  :production1208
         */
        protected ASTEndSubroutineStmtNode userAction(Token v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1208Production PRODUCTION1208 = Production1208Production.getInstance();

    public static class Production1209Production extends Production
    {
        private Production1209Production() {;} // Singleton
        private static Production1209Production singletonInstance = null;
        public static final Production1209Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1209Production(); return singletonInstance; }

        public String getDescription() { return "<EndSubroutineStmt> ::= tend:T_END tsubroutine:T_SUBROUTINE <EndSubroutineStmt@84> teos:T_EOS  :production1209"; }

        /**
         * Reduce by <EndSubroutineStmt> ::= tend:T_END tsubroutine:T_SUBROUTINE <EndSubroutineStmt@84> teos:T_EOS  :production1209
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndSubroutineStmt> ::= tend:T_END tsubroutine:T_SUBROUTINE <EndSubroutineStmt@84> teos:T_EOS  :production1209
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v3 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndSubroutineStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EndSubroutineStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tend"))
                return 0;
            else
                if (name.equals("tsubroutine"))
                    return 1;
                else
                    if (name.equals("EndName"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndSubroutineStmt> ::= tend:T_END tsubroutine:T_SUBROUTINE <EndSubroutineStmt@84> teos:T_EOS  :production1209
         */
        protected ASTEndSubroutineStmtNode userAction(Token v1, Token v2, ASTEndNameNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production1209Production PRODUCTION1209 = Production1209Production.getInstance();

    public static class Production1210Production extends Production
    {
        private Production1210Production() {;} // Singleton
        private static Production1210Production singletonInstance = null;
        public static final Production1210Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1210Production(); return singletonInstance; }

        public String getDescription() { return "<EndSubroutineStmt> ::= LblDef:<LblDef> tend:T_END tsubroutine:T_SUBROUTINE teos:T_EOS  :production1210"; }

        /**
         * Reduce by <EndSubroutineStmt> ::= LblDef:<LblDef> tend:T_END tsubroutine:T_SUBROUTINE teos:T_EOS  :production1210
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndSubroutineStmt> ::= LblDef:<LblDef> tend:T_END tsubroutine:T_SUBROUTINE teos:T_EOS  :production1210
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndSubroutineStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EndSubroutineStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tend"))
                    return 1;
                else
                    if (name.equals("tsubroutine"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndSubroutineStmt> ::= LblDef:<LblDef> tend:T_END tsubroutine:T_SUBROUTINE teos:T_EOS  :production1210
         */
        protected ASTEndSubroutineStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production1210Production PRODUCTION1210 = Production1210Production.getInstance();

    public static class Production1211Production extends Production
    {
        private Production1211Production() {;} // Singleton
        private static Production1211Production singletonInstance = null;
        public static final Production1211Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1211Production(); return singletonInstance; }

        public String getDescription() { return "<EndSubroutineStmt> ::= LblDef:<LblDef> tend:T_END tsubroutine:T_SUBROUTINE <EndSubroutineStmt@84> teos:T_EOS  :production1211"; }

        /**
         * Reduce by <EndSubroutineStmt> ::= LblDef:<LblDef> tend:T_END tsubroutine:T_SUBROUTINE <EndSubroutineStmt@84> teos:T_EOS  :production1211
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndSubroutineStmt> ::= LblDef:<LblDef> tend:T_END tsubroutine:T_SUBROUTINE <EndSubroutineStmt@84> teos:T_EOS  :production1211
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEndNameNode v4 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndSubroutineStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.EndSubroutineStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tend"))
                    return 1;
                else
                    if (name.equals("tsubroutine"))
                        return 2;
                    else
                        if (name.equals("EndName"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndSubroutineStmt> ::= LblDef:<LblDef> tend:T_END tsubroutine:T_SUBROUTINE <EndSubroutineStmt@84> teos:T_EOS  :production1211
         */
        protected ASTEndSubroutineStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, ASTEndNameNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production1211Production PRODUCTION1211 = Production1211Production.getInstance();

    public static class Production1212Production extends Production
    {
        private Production1212Production() {;} // Singleton
        private static Production1212Production singletonInstance = null;
        public static final Production1212Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1212Production(); return singletonInstance; }

        public String getDescription() { return "<EntryStmt> ::= tentry:T_ENTRY EntryName:<EntryName> teos:T_EOS  :production1212"; }

        /**
         * Reduce by <EntryStmt> ::= tentry:T_ENTRY EntryName:<EntryName> teos:T_EOS  :production1212
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EntryStmt> ::= tentry:T_ENTRY EntryName:<EntryName> teos:T_EOS  :production1212
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEntryNameNode v2 = (ASTEntryNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEntryStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EntryStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tentry"))
                return 0;
            else
                if (name.equals("EntryName"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EntryStmt> ::= tentry:T_ENTRY EntryName:<EntryName> teos:T_EOS  :production1212
         */
        protected ASTEntryStmtNode userAction(Token v1, ASTEntryNameNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1212Production PRODUCTION1212 = Production1212Production.getInstance();

    public static class Production1213Production extends Production
    {
        private Production1213Production() {;} // Singleton
        private static Production1213Production singletonInstance = null;
        public static final Production1213Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1213Production(); return singletonInstance; }

        public String getDescription() { return "<EntryStmt> ::= tentry:T_ENTRY EntryName:<EntryName> <EntryStmt@85> teos:T_EOS  :production1213"; }

        /**
         * Reduce by <EntryStmt> ::= tentry:T_ENTRY EntryName:<EntryName> <EntryStmt@85> teos:T_EOS  :production1213
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EntryStmt> ::= tentry:T_ENTRY EntryName:<EntryName> <EntryStmt@85> teos:T_EOS  :production1213
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubroutineParsNode v4 = (ASTSubroutineParsNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEntryNameNode v2 = (ASTEntryNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEntryStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EntryStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tentry"))
                return 0;
            else
                if (name.equals("EntryName"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("SubroutinePars"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EntryStmt> ::= tentry:T_ENTRY EntryName:<EntryName> <EntryStmt@85> teos:T_EOS  :production1213
         */
        protected ASTEntryStmtNode userAction(Token v1, ASTEntryNameNode v2, Token v3, ASTSubroutineParsNode v4, Token v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production1213Production PRODUCTION1213 = Production1213Production.getInstance();

    public static class Production1214Production extends Production
    {
        private Production1214Production() {;} // Singleton
        private static Production1214Production singletonInstance = null;
        public static final Production1214Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1214Production(); return singletonInstance; }

        public String getDescription() { return "<EntryStmt> ::= LblDef:<LblDef> tentry:T_ENTRY EntryName:<EntryName> teos:T_EOS  :production1214"; }

        /**
         * Reduce by <EntryStmt> ::= LblDef:<LblDef> tentry:T_ENTRY EntryName:<EntryName> teos:T_EOS  :production1214
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EntryStmt> ::= LblDef:<LblDef> tentry:T_ENTRY EntryName:<EntryName> teos:T_EOS  :production1214
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEntryNameNode v3 = (ASTEntryNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEntryStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.EntryStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tentry"))
                    return 1;
                else
                    if (name.equals("EntryName"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EntryStmt> ::= LblDef:<LblDef> tentry:T_ENTRY EntryName:<EntryName> teos:T_EOS  :production1214
         */
        protected ASTEntryStmtNode userAction(ASTLblDefNode v1, Token v2, ASTEntryNameNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production1214Production PRODUCTION1214 = Production1214Production.getInstance();

    public static class Production1215Production extends Production
    {
        private Production1215Production() {;} // Singleton
        private static Production1215Production singletonInstance = null;
        public static final Production1215Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1215Production(); return singletonInstance; }

        public String getDescription() { return "<EntryStmt> ::= LblDef:<LblDef> tentry:T_ENTRY EntryName:<EntryName> <EntryStmt@85> teos:T_EOS  :production1215"; }

        /**
         * Reduce by <EntryStmt> ::= LblDef:<LblDef> tentry:T_ENTRY EntryName:<EntryName> <EntryStmt@85> teos:T_EOS  :production1215
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EntryStmt> ::= LblDef:<LblDef> tentry:T_ENTRY EntryName:<EntryName> <EntryStmt@85> teos:T_EOS  :production1215
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubroutineParsNode v5 = (ASTSubroutineParsNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEntryNameNode v3 = (ASTEntryNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEntryStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.EntryStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tentry"))
                    return 1;
                else
                    if (name.equals("EntryName"))
                        return 2;
                    else
                        if (name.equals("tlparen"))
                            return 3;
                        else
                            if (name.equals("SubroutinePars"))
                                return 4;
                            else
                                if (name.equals("trparen"))
                                    return 5;
                                else
                                    if (name.equals("teos"))
                                        return 6;
                                    else
                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EntryStmt> ::= LblDef:<LblDef> tentry:T_ENTRY EntryName:<EntryName> <EntryStmt@85> teos:T_EOS  :production1215
         */
        protected ASTEntryStmtNode userAction(ASTLblDefNode v1, Token v2, ASTEntryNameNode v3, Token v4, ASTSubroutineParsNode v5, Token v6, Token v7)
        {
            return null;
        }
    }
    public static final Productions.Production1215Production PRODUCTION1215 = Production1215Production.getInstance();

    public static class Production1216Production extends Production
    {
        private Production1216Production() {;} // Singleton
        private static Production1216Production singletonInstance = null;
        public static final Production1216Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1216Production(); return singletonInstance; }

        public String getDescription() { return "<ReturnStmt> ::= treturn:T_RETURN teos:T_EOS  :production1216"; }

        /**
         * Reduce by <ReturnStmt> ::= treturn:T_RETURN teos:T_EOS  :production1216
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ReturnStmt> ::= treturn:T_RETURN teos:T_EOS  :production1216
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTReturnStmtNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.ReturnStmtNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("treturn"))
                return 0;
            else
                if (name.equals("teos"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ReturnStmt> ::= treturn:T_RETURN teos:T_EOS  :production1216
         */
        protected ASTReturnStmtNode userAction(Token v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production1216Production PRODUCTION1216 = Production1216Production.getInstance();

    public static class Production1217Production extends Production
    {
        private Production1217Production() {;} // Singleton
        private static Production1217Production singletonInstance = null;
        public static final Production1217Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1217Production(); return singletonInstance; }

        public String getDescription() { return "<ReturnStmt> ::= LblDef:<LblDef> treturn:T_RETURN teos:T_EOS  :production1217"; }

        /**
         * Reduce by <ReturnStmt> ::= LblDef:<LblDef> treturn:T_RETURN teos:T_EOS  :production1217
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ReturnStmt> ::= LblDef:<LblDef> treturn:T_RETURN teos:T_EOS  :production1217
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTReturnStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.ReturnStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("treturn"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ReturnStmt> ::= LblDef:<LblDef> treturn:T_RETURN teos:T_EOS  :production1217
         */
        protected ASTReturnStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1217Production PRODUCTION1217 = Production1217Production.getInstance();

    public static class Production1218Production extends Production
    {
        private Production1218Production() {;} // Singleton
        private static Production1218Production singletonInstance = null;
        public static final Production1218Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1218Production(); return singletonInstance; }

        public String getDescription() { return "<ReturnStmt> ::= treturn:T_RETURN Expr:<Expr> teos:T_EOS  :production1218"; }

        /**
         * Reduce by <ReturnStmt> ::= treturn:T_RETURN Expr:<Expr> teos:T_EOS  :production1218
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ReturnStmt> ::= treturn:T_RETURN Expr:<Expr> teos:T_EOS  :production1218
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v2 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTReturnStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.ReturnStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("treturn"))
                return 0;
            else
                if (name.equals("Expr"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ReturnStmt> ::= treturn:T_RETURN Expr:<Expr> teos:T_EOS  :production1218
         */
        protected ASTReturnStmtNode userAction(Token v1, ASTExprNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1218Production PRODUCTION1218 = Production1218Production.getInstance();

    public static class Production1219Production extends Production
    {
        private Production1219Production() {;} // Singleton
        private static Production1219Production singletonInstance = null;
        public static final Production1219Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1219Production(); return singletonInstance; }

        public String getDescription() { return "<ReturnStmt> ::= LblDef:<LblDef> treturn:T_RETURN Expr:<Expr> teos:T_EOS  :production1219"; }

        /**
         * Reduce by <ReturnStmt> ::= LblDef:<LblDef> treturn:T_RETURN Expr:<Expr> teos:T_EOS  :production1219
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ReturnStmt> ::= LblDef:<LblDef> treturn:T_RETURN Expr:<Expr> teos:T_EOS  :production1219
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v3 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTReturnStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.ReturnStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("treturn"))
                    return 1;
                else
                    if (name.equals("Expr"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ReturnStmt> ::= LblDef:<LblDef> treturn:T_RETURN Expr:<Expr> teos:T_EOS  :production1219
         */
        protected ASTReturnStmtNode userAction(ASTLblDefNode v1, Token v2, ASTExprNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production1219Production PRODUCTION1219 = Production1219Production.getInstance();

    public static class Production1220Production extends Production
    {
        private Production1220Production() {;} // Singleton
        private static Production1220Production singletonInstance = null;
        public static final Production1220Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1220Production(); return singletonInstance; }

        public String getDescription() { return "<ContainsStmt> ::= tcontains:T_CONTAINS teos:T_EOS  :production1220"; }

        /**
         * Reduce by <ContainsStmt> ::= tcontains:T_CONTAINS teos:T_EOS  :production1220
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ContainsStmt> ::= tcontains:T_CONTAINS teos:T_EOS  :production1220
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTContainsStmtNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.ContainsStmtNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tcontains"))
                return 0;
            else
                if (name.equals("teos"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ContainsStmt> ::= tcontains:T_CONTAINS teos:T_EOS  :production1220
         */
        protected ASTContainsStmtNode userAction(Token v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production1220Production PRODUCTION1220 = Production1220Production.getInstance();

    public static class Production1221Production extends Production
    {
        private Production1221Production() {;} // Singleton
        private static Production1221Production singletonInstance = null;
        public static final Production1221Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1221Production(); return singletonInstance; }

        public String getDescription() { return "<ContainsStmt> ::= LblDef:<LblDef> tcontains:T_CONTAINS teos:T_EOS  :production1221"; }

        /**
         * Reduce by <ContainsStmt> ::= LblDef:<LblDef> tcontains:T_CONTAINS teos:T_EOS  :production1221
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ContainsStmt> ::= LblDef:<LblDef> tcontains:T_CONTAINS teos:T_EOS  :production1221
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTContainsStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.ContainsStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tcontains"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ContainsStmt> ::= LblDef:<LblDef> tcontains:T_CONTAINS teos:T_EOS  :production1221
         */
        protected ASTContainsStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1221Production PRODUCTION1221 = Production1221Production.getInstance();

    public static class Production1222Production extends Production
    {
        private Production1222Production() {;} // Singleton
        private static Production1222Production singletonInstance = null;
        public static final Production1222Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1222Production(); return singletonInstance; }

        public String getDescription() { return "<StmtFunctionStmt> ::= Name:<Name> StmtFunctionRange:<StmtFunctionRange>  :production1222"; }

        /**
         * Reduce by <StmtFunctionStmt> ::= Name:<Name> StmtFunctionRange:<StmtFunctionRange>  :production1222
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <StmtFunctionStmt> ::= Name:<Name> StmtFunctionRange:<StmtFunctionRange>  :production1222
            ASTStmtFunctionRangeNode v2 = (ASTStmtFunctionRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTStmtFunctionStmtNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.StmtFunctionStmtNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                if (name.equals("StmtFunctionRange"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <StmtFunctionStmt> ::= Name:<Name> StmtFunctionRange:<StmtFunctionRange>  :production1222
         */
        protected ASTStmtFunctionStmtNode userAction(ASTNameNode v1, ASTStmtFunctionRangeNode v2)
        {
            return null;
        }
    }
    public static final Productions.Production1222Production PRODUCTION1222 = Production1222Production.getInstance();

    public static class Production1223Production extends Production
    {
        private Production1223Production() {;} // Singleton
        private static Production1223Production singletonInstance = null;
        public static final Production1223Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1223Production(); return singletonInstance; }

        public String getDescription() { return "<StmtFunctionStmt> ::= LblDef:<LblDef> Name:<Name> StmtFunctionRange:<StmtFunctionRange>  :production1223"; }

        /**
         * Reduce by <StmtFunctionStmt> ::= LblDef:<LblDef> Name:<Name> StmtFunctionRange:<StmtFunctionRange>  :production1223
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <StmtFunctionStmt> ::= LblDef:<LblDef> Name:<Name> StmtFunctionRange:<StmtFunctionRange>  :production1223
            ASTStmtFunctionRangeNode v3 = (ASTStmtFunctionRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v2 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTStmtFunctionStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.StmtFunctionStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("Name"))
                    return 1;
                else
                    if (name.equals("StmtFunctionRange"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <StmtFunctionStmt> ::= LblDef:<LblDef> Name:<Name> StmtFunctionRange:<StmtFunctionRange>  :production1223
         */
        protected ASTStmtFunctionStmtNode userAction(ASTLblDefNode v1, ASTNameNode v2, ASTStmtFunctionRangeNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production1223Production PRODUCTION1223 = Production1223Production.getInstance();

    public static class Production1224Production extends Production
    {
        private Production1224Production() {;} // Singleton
        private static Production1224Production singletonInstance = null;
        public static final Production1224Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1224Production(); return singletonInstance; }

        public String getDescription() { return "<StmtFunctionRange> ::= tlparen:T_LPAREN trparen:T_RPAREN tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production1224"; }

        /**
         * Reduce by <StmtFunctionRange> ::= tlparen:T_LPAREN trparen:T_RPAREN tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production1224
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <StmtFunctionRange> ::= tlparen:T_LPAREN trparen:T_RPAREN tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production1224
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v4 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTStmtFunctionRangeNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.StmtFunctionRangeNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("trparen"))
                    return 1;
                else
                    if (name.equals("tequals"))
                        return 2;
                    else
                        if (name.equals("Expr"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <StmtFunctionRange> ::= tlparen:T_LPAREN trparen:T_RPAREN tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production1224
         */
        protected ASTStmtFunctionRangeNode userAction(Token v1, Token v2, Token v3, ASTExprNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production1224Production PRODUCTION1224 = Production1224Production.getInstance();

    public static class Production1225Production extends Production
    {
        private Production1225Production() {;} // Singleton
        private static Production1225Production singletonInstance = null;
        public static final Production1225Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1225Production(); return singletonInstance; }

        public String getDescription() { return "<StmtFunctionRange> ::= tlparen:T_LPAREN SFDummyArgNameList:<SFDummyArgNameList> trparen:T_RPAREN tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production1225"; }

        /**
         * Reduce by <StmtFunctionRange> ::= tlparen:T_LPAREN SFDummyArgNameList:<SFDummyArgNameList> trparen:T_RPAREN tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production1225
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <StmtFunctionRange> ::= tlparen:T_LPAREN SFDummyArgNameList:<SFDummyArgNameList> trparen:T_RPAREN tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production1225
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTExprNode v5 = (ASTExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSFDummyArgNameListNode v2 = (ASTSFDummyArgNameListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTStmtFunctionRangeNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.StmtFunctionRangeNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("SFDummyArgNameList"))
                    return 1;
                else
                    if (name.equals("trparen"))
                        return 2;
                    else
                        if (name.equals("tequals"))
                            return 3;
                        else
                            if (name.equals("Expr"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <StmtFunctionRange> ::= tlparen:T_LPAREN SFDummyArgNameList:<SFDummyArgNameList> trparen:T_RPAREN tequals:T_EQUALS Expr:<Expr> teos:T_EOS  :production1225
         */
        protected ASTStmtFunctionRangeNode userAction(Token v1, ASTSFDummyArgNameListNode v2, Token v3, Token v4, ASTExprNode v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production1225Production PRODUCTION1225 = Production1225Production.getInstance();

    public static class Production1226Production extends Production
    {
        private Production1226Production() {;} // Singleton
        private static Production1226Production singletonInstance = null;
        public static final Production1226Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1226Production(); return singletonInstance; }

        public String getDescription() { return "<SFDummyArgNameList> ::= SFDummyArgName:<SFDummyArgName>  :production1226"; }

        /**
         * Reduce by <SFDummyArgNameList> ::= SFDummyArgName:<SFDummyArgName>  :production1226
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SFDummyArgNameList> ::= SFDummyArgName:<SFDummyArgName>  :production1226
            ASTSFDummyArgNameNode v1 = (ASTSFDummyArgNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSFDummyArgNameListNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SFDummyArgNameListNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SFDummyArgName"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SFDummyArgNameList> ::= SFDummyArgName:<SFDummyArgName>  :production1226
         */
        protected ASTSFDummyArgNameListNode userAction(ASTSFDummyArgNameNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production1226Production PRODUCTION1226 = Production1226Production.getInstance();

    public static class Production1227Production extends Production
    {
        private Production1227Production() {;} // Singleton
        private static Production1227Production singletonInstance = null;
        public static final Production1227Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1227Production(); return singletonInstance; }

        public String getDescription() { return "<SFDummyArgNameList> ::= @:<SFDummyArgNameList> tcomma:T_COMMA SFDummyArgName:<SFDummyArgName>  :production1227"; }

        /**
         * Reduce by <SFDummyArgNameList> ::= @:<SFDummyArgNameList> tcomma:T_COMMA SFDummyArgName:<SFDummyArgName>  :production1227
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SFDummyArgNameList> ::= @:<SFDummyArgNameList> tcomma:T_COMMA SFDummyArgName:<SFDummyArgName>  :production1227
            ASTSFDummyArgNameNode v3 = (ASTSFDummyArgNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSFDummyArgNameListNode v1 = (ASTSFDummyArgNameListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSFDummyArgNameListNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.SFDummyArgNameListNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals(""))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    if (name.equals("SFDummyArgName"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SFDummyArgNameList> ::= @:<SFDummyArgNameList> tcomma:T_COMMA SFDummyArgName:<SFDummyArgName>  :production1227
         */
        protected ASTSFDummyArgNameListNode userAction(ASTSFDummyArgNameListNode v1, Token v2, ASTSFDummyArgNameNode v3)
        {
            return null;
        }
    }
    public static final Productions.Production1227Production PRODUCTION1227 = Production1227Production.getInstance();

    public static class Production1228Production extends Production
    {
        private Production1228Production() {;} // Singleton
        private static Production1228Production singletonInstance = null;
        public static final Production1228Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1228Production(); return singletonInstance; }

        public String getDescription() { return "<ArrayName> ::= tident:T_IDENT  :production1228"; }

        /**
         * Reduce by <ArrayName> ::= tident:T_IDENT  :production1228
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ArrayName> ::= tident:T_IDENT  :production1228
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTArrayNameNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ArrayNameNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tident"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ArrayName> ::= tident:T_IDENT  :production1228
         */
        protected ASTArrayNameNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production1228Production PRODUCTION1228 = Production1228Production.getInstance();

    public static class Production1229Production extends Production
    {
        private Production1229Production() {;} // Singleton
        private static Production1229Production singletonInstance = null;
        public static final Production1229Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1229Production(); return singletonInstance; }

        public String getDescription() { return "<BlockDataName> ::= tident:T_IDENT  :production1229"; }

        /**
         * Reduce by <BlockDataName> ::= tident:T_IDENT  :production1229
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <BlockDataName> ::= tident:T_IDENT  :production1229
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTBlockDataNameNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.BlockDataNameNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tident"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <BlockDataName> ::= tident:T_IDENT  :production1229
         */
        protected ASTBlockDataNameNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production1229Production PRODUCTION1229 = Production1229Production.getInstance();

    public static class Production1230Production extends Production
    {
        private Production1230Production() {;} // Singleton
        private static Production1230Production singletonInstance = null;
        public static final Production1230Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1230Production(); return singletonInstance; }

        public String getDescription() { return "<CommonBlockName> ::= tident:T_IDENT  :production1230"; }

        /**
         * Reduce by <CommonBlockName> ::= tident:T_IDENT  :production1230
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CommonBlockName> ::= tident:T_IDENT  :production1230
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTCommonBlockNameNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.CommonBlockNameNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tident"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <CommonBlockName> ::= tident:T_IDENT  :production1230
         */
        protected ASTCommonBlockNameNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production1230Production PRODUCTION1230 = Production1230Production.getInstance();

    public static class Production1231Production extends Production
    {
        private Production1231Production() {;} // Singleton
        private static Production1231Production singletonInstance = null;
        public static final Production1231Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1231Production(); return singletonInstance; }

        public String getDescription() { return "<ComponentName> ::= tident:T_IDENT  :production1231"; }

        /**
         * Reduce by <ComponentName> ::= tident:T_IDENT  :production1231
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ComponentName> ::= tident:T_IDENT  :production1231
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTComponentNameNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ComponentNameNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tident"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ComponentName> ::= tident:T_IDENT  :production1231
         */
        protected ASTComponentNameNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production1231Production PRODUCTION1231 = Production1231Production.getInstance();

    public static class Production1232Production extends Production
    {
        private Production1232Production() {;} // Singleton
        private static Production1232Production singletonInstance = null;
        public static final Production1232Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1232Production(); return singletonInstance; }

        public String getDescription() { return "<DummyArgName> ::= tident:T_IDENT  :production1232"; }

        /**
         * Reduce by <DummyArgName> ::= tident:T_IDENT  :production1232
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DummyArgName> ::= tident:T_IDENT  :production1232
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTDummyArgNameNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.DummyArgNameNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tident"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <DummyArgName> ::= tident:T_IDENT  :production1232
         */
        protected ASTDummyArgNameNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production1232Production PRODUCTION1232 = Production1232Production.getInstance();

    public static class Production1233Production extends Production
    {
        private Production1233Production() {;} // Singleton
        private static Production1233Production singletonInstance = null;
        public static final Production1233Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1233Production(); return singletonInstance; }

        public String getDescription() { return "<EndName> ::= tident:T_IDENT  :production1233"; }

        /**
         * Reduce by <EndName> ::= tident:T_IDENT  :production1233
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndName> ::= tident:T_IDENT  :production1233
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEndNameNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.EndNameNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tident"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EndName> ::= tident:T_IDENT  :production1233
         */
        protected ASTEndNameNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production1233Production PRODUCTION1233 = Production1233Production.getInstance();

    public static class Production1234Production extends Production
    {
        private Production1234Production() {;} // Singleton
        private static Production1234Production singletonInstance = null;
        public static final Production1234Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1234Production(); return singletonInstance; }

        public String getDescription() { return "<EntryName> ::= tident:T_IDENT  :production1234"; }

        /**
         * Reduce by <EntryName> ::= tident:T_IDENT  :production1234
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EntryName> ::= tident:T_IDENT  :production1234
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTEntryNameNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.EntryNameNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tident"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <EntryName> ::= tident:T_IDENT  :production1234
         */
        protected ASTEntryNameNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production1234Production PRODUCTION1234 = Production1234Production.getInstance();

    public static class Production1235Production extends Production
    {
        private Production1235Production() {;} // Singleton
        private static Production1235Production singletonInstance = null;
        public static final Production1235Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1235Production(); return singletonInstance; }

        public String getDescription() { return "<ExternalName> ::= tident:T_IDENT  :production1235"; }

        /**
         * Reduce by <ExternalName> ::= tident:T_IDENT  :production1235
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ExternalName> ::= tident:T_IDENT  :production1235
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTExternalNameNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ExternalNameNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tident"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ExternalName> ::= tident:T_IDENT  :production1235
         */
        protected ASTExternalNameNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production1235Production PRODUCTION1235 = Production1235Production.getInstance();

    public static class Production1236Production extends Production
    {
        private Production1236Production() {;} // Singleton
        private static Production1236Production singletonInstance = null;
        public static final Production1236Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1236Production(); return singletonInstance; }

        public String getDescription() { return "<FunctionName> ::= tident:T_IDENT  :production1236"; }

        /**
         * Reduce by <FunctionName> ::= tident:T_IDENT  :production1236
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FunctionName> ::= tident:T_IDENT  :production1236
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTFunctionNameNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.FunctionNameNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tident"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <FunctionName> ::= tident:T_IDENT  :production1236
         */
        protected ASTFunctionNameNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production1236Production PRODUCTION1236 = Production1236Production.getInstance();

    public static class Production1237Production extends Production
    {
        private Production1237Production() {;} // Singleton
        private static Production1237Production singletonInstance = null;
        public static final Production1237Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1237Production(); return singletonInstance; }

        public String getDescription() { return "<GenericName> ::= tident:T_IDENT  :production1237"; }

        /**
         * Reduce by <GenericName> ::= tident:T_IDENT  :production1237
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <GenericName> ::= tident:T_IDENT  :production1237
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTGenericNameNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.GenericNameNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tident"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <GenericName> ::= tident:T_IDENT  :production1237
         */
        protected ASTGenericNameNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production1237Production PRODUCTION1237 = Production1237Production.getInstance();

    public static class Production1238Production extends Production
    {
        private Production1238Production() {;} // Singleton
        private static Production1238Production singletonInstance = null;
        public static final Production1238Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1238Production(); return singletonInstance; }

        public String getDescription() { return "<ImpliedDoVariable> ::= tident:T_IDENT  :production1238"; }

        /**
         * Reduce by <ImpliedDoVariable> ::= tident:T_IDENT  :production1238
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ImpliedDoVariable> ::= tident:T_IDENT  :production1238
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTImpliedDoVariableNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ImpliedDoVariableNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tident"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ImpliedDoVariable> ::= tident:T_IDENT  :production1238
         */
        protected ASTImpliedDoVariableNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production1238Production PRODUCTION1238 = Production1238Production.getInstance();

    public static class Production1239Production extends Production
    {
        private Production1239Production() {;} // Singleton
        private static Production1239Production singletonInstance = null;
        public static final Production1239Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1239Production(); return singletonInstance; }

        public String getDescription() { return "<IntrinsicProcedureName> ::= tident:T_IDENT  :production1239"; }

        /**
         * Reduce by <IntrinsicProcedureName> ::= tident:T_IDENT  :production1239
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <IntrinsicProcedureName> ::= tident:T_IDENT  :production1239
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTIntrinsicProcedureNameNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.IntrinsicProcedureNameNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tident"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <IntrinsicProcedureName> ::= tident:T_IDENT  :production1239
         */
        protected ASTIntrinsicProcedureNameNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production1239Production PRODUCTION1239 = Production1239Production.getInstance();

    public static class Production1240Production extends Production
    {
        private Production1240Production() {;} // Singleton
        private static Production1240Production singletonInstance = null;
        public static final Production1240Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1240Production(); return singletonInstance; }

        public String getDescription() { return "<ModuleName> ::= tident:T_IDENT  :production1240"; }

        /**
         * Reduce by <ModuleName> ::= tident:T_IDENT  :production1240
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ModuleName> ::= tident:T_IDENT  :production1240
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTModuleNameNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ModuleNameNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tident"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ModuleName> ::= tident:T_IDENT  :production1240
         */
        protected ASTModuleNameNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production1240Production PRODUCTION1240 = Production1240Production.getInstance();

    public static class Production1241Production extends Production
    {
        private Production1241Production() {;} // Singleton
        private static Production1241Production singletonInstance = null;
        public static final Production1241Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1241Production(); return singletonInstance; }

        public String getDescription() { return "<NamelistGroupName> ::= tident:T_IDENT  :production1241"; }

        /**
         * Reduce by <NamelistGroupName> ::= tident:T_IDENT  :production1241
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <NamelistGroupName> ::= tident:T_IDENT  :production1241
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTNamelistGroupNameNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.NamelistGroupNameNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tident"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <NamelistGroupName> ::= tident:T_IDENT  :production1241
         */
        protected ASTNamelistGroupNameNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production1241Production PRODUCTION1241 = Production1241Production.getInstance();

    public static class Production1242Production extends Production
    {
        private Production1242Production() {;} // Singleton
        private static Production1242Production singletonInstance = null;
        public static final Production1242Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1242Production(); return singletonInstance; }

        public String getDescription() { return "<ObjectName> ::= tident:T_IDENT  :production1242"; }

        /**
         * Reduce by <ObjectName> ::= tident:T_IDENT  :production1242
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ObjectName> ::= tident:T_IDENT  :production1242
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTObjectNameNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ObjectNameNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tident"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ObjectName> ::= tident:T_IDENT  :production1242
         */
        protected ASTObjectNameNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production1242Production PRODUCTION1242 = Production1242Production.getInstance();

    public static class Production1243Production extends Production
    {
        private Production1243Production() {;} // Singleton
        private static Production1243Production singletonInstance = null;
        public static final Production1243Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1243Production(); return singletonInstance; }

        public String getDescription() { return "<ProgramName> ::= tident:T_IDENT  :production1243"; }

        /**
         * Reduce by <ProgramName> ::= tident:T_IDENT  :production1243
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ProgramName> ::= tident:T_IDENT  :production1243
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTProgramNameNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ProgramNameNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tident"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ProgramName> ::= tident:T_IDENT  :production1243
         */
        protected ASTProgramNameNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production1243Production PRODUCTION1243 = Production1243Production.getInstance();

    public static class XSFDummyArgNameProduction extends Production
    {
        private XSFDummyArgNameProduction() {;} // Singleton
        private static XSFDummyArgNameProduction singletonInstance = null;
        public static final XSFDummyArgNameProduction getInstance() { if (singletonInstance == null) singletonInstance = new XSFDummyArgNameProduction(); return singletonInstance; }

        public String getDescription() { return "<SFDummyArgName> ::= Name:<Name>  :xSFDummyArgName"; }

        /**
         * Reduce by <SFDummyArgName> ::= Name:<Name>  :xSFDummyArgName
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SFDummyArgName> ::= Name:<Name>  :xSFDummyArgName
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSFDummyArgNameNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SFDummyArgNameNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SFDummyArgName> ::= Name:<Name>  :xSFDummyArgName
         */
        protected ASTSFDummyArgNameNode userAction(ASTNameNode v1)
        {
            return null;
        }
    }
    public static final Productions.XSFDummyArgNameProduction XSFDUMMYARGNAME = XSFDummyArgNameProduction.getInstance();

    public static class XSFVarNameProduction extends Production
    {
        private XSFVarNameProduction() {;} // Singleton
        private static XSFVarNameProduction singletonInstance = null;
        public static final XSFVarNameProduction getInstance() { if (singletonInstance == null) singletonInstance = new XSFVarNameProduction(); return singletonInstance; }

        public String getDescription() { return "<SFVarName> ::= Name:<Name>  :xSFVarName"; }

        /**
         * Reduce by <SFVarName> ::= Name:<Name>  :xSFVarName
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SFVarName> ::= Name:<Name>  :xSFVarName
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSFVarNameNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SFVarNameNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SFVarName> ::= Name:<Name>  :xSFVarName
         */
        protected ASTSFVarNameNode userAction(ASTNameNode v1)
        {
            return null;
        }
    }
    public static final Productions.XSFVarNameProduction XSFVARNAME = XSFVarNameProduction.getInstance();

    public static class Production1246Production extends Production
    {
        private Production1246Production() {;} // Singleton
        private static Production1246Production singletonInstance = null;
        public static final Production1246Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1246Production(); return singletonInstance; }

        public String getDescription() { return "<SubroutineName> ::= tident:T_IDENT  :production1246"; }

        /**
         * Reduce by <SubroutineName> ::= tident:T_IDENT  :production1246
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SubroutineName> ::= tident:T_IDENT  :production1246
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSubroutineNameNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SubroutineNameNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tident"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SubroutineName> ::= tident:T_IDENT  :production1246
         */
        protected ASTSubroutineNameNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production1246Production PRODUCTION1246 = Production1246Production.getInstance();

    public static class Production1247Production extends Production
    {
        private Production1247Production() {;} // Singleton
        private static Production1247Production singletonInstance = null;
        public static final Production1247Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1247Production(); return singletonInstance; }

        public String getDescription() { return "<SubroutineNameUse> ::= tident:T_IDENT  :production1247"; }

        /**
         * Reduce by <SubroutineNameUse> ::= tident:T_IDENT  :production1247
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SubroutineNameUse> ::= tident:T_IDENT  :production1247
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTSubroutineNameUseNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.SubroutineNameUseNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tident"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <SubroutineNameUse> ::= tident:T_IDENT  :production1247
         */
        protected ASTSubroutineNameUseNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production1247Production PRODUCTION1247 = Production1247Production.getInstance();

    public static class Production1248Production extends Production
    {
        private Production1248Production() {;} // Singleton
        private static Production1248Production singletonInstance = null;
        public static final Production1248Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1248Production(); return singletonInstance; }

        public String getDescription() { return "<TypeName> ::= tident:T_IDENT  :production1248"; }

        /**
         * Reduce by <TypeName> ::= tident:T_IDENT  :production1248
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <TypeName> ::= tident:T_IDENT  :production1248
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTTypeNameNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.TypeNameNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tident"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <TypeName> ::= tident:T_IDENT  :production1248
         */
        protected ASTTypeNameNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production1248Production PRODUCTION1248 = Production1248Production.getInstance();

    public static class Production1249Production extends Production
    {
        private Production1249Production() {;} // Singleton
        private static Production1249Production singletonInstance = null;
        public static final Production1249Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1249Production(); return singletonInstance; }

        public String getDescription() { return "<UseName> ::= tident:T_IDENT  :production1249"; }

        /**
         * Reduce by <UseName> ::= tident:T_IDENT  :production1249
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UseName> ::= tident:T_IDENT  :production1249
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTUseNameNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.UseNameNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tident"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <UseName> ::= tident:T_IDENT  :production1249
         */
        protected ASTUseNameNode userAction(Token v1)
        {
            return null;
        }
    }
    public static final Productions.Production1249Production PRODUCTION1249 = Production1249Production.getInstance();

    public static class Production1250Production extends Production
    {
        private Production1250Production() {;} // Singleton
        private static Production1250Production singletonInstance = null;
        public static final Production1250Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1250Production(); return singletonInstance; }

        public String getDescription() { return "<LblDef> ::= Label:<Label>  :production1250"; }

        /**
         * Reduce by <LblDef> ::= Label:<Label>  :production1250
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <LblDef> ::= Label:<Label>  :production1250
            ASTLabelNode v1 = (ASTLabelNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTLblDefNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.LblDefNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Label"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <LblDef> ::= Label:<Label>  :production1250
         */
        protected ASTLblDefNode userAction(ASTLabelNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production1250Production PRODUCTION1250 = Production1250Production.getInstance();

    public static class Production1251Production extends Production
    {
        private Production1251Production() {;} // Singleton
        private static Production1251Production singletonInstance = null;
        public static final Production1251Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1251Production(); return singletonInstance; }

        public String getDescription() { return "<ActionStmt> ::= AssignStmt:<AssignStmt>  :production1251"; }

        /**
         * Reduce by <ActionStmt> ::= AssignStmt:<AssignStmt>  :production1251
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ActionStmt> ::= AssignStmt:<AssignStmt>  :production1251
            ASTAssignStmtNode v1 = (ASTAssignStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTActionStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ActionStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("AssignStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ActionStmt> ::= AssignStmt:<AssignStmt>  :production1251
         */
        protected ASTActionStmtNode userAction(ASTAssignStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production1251Production PRODUCTION1251 = Production1251Production.getInstance();

    public static class Production1252Production extends Production
    {
        private Production1252Production() {;} // Singleton
        private static Production1252Production singletonInstance = null;
        public static final Production1252Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1252Production(); return singletonInstance; }

        public String getDescription() { return "<ActionStmt> ::= AssignedGotoStmt:<AssignedGotoStmt>  :production1252"; }

        /**
         * Reduce by <ActionStmt> ::= AssignedGotoStmt:<AssignedGotoStmt>  :production1252
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ActionStmt> ::= AssignedGotoStmt:<AssignedGotoStmt>  :production1252
            ASTAssignedGotoStmtNode v1 = (ASTAssignedGotoStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTActionStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ActionStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("AssignedGotoStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ActionStmt> ::= AssignedGotoStmt:<AssignedGotoStmt>  :production1252
         */
        protected ASTActionStmtNode userAction(ASTAssignedGotoStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production1252Production PRODUCTION1252 = Production1252Production.getInstance();

    public static class Production1253Production extends Production
    {
        private Production1253Production() {;} // Singleton
        private static Production1253Production singletonInstance = null;
        public static final Production1253Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1253Production(); return singletonInstance; }

        public String getDescription() { return "<ActionStmt> ::= PauseStmt:<PauseStmt>  :production1253"; }

        /**
         * Reduce by <ActionStmt> ::= PauseStmt:<PauseStmt>  :production1253
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ActionStmt> ::= PauseStmt:<PauseStmt>  :production1253
            ASTPauseStmtNode v1 = (ASTPauseStmtNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTActionStmtNode userValue = userAction(v1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ActionStmtNonterminal.getInstance(), 1, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("PauseStmt"))
                return 0;
            else
                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <ActionStmt> ::= PauseStmt:<PauseStmt>  :production1253
         */
        protected ASTActionStmtNode userAction(ASTPauseStmtNode v1)
        {
            return null;
        }
    }
    public static final Productions.Production1253Production PRODUCTION1253 = Production1253Production.getInstance();

    public static class Production1254Production extends Production
    {
        private Production1254Production() {;} // Singleton
        private static Production1254Production singletonInstance = null;
        public static final Production1254Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1254Production(); return singletonInstance; }

        public String getDescription() { return "<PauseStmt> ::= tpause:T_PAUSE teos:T_EOS  :production1254"; }

        /**
         * Reduce by <PauseStmt> ::= tpause:T_PAUSE teos:T_EOS  :production1254
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PauseStmt> ::= tpause:T_PAUSE teos:T_EOS  :production1254
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPauseStmtNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.PauseStmtNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tpause"))
                return 0;
            else
                if (name.equals("teos"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PauseStmt> ::= tpause:T_PAUSE teos:T_EOS  :production1254
         */
        protected ASTPauseStmtNode userAction(Token v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production1254Production PRODUCTION1254 = Production1254Production.getInstance();

    public static class Production1255Production extends Production
    {
        private Production1255Production() {;} // Singleton
        private static Production1255Production singletonInstance = null;
        public static final Production1255Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1255Production(); return singletonInstance; }

        public String getDescription() { return "<PauseStmt> ::= LblDef:<LblDef> tpause:T_PAUSE teos:T_EOS  :production1255"; }

        /**
         * Reduce by <PauseStmt> ::= LblDef:<LblDef> tpause:T_PAUSE teos:T_EOS  :production1255
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PauseStmt> ::= LblDef:<LblDef> tpause:T_PAUSE teos:T_EOS  :production1255
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPauseStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.PauseStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tpause"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PauseStmt> ::= LblDef:<LblDef> tpause:T_PAUSE teos:T_EOS  :production1255
         */
        protected ASTPauseStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1255Production PRODUCTION1255 = Production1255Production.getInstance();

    public static class Production1256Production extends Production
    {
        private Production1256Production() {;} // Singleton
        private static Production1256Production singletonInstance = null;
        public static final Production1256Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1256Production(); return singletonInstance; }

        public String getDescription() { return "<PauseStmt> ::= tpause:T_PAUSE ticon:T_ICON teos:T_EOS  :production1256"; }

        /**
         * Reduce by <PauseStmt> ::= tpause:T_PAUSE ticon:T_ICON teos:T_EOS  :production1256
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PauseStmt> ::= tpause:T_PAUSE ticon:T_ICON teos:T_EOS  :production1256
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPauseStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.PauseStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tpause"))
                return 0;
            else
                if (name.equals("ticon"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PauseStmt> ::= tpause:T_PAUSE ticon:T_ICON teos:T_EOS  :production1256
         */
        protected ASTPauseStmtNode userAction(Token v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1256Production PRODUCTION1256 = Production1256Production.getInstance();

    public static class Production1257Production extends Production
    {
        private Production1257Production() {;} // Singleton
        private static Production1257Production singletonInstance = null;
        public static final Production1257Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1257Production(); return singletonInstance; }

        public String getDescription() { return "<PauseStmt> ::= LblDef:<LblDef> tpause:T_PAUSE ticon:T_ICON teos:T_EOS  :production1257"; }

        /**
         * Reduce by <PauseStmt> ::= LblDef:<LblDef> tpause:T_PAUSE ticon:T_ICON teos:T_EOS  :production1257
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PauseStmt> ::= LblDef:<LblDef> tpause:T_PAUSE ticon:T_ICON teos:T_EOS  :production1257
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPauseStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.PauseStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tpause"))
                    return 1;
                else
                    if (name.equals("ticon"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PauseStmt> ::= LblDef:<LblDef> tpause:T_PAUSE ticon:T_ICON teos:T_EOS  :production1257
         */
        protected ASTPauseStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production1257Production PRODUCTION1257 = Production1257Production.getInstance();

    public static class Production1258Production extends Production
    {
        private Production1258Production() {;} // Singleton
        private static Production1258Production singletonInstance = null;
        public static final Production1258Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1258Production(); return singletonInstance; }

        public String getDescription() { return "<PauseStmt> ::= tpause:T_PAUSE tscon:T_SCON teos:T_EOS  :production1258"; }

        /**
         * Reduce by <PauseStmt> ::= tpause:T_PAUSE tscon:T_SCON teos:T_EOS  :production1258
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PauseStmt> ::= tpause:T_PAUSE tscon:T_SCON teos:T_EOS  :production1258
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPauseStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.PauseStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tpause"))
                return 0;
            else
                if (name.equals("tscon"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PauseStmt> ::= tpause:T_PAUSE tscon:T_SCON teos:T_EOS  :production1258
         */
        protected ASTPauseStmtNode userAction(Token v1, Token v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1258Production PRODUCTION1258 = Production1258Production.getInstance();

    public static class Production1259Production extends Production
    {
        private Production1259Production() {;} // Singleton
        private static Production1259Production singletonInstance = null;
        public static final Production1259Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1259Production(); return singletonInstance; }

        public String getDescription() { return "<PauseStmt> ::= LblDef:<LblDef> tpause:T_PAUSE tscon:T_SCON teos:T_EOS  :production1259"; }

        /**
         * Reduce by <PauseStmt> ::= LblDef:<LblDef> tpause:T_PAUSE tscon:T_SCON teos:T_EOS  :production1259
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PauseStmt> ::= LblDef:<LblDef> tpause:T_PAUSE tscon:T_SCON teos:T_EOS  :production1259
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTPauseStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.PauseStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tpause"))
                    return 1;
                else
                    if (name.equals("tscon"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <PauseStmt> ::= LblDef:<LblDef> tpause:T_PAUSE tscon:T_SCON teos:T_EOS  :production1259
         */
        protected ASTPauseStmtNode userAction(ASTLblDefNode v1, Token v2, Token v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production1259Production PRODUCTION1259 = Production1259Production.getInstance();

    public static class Production1260Production extends Production
    {
        private Production1260Production() {;} // Singleton
        private static Production1260Production singletonInstance = null;
        public static final Production1260Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1260Production(); return singletonInstance; }

        public String getDescription() { return "<AssignStmt> ::= tassign:T_ASSIGN LblRef:<LblRef> tto:T_TO VariableName:<VariableName> teos:T_EOS  :production1260"; }

        /**
         * Reduce by <AssignStmt> ::= tassign:T_ASSIGN LblRef:<LblRef> tto:T_TO VariableName:<VariableName> teos:T_EOS  :production1260
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssignStmt> ::= tassign:T_ASSIGN LblRef:<LblRef> tto:T_TO VariableName:<VariableName> teos:T_EOS  :production1260
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTVariableNameNode v4 = (ASTVariableNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblRefNode v2 = (ASTLblRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAssignStmtNode userValue = userAction(v1, v2, v3, v4, v5);

            // The production has 5 symbols on its RHS
            parser.reduce(Nonterminal.AssignStmtNonterminal.getInstance(), 5, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tassign"))
                return 0;
            else
                if (name.equals("LblRef"))
                    return 1;
                else
                    if (name.equals("tto"))
                        return 2;
                    else
                        if (name.equals("VariableName"))
                            return 3;
                        else
                            if (name.equals("teos"))
                                return 4;
                            else
                                return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AssignStmt> ::= tassign:T_ASSIGN LblRef:<LblRef> tto:T_TO VariableName:<VariableName> teos:T_EOS  :production1260
         */
        protected ASTAssignStmtNode userAction(Token v1, ASTLblRefNode v2, Token v3, ASTVariableNameNode v4, Token v5)
        {
            return null;
        }
    }
    public static final Productions.Production1260Production PRODUCTION1260 = Production1260Production.getInstance();

    public static class Production1261Production extends Production
    {
        private Production1261Production() {;} // Singleton
        private static Production1261Production singletonInstance = null;
        public static final Production1261Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1261Production(); return singletonInstance; }

        public String getDescription() { return "<AssignStmt> ::= LblDef:<LblDef> tassign:T_ASSIGN LblRef:<LblRef> tto:T_TO VariableName:<VariableName> teos:T_EOS  :production1261"; }

        /**
         * Reduce by <AssignStmt> ::= LblDef:<LblDef> tassign:T_ASSIGN LblRef:<LblRef> tto:T_TO VariableName:<VariableName> teos:T_EOS  :production1261
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssignStmt> ::= LblDef:<LblDef> tassign:T_ASSIGN LblRef:<LblRef> tto:T_TO VariableName:<VariableName> teos:T_EOS  :production1261
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTVariableNameNode v5 = (ASTVariableNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblRefNode v3 = (ASTLblRefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAssignStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.AssignStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("tassign"))
                    return 1;
                else
                    if (name.equals("LblRef"))
                        return 2;
                    else
                        if (name.equals("tto"))
                            return 3;
                        else
                            if (name.equals("VariableName"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AssignStmt> ::= LblDef:<LblDef> tassign:T_ASSIGN LblRef:<LblRef> tto:T_TO VariableName:<VariableName> teos:T_EOS  :production1261
         */
        protected ASTAssignStmtNode userAction(ASTLblDefNode v1, Token v2, ASTLblRefNode v3, Token v4, ASTVariableNameNode v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production1261Production PRODUCTION1261 = Production1261Production.getInstance();

    public static class Production1262Production extends Production
    {
        private Production1262Production() {;} // Singleton
        private static Production1262Production singletonInstance = null;
        public static final Production1262Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1262Production(); return singletonInstance; }

        public String getDescription() { return "<AssignedGotoStmt> ::= GoToKw:<GoToKw> VariableName:<VariableName> teos:T_EOS  :production1262"; }

        /**
         * Reduce by <AssignedGotoStmt> ::= GoToKw:<GoToKw> VariableName:<VariableName> teos:T_EOS  :production1262
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssignedGotoStmt> ::= GoToKw:<GoToKw> VariableName:<VariableName> teos:T_EOS  :production1262
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTVariableNameNode v2 = (ASTVariableNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTGoToKwNode v1 = (ASTGoToKwNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAssignedGotoStmtNode userValue = userAction(v1, v2, v3);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.AssignedGotoStmtNonterminal.getInstance(), 3, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("GoToKw"))
                return 0;
            else
                if (name.equals("VariableName"))
                    return 1;
                else
                    if (name.equals("teos"))
                        return 2;
                    else
                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AssignedGotoStmt> ::= GoToKw:<GoToKw> VariableName:<VariableName> teos:T_EOS  :production1262
         */
        protected ASTAssignedGotoStmtNode userAction(ASTGoToKwNode v1, ASTVariableNameNode v2, Token v3)
        {
            return null;
        }
    }
    public static final Productions.Production1262Production PRODUCTION1262 = Production1262Production.getInstance();

    public static class Production1263Production extends Production
    {
        private Production1263Production() {;} // Singleton
        private static Production1263Production singletonInstance = null;
        public static final Production1263Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1263Production(); return singletonInstance; }

        public String getDescription() { return "<AssignedGotoStmt> ::= LblDef:<LblDef> GoToKw:<GoToKw> VariableName:<VariableName> teos:T_EOS  :production1263"; }

        /**
         * Reduce by <AssignedGotoStmt> ::= LblDef:<LblDef> GoToKw:<GoToKw> VariableName:<VariableName> teos:T_EOS  :production1263
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssignedGotoStmt> ::= LblDef:<LblDef> GoToKw:<GoToKw> VariableName:<VariableName> teos:T_EOS  :production1263
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTVariableNameNode v3 = (ASTVariableNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTGoToKwNode v2 = (ASTGoToKwNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAssignedGotoStmtNode userValue = userAction(v1, v2, v3, v4);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.AssignedGotoStmtNonterminal.getInstance(), 4, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("GoToKw"))
                    return 1;
                else
                    if (name.equals("VariableName"))
                        return 2;
                    else
                        if (name.equals("teos"))
                            return 3;
                        else
                            return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AssignedGotoStmt> ::= LblDef:<LblDef> GoToKw:<GoToKw> VariableName:<VariableName> teos:T_EOS  :production1263
         */
        protected ASTAssignedGotoStmtNode userAction(ASTLblDefNode v1, ASTGoToKwNode v2, ASTVariableNameNode v3, Token v4)
        {
            return null;
        }
    }
    public static final Productions.Production1263Production PRODUCTION1263 = Production1263Production.getInstance();

    public static class Production1264Production extends Production
    {
        private Production1264Production() {;} // Singleton
        private static Production1264Production singletonInstance = null;
        public static final Production1264Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1264Production(); return singletonInstance; }

        public String getDescription() { return "<AssignedGotoStmt> ::= GoToKw:<GoToKw> VariableName:<VariableName> tlparen:T_LPAREN LblRefList:<LblRefList> trparen:T_RPAREN teos:T_EOS  :production1264"; }

        /**
         * Reduce by <AssignedGotoStmt> ::= GoToKw:<GoToKw> VariableName:<VariableName> tlparen:T_LPAREN LblRefList:<LblRefList> trparen:T_RPAREN teos:T_EOS  :production1264
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssignedGotoStmt> ::= GoToKw:<GoToKw> VariableName:<VariableName> tlparen:T_LPAREN LblRefList:<LblRefList> trparen:T_RPAREN teos:T_EOS  :production1264
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblRefListNode v4 = (ASTLblRefListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTVariableNameNode v2 = (ASTVariableNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTGoToKwNode v1 = (ASTGoToKwNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAssignedGotoStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.AssignedGotoStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("GoToKw"))
                return 0;
            else
                if (name.equals("VariableName"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("LblRefList"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AssignedGotoStmt> ::= GoToKw:<GoToKw> VariableName:<VariableName> tlparen:T_LPAREN LblRefList:<LblRefList> trparen:T_RPAREN teos:T_EOS  :production1264
         */
        protected ASTAssignedGotoStmtNode userAction(ASTGoToKwNode v1, ASTVariableNameNode v2, Token v3, ASTLblRefListNode v4, Token v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production1264Production PRODUCTION1264 = Production1264Production.getInstance();

    public static class Production1265Production extends Production
    {
        private Production1265Production() {;} // Singleton
        private static Production1265Production singletonInstance = null;
        public static final Production1265Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1265Production(); return singletonInstance; }

        public String getDescription() { return "<AssignedGotoStmt> ::= LblDef:<LblDef> GoToKw:<GoToKw> VariableName:<VariableName> tlparen:T_LPAREN LblRefList:<LblRefList> trparen:T_RPAREN teos:T_EOS  :production1265"; }

        /**
         * Reduce by <AssignedGotoStmt> ::= LblDef:<LblDef> GoToKw:<GoToKw> VariableName:<VariableName> tlparen:T_LPAREN LblRefList:<LblRefList> trparen:T_RPAREN teos:T_EOS  :production1265
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssignedGotoStmt> ::= LblDef:<LblDef> GoToKw:<GoToKw> VariableName:<VariableName> tlparen:T_LPAREN LblRefList:<LblRefList> trparen:T_RPAREN teos:T_EOS  :production1265
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblRefListNode v5 = (ASTLblRefListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTVariableNameNode v3 = (ASTVariableNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTGoToKwNode v2 = (ASTGoToKwNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAssignedGotoStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7);

            // The production has 7 symbols on its RHS
            parser.reduce(Nonterminal.AssignedGotoStmtNonterminal.getInstance(), 7, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("GoToKw"))
                    return 1;
                else
                    if (name.equals("VariableName"))
                        return 2;
                    else
                        if (name.equals("tlparen"))
                            return 3;
                        else
                            if (name.equals("LblRefList"))
                                return 4;
                            else
                                if (name.equals("trparen"))
                                    return 5;
                                else
                                    if (name.equals("teos"))
                                        return 6;
                                    else
                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AssignedGotoStmt> ::= LblDef:<LblDef> GoToKw:<GoToKw> VariableName:<VariableName> tlparen:T_LPAREN LblRefList:<LblRefList> trparen:T_RPAREN teos:T_EOS  :production1265
         */
        protected ASTAssignedGotoStmtNode userAction(ASTLblDefNode v1, ASTGoToKwNode v2, ASTVariableNameNode v3, Token v4, ASTLblRefListNode v5, Token v6, Token v7)
        {
            return null;
        }
    }
    public static final Productions.Production1265Production PRODUCTION1265 = Production1265Production.getInstance();

    public static class Production1266Production extends Production
    {
        private Production1266Production() {;} // Singleton
        private static Production1266Production singletonInstance = null;
        public static final Production1266Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1266Production(); return singletonInstance; }

        public String getDescription() { return "<AssignedGotoStmt> ::= GoToKw:<GoToKw> VariableComma:<VariableComma> tlparen:T_LPAREN LblRefList:<LblRefList> trparen:T_RPAREN teos:T_EOS  :production1266"; }

        /**
         * Reduce by <AssignedGotoStmt> ::= GoToKw:<GoToKw> VariableComma:<VariableComma> tlparen:T_LPAREN LblRefList:<LblRefList> trparen:T_RPAREN teos:T_EOS  :production1266
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssignedGotoStmt> ::= GoToKw:<GoToKw> VariableComma:<VariableComma> tlparen:T_LPAREN LblRefList:<LblRefList> trparen:T_RPAREN teos:T_EOS  :production1266
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblRefListNode v4 = (ASTLblRefListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTVariableCommaNode v2 = (ASTVariableCommaNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTGoToKwNode v1 = (ASTGoToKwNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAssignedGotoStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6);

            // The production has 6 symbols on its RHS
            parser.reduce(Nonterminal.AssignedGotoStmtNonterminal.getInstance(), 6, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("GoToKw"))
                return 0;
            else
                if (name.equals("VariableComma"))
                    return 1;
                else
                    if (name.equals("tlparen"))
                        return 2;
                    else
                        if (name.equals("LblRefList"))
                            return 3;
                        else
                            if (name.equals("trparen"))
                                return 4;
                            else
                                if (name.equals("teos"))
                                    return 5;
                                else
                                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AssignedGotoStmt> ::= GoToKw:<GoToKw> VariableComma:<VariableComma> tlparen:T_LPAREN LblRefList:<LblRefList> trparen:T_RPAREN teos:T_EOS  :production1266
         */
        protected ASTAssignedGotoStmtNode userAction(ASTGoToKwNode v1, ASTVariableCommaNode v2, Token v3, ASTLblRefListNode v4, Token v5, Token v6)
        {
            return null;
        }
    }
    public static final Productions.Production1266Production PRODUCTION1266 = Production1266Production.getInstance();

    public static class Production1267Production extends Production
    {
        private Production1267Production() {;} // Singleton
        private static Production1267Production singletonInstance = null;
        public static final Production1267Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1267Production(); return singletonInstance; }

        public String getDescription() { return "<AssignedGotoStmt> ::= LblDef:<LblDef> GoToKw:<GoToKw> VariableComma:<VariableComma> tlparen:T_LPAREN LblRefList:<LblRefList> trparen:T_RPAREN teos:T_EOS  :production1267"; }

        /**
         * Reduce by <AssignedGotoStmt> ::= LblDef:<LblDef> GoToKw:<GoToKw> VariableComma:<VariableComma> tlparen:T_LPAREN LblRefList:<LblRefList> trparen:T_RPAREN teos:T_EOS  :production1267
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssignedGotoStmt> ::= LblDef:<LblDef> GoToKw:<GoToKw> VariableComma:<VariableComma> tlparen:T_LPAREN LblRefList:<LblRefList> trparen:T_RPAREN teos:T_EOS  :production1267
            Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblRefListNode v5 = (ASTLblRefListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTVariableCommaNode v3 = (ASTVariableCommaNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTGoToKwNode v2 = (ASTGoToKwNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLblDefNode v1 = (ASTLblDefNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTAssignedGotoStmtNode userValue = userAction(v1, v2, v3, v4, v5, v6, v7);

            // The production has 7 symbols on its RHS
            parser.reduce(Nonterminal.AssignedGotoStmtNonterminal.getInstance(), 7, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("LblDef"))
                return 0;
            else
                if (name.equals("GoToKw"))
                    return 1;
                else
                    if (name.equals("VariableComma"))
                        return 2;
                    else
                        if (name.equals("tlparen"))
                            return 3;
                        else
                            if (name.equals("LblRefList"))
                                return 4;
                            else
                                if (name.equals("trparen"))
                                    return 5;
                                else
                                    if (name.equals("teos"))
                                        return 6;
                                    else
                                        return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <AssignedGotoStmt> ::= LblDef:<LblDef> GoToKw:<GoToKw> VariableComma:<VariableComma> tlparen:T_LPAREN LblRefList:<LblRefList> trparen:T_RPAREN teos:T_EOS  :production1267
         */
        protected ASTAssignedGotoStmtNode userAction(ASTLblDefNode v1, ASTGoToKwNode v2, ASTVariableCommaNode v3, Token v4, ASTLblRefListNode v5, Token v6, Token v7)
        {
            return null;
        }
    }
    public static final Productions.Production1267Production PRODUCTION1267 = Production1267Production.getInstance();

    public static class Production1268Production extends Production
    {
        private Production1268Production() {;} // Singleton
        private static Production1268Production singletonInstance = null;
        public static final Production1268Production getInstance() { if (singletonInstance == null) singletonInstance = new Production1268Production(); return singletonInstance; }

        public String getDescription() { return "<VariableComma> ::= VariableName:<VariableName> tcomma:T_COMMA  :production1268"; }

        /**
         * Reduce by <VariableComma> ::= VariableName:<VariableName> tcomma:T_COMMA  :production1268
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <VariableComma> ::= VariableName:<VariableName> tcomma:T_COMMA  :production1268
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTVariableNameNode v1 = (ASTVariableNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // Run the user's code for this production
            ASTVariableCommaNode userValue = userAction(v1, v2);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.VariableCommaNonterminal.getInstance(), 2, userValue);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("VariableName"))
                return 0;
            else
                if (name.equals("tcomma"))
                    return 1;
                else
                    return -1;
        }

        /**
         * This method is called when the parser is about to reduce by
         * <VariableComma> ::= VariableName:<VariableName> tcomma:T_COMMA  :production1268
         */
        protected ASTVariableCommaNode userAction(ASTVariableNameNode v1, Token v2)
        {
            return null;
        }
    }
    public static final Productions.Production1268Production PRODUCTION1268 = Production1268Production.getInstance();

    public static class EndTypeStmt1Production extends Production
    {
        private EndTypeStmt1Production() {;} // Singleton
        private static EndTypeStmt1Production singletonInstance = null;
        public static final EndTypeStmt1Production getInstance() { if (singletonInstance == null) singletonInstance = new EndTypeStmt1Production(); return singletonInstance; }

        public String getDescription() { return "<EndTypeStmt@1> ::= TypeName:<TypeName>  :EndTypeStmt_1"; }

        /**
         * Reduce by <EndTypeStmt@1> ::= TypeName:<TypeName>  :EndTypeStmt_1
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndTypeStmt@1> ::= TypeName:<TypeName>  :EndTypeStmt_1
            ASTTypeNameNode v1 = (ASTTypeNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.EndTypeStmt1ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("TypeName"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.EndTypeStmt1Production ENDTYPESTMT1 = EndTypeStmt1Production.getInstance();

    public static class EndTypeStmt2Production extends Production
    {
        private EndTypeStmt2Production() {;} // Singleton
        private static EndTypeStmt2Production singletonInstance = null;
        public static final EndTypeStmt2Production getInstance() { if (singletonInstance == null) singletonInstance = new EndTypeStmt2Production(); return singletonInstance; }

        public String getDescription() { return "<EndTypeStmt@2> ::= TypeName:<TypeName>  :EndTypeStmt_2"; }

        /**
         * Reduce by <EndTypeStmt@2> ::= TypeName:<TypeName>  :EndTypeStmt_2
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndTypeStmt@2> ::= TypeName:<TypeName>  :EndTypeStmt_2
            ASTTypeNameNode v1 = (ASTTypeNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.EndTypeStmt2ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("TypeName"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.EndTypeStmt2Production ENDTYPESTMT2 = EndTypeStmt2Production.getInstance();

    public static class EntityDecl3Production extends Production
    {
        private EntityDecl3Production() {;} // Singleton
        private static EntityDecl3Production singletonInstance = null;
        public static final EntityDecl3Production getInstance() { if (singletonInstance == null) singletonInstance = new EntityDecl3Production(); return singletonInstance; }

        public String getDescription() { return "<EntityDecl@3> ::= tlparen:T_LPAREN ArraySpec:<ArraySpec> trparen:T_RPAREN  :EntityDecl_3"; }

        /**
         * Reduce by <EntityDecl@3> ::= tlparen:T_LPAREN ArraySpec:<ArraySpec> trparen:T_RPAREN  :EntityDecl_3
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EntityDecl@3> ::= tlparen:T_LPAREN ArraySpec:<ArraySpec> trparen:T_RPAREN  :EntityDecl_3
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTArraySpecNode v2 = (ASTArraySpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EntityDecl3ReductionNonterminal.getInstance(), 3);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("ArraySpec"))
                    return 1;
                else
                    if (name.equals("trparen"))
                        return 2;
                    else
                        return -1;
        }
    }
    public static final Productions.EntityDecl3Production ENTITYDECL3 = EntityDecl3Production.getInstance();

    public static class EntityDecl4Production extends Production
    {
        private EntityDecl4Production() {;} // Singleton
        private static EntityDecl4Production singletonInstance = null;
        public static final EntityDecl4Production getInstance() { if (singletonInstance == null) singletonInstance = new EntityDecl4Production(); return singletonInstance; }

        public String getDescription() { return "<EntityDecl@4> ::= tasterisk:T_ASTERISK CharLength:<CharLength>  :EntityDecl_4"; }

        /**
         * Reduce by <EntityDecl@4> ::= tasterisk:T_ASTERISK CharLength:<CharLength>  :EntityDecl_4
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EntityDecl@4> ::= tasterisk:T_ASTERISK CharLength:<CharLength>  :EntityDecl_4
            ASTCharLengthNode v2 = (ASTCharLengthNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.EntityDecl4ReductionNonterminal.getInstance(), 2);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tasterisk"))
                return 0;
            else
                if (name.equals("CharLength"))
                    return 1;
                else
                    return -1;
        }
    }
    public static final Productions.EntityDecl4Production ENTITYDECL4 = EntityDecl4Production.getInstance();

    public static class EntityDecl5Production extends Production
    {
        private EntityDecl5Production() {;} // Singleton
        private static EntityDecl5Production singletonInstance = null;
        public static final EntityDecl5Production getInstance() { if (singletonInstance == null) singletonInstance = new EntityDecl5Production(); return singletonInstance; }

        public String getDescription() { return "<EntityDecl@5> ::= Initialization:<Initialization>  :EntityDecl_5"; }

        /**
         * Reduce by <EntityDecl@5> ::= Initialization:<Initialization>  :EntityDecl_5
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EntityDecl@5> ::= Initialization:<Initialization>  :EntityDecl_5
            ASTInitializationNode v1 = (ASTInitializationNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.EntityDecl5ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Initialization"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.EntityDecl5Production ENTITYDECL5 = EntityDecl5Production.getInstance();

    public static class InvalidEntityDecl6Production extends Production
    {
        private InvalidEntityDecl6Production() {;} // Singleton
        private static InvalidEntityDecl6Production singletonInstance = null;
        public static final InvalidEntityDecl6Production getInstance() { if (singletonInstance == null) singletonInstance = new InvalidEntityDecl6Production(); return singletonInstance; }

        public String getDescription() { return "<InvalidEntityDecl@6> ::= Initialization:<Initialization>  :InvalidEntityDecl_6"; }

        /**
         * Reduce by <InvalidEntityDecl@6> ::= Initialization:<Initialization>  :InvalidEntityDecl_6
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <InvalidEntityDecl@6> ::= Initialization:<Initialization>  :InvalidEntityDecl_6
            ASTInitializationNode v1 = (ASTInitializationNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.InvalidEntityDecl6ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Initialization"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.InvalidEntityDecl6Production INVALIDENTITYDECL6 = InvalidEntityDecl6Production.getInstance();

    public static class IntentStmt7Production extends Production
    {
        private IntentStmt7Production() {;} // Singleton
        private static IntentStmt7Production singletonInstance = null;
        public static final IntentStmt7Production getInstance() { if (singletonInstance == null) singletonInstance = new IntentStmt7Production(); return singletonInstance; }

        public String getDescription() { return "<IntentStmt@7> ::= tcolon:T_COLON tcolon2:T_COLON  :IntentStmt_7"; }

        /**
         * Reduce by <IntentStmt@7> ::= tcolon:T_COLON tcolon2:T_COLON  :IntentStmt_7
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <IntentStmt@7> ::= tcolon:T_COLON tcolon2:T_COLON  :IntentStmt_7
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.IntentStmt7ReductionNonterminal.getInstance(), 2);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tcolon"))
                return 0;
            else
                if (name.equals("tcolon2"))
                    return 1;
                else
                    return -1;
        }
    }
    public static final Productions.IntentStmt7Production INTENTSTMT7 = IntentStmt7Production.getInstance();

    public static class OptionalStmt8Production extends Production
    {
        private OptionalStmt8Production() {;} // Singleton
        private static OptionalStmt8Production singletonInstance = null;
        public static final OptionalStmt8Production getInstance() { if (singletonInstance == null) singletonInstance = new OptionalStmt8Production(); return singletonInstance; }

        public String getDescription() { return "<OptionalStmt@8> ::= tcolon:T_COLON tcolon2:T_COLON  :OptionalStmt_8"; }

        /**
         * Reduce by <OptionalStmt@8> ::= tcolon:T_COLON tcolon2:T_COLON  :OptionalStmt_8
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <OptionalStmt@8> ::= tcolon:T_COLON tcolon2:T_COLON  :OptionalStmt_8
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.OptionalStmt8ReductionNonterminal.getInstance(), 2);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tcolon"))
                return 0;
            else
                if (name.equals("tcolon2"))
                    return 1;
                else
                    return -1;
        }
    }
    public static final Productions.OptionalStmt8Production OPTIONALSTMT8 = OptionalStmt8Production.getInstance();

    public static class AccessStmt9Production extends Production
    {
        private AccessStmt9Production() {;} // Singleton
        private static AccessStmt9Production singletonInstance = null;
        public static final AccessStmt9Production getInstance() { if (singletonInstance == null) singletonInstance = new AccessStmt9Production(); return singletonInstance; }

        public String getDescription() { return "<AccessStmt@9> ::= tcolon:T_COLON tcolon2:T_COLON  :AccessStmt_9"; }

        /**
         * Reduce by <AccessStmt@9> ::= tcolon:T_COLON tcolon2:T_COLON  :AccessStmt_9
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AccessStmt@9> ::= tcolon:T_COLON tcolon2:T_COLON  :AccessStmt_9
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.AccessStmt9ReductionNonterminal.getInstance(), 2);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tcolon"))
                return 0;
            else
                if (name.equals("tcolon2"))
                    return 1;
                else
                    return -1;
        }
    }
    public static final Productions.AccessStmt9Production ACCESSSTMT9 = AccessStmt9Production.getInstance();

    public static class SaveStmt10Production extends Production
    {
        private SaveStmt10Production() {;} // Singleton
        private static SaveStmt10Production singletonInstance = null;
        public static final SaveStmt10Production getInstance() { if (singletonInstance == null) singletonInstance = new SaveStmt10Production(); return singletonInstance; }

        public String getDescription() { return "<SaveStmt@10> ::= tcolon:T_COLON tcolon2:T_COLON  :SaveStmt_10"; }

        /**
         * Reduce by <SaveStmt@10> ::= tcolon:T_COLON tcolon2:T_COLON  :SaveStmt_10
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SaveStmt@10> ::= tcolon:T_COLON tcolon2:T_COLON  :SaveStmt_10
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.SaveStmt10ReductionNonterminal.getInstance(), 2);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tcolon"))
                return 0;
            else
                if (name.equals("tcolon2"))
                    return 1;
                else
                    return -1;
        }
    }
    public static final Productions.SaveStmt10Production SAVESTMT10 = SaveStmt10Production.getInstance();

    public static class DimensionStmt11Production extends Production
    {
        private DimensionStmt11Production() {;} // Singleton
        private static DimensionStmt11Production singletonInstance = null;
        public static final DimensionStmt11Production getInstance() { if (singletonInstance == null) singletonInstance = new DimensionStmt11Production(); return singletonInstance; }

        public String getDescription() { return "<DimensionStmt@11> ::= tcolon:T_COLON tcolon2:T_COLON  :DimensionStmt_11"; }

        /**
         * Reduce by <DimensionStmt@11> ::= tcolon:T_COLON tcolon2:T_COLON  :DimensionStmt_11
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DimensionStmt@11> ::= tcolon:T_COLON tcolon2:T_COLON  :DimensionStmt_11
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.DimensionStmt11ReductionNonterminal.getInstance(), 2);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tcolon"))
                return 0;
            else
                if (name.equals("tcolon2"))
                    return 1;
                else
                    return -1;
        }
    }
    public static final Productions.DimensionStmt11Production DIMENSIONSTMT11 = DimensionStmt11Production.getInstance();

    public static class AllocatableStmt12Production extends Production
    {
        private AllocatableStmt12Production() {;} // Singleton
        private static AllocatableStmt12Production singletonInstance = null;
        public static final AllocatableStmt12Production getInstance() { if (singletonInstance == null) singletonInstance = new AllocatableStmt12Production(); return singletonInstance; }

        public String getDescription() { return "<AllocatableStmt@12> ::= tcolon:T_COLON tcolon2:T_COLON  :AllocatableStmt_12"; }

        /**
         * Reduce by <AllocatableStmt@12> ::= tcolon:T_COLON tcolon2:T_COLON  :AllocatableStmt_12
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AllocatableStmt@12> ::= tcolon:T_COLON tcolon2:T_COLON  :AllocatableStmt_12
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.AllocatableStmt12ReductionNonterminal.getInstance(), 2);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tcolon"))
                return 0;
            else
                if (name.equals("tcolon2"))
                    return 1;
                else
                    return -1;
        }
    }
    public static final Productions.AllocatableStmt12Production ALLOCATABLESTMT12 = AllocatableStmt12Production.getInstance();

    public static class PointerStmt13Production extends Production
    {
        private PointerStmt13Production() {;} // Singleton
        private static PointerStmt13Production singletonInstance = null;
        public static final PointerStmt13Production getInstance() { if (singletonInstance == null) singletonInstance = new PointerStmt13Production(); return singletonInstance; }

        public String getDescription() { return "<PointerStmt@13> ::= tcolon:T_COLON tcolon2:T_COLON  :PointerStmt_13"; }

        /**
         * Reduce by <PointerStmt@13> ::= tcolon:T_COLON tcolon2:T_COLON  :PointerStmt_13
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <PointerStmt@13> ::= tcolon:T_COLON tcolon2:T_COLON  :PointerStmt_13
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.PointerStmt13ReductionNonterminal.getInstance(), 2);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tcolon"))
                return 0;
            else
                if (name.equals("tcolon2"))
                    return 1;
                else
                    return -1;
        }
    }
    public static final Productions.PointerStmt13Production POINTERSTMT13 = PointerStmt13Production.getInstance();

    public static class TargetStmt14Production extends Production
    {
        private TargetStmt14Production() {;} // Singleton
        private static TargetStmt14Production singletonInstance = null;
        public static final TargetStmt14Production getInstance() { if (singletonInstance == null) singletonInstance = new TargetStmt14Production(); return singletonInstance; }

        public String getDescription() { return "<TargetStmt@14> ::= tcolon:T_COLON tcolon2:T_COLON  :TargetStmt_14"; }

        /**
         * Reduce by <TargetStmt@14> ::= tcolon:T_COLON tcolon2:T_COLON  :TargetStmt_14
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <TargetStmt@14> ::= tcolon:T_COLON tcolon2:T_COLON  :TargetStmt_14
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.TargetStmt14ReductionNonterminal.getInstance(), 2);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tcolon"))
                return 0;
            else
                if (name.equals("tcolon2"))
                    return 1;
                else
                    return -1;
        }
    }
    public static final Productions.TargetStmt14Production TARGETSTMT14 = TargetStmt14Production.getInstance();

    public static class Variable15Production extends Production
    {
        private Variable15Production() {;} // Singleton
        private static Variable15Production singletonInstance = null;
        public static final Variable15Production getInstance() { if (singletonInstance == null) singletonInstance = new Variable15Production(); return singletonInstance; }

        public String getDescription() { return "<Variable@15> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :Variable_15"; }

        /**
         * Reduce by <Variable@15> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :Variable_15
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Variable@15> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :Variable_15
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v2 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.Variable15ReductionNonterminal.getInstance(), 3);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("SectionSubscriptList"))
                    return 1;
                else
                    if (name.equals("trparen"))
                        return 2;
                    else
                        return -1;
        }
    }
    public static final Productions.Variable15Production VARIABLE15 = Variable15Production.getInstance();

    public static class Variable152Production extends Production
    {
        private Variable152Production() {;} // Singleton
        private static Variable152Production singletonInstance = null;
        public static final Variable152Production getInstance() { if (singletonInstance == null) singletonInstance = new Variable152Production(); return singletonInstance; }

        public String getDescription() { return "<Variable@15> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN <Variable@16>  :Variable_152"; }

        /**
         * Reduce by <Variable@15> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN <Variable@16>  :Variable_152
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Variable@15> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN <Variable@16>  :Variable_152
            ASTSubstringRangeNode v4 = (ASTSubstringRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v2 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.Variable15ReductionNonterminal.getInstance(), 4);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("SectionSubscriptList"))
                    return 1;
                else
                    if (name.equals("trparen"))
                        return 2;
                    else
                        if (name.equals("SubstringRange"))
                            return 3;
                        else
                            return -1;
        }
    }
    public static final Productions.Variable152Production VARIABLE152 = Variable152Production.getInstance();

    public static class Variable16Production extends Production
    {
        private Variable16Production() {;} // Singleton
        private static Variable16Production singletonInstance = null;
        public static final Variable16Production getInstance() { if (singletonInstance == null) singletonInstance = new Variable16Production(); return singletonInstance; }

        public String getDescription() { return "<Variable@16> ::= SubstringRange:<SubstringRange>  :Variable_16"; }

        /**
         * Reduce by <Variable@16> ::= SubstringRange:<SubstringRange>  :Variable_16
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Variable@16> ::= SubstringRange:<SubstringRange>  :Variable_16
            ASTSubstringRangeNode v1 = (ASTSubstringRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.Variable16ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SubstringRange"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.Variable16Production VARIABLE16 = Variable16Production.getInstance();

    public static class DataRef17Production extends Production
    {
        private DataRef17Production() {;} // Singleton
        private static DataRef17Production singletonInstance = null;
        public static final DataRef17Production getInstance() { if (singletonInstance == null) singletonInstance = new DataRef17Production(); return singletonInstance; }

        public String getDescription() { return "<DataRef@17> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :DataRef_17"; }

        /**
         * Reduce by <DataRef@17> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :DataRef_17
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <DataRef@17> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :DataRef_17
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v2 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.DataRef17ReductionNonterminal.getInstance(), 3);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("SectionSubscriptList"))
                    return 1;
                else
                    if (name.equals("trparen"))
                        return 2;
                    else
                        return -1;
        }
    }
    public static final Productions.DataRef17Production DATAREF17 = DataRef17Production.getInstance();

    public static class SFDataRef18Production extends Production
    {
        private SFDataRef18Production() {;} // Singleton
        private static SFDataRef18Production singletonInstance = null;
        public static final SFDataRef18Production getInstance() { if (singletonInstance == null) singletonInstance = new SFDataRef18Production(); return singletonInstance; }

        public String getDescription() { return "<SFDataRef@18> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :SFDataRef_18"; }

        /**
         * Reduce by <SFDataRef@18> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :SFDataRef_18
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SFDataRef@18> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :SFDataRef_18
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v2 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.SFDataRef18ReductionNonterminal.getInstance(), 3);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("SectionSubscriptList"))
                    return 1;
                else
                    if (name.equals("trparen"))
                        return 2;
                    else
                        return -1;
        }
    }
    public static final Productions.SFDataRef18Production SFDATAREF18 = SFDataRef18Production.getInstance();

    public static class Primary19Production extends Production
    {
        private Primary19Production() {;} // Singleton
        private static Primary19Production singletonInstance = null;
        public static final Primary19Production getInstance() { if (singletonInstance == null) singletonInstance = new Primary19Production(); return singletonInstance; }

        public String getDescription() { return "<Primary@19> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :Primary_19"; }

        /**
         * Reduce by <Primary@19> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :Primary_19
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Primary@19> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :Primary_19
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v2 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.Primary19ReductionNonterminal.getInstance(), 3);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("SectionSubscriptList"))
                    return 1;
                else
                    if (name.equals("trparen"))
                        return 2;
                    else
                        return -1;
        }
    }
    public static final Productions.Primary19Production PRIMARY19 = Primary19Production.getInstance();

    public static class Primary192Production extends Production
    {
        private Primary192Production() {;} // Singleton
        private static Primary192Production singletonInstance = null;
        public static final Primary192Production getInstance() { if (singletonInstance == null) singletonInstance = new Primary192Production(); return singletonInstance; }

        public String getDescription() { return "<Primary@19> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN <Primary@20>  :Primary_192"; }

        /**
         * Reduce by <Primary@19> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN <Primary@20>  :Primary_192
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Primary@19> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN <Primary@20>  :Primary_192
            ASTSubstringRangeNode v4 = (ASTSubstringRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v2 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.Primary19ReductionNonterminal.getInstance(), 4);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("SectionSubscriptList"))
                    return 1;
                else
                    if (name.equals("trparen"))
                        return 2;
                    else
                        if (name.equals("SubstringRange"))
                            return 3;
                        else
                            return -1;
        }
    }
    public static final Productions.Primary192Production PRIMARY192 = Primary192Production.getInstance();

    public static class Primary20Production extends Production
    {
        private Primary20Production() {;} // Singleton
        private static Primary20Production singletonInstance = null;
        public static final Primary20Production getInstance() { if (singletonInstance == null) singletonInstance = new Primary20Production(); return singletonInstance; }

        public String getDescription() { return "<Primary@20> ::= SubstringRange:<SubstringRange>  :Primary_20"; }

        /**
         * Reduce by <Primary@20> ::= SubstringRange:<SubstringRange>  :Primary_20
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Primary@20> ::= SubstringRange:<SubstringRange>  :Primary_20
            ASTSubstringRangeNode v1 = (ASTSubstringRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.Primary20ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SubstringRange"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.Primary20Production PRIMARY20 = Primary20Production.getInstance();

    public static class Primary21Production extends Production
    {
        private Primary21Production() {;} // Singleton
        private static Primary21Production singletonInstance = null;
        public static final Primary21Production getInstance() { if (singletonInstance == null) singletonInstance = new Primary21Production(); return singletonInstance; }

        public String getDescription() { return "<Primary@21> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :Primary_21"; }

        /**
         * Reduce by <Primary@21> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :Primary_21
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Primary@21> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :Primary_21
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v2 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.Primary21ReductionNonterminal.getInstance(), 3);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("SectionSubscriptList"))
                    return 1;
                else
                    if (name.equals("trparen"))
                        return 2;
                    else
                        return -1;
        }
    }
    public static final Productions.Primary21Production PRIMARY21 = Primary21Production.getInstance();

    public static class Primary212Production extends Production
    {
        private Primary212Production() {;} // Singleton
        private static Primary212Production singletonInstance = null;
        public static final Primary212Production getInstance() { if (singletonInstance == null) singletonInstance = new Primary212Production(); return singletonInstance; }

        public String getDescription() { return "<Primary@21> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN <Primary@22>  :Primary_212"; }

        /**
         * Reduce by <Primary@21> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN <Primary@22>  :Primary_212
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Primary@21> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN <Primary@22>  :Primary_212
            ASTSubstringRangeNode v4 = (ASTSubstringRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v2 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.Primary21ReductionNonterminal.getInstance(), 4);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("SectionSubscriptList"))
                    return 1;
                else
                    if (name.equals("trparen"))
                        return 2;
                    else
                        if (name.equals("SubstringRange"))
                            return 3;
                        else
                            return -1;
        }
    }
    public static final Productions.Primary212Production PRIMARY212 = Primary212Production.getInstance();

    public static class Primary22Production extends Production
    {
        private Primary22Production() {;} // Singleton
        private static Primary22Production singletonInstance = null;
        public static final Primary22Production getInstance() { if (singletonInstance == null) singletonInstance = new Primary22Production(); return singletonInstance; }

        public String getDescription() { return "<Primary@22> ::= SubstringRange:<SubstringRange>  :Primary_22"; }

        /**
         * Reduce by <Primary@22> ::= SubstringRange:<SubstringRange>  :Primary_22
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Primary@22> ::= SubstringRange:<SubstringRange>  :Primary_22
            ASTSubstringRangeNode v1 = (ASTSubstringRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.Primary22ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SubstringRange"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.Primary22Production PRIMARY22 = Primary22Production.getInstance();

    public static class Primary23Production extends Production
    {
        private Primary23Production() {;} // Singleton
        private static Primary23Production singletonInstance = null;
        public static final Primary23Production getInstance() { if (singletonInstance == null) singletonInstance = new Primary23Production(); return singletonInstance; }

        public String getDescription() { return "<Primary@23> ::= tlparen2:T_LPAREN SectionSubscriptList2:<SectionSubscriptList> trparen2:T_RPAREN  :Primary_23"; }

        /**
         * Reduce by <Primary@23> ::= tlparen2:T_LPAREN SectionSubscriptList2:<SectionSubscriptList> trparen2:T_RPAREN  :Primary_23
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Primary@23> ::= tlparen2:T_LPAREN SectionSubscriptList2:<SectionSubscriptList> trparen2:T_RPAREN  :Primary_23
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v2 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.Primary23ReductionNonterminal.getInstance(), 3);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen2"))
                return 0;
            else
                if (name.equals("SectionSubscriptList2"))
                    return 1;
                else
                    if (name.equals("trparen2"))
                        return 2;
                    else
                        return -1;
        }
    }
    public static final Productions.Primary23Production PRIMARY23 = Primary23Production.getInstance();

    public static class Primary232Production extends Production
    {
        private Primary232Production() {;} // Singleton
        private static Primary232Production singletonInstance = null;
        public static final Primary232Production getInstance() { if (singletonInstance == null) singletonInstance = new Primary232Production(); return singletonInstance; }

        public String getDescription() { return "<Primary@23> ::= tlparen2:T_LPAREN SectionSubscriptList2:<SectionSubscriptList> trparen2:T_RPAREN <Primary@24>  :Primary_232"; }

        /**
         * Reduce by <Primary@23> ::= tlparen2:T_LPAREN SectionSubscriptList2:<SectionSubscriptList> trparen2:T_RPAREN <Primary@24>  :Primary_232
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Primary@23> ::= tlparen2:T_LPAREN SectionSubscriptList2:<SectionSubscriptList> trparen2:T_RPAREN <Primary@24>  :Primary_232
            ASTSubstringRangeNode v4 = (ASTSubstringRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v2 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.Primary23ReductionNonterminal.getInstance(), 4);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen2"))
                return 0;
            else
                if (name.equals("SectionSubscriptList2"))
                    return 1;
                else
                    if (name.equals("trparen2"))
                        return 2;
                    else
                        if (name.equals("SubstringRange"))
                            return 3;
                        else
                            return -1;
        }
    }
    public static final Productions.Primary232Production PRIMARY232 = Primary232Production.getInstance();

    public static class Primary24Production extends Production
    {
        private Primary24Production() {;} // Singleton
        private static Primary24Production singletonInstance = null;
        public static final Primary24Production getInstance() { if (singletonInstance == null) singletonInstance = new Primary24Production(); return singletonInstance; }

        public String getDescription() { return "<Primary@24> ::= SubstringRange:<SubstringRange>  :Primary_24"; }

        /**
         * Reduce by <Primary@24> ::= SubstringRange:<SubstringRange>  :Primary_24
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Primary@24> ::= SubstringRange:<SubstringRange>  :Primary_24
            ASTSubstringRangeNode v1 = (ASTSubstringRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.Primary24ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SubstringRange"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.Primary24Production PRIMARY24 = Primary24Production.getInstance();

    public static class Primary25Production extends Production
    {
        private Primary25Production() {;} // Singleton
        private static Primary25Production singletonInstance = null;
        public static final Primary25Production getInstance() { if (singletonInstance == null) singletonInstance = new Primary25Production(); return singletonInstance; }

        public String getDescription() { return "<Primary@25> ::= SubstringRange:<SubstringRange>  :Primary_25"; }

        /**
         * Reduce by <Primary@25> ::= SubstringRange:<SubstringRange>  :Primary_25
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Primary@25> ::= SubstringRange:<SubstringRange>  :Primary_25
            ASTSubstringRangeNode v1 = (ASTSubstringRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.Primary25ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SubstringRange"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.Primary25Production PRIMARY25 = Primary25Production.getInstance();

    public static class Primary26Production extends Production
    {
        private Primary26Production() {;} // Singleton
        private static Primary26Production singletonInstance = null;
        public static final Primary26Production getInstance() { if (singletonInstance == null) singletonInstance = new Primary26Production(); return singletonInstance; }

        public String getDescription() { return "<Primary@26> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :Primary_26"; }

        /**
         * Reduce by <Primary@26> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :Primary_26
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Primary@26> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :Primary_26
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v2 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.Primary26ReductionNonterminal.getInstance(), 3);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("SectionSubscriptList"))
                    return 1;
                else
                    if (name.equals("trparen"))
                        return 2;
                    else
                        return -1;
        }
    }
    public static final Productions.Primary26Production PRIMARY26 = Primary26Production.getInstance();

    public static class Primary262Production extends Production
    {
        private Primary262Production() {;} // Singleton
        private static Primary262Production singletonInstance = null;
        public static final Primary262Production getInstance() { if (singletonInstance == null) singletonInstance = new Primary262Production(); return singletonInstance; }

        public String getDescription() { return "<Primary@26> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN <Primary@27>  :Primary_262"; }

        /**
         * Reduce by <Primary@26> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN <Primary@27>  :Primary_262
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Primary@26> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN <Primary@27>  :Primary_262
            ASTSubstringRangeNode v4 = (ASTSubstringRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v2 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.Primary26ReductionNonterminal.getInstance(), 4);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("SectionSubscriptList"))
                    return 1;
                else
                    if (name.equals("trparen"))
                        return 2;
                    else
                        if (name.equals("SubstringRange"))
                            return 3;
                        else
                            return -1;
        }
    }
    public static final Productions.Primary262Production PRIMARY262 = Primary262Production.getInstance();

    public static class Primary27Production extends Production
    {
        private Primary27Production() {;} // Singleton
        private static Primary27Production singletonInstance = null;
        public static final Primary27Production getInstance() { if (singletonInstance == null) singletonInstance = new Primary27Production(); return singletonInstance; }

        public String getDescription() { return "<Primary@27> ::= SubstringRange:<SubstringRange>  :Primary_27"; }

        /**
         * Reduce by <Primary@27> ::= SubstringRange:<SubstringRange>  :Primary_27
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Primary@27> ::= SubstringRange:<SubstringRange>  :Primary_27
            ASTSubstringRangeNode v1 = (ASTSubstringRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.Primary27ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SubstringRange"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.Primary27Production PRIMARY27 = Primary27Production.getInstance();

    public static class COperand28Production extends Production
    {
        private COperand28Production() {;} // Singleton
        private static COperand28Production singletonInstance = null;
        public static final COperand28Production getInstance() { if (singletonInstance == null) singletonInstance = new COperand28Production(); return singletonInstance; }

        public String getDescription() { return "<COperand@28> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :COperand_28"; }

        /**
         * Reduce by <COperand@28> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :COperand_28
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <COperand@28> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :COperand_28
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v2 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.COperand28ReductionNonterminal.getInstance(), 3);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("SectionSubscriptList"))
                    return 1;
                else
                    if (name.equals("trparen"))
                        return 2;
                    else
                        return -1;
        }
    }
    public static final Productions.COperand28Production COPERAND28 = COperand28Production.getInstance();

    public static class COperand29Production extends Production
    {
        private COperand29Production() {;} // Singleton
        private static COperand29Production singletonInstance = null;
        public static final COperand29Production getInstance() { if (singletonInstance == null) singletonInstance = new COperand29Production(); return singletonInstance; }

        public String getDescription() { return "<COperand@29> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :COperand_29"; }

        /**
         * Reduce by <COperand@29> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :COperand_29
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <COperand@29> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :COperand_29
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v2 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.COperand29ReductionNonterminal.getInstance(), 3);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("SectionSubscriptList"))
                    return 1;
                else
                    if (name.equals("trparen"))
                        return 2;
                    else
                        return -1;
        }
    }
    public static final Productions.COperand29Production COPERAND29 = COperand29Production.getInstance();

    public static class COperand30Production extends Production
    {
        private COperand30Production() {;} // Singleton
        private static COperand30Production singletonInstance = null;
        public static final COperand30Production getInstance() { if (singletonInstance == null) singletonInstance = new COperand30Production(); return singletonInstance; }

        public String getDescription() { return "<COperand@30> ::= tlparen2:T_LPAREN SectionSubscriptList2:<SectionSubscriptList> trparen2:T_RPAREN  :COperand_30"; }

        /**
         * Reduce by <COperand@30> ::= tlparen2:T_LPAREN SectionSubscriptList2:<SectionSubscriptList> trparen2:T_RPAREN  :COperand_30
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <COperand@30> ::= tlparen2:T_LPAREN SectionSubscriptList2:<SectionSubscriptList> trparen2:T_RPAREN  :COperand_30
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v2 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.COperand30ReductionNonterminal.getInstance(), 3);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen2"))
                return 0;
            else
                if (name.equals("SectionSubscriptList2"))
                    return 1;
                else
                    if (name.equals("trparen2"))
                        return 2;
                    else
                        return -1;
        }
    }
    public static final Productions.COperand30Production COPERAND30 = COperand30Production.getInstance();

    public static class UFPrimary31Production extends Production
    {
        private UFPrimary31Production() {;} // Singleton
        private static UFPrimary31Production singletonInstance = null;
        public static final UFPrimary31Production getInstance() { if (singletonInstance == null) singletonInstance = new UFPrimary31Production(); return singletonInstance; }

        public String getDescription() { return "<UFPrimary@31> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :UFPrimary_31"; }

        /**
         * Reduce by <UFPrimary@31> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :UFPrimary_31
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UFPrimary@31> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :UFPrimary_31
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v2 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.UFPrimary31ReductionNonterminal.getInstance(), 3);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("SectionSubscriptList"))
                    return 1;
                else
                    if (name.equals("trparen"))
                        return 2;
                    else
                        return -1;
        }
    }
    public static final Productions.UFPrimary31Production UFPRIMARY31 = UFPrimary31Production.getInstance();

    public static class UFPrimary312Production extends Production
    {
        private UFPrimary312Production() {;} // Singleton
        private static UFPrimary312Production singletonInstance = null;
        public static final UFPrimary312Production getInstance() { if (singletonInstance == null) singletonInstance = new UFPrimary312Production(); return singletonInstance; }

        public String getDescription() { return "<UFPrimary@31> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN <UFPrimary@32>  :UFPrimary_312"; }

        /**
         * Reduce by <UFPrimary@31> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN <UFPrimary@32>  :UFPrimary_312
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UFPrimary@31> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN <UFPrimary@32>  :UFPrimary_312
            ASTSubstringRangeNode v4 = (ASTSubstringRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v2 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.UFPrimary31ReductionNonterminal.getInstance(), 4);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("SectionSubscriptList"))
                    return 1;
                else
                    if (name.equals("trparen"))
                        return 2;
                    else
                        if (name.equals("SubstringRange"))
                            return 3;
                        else
                            return -1;
        }
    }
    public static final Productions.UFPrimary312Production UFPRIMARY312 = UFPrimary312Production.getInstance();

    public static class UFPrimary32Production extends Production
    {
        private UFPrimary32Production() {;} // Singleton
        private static UFPrimary32Production singletonInstance = null;
        public static final UFPrimary32Production getInstance() { if (singletonInstance == null) singletonInstance = new UFPrimary32Production(); return singletonInstance; }

        public String getDescription() { return "<UFPrimary@32> ::= SubstringRange:<SubstringRange>  :UFPrimary_32"; }

        /**
         * Reduce by <UFPrimary@32> ::= SubstringRange:<SubstringRange>  :UFPrimary_32
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UFPrimary@32> ::= SubstringRange:<SubstringRange>  :UFPrimary_32
            ASTSubstringRangeNode v1 = (ASTSubstringRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.UFPrimary32ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SubstringRange"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.UFPrimary32Production UFPRIMARY32 = UFPrimary32Production.getInstance();

    public static class UFPrimary33Production extends Production
    {
        private UFPrimary33Production() {;} // Singleton
        private static UFPrimary33Production singletonInstance = null;
        public static final UFPrimary33Production getInstance() { if (singletonInstance == null) singletonInstance = new UFPrimary33Production(); return singletonInstance; }

        public String getDescription() { return "<UFPrimary@33> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :UFPrimary_33"; }

        /**
         * Reduce by <UFPrimary@33> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :UFPrimary_33
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UFPrimary@33> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :UFPrimary_33
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v2 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.UFPrimary33ReductionNonterminal.getInstance(), 3);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("SectionSubscriptList"))
                    return 1;
                else
                    if (name.equals("trparen"))
                        return 2;
                    else
                        return -1;
        }
    }
    public static final Productions.UFPrimary33Production UFPRIMARY33 = UFPrimary33Production.getInstance();

    public static class UFPrimary34Production extends Production
    {
        private UFPrimary34Production() {;} // Singleton
        private static UFPrimary34Production singletonInstance = null;
        public static final UFPrimary34Production getInstance() { if (singletonInstance == null) singletonInstance = new UFPrimary34Production(); return singletonInstance; }

        public String getDescription() { return "<UFPrimary@34> ::= tlparen2:T_LPAREN SectionSubscriptList2:<SectionSubscriptList> trparen2:T_RPAREN  :UFPrimary_34"; }

        /**
         * Reduce by <UFPrimary@34> ::= tlparen2:T_LPAREN SectionSubscriptList2:<SectionSubscriptList> trparen2:T_RPAREN  :UFPrimary_34
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UFPrimary@34> ::= tlparen2:T_LPAREN SectionSubscriptList2:<SectionSubscriptList> trparen2:T_RPAREN  :UFPrimary_34
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v2 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.UFPrimary34ReductionNonterminal.getInstance(), 3);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen2"))
                return 0;
            else
                if (name.equals("SectionSubscriptList2"))
                    return 1;
                else
                    if (name.equals("trparen2"))
                        return 2;
                    else
                        return -1;
        }
    }
    public static final Productions.UFPrimary34Production UFPRIMARY34 = UFPrimary34Production.getInstance();

    public static class UFPrimary342Production extends Production
    {
        private UFPrimary342Production() {;} // Singleton
        private static UFPrimary342Production singletonInstance = null;
        public static final UFPrimary342Production getInstance() { if (singletonInstance == null) singletonInstance = new UFPrimary342Production(); return singletonInstance; }

        public String getDescription() { return "<UFPrimary@34> ::= tlparen2:T_LPAREN SectionSubscriptList2:<SectionSubscriptList> trparen2:T_RPAREN <UFPrimary@35>  :UFPrimary_342"; }

        /**
         * Reduce by <UFPrimary@34> ::= tlparen2:T_LPAREN SectionSubscriptList2:<SectionSubscriptList> trparen2:T_RPAREN <UFPrimary@35>  :UFPrimary_342
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UFPrimary@34> ::= tlparen2:T_LPAREN SectionSubscriptList2:<SectionSubscriptList> trparen2:T_RPAREN <UFPrimary@35>  :UFPrimary_342
            ASTSubstringRangeNode v4 = (ASTSubstringRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v2 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.UFPrimary34ReductionNonterminal.getInstance(), 4);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen2"))
                return 0;
            else
                if (name.equals("SectionSubscriptList2"))
                    return 1;
                else
                    if (name.equals("trparen2"))
                        return 2;
                    else
                        if (name.equals("SubstringRange"))
                            return 3;
                        else
                            return -1;
        }
    }
    public static final Productions.UFPrimary342Production UFPRIMARY342 = UFPrimary342Production.getInstance();

    public static class UFPrimary35Production extends Production
    {
        private UFPrimary35Production() {;} // Singleton
        private static UFPrimary35Production singletonInstance = null;
        public static final UFPrimary35Production getInstance() { if (singletonInstance == null) singletonInstance = new UFPrimary35Production(); return singletonInstance; }

        public String getDescription() { return "<UFPrimary@35> ::= SubstringRange:<SubstringRange>  :UFPrimary_35"; }

        /**
         * Reduce by <UFPrimary@35> ::= SubstringRange:<SubstringRange>  :UFPrimary_35
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UFPrimary@35> ::= SubstringRange:<SubstringRange>  :UFPrimary_35
            ASTSubstringRangeNode v1 = (ASTSubstringRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.UFPrimary35ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SubstringRange"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.UFPrimary35Production UFPRIMARY35 = UFPrimary35Production.getInstance();

    public static class MultOperand36Production extends Production
    {
        private MultOperand36Production() {;} // Singleton
        private static MultOperand36Production singletonInstance = null;
        public static final MultOperand36Production getInstance() { if (singletonInstance == null) singletonInstance = new MultOperand36Production(); return singletonInstance; }

        public String getDescription() { return "<MultOperand@36> ::= PowerOp:<PowerOp> MultOperand:<MultOperand>  :MultOperand_36"; }

        /**
         * Reduce by <MultOperand@36> ::= PowerOp:<PowerOp> MultOperand:<MultOperand>  :MultOperand_36
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <MultOperand@36> ::= PowerOp:<PowerOp> MultOperand:<MultOperand>  :MultOperand_36
            ASTMultOperandNode v2 = (ASTMultOperandNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTPowerOpNode v1 = (ASTPowerOpNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.MultOperand36ReductionNonterminal.getInstance(), 2);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("PowerOp"))
                return 0;
            else
                if (name.equals("MultOperand"))
                    return 1;
                else
                    return -1;
        }
    }
    public static final Productions.MultOperand36Production MULTOPERAND36 = MultOperand36Production.getInstance();

    public static class UFFactor37Production extends Production
    {
        private UFFactor37Production() {;} // Singleton
        private static UFFactor37Production singletonInstance = null;
        public static final UFFactor37Production getInstance() { if (singletonInstance == null) singletonInstance = new UFFactor37Production(); return singletonInstance; }

        public String getDescription() { return "<UFFactor@37> ::= PowerOp:<PowerOp> UFFactor:<UFFactor>  :UFFactor_37"; }

        /**
         * Reduce by <UFFactor@37> ::= PowerOp:<PowerOp> UFFactor:<UFFactor>  :UFFactor_37
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UFFactor@37> ::= PowerOp:<PowerOp> UFFactor:<UFFactor>  :UFFactor_37
            ASTUFFactorNode v2 = (ASTUFFactorNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTPowerOpNode v1 = (ASTPowerOpNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.UFFactor37ReductionNonterminal.getInstance(), 2);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("PowerOp"))
                return 0;
            else
                if (name.equals("UFFactor"))
                    return 1;
                else
                    return -1;
        }
    }
    public static final Productions.UFFactor37Production UFFACTOR37 = UFFactor37Production.getInstance();

    public static class AddOperand38Production extends Production
    {
        private AddOperand38Production() {;} // Singleton
        private static AddOperand38Production singletonInstance = null;
        public static final AddOperand38Production getInstance() { if (singletonInstance == null) singletonInstance = new AddOperand38Production(); return singletonInstance; }

        public String getDescription() { return "<AddOperand@38> ::= AddOperand:<AddOperand> MultOp:<MultOp>  :AddOperand_38"; }

        /**
         * Reduce by <AddOperand@38> ::= AddOperand:<AddOperand> MultOp:<MultOp>  :AddOperand_38
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AddOperand@38> ::= AddOperand:<AddOperand> MultOp:<MultOp>  :AddOperand_38
            ASTMultOpNode v2 = (ASTMultOpNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTAddOperandNode v1 = (ASTAddOperandNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.AddOperand38ReductionNonterminal.getInstance(), 2);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("AddOperand"))
                return 0;
            else
                if (name.equals("MultOp"))
                    return 1;
                else
                    return -1;
        }
    }
    public static final Productions.AddOperand38Production ADDOPERAND38 = AddOperand38Production.getInstance();

    public static class Level2Expr39Production extends Production
    {
        private Level2Expr39Production() {;} // Singleton
        private static Level2Expr39Production singletonInstance = null;
        public static final Level2Expr39Production getInstance() { if (singletonInstance == null) singletonInstance = new Level2Expr39Production(); return singletonInstance; }

        public String getDescription() { return "<Level2Expr@39> ::= Level2Expr:<Level2Expr> AddOp:<AddOp>  :Level2Expr_39"; }

        /**
         * Reduce by <Level2Expr@39> ::= Level2Expr:<Level2Expr> AddOp:<AddOp>  :Level2Expr_39
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Level2Expr@39> ::= Level2Expr:<Level2Expr> AddOp:<AddOp>  :Level2Expr_39
            ASTAddOpNode v2 = (ASTAddOpNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLevel2ExprNode v1 = (ASTLevel2ExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.Level2Expr39ReductionNonterminal.getInstance(), 2);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Level2Expr"))
                return 0;
            else
                if (name.equals("AddOp"))
                    return 1;
                else
                    return -1;
        }
    }
    public static final Productions.Level2Expr39Production LEVEL2EXPR39 = Level2Expr39Production.getInstance();

    public static class Level3Expr40Production extends Production
    {
        private Level3Expr40Production() {;} // Singleton
        private static Level3Expr40Production singletonInstance = null;
        public static final Level3Expr40Production getInstance() { if (singletonInstance == null) singletonInstance = new Level3Expr40Production(); return singletonInstance; }

        public String getDescription() { return "<Level3Expr@40> ::= Level3Expr:<Level3Expr> ConcatOp:<ConcatOp>  :Level3Expr_40"; }

        /**
         * Reduce by <Level3Expr@40> ::= Level3Expr:<Level3Expr> ConcatOp:<ConcatOp>  :Level3Expr_40
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Level3Expr@40> ::= Level3Expr:<Level3Expr> ConcatOp:<ConcatOp>  :Level3Expr_40
            ASTConcatOpNode v2 = (ASTConcatOpNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLevel3ExprNode v1 = (ASTLevel3ExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.Level3Expr40ReductionNonterminal.getInstance(), 2);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Level3Expr"))
                return 0;
            else
                if (name.equals("ConcatOp"))
                    return 1;
                else
                    return -1;
        }
    }
    public static final Productions.Level3Expr40Production LEVEL3EXPR40 = Level3Expr40Production.getInstance();

    public static class CExpr41Production extends Production
    {
        private CExpr41Production() {;} // Singleton
        private static CExpr41Production singletonInstance = null;
        public static final CExpr41Production getInstance() { if (singletonInstance == null) singletonInstance = new CExpr41Production(); return singletonInstance; }

        public String getDescription() { return "<CExpr@41> ::= CExpr:<CExpr> ConcatOp:<ConcatOp>  :CExpr_41"; }

        /**
         * Reduce by <CExpr@41> ::= CExpr:<CExpr> ConcatOp:<ConcatOp>  :CExpr_41
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CExpr@41> ::= CExpr:<CExpr> ConcatOp:<ConcatOp>  :CExpr_41
            ASTConcatOpNode v2 = (ASTConcatOpNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTCExprNode v1 = (ASTCExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.CExpr41ReductionNonterminal.getInstance(), 2);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("CExpr"))
                return 0;
            else
                if (name.equals("ConcatOp"))
                    return 1;
                else
                    return -1;
        }
    }
    public static final Productions.CExpr41Production CEXPR41 = CExpr41Production.getInstance();

    public static class Level4Expr42Production extends Production
    {
        private Level4Expr42Production() {;} // Singleton
        private static Level4Expr42Production singletonInstance = null;
        public static final Level4Expr42Production getInstance() { if (singletonInstance == null) singletonInstance = new Level4Expr42Production(); return singletonInstance; }

        public String getDescription() { return "<Level4Expr@42> ::= Level3Expr:<Level3Expr> RelOp:<RelOp>  :Level4Expr_42"; }

        /**
         * Reduce by <Level4Expr@42> ::= Level3Expr:<Level3Expr> RelOp:<RelOp>  :Level4Expr_42
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Level4Expr@42> ::= Level3Expr:<Level3Expr> RelOp:<RelOp>  :Level4Expr_42
            ASTRelOpNode v2 = (ASTRelOpNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLevel3ExprNode v1 = (ASTLevel3ExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.Level4Expr42ReductionNonterminal.getInstance(), 2);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Level3Expr"))
                return 0;
            else
                if (name.equals("RelOp"))
                    return 1;
                else
                    return -1;
        }
    }
    public static final Productions.Level4Expr42Production LEVEL4EXPR42 = Level4Expr42Production.getInstance();

    public static class AndOperand43Production extends Production
    {
        private AndOperand43Production() {;} // Singleton
        private static AndOperand43Production singletonInstance = null;
        public static final AndOperand43Production getInstance() { if (singletonInstance == null) singletonInstance = new AndOperand43Production(); return singletonInstance; }

        public String getDescription() { return "<AndOperand@43> ::= NotOp:<NotOp>  :AndOperand_43"; }

        /**
         * Reduce by <AndOperand@43> ::= NotOp:<NotOp>  :AndOperand_43
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AndOperand@43> ::= NotOp:<NotOp>  :AndOperand_43
            ASTNotOpNode v1 = (ASTNotOpNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.AndOperand43ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("NotOp"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.AndOperand43Production ANDOPERAND43 = AndOperand43Production.getInstance();

    public static class OrOperand44Production extends Production
    {
        private OrOperand44Production() {;} // Singleton
        private static OrOperand44Production singletonInstance = null;
        public static final OrOperand44Production getInstance() { if (singletonInstance == null) singletonInstance = new OrOperand44Production(); return singletonInstance; }

        public String getDescription() { return "<OrOperand@44> ::= OrOperand:<OrOperand> AndOp:<AndOp>  :OrOperand_44"; }

        /**
         * Reduce by <OrOperand@44> ::= OrOperand:<OrOperand> AndOp:<AndOp>  :OrOperand_44
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <OrOperand@44> ::= OrOperand:<OrOperand> AndOp:<AndOp>  :OrOperand_44
            ASTAndOpNode v2 = (ASTAndOpNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTOrOperandNode v1 = (ASTOrOperandNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.OrOperand44ReductionNonterminal.getInstance(), 2);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("OrOperand"))
                return 0;
            else
                if (name.equals("AndOp"))
                    return 1;
                else
                    return -1;
        }
    }
    public static final Productions.OrOperand44Production OROPERAND44 = OrOperand44Production.getInstance();

    public static class EquivOperand45Production extends Production
    {
        private EquivOperand45Production() {;} // Singleton
        private static EquivOperand45Production singletonInstance = null;
        public static final EquivOperand45Production getInstance() { if (singletonInstance == null) singletonInstance = new EquivOperand45Production(); return singletonInstance; }

        public String getDescription() { return "<EquivOperand@45> ::= EquivOperand:<EquivOperand> OrOp:<OrOp>  :EquivOperand_45"; }

        /**
         * Reduce by <EquivOperand@45> ::= EquivOperand:<EquivOperand> OrOp:<OrOp>  :EquivOperand_45
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EquivOperand@45> ::= EquivOperand:<EquivOperand> OrOp:<OrOp>  :EquivOperand_45
            ASTOrOpNode v2 = (ASTOrOpNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTEquivOperandNode v1 = (ASTEquivOperandNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.EquivOperand45ReductionNonterminal.getInstance(), 2);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EquivOperand"))
                return 0;
            else
                if (name.equals("OrOp"))
                    return 1;
                else
                    return -1;
        }
    }
    public static final Productions.EquivOperand45Production EQUIVOPERAND45 = EquivOperand45Production.getInstance();

    public static class Level5Expr46Production extends Production
    {
        private Level5Expr46Production() {;} // Singleton
        private static Level5Expr46Production singletonInstance = null;
        public static final Level5Expr46Production getInstance() { if (singletonInstance == null) singletonInstance = new Level5Expr46Production(); return singletonInstance; }

        public String getDescription() { return "<Level5Expr@46> ::= Level5Expr:<Level5Expr> EquivOp:<EquivOp>  :Level5Expr_46"; }

        /**
         * Reduce by <Level5Expr@46> ::= Level5Expr:<Level5Expr> EquivOp:<EquivOp>  :Level5Expr_46
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <Level5Expr@46> ::= Level5Expr:<Level5Expr> EquivOp:<EquivOp>  :Level5Expr_46
            ASTEquivOpNode v2 = (ASTEquivOpNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTLevel5ExprNode v1 = (ASTLevel5ExprNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.Level5Expr46ReductionNonterminal.getInstance(), 2);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Level5Expr"))
                return 0;
            else
                if (name.equals("EquivOp"))
                    return 1;
                else
                    return -1;
        }
    }
    public static final Productions.Level5Expr46Production LEVEL5EXPR46 = Level5Expr46Production.getInstance();

    public static class AssignmentStmt47Production extends Production
    {
        private AssignmentStmt47Production() {;} // Singleton
        private static AssignmentStmt47Production singletonInstance = null;
        public static final AssignmentStmt47Production getInstance() { if (singletonInstance == null) singletonInstance = new AssignmentStmt47Production(); return singletonInstance; }

        public String getDescription() { return "<AssignmentStmt@47> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :AssignmentStmt_47"; }

        /**
         * Reduce by <AssignmentStmt@47> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :AssignmentStmt_47
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssignmentStmt@47> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN  :AssignmentStmt_47
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v2 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.AssignmentStmt47ReductionNonterminal.getInstance(), 3);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("SectionSubscriptList"))
                    return 1;
                else
                    if (name.equals("trparen"))
                        return 2;
                    else
                        return -1;
        }
    }
    public static final Productions.AssignmentStmt47Production ASSIGNMENTSTMT47 = AssignmentStmt47Production.getInstance();

    public static class AssignmentStmt472Production extends Production
    {
        private AssignmentStmt472Production() {;} // Singleton
        private static AssignmentStmt472Production singletonInstance = null;
        public static final AssignmentStmt472Production getInstance() { if (singletonInstance == null) singletonInstance = new AssignmentStmt472Production(); return singletonInstance; }

        public String getDescription() { return "<AssignmentStmt@47> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN <AssignmentStmt@48>  :AssignmentStmt_472"; }

        /**
         * Reduce by <AssignmentStmt@47> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN <AssignmentStmt@48>  :AssignmentStmt_472
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssignmentStmt@47> ::= tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN <AssignmentStmt@48>  :AssignmentStmt_472
            ASTSubstringRangeNode v4 = (ASTSubstringRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v2 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.AssignmentStmt47ReductionNonterminal.getInstance(), 4);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("SectionSubscriptList"))
                    return 1;
                else
                    if (name.equals("trparen"))
                        return 2;
                    else
                        if (name.equals("SubstringRange"))
                            return 3;
                        else
                            return -1;
        }
    }
    public static final Productions.AssignmentStmt472Production ASSIGNMENTSTMT472 = AssignmentStmt472Production.getInstance();

    public static class AssignmentStmt48Production extends Production
    {
        private AssignmentStmt48Production() {;} // Singleton
        private static AssignmentStmt48Production singletonInstance = null;
        public static final AssignmentStmt48Production getInstance() { if (singletonInstance == null) singletonInstance = new AssignmentStmt48Production(); return singletonInstance; }

        public String getDescription() { return "<AssignmentStmt@48> ::= SubstringRange:<SubstringRange>  :AssignmentStmt_48"; }

        /**
         * Reduce by <AssignmentStmt@48> ::= SubstringRange:<SubstringRange>  :AssignmentStmt_48
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssignmentStmt@48> ::= SubstringRange:<SubstringRange>  :AssignmentStmt_48
            ASTSubstringRangeNode v1 = (ASTSubstringRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.AssignmentStmt48ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SubstringRange"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.AssignmentStmt48Production ASSIGNMENTSTMT48 = AssignmentStmt48Production.getInstance();

    public static class AssignmentStmt49Production extends Production
    {
        private AssignmentStmt49Production() {;} // Singleton
        private static AssignmentStmt49Production singletonInstance = null;
        public static final AssignmentStmt49Production getInstance() { if (singletonInstance == null) singletonInstance = new AssignmentStmt49Production(); return singletonInstance; }

        public String getDescription() { return "<AssignmentStmt@49> ::= tlparen2:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen2:T_RPAREN  :AssignmentStmt_49"; }

        /**
         * Reduce by <AssignmentStmt@49> ::= tlparen2:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen2:T_RPAREN  :AssignmentStmt_49
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssignmentStmt@49> ::= tlparen2:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen2:T_RPAREN  :AssignmentStmt_49
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v2 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.AssignmentStmt49ReductionNonterminal.getInstance(), 3);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen2"))
                return 0;
            else
                if (name.equals("SectionSubscriptList"))
                    return 1;
                else
                    if (name.equals("trparen2"))
                        return 2;
                    else
                        return -1;
        }
    }
    public static final Productions.AssignmentStmt49Production ASSIGNMENTSTMT49 = AssignmentStmt49Production.getInstance();

    public static class AssignmentStmt492Production extends Production
    {
        private AssignmentStmt492Production() {;} // Singleton
        private static AssignmentStmt492Production singletonInstance = null;
        public static final AssignmentStmt492Production getInstance() { if (singletonInstance == null) singletonInstance = new AssignmentStmt492Production(); return singletonInstance; }

        public String getDescription() { return "<AssignmentStmt@49> ::= tlparen2:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen2:T_RPAREN <AssignmentStmt@50>  :AssignmentStmt_492"; }

        /**
         * Reduce by <AssignmentStmt@49> ::= tlparen2:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen2:T_RPAREN <AssignmentStmt@50>  :AssignmentStmt_492
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssignmentStmt@49> ::= tlparen2:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen2:T_RPAREN <AssignmentStmt@50>  :AssignmentStmt_492
            ASTSubstringRangeNode v4 = (ASTSubstringRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v2 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.AssignmentStmt49ReductionNonterminal.getInstance(), 4);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen2"))
                return 0;
            else
                if (name.equals("SectionSubscriptList"))
                    return 1;
                else
                    if (name.equals("trparen2"))
                        return 2;
                    else
                        if (name.equals("SubstringRange"))
                            return 3;
                        else
                            return -1;
        }
    }
    public static final Productions.AssignmentStmt492Production ASSIGNMENTSTMT492 = AssignmentStmt492Production.getInstance();

    public static class AssignmentStmt50Production extends Production
    {
        private AssignmentStmt50Production() {;} // Singleton
        private static AssignmentStmt50Production singletonInstance = null;
        public static final AssignmentStmt50Production getInstance() { if (singletonInstance == null) singletonInstance = new AssignmentStmt50Production(); return singletonInstance; }

        public String getDescription() { return "<AssignmentStmt@50> ::= SubstringRange:<SubstringRange>  :AssignmentStmt_50"; }

        /**
         * Reduce by <AssignmentStmt@50> ::= SubstringRange:<SubstringRange>  :AssignmentStmt_50
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssignmentStmt@50> ::= SubstringRange:<SubstringRange>  :AssignmentStmt_50
            ASTSubstringRangeNode v1 = (ASTSubstringRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.AssignmentStmt50ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SubstringRange"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.AssignmentStmt50Production ASSIGNMENTSTMT50 = AssignmentStmt50Production.getInstance();

    public static class AssignmentStmt51Production extends Production
    {
        private AssignmentStmt51Production() {;} // Singleton
        private static AssignmentStmt51Production singletonInstance = null;
        public static final AssignmentStmt51Production getInstance() { if (singletonInstance == null) singletonInstance = new AssignmentStmt51Production(); return singletonInstance; }

        public String getDescription() { return "<AssignmentStmt@51> ::= tlparen2:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen2:T_RPAREN  :AssignmentStmt_51"; }

        /**
         * Reduce by <AssignmentStmt@51> ::= tlparen2:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen2:T_RPAREN  :AssignmentStmt_51
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssignmentStmt@51> ::= tlparen2:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen2:T_RPAREN  :AssignmentStmt_51
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v2 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.AssignmentStmt51ReductionNonterminal.getInstance(), 3);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen2"))
                return 0;
            else
                if (name.equals("SectionSubscriptList"))
                    return 1;
                else
                    if (name.equals("trparen2"))
                        return 2;
                    else
                        return -1;
        }
    }
    public static final Productions.AssignmentStmt51Production ASSIGNMENTSTMT51 = AssignmentStmt51Production.getInstance();

    public static class AssignmentStmt512Production extends Production
    {
        private AssignmentStmt512Production() {;} // Singleton
        private static AssignmentStmt512Production singletonInstance = null;
        public static final AssignmentStmt512Production getInstance() { if (singletonInstance == null) singletonInstance = new AssignmentStmt512Production(); return singletonInstance; }

        public String getDescription() { return "<AssignmentStmt@51> ::= tlparen2:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen2:T_RPAREN <AssignmentStmt@52>  :AssignmentStmt_512"; }

        /**
         * Reduce by <AssignmentStmt@51> ::= tlparen2:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen2:T_RPAREN <AssignmentStmt@52>  :AssignmentStmt_512
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssignmentStmt@51> ::= tlparen2:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen2:T_RPAREN <AssignmentStmt@52>  :AssignmentStmt_512
            ASTSubstringRangeNode v4 = (ASTSubstringRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSectionSubscriptListNode v2 = (ASTSectionSubscriptListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.AssignmentStmt51ReductionNonterminal.getInstance(), 4);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen2"))
                return 0;
            else
                if (name.equals("SectionSubscriptList"))
                    return 1;
                else
                    if (name.equals("trparen2"))
                        return 2;
                    else
                        if (name.equals("SubstringRange"))
                            return 3;
                        else
                            return -1;
        }
    }
    public static final Productions.AssignmentStmt512Production ASSIGNMENTSTMT512 = AssignmentStmt512Production.getInstance();

    public static class AssignmentStmt52Production extends Production
    {
        private AssignmentStmt52Production() {;} // Singleton
        private static AssignmentStmt52Production singletonInstance = null;
        public static final AssignmentStmt52Production getInstance() { if (singletonInstance == null) singletonInstance = new AssignmentStmt52Production(); return singletonInstance; }

        public String getDescription() { return "<AssignmentStmt@52> ::= SubstringRange:<SubstringRange>  :AssignmentStmt_52"; }

        /**
         * Reduce by <AssignmentStmt@52> ::= SubstringRange:<SubstringRange>  :AssignmentStmt_52
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <AssignmentStmt@52> ::= SubstringRange:<SubstringRange>  :AssignmentStmt_52
            ASTSubstringRangeNode v1 = (ASTSubstringRangeNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.AssignmentStmt52ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("SubstringRange"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.AssignmentStmt52Production ASSIGNMENTSTMT52 = AssignmentStmt52Production.getInstance();

    public static class MaskedElsewhereStmt53Production extends Production
    {
        private MaskedElsewhereStmt53Production() {;} // Singleton
        private static MaskedElsewhereStmt53Production singletonInstance = null;
        public static final MaskedElsewhereStmt53Production getInstance() { if (singletonInstance == null) singletonInstance = new MaskedElsewhereStmt53Production(); return singletonInstance; }

        public String getDescription() { return "<MaskedElsewhereStmt@53> ::= EndName:<EndName>  :MaskedElsewhereStmt_53"; }

        /**
         * Reduce by <MaskedElsewhereStmt@53> ::= EndName:<EndName>  :MaskedElsewhereStmt_53
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <MaskedElsewhereStmt@53> ::= EndName:<EndName>  :MaskedElsewhereStmt_53
            ASTEndNameNode v1 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.MaskedElsewhereStmt53ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EndName"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.MaskedElsewhereStmt53Production MASKEDELSEWHERESTMT53 = MaskedElsewhereStmt53Production.getInstance();

    public static class ElsewhereStmt54Production extends Production
    {
        private ElsewhereStmt54Production() {;} // Singleton
        private static ElsewhereStmt54Production singletonInstance = null;
        public static final ElsewhereStmt54Production getInstance() { if (singletonInstance == null) singletonInstance = new ElsewhereStmt54Production(); return singletonInstance; }

        public String getDescription() { return "<ElsewhereStmt@54> ::= EndName:<EndName>  :ElsewhereStmt_54"; }

        /**
         * Reduce by <ElsewhereStmt@54> ::= EndName:<EndName>  :ElsewhereStmt_54
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ElsewhereStmt@54> ::= EndName:<EndName>  :ElsewhereStmt_54
            ASTEndNameNode v1 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ElsewhereStmt54ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EndName"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.ElsewhereStmt54Production ELSEWHERESTMT54 = ElsewhereStmt54Production.getInstance();

    public static class EndWhereStmt55Production extends Production
    {
        private EndWhereStmt55Production() {;} // Singleton
        private static EndWhereStmt55Production singletonInstance = null;
        public static final EndWhereStmt55Production getInstance() { if (singletonInstance == null) singletonInstance = new EndWhereStmt55Production(); return singletonInstance; }

        public String getDescription() { return "<EndWhereStmt@55> ::= EndName:<EndName>  :EndWhereStmt_55"; }

        /**
         * Reduce by <EndWhereStmt@55> ::= EndName:<EndName>  :EndWhereStmt_55
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndWhereStmt@55> ::= EndName:<EndName>  :EndWhereStmt_55
            ASTEndNameNode v1 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.EndWhereStmt55ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EndName"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.EndWhereStmt55Production ENDWHERESTMT55 = EndWhereStmt55Production.getInstance();

    public static class EndWhereStmt56Production extends Production
    {
        private EndWhereStmt56Production() {;} // Singleton
        private static EndWhereStmt56Production singletonInstance = null;
        public static final EndWhereStmt56Production getInstance() { if (singletonInstance == null) singletonInstance = new EndWhereStmt56Production(); return singletonInstance; }

        public String getDescription() { return "<EndWhereStmt@56> ::= EndName:<EndName>  :EndWhereStmt_56"; }

        /**
         * Reduce by <EndWhereStmt@56> ::= EndName:<EndName>  :EndWhereStmt_56
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndWhereStmt@56> ::= EndName:<EndName>  :EndWhereStmt_56
            ASTEndNameNode v1 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.EndWhereStmt56ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EndName"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.EndWhereStmt56Production ENDWHERESTMT56 = EndWhereStmt56Production.getInstance();

    public static class EndForallStmt57Production extends Production
    {
        private EndForallStmt57Production() {;} // Singleton
        private static EndForallStmt57Production singletonInstance = null;
        public static final EndForallStmt57Production getInstance() { if (singletonInstance == null) singletonInstance = new EndForallStmt57Production(); return singletonInstance; }

        public String getDescription() { return "<EndForallStmt@57> ::= EndName:<EndName>  :EndForallStmt_57"; }

        /**
         * Reduce by <EndForallStmt@57> ::= EndName:<EndName>  :EndForallStmt_57
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndForallStmt@57> ::= EndName:<EndName>  :EndForallStmt_57
            ASTEndNameNode v1 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.EndForallStmt57ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EndName"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.EndForallStmt57Production ENDFORALLSTMT57 = EndForallStmt57Production.getInstance();

    public static class EndForallStmt58Production extends Production
    {
        private EndForallStmt58Production() {;} // Singleton
        private static EndForallStmt58Production singletonInstance = null;
        public static final EndForallStmt58Production getInstance() { if (singletonInstance == null) singletonInstance = new EndForallStmt58Production(); return singletonInstance; }

        public String getDescription() { return "<EndForallStmt@58> ::= EndName:<EndName>  :EndForallStmt_58"; }

        /**
         * Reduce by <EndForallStmt@58> ::= EndName:<EndName>  :EndForallStmt_58
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndForallStmt@58> ::= EndName:<EndName>  :EndForallStmt_58
            ASTEndNameNode v1 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.EndForallStmt58ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EndName"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.EndForallStmt58Production ENDFORALLSTMT58 = EndForallStmt58Production.getInstance();

    public static class EndIfStmt59Production extends Production
    {
        private EndIfStmt59Production() {;} // Singleton
        private static EndIfStmt59Production singletonInstance = null;
        public static final EndIfStmt59Production getInstance() { if (singletonInstance == null) singletonInstance = new EndIfStmt59Production(); return singletonInstance; }

        public String getDescription() { return "<EndIfStmt@59> ::= EndName:<EndName>  :EndIfStmt_59"; }

        /**
         * Reduce by <EndIfStmt@59> ::= EndName:<EndName>  :EndIfStmt_59
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndIfStmt@59> ::= EndName:<EndName>  :EndIfStmt_59
            ASTEndNameNode v1 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.EndIfStmt59ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EndName"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.EndIfStmt59Production ENDIFSTMT59 = EndIfStmt59Production.getInstance();

    public static class EndIfStmt60Production extends Production
    {
        private EndIfStmt60Production() {;} // Singleton
        private static EndIfStmt60Production singletonInstance = null;
        public static final EndIfStmt60Production getInstance() { if (singletonInstance == null) singletonInstance = new EndIfStmt60Production(); return singletonInstance; }

        public String getDescription() { return "<EndIfStmt@60> ::= EndName:<EndName>  :EndIfStmt_60"; }

        /**
         * Reduce by <EndIfStmt@60> ::= EndName:<EndName>  :EndIfStmt_60
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndIfStmt@60> ::= EndName:<EndName>  :EndIfStmt_60
            ASTEndNameNode v1 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.EndIfStmt60ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EndName"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.EndIfStmt60Production ENDIFSTMT60 = EndIfStmt60Production.getInstance();

    public static class EndSelectStmt61Production extends Production
    {
        private EndSelectStmt61Production() {;} // Singleton
        private static EndSelectStmt61Production singletonInstance = null;
        public static final EndSelectStmt61Production getInstance() { if (singletonInstance == null) singletonInstance = new EndSelectStmt61Production(); return singletonInstance; }

        public String getDescription() { return "<EndSelectStmt@61> ::= EndName:<EndName>  :EndSelectStmt_61"; }

        /**
         * Reduce by <EndSelectStmt@61> ::= EndName:<EndName>  :EndSelectStmt_61
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndSelectStmt@61> ::= EndName:<EndName>  :EndSelectStmt_61
            ASTEndNameNode v1 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.EndSelectStmt61ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EndName"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.EndSelectStmt61Production ENDSELECTSTMT61 = EndSelectStmt61Production.getInstance();

    public static class EndSelectStmt62Production extends Production
    {
        private EndSelectStmt62Production() {;} // Singleton
        private static EndSelectStmt62Production singletonInstance = null;
        public static final EndSelectStmt62Production getInstance() { if (singletonInstance == null) singletonInstance = new EndSelectStmt62Production(); return singletonInstance; }

        public String getDescription() { return "<EndSelectStmt@62> ::= EndName:<EndName>  :EndSelectStmt_62"; }

        /**
         * Reduce by <EndSelectStmt@62> ::= EndName:<EndName>  :EndSelectStmt_62
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndSelectStmt@62> ::= EndName:<EndName>  :EndSelectStmt_62
            ASTEndNameNode v1 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.EndSelectStmt62ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EndName"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.EndSelectStmt62Production ENDSELECTSTMT62 = EndSelectStmt62Production.getInstance();

    public static class EndDoStmt63Production extends Production
    {
        private EndDoStmt63Production() {;} // Singleton
        private static EndDoStmt63Production singletonInstance = null;
        public static final EndDoStmt63Production getInstance() { if (singletonInstance == null) singletonInstance = new EndDoStmt63Production(); return singletonInstance; }

        public String getDescription() { return "<EndDoStmt@63> ::= EndName:<EndName>  :EndDoStmt_63"; }

        /**
         * Reduce by <EndDoStmt@63> ::= EndName:<EndName>  :EndDoStmt_63
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndDoStmt@63> ::= EndName:<EndName>  :EndDoStmt_63
            ASTEndNameNode v1 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.EndDoStmt63ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EndName"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.EndDoStmt63Production ENDDOSTMT63 = EndDoStmt63Production.getInstance();

    public static class EndDoStmt64Production extends Production
    {
        private EndDoStmt64Production() {;} // Singleton
        private static EndDoStmt64Production singletonInstance = null;
        public static final EndDoStmt64Production getInstance() { if (singletonInstance == null) singletonInstance = new EndDoStmt64Production(); return singletonInstance; }

        public String getDescription() { return "<EndDoStmt@64> ::= EndName:<EndName>  :EndDoStmt_64"; }

        /**
         * Reduce by <EndDoStmt@64> ::= EndName:<EndName>  :EndDoStmt_64
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndDoStmt@64> ::= EndName:<EndName>  :EndDoStmt_64
            ASTEndNameNode v1 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.EndDoStmt64ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EndName"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.EndDoStmt64Production ENDDOSTMT64 = EndDoStmt64Production.getInstance();

    public static class CycleStmt65Production extends Production
    {
        private CycleStmt65Production() {;} // Singleton
        private static CycleStmt65Production singletonInstance = null;
        public static final CycleStmt65Production getInstance() { if (singletonInstance == null) singletonInstance = new CycleStmt65Production(); return singletonInstance; }

        public String getDescription() { return "<CycleStmt@65> ::= Name:<Name>  :CycleStmt_65"; }

        /**
         * Reduce by <CycleStmt@65> ::= Name:<Name>  :CycleStmt_65
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <CycleStmt@65> ::= Name:<Name>  :CycleStmt_65
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.CycleStmt65ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.CycleStmt65Production CYCLESTMT65 = CycleStmt65Production.getInstance();

    public static class ExitStmt66Production extends Production
    {
        private ExitStmt66Production() {;} // Singleton
        private static ExitStmt66Production singletonInstance = null;
        public static final ExitStmt66Production getInstance() { if (singletonInstance == null) singletonInstance = new ExitStmt66Production(); return singletonInstance; }

        public String getDescription() { return "<ExitStmt@66> ::= Name:<Name>  :ExitStmt_66"; }

        /**
         * Reduce by <ExitStmt@66> ::= Name:<Name>  :ExitStmt_66
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <ExitStmt@66> ::= Name:<Name>  :ExitStmt_66
            ASTNameNode v1 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.ExitStmt66ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("Name"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.ExitStmt66Production EXITSTMT66 = ExitStmt66Production.getInstance();

    public static class FormatStmt67Production extends Production
    {
        private FormatStmt67Production() {;} // Singleton
        private static FormatStmt67Production singletonInstance = null;
        public static final FormatStmt67Production getInstance() { if (singletonInstance == null) singletonInstance = new FormatStmt67Production(); return singletonInstance; }

        public String getDescription() { return "<FormatStmt@67> ::= FmtSpec:<FmtSpec>  :FormatStmt_67"; }

        /**
         * Reduce by <FormatStmt@67> ::= FmtSpec:<FmtSpec>  :FormatStmt_67
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FormatStmt@67> ::= FmtSpec:<FmtSpec>  :FormatStmt_67
            ASTFmtSpecNode v1 = (ASTFmtSpecNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.FormatStmt67ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("FmtSpec"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.FormatStmt67Production FORMATSTMT67 = FormatStmt67Production.getInstance();

    public static class EndProgramStmt68Production extends Production
    {
        private EndProgramStmt68Production() {;} // Singleton
        private static EndProgramStmt68Production singletonInstance = null;
        public static final EndProgramStmt68Production getInstance() { if (singletonInstance == null) singletonInstance = new EndProgramStmt68Production(); return singletonInstance; }

        public String getDescription() { return "<EndProgramStmt@68> ::= EndName:<EndName>  :EndProgramStmt_68"; }

        /**
         * Reduce by <EndProgramStmt@68> ::= EndName:<EndName>  :EndProgramStmt_68
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndProgramStmt@68> ::= EndName:<EndName>  :EndProgramStmt_68
            ASTEndNameNode v1 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.EndProgramStmt68ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EndName"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.EndProgramStmt68Production ENDPROGRAMSTMT68 = EndProgramStmt68Production.getInstance();

    public static class EndProgramStmt69Production extends Production
    {
        private EndProgramStmt69Production() {;} // Singleton
        private static EndProgramStmt69Production singletonInstance = null;
        public static final EndProgramStmt69Production getInstance() { if (singletonInstance == null) singletonInstance = new EndProgramStmt69Production(); return singletonInstance; }

        public String getDescription() { return "<EndProgramStmt@69> ::= EndName:<EndName>  :EndProgramStmt_69"; }

        /**
         * Reduce by <EndProgramStmt@69> ::= EndName:<EndName>  :EndProgramStmt_69
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndProgramStmt@69> ::= EndName:<EndName>  :EndProgramStmt_69
            ASTEndNameNode v1 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.EndProgramStmt69ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EndName"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.EndProgramStmt69Production ENDPROGRAMSTMT69 = EndProgramStmt69Production.getInstance();

    public static class EndModuleStmt70Production extends Production
    {
        private EndModuleStmt70Production() {;} // Singleton
        private static EndModuleStmt70Production singletonInstance = null;
        public static final EndModuleStmt70Production getInstance() { if (singletonInstance == null) singletonInstance = new EndModuleStmt70Production(); return singletonInstance; }

        public String getDescription() { return "<EndModuleStmt@70> ::= EndName:<EndName>  :EndModuleStmt_70"; }

        /**
         * Reduce by <EndModuleStmt@70> ::= EndName:<EndName>  :EndModuleStmt_70
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndModuleStmt@70> ::= EndName:<EndName>  :EndModuleStmt_70
            ASTEndNameNode v1 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.EndModuleStmt70ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EndName"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.EndModuleStmt70Production ENDMODULESTMT70 = EndModuleStmt70Production.getInstance();

    public static class EndModuleStmt71Production extends Production
    {
        private EndModuleStmt71Production() {;} // Singleton
        private static EndModuleStmt71Production singletonInstance = null;
        public static final EndModuleStmt71Production getInstance() { if (singletonInstance == null) singletonInstance = new EndModuleStmt71Production(); return singletonInstance; }

        public String getDescription() { return "<EndModuleStmt@71> ::= EndName:<EndName>  :EndModuleStmt_71"; }

        /**
         * Reduce by <EndModuleStmt@71> ::= EndName:<EndName>  :EndModuleStmt_71
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndModuleStmt@71> ::= EndName:<EndName>  :EndModuleStmt_71
            ASTEndNameNode v1 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.EndModuleStmt71ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EndName"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.EndModuleStmt71Production ENDMODULESTMT71 = EndModuleStmt71Production.getInstance();

    public static class UseStmt72Production extends Production
    {
        private UseStmt72Production() {;} // Singleton
        private static UseStmt72Production singletonInstance = null;
        public static final UseStmt72Production getInstance() { if (singletonInstance == null) singletonInstance = new UseStmt72Production(); return singletonInstance; }

        public String getDescription() { return "<UseStmt@72> ::= OnlyList:<OnlyList>  :UseStmt_72"; }

        /**
         * Reduce by <UseStmt@72> ::= OnlyList:<OnlyList>  :UseStmt_72
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <UseStmt@72> ::= OnlyList:<OnlyList>  :UseStmt_72
            ASTOnlyListNode v1 = (ASTOnlyListNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.UseStmt72ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("OnlyList"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.UseStmt72Production USESTMT72 = UseStmt72Production.getInstance();

    public static class EndBlockDataStmt73Production extends Production
    {
        private EndBlockDataStmt73Production() {;} // Singleton
        private static EndBlockDataStmt73Production singletonInstance = null;
        public static final EndBlockDataStmt73Production getInstance() { if (singletonInstance == null) singletonInstance = new EndBlockDataStmt73Production(); return singletonInstance; }

        public String getDescription() { return "<EndBlockDataStmt@73> ::= EndName:<EndName>  :EndBlockDataStmt_73"; }

        /**
         * Reduce by <EndBlockDataStmt@73> ::= EndName:<EndName>  :EndBlockDataStmt_73
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndBlockDataStmt@73> ::= EndName:<EndName>  :EndBlockDataStmt_73
            ASTEndNameNode v1 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.EndBlockDataStmt73ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EndName"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.EndBlockDataStmt73Production ENDBLOCKDATASTMT73 = EndBlockDataStmt73Production.getInstance();

    public static class EndBlockDataStmt74Production extends Production
    {
        private EndBlockDataStmt74Production() {;} // Singleton
        private static EndBlockDataStmt74Production singletonInstance = null;
        public static final EndBlockDataStmt74Production getInstance() { if (singletonInstance == null) singletonInstance = new EndBlockDataStmt74Production(); return singletonInstance; }

        public String getDescription() { return "<EndBlockDataStmt@74> ::= EndName:<EndName>  :EndBlockDataStmt_74"; }

        /**
         * Reduce by <EndBlockDataStmt@74> ::= EndName:<EndName>  :EndBlockDataStmt_74
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndBlockDataStmt@74> ::= EndName:<EndName>  :EndBlockDataStmt_74
            ASTEndNameNode v1 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.EndBlockDataStmt74ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EndName"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.EndBlockDataStmt74Production ENDBLOCKDATASTMT74 = EndBlockDataStmt74Production.getInstance();

    public static class EndBlockDataStmt75Production extends Production
    {
        private EndBlockDataStmt75Production() {;} // Singleton
        private static EndBlockDataStmt75Production singletonInstance = null;
        public static final EndBlockDataStmt75Production getInstance() { if (singletonInstance == null) singletonInstance = new EndBlockDataStmt75Production(); return singletonInstance; }

        public String getDescription() { return "<EndBlockDataStmt@75> ::= EndName:<EndName>  :EndBlockDataStmt_75"; }

        /**
         * Reduce by <EndBlockDataStmt@75> ::= EndName:<EndName>  :EndBlockDataStmt_75
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndBlockDataStmt@75> ::= EndName:<EndName>  :EndBlockDataStmt_75
            ASTEndNameNode v1 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.EndBlockDataStmt75ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EndName"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.EndBlockDataStmt75Production ENDBLOCKDATASTMT75 = EndBlockDataStmt75Production.getInstance();

    public static class EndBlockDataStmt76Production extends Production
    {
        private EndBlockDataStmt76Production() {;} // Singleton
        private static EndBlockDataStmt76Production singletonInstance = null;
        public static final EndBlockDataStmt76Production getInstance() { if (singletonInstance == null) singletonInstance = new EndBlockDataStmt76Production(); return singletonInstance; }

        public String getDescription() { return "<EndBlockDataStmt@76> ::= EndName:<EndName>  :EndBlockDataStmt_76"; }

        /**
         * Reduce by <EndBlockDataStmt@76> ::= EndName:<EndName>  :EndBlockDataStmt_76
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndBlockDataStmt@76> ::= EndName:<EndName>  :EndBlockDataStmt_76
            ASTEndNameNode v1 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.EndBlockDataStmt76ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EndName"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.EndBlockDataStmt76Production ENDBLOCKDATASTMT76 = EndBlockDataStmt76Production.getInstance();

    public static class EndInterfaceStmt77Production extends Production
    {
        private EndInterfaceStmt77Production() {;} // Singleton
        private static EndInterfaceStmt77Production singletonInstance = null;
        public static final EndInterfaceStmt77Production getInstance() { if (singletonInstance == null) singletonInstance = new EndInterfaceStmt77Production(); return singletonInstance; }

        public String getDescription() { return "<EndInterfaceStmt@77> ::= EndName:<EndName>  :EndInterfaceStmt_77"; }

        /**
         * Reduce by <EndInterfaceStmt@77> ::= EndName:<EndName>  :EndInterfaceStmt_77
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndInterfaceStmt@77> ::= EndName:<EndName>  :EndInterfaceStmt_77
            ASTEndNameNode v1 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.EndInterfaceStmt77ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EndName"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.EndInterfaceStmt77Production ENDINTERFACESTMT77 = EndInterfaceStmt77Production.getInstance();

    public static class EndInterfaceStmt78Production extends Production
    {
        private EndInterfaceStmt78Production() {;} // Singleton
        private static EndInterfaceStmt78Production singletonInstance = null;
        public static final EndInterfaceStmt78Production getInstance() { if (singletonInstance == null) singletonInstance = new EndInterfaceStmt78Production(); return singletonInstance; }

        public String getDescription() { return "<EndInterfaceStmt@78> ::= EndName:<EndName>  :EndInterfaceStmt_78"; }

        /**
         * Reduce by <EndInterfaceStmt@78> ::= EndName:<EndName>  :EndInterfaceStmt_78
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndInterfaceStmt@78> ::= EndName:<EndName>  :EndInterfaceStmt_78
            ASTEndNameNode v1 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.EndInterfaceStmt78ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EndName"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.EndInterfaceStmt78Production ENDINTERFACESTMT78 = EndInterfaceStmt78Production.getInstance();

    public static class FunctionStmt79Production extends Production
    {
        private FunctionStmt79Production() {;} // Singleton
        private static FunctionStmt79Production singletonInstance = null;
        public static final FunctionStmt79Production getInstance() { if (singletonInstance == null) singletonInstance = new FunctionStmt79Production(); return singletonInstance; }

        public String getDescription() { return "<FunctionStmt@79> ::= tresult:T_RESULT tlparen2:T_LPAREN Name:<Name> trparen2:T_RPAREN  :FunctionStmt_79"; }

        /**
         * Reduce by <FunctionStmt@79> ::= tresult:T_RESULT tlparen2:T_LPAREN Name:<Name> trparen2:T_RPAREN  :FunctionStmt_79
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <FunctionStmt@79> ::= tresult:T_RESULT tlparen2:T_LPAREN Name:<Name> trparen2:T_RPAREN  :FunctionStmt_79
            Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTNameNode v3 = (ASTNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 4 symbols on its RHS
            parser.reduce(Nonterminal.FunctionStmt79ReductionNonterminal.getInstance(), 4);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tresult"))
                return 0;
            else
                if (name.equals("tlparen2"))
                    return 1;
                else
                    if (name.equals("Name"))
                        return 2;
                    else
                        if (name.equals("trparen2"))
                            return 3;
                        else
                            return -1;
        }
    }
    public static final Productions.FunctionStmt79Production FUNCTIONSTMT79 = FunctionStmt79Production.getInstance();

    public static class EndFunctionStmt80Production extends Production
    {
        private EndFunctionStmt80Production() {;} // Singleton
        private static EndFunctionStmt80Production singletonInstance = null;
        public static final EndFunctionStmt80Production getInstance() { if (singletonInstance == null) singletonInstance = new EndFunctionStmt80Production(); return singletonInstance; }

        public String getDescription() { return "<EndFunctionStmt@80> ::= EndName:<EndName>  :EndFunctionStmt_80"; }

        /**
         * Reduce by <EndFunctionStmt@80> ::= EndName:<EndName>  :EndFunctionStmt_80
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndFunctionStmt@80> ::= EndName:<EndName>  :EndFunctionStmt_80
            ASTEndNameNode v1 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.EndFunctionStmt80ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EndName"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.EndFunctionStmt80Production ENDFUNCTIONSTMT80 = EndFunctionStmt80Production.getInstance();

    public static class EndFunctionStmt81Production extends Production
    {
        private EndFunctionStmt81Production() {;} // Singleton
        private static EndFunctionStmt81Production singletonInstance = null;
        public static final EndFunctionStmt81Production getInstance() { if (singletonInstance == null) singletonInstance = new EndFunctionStmt81Production(); return singletonInstance; }

        public String getDescription() { return "<EndFunctionStmt@81> ::= EndName:<EndName>  :EndFunctionStmt_81"; }

        /**
         * Reduce by <EndFunctionStmt@81> ::= EndName:<EndName>  :EndFunctionStmt_81
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndFunctionStmt@81> ::= EndName:<EndName>  :EndFunctionStmt_81
            ASTEndNameNode v1 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.EndFunctionStmt81ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EndName"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.EndFunctionStmt81Production ENDFUNCTIONSTMT81 = EndFunctionStmt81Production.getInstance();

    public static class SubroutineStmt82Production extends Production
    {
        private SubroutineStmt82Production() {;} // Singleton
        private static SubroutineStmt82Production singletonInstance = null;
        public static final SubroutineStmt82Production getInstance() { if (singletonInstance == null) singletonInstance = new SubroutineStmt82Production(); return singletonInstance; }

        public String getDescription() { return "<SubroutineStmt@82> ::= tlparen:T_LPAREN trparen:T_RPAREN  :SubroutineStmt_82"; }

        /**
         * Reduce by <SubroutineStmt@82> ::= tlparen:T_LPAREN trparen:T_RPAREN  :SubroutineStmt_82
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SubroutineStmt@82> ::= tlparen:T_LPAREN trparen:T_RPAREN  :SubroutineStmt_82
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.SubroutineStmt82ReductionNonterminal.getInstance(), 2);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("trparen"))
                    return 1;
                else
                    return -1;
        }
    }
    public static final Productions.SubroutineStmt82Production SUBROUTINESTMT82 = SubroutineStmt82Production.getInstance();

    public static class SubroutineStmt822Production extends Production
    {
        private SubroutineStmt822Production() {;} // Singleton
        private static SubroutineStmt822Production singletonInstance = null;
        public static final SubroutineStmt822Production getInstance() { if (singletonInstance == null) singletonInstance = new SubroutineStmt822Production(); return singletonInstance; }

        public String getDescription() { return "<SubroutineStmt@82> ::= tlparen:T_LPAREN SubroutinePars:<SubroutinePars> trparen:T_RPAREN  :SubroutineStmt_822"; }

        /**
         * Reduce by <SubroutineStmt@82> ::= tlparen:T_LPAREN SubroutinePars:<SubroutinePars> trparen:T_RPAREN  :SubroutineStmt_822
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <SubroutineStmt@82> ::= tlparen:T_LPAREN SubroutinePars:<SubroutinePars> trparen:T_RPAREN  :SubroutineStmt_822
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubroutineParsNode v2 = (ASTSubroutineParsNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.SubroutineStmt82ReductionNonterminal.getInstance(), 3);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("SubroutinePars"))
                    return 1;
                else
                    if (name.equals("trparen"))
                        return 2;
                    else
                        return -1;
        }
    }
    public static final Productions.SubroutineStmt822Production SUBROUTINESTMT822 = SubroutineStmt822Production.getInstance();

    public static class EndSubroutineStmt83Production extends Production
    {
        private EndSubroutineStmt83Production() {;} // Singleton
        private static EndSubroutineStmt83Production singletonInstance = null;
        public static final EndSubroutineStmt83Production getInstance() { if (singletonInstance == null) singletonInstance = new EndSubroutineStmt83Production(); return singletonInstance; }

        public String getDescription() { return "<EndSubroutineStmt@83> ::= EndName:<EndName>  :EndSubroutineStmt_83"; }

        /**
         * Reduce by <EndSubroutineStmt@83> ::= EndName:<EndName>  :EndSubroutineStmt_83
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndSubroutineStmt@83> ::= EndName:<EndName>  :EndSubroutineStmt_83
            ASTEndNameNode v1 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.EndSubroutineStmt83ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EndName"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.EndSubroutineStmt83Production ENDSUBROUTINESTMT83 = EndSubroutineStmt83Production.getInstance();

    public static class EndSubroutineStmt84Production extends Production
    {
        private EndSubroutineStmt84Production() {;} // Singleton
        private static EndSubroutineStmt84Production singletonInstance = null;
        public static final EndSubroutineStmt84Production getInstance() { if (singletonInstance == null) singletonInstance = new EndSubroutineStmt84Production(); return singletonInstance; }

        public String getDescription() { return "<EndSubroutineStmt@84> ::= EndName:<EndName>  :EndSubroutineStmt_84"; }

        /**
         * Reduce by <EndSubroutineStmt@84> ::= EndName:<EndName>  :EndSubroutineStmt_84
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EndSubroutineStmt@84> ::= EndName:<EndName>  :EndSubroutineStmt_84
            ASTEndNameNode v1 = (ASTEndNameNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 1 symbol on its RHS
            parser.reduce(Nonterminal.EndSubroutineStmt84ReductionNonterminal.getInstance(), 1);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("EndName"))
                return 0;
            else
                return -1;
        }
    }
    public static final Productions.EndSubroutineStmt84Production ENDSUBROUTINESTMT84 = EndSubroutineStmt84Production.getInstance();

    public static class EntryStmt85Production extends Production
    {
        private EntryStmt85Production() {;} // Singleton
        private static EntryStmt85Production singletonInstance = null;
        public static final EntryStmt85Production getInstance() { if (singletonInstance == null) singletonInstance = new EntryStmt85Production(); return singletonInstance; }

        public String getDescription() { return "<EntryStmt@85> ::= tlparen:T_LPAREN trparen:T_RPAREN  :EntryStmt_85"; }

        /**
         * Reduce by <EntryStmt@85> ::= tlparen:T_LPAREN trparen:T_RPAREN  :EntryStmt_85
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EntryStmt@85> ::= tlparen:T_LPAREN trparen:T_RPAREN  :EntryStmt_85
            Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 2 symbols on its RHS
            parser.reduce(Nonterminal.EntryStmt85ReductionNonterminal.getInstance(), 2);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("trparen"))
                    return 1;
                else
                    return -1;
        }
    }
    public static final Productions.EntryStmt85Production ENTRYSTMT85 = EntryStmt85Production.getInstance();

    public static class EntryStmt852Production extends Production
    {
        private EntryStmt852Production() {;} // Singleton
        private static EntryStmt852Production singletonInstance = null;
        public static final EntryStmt852Production getInstance() { if (singletonInstance == null) singletonInstance = new EntryStmt852Production(); return singletonInstance; }

        public String getDescription() { return "<EntryStmt@85> ::= tlparen:T_LPAREN SubroutinePars:<SubroutinePars> trparen:T_RPAREN  :EntryStmt_852"; }

        /**
         * Reduce by <EntryStmt@85> ::= tlparen:T_LPAREN SubroutinePars:<SubroutinePars> trparen:T_RPAREN  :EntryStmt_852
         */
        void reduce(Parser parser)
        {
            ArrayList valueStack = parser.getValueStack();

            // Reduce by <EntryStmt@85> ::= tlparen:T_LPAREN SubroutinePars:<SubroutinePars> trparen:T_RPAREN  :EntryStmt_852
            Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            ASTSubroutineParsNode v2 = (ASTSubroutineParsNode)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
            Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

            // The production has 3 symbols on its RHS
            parser.reduce(Nonterminal.EntryStmt85ReductionNonterminal.getInstance(), 3);
        }

        public int getNamedIndex(String name)
        {
            if (name.equals("tlparen"))
                return 0;
            else
                if (name.equals("SubroutinePars"))
                    return 1;
                else
                    if (name.equals("trparen"))
                        return 2;
                    else
                        return -1;
        }
    }
    public static final Productions.EntryStmt852Production ENTRYSTMT852 = EntryStmt852Production.getInstance();

    /**
     * An array enumerating all of the productions in the grammar
     * (the first element is null since there is no class representingthe implicit <@start> ::= <start> production)
     */
    protected static final Production productions[] = new Production[] { null, PRODUCTION2, PRODUCTION3, PRODUCTION4, PRODUCTION5, PRODUCTION6, PRODUCTION7, PRODUCTION8, PRODUCTION9, PRODUCTION10, PRODUCTION11, PRODUCTION12, PRODUCTION13, PRODUCTION14, PRODUCTION15, PRODUCTION16, PRODUCTION17, PRODUCTION18, PRODUCTION19, PRODUCTION20, PRODUCTION21, PRODUCTION22, PRODUCTION23, PRODUCTION24, PRODUCTION25, PRODUCTION26, PRODUCTION27, PRODUCTION28, PRODUCTION29, PRODUCTION30, PRODUCTION31, PRODUCTION32, PRODUCTION33, PRODUCTION34, PRODUCTION35, PRODUCTION36, PRODUCTION37, PRODUCTION38, PRODUCTION39, PRODUCTION40, PRODUCTION41, PRODUCTION42, PRODUCTION43, PRODUCTION44, PRODUCTION45, PRODUCTION46, PRODUCTION47, PRODUCTION48, PRODUCTION49, PRODUCTION50, PRODUCTION51, PRODUCTION52, PRODUCTION53, PRODUCTION54, PRODUCTION55, PRODUCTION56, PRODUCTION57, PRODUCTION58, PRODUCTION59, PRODUCTION60, PRODUCTION61, PRODUCTION62, PRODUCTION63, PRODUCTION64, PRODUCTION65, PRODUCTION66, PRODUCTION67, PRODUCTION68, PRODUCTION69, PRODUCTION70, PRODUCTION71, PRODUCTION72, PRODUCTION73, PRODUCTION74, PRODUCTION75, PRODUCTION76, PRODUCTION77, PRODUCTION78, PRODUCTION79, PRODUCTION80, PRODUCTION81, PRODUCTION82, PRODUCTION83, PRODUCTION84, PRODUCTION85, PRODUCTION86, PRODUCTION87, PRODUCTION88, PRODUCTION89, PRODUCTION90, PRODUCTION91, PRODUCTION92, PRODUCTION93, PRODUCTION94, PRODUCTION95, PRODUCTION96, PRODUCTION97, PRODUCTION98, PRODUCTION99, PRODUCTION100, PRODUCTION101, PRODUCTION102, PRODUCTION103, PRODUCTION104, PRODUCTION105, PRODUCTION106, PRODUCTION107, PRODUCTION108, PRODUCTION109, PRODUCTION110, PRODUCTION111, PRODUCTION112, PRODUCTION113, PRODUCTION114, PRODUCTION115, PRODUCTION116, PRODUCTION117, PRODUCTION118, PRODUCTION119, PRODUCTION120, PRODUCTION121, PRODUCTION122, PRODUCTION123, PRODUCTION124, PRODUCTION125, PRODUCTION126, PRODUCTION127, PRODUCTION128, PRODUCTION129, PRODUCTION130, PRODUCTION131, PRODUCTION132, PRODUCTION133, PRODUCTION134, PRODUCTION135, PRODUCTION136, PRODUCTION137, PRODUCTION138, PRODUCTION139, PRODUCTION140, PRODUCTION141, PRODUCTION142, PRODUCTION143, PRODUCTION144, PRODUCTION145, PRODUCTION146, PRODUCTION147, PRODUCTION148, PRODUCTION149, PRODUCTION150, PRODUCTION151, PRODUCTION152, PRODUCTION153, PRODUCTION154, PRODUCTION155, PRODUCTION156, PRODUCTION157, PRODUCTION158, PRODUCTION159, PRODUCTION160, PRODUCTION161, PRODUCTION162, PRODUCTION163, PRODUCTION164, PRODUCTION165, PRODUCTION166, PRODUCTION167, PRODUCTION168, PRODUCTION169, PRODUCTION170, PRODUCTION171, PRODUCTION172, PRODUCTION173, PRODUCTION174, PRODUCTION175, PRODUCTION176, PRODUCTION177, PRODUCTION178, PRODUCTION179, PRODUCTION180, PRODUCTION181, PRODUCTION182, PRODUCTION183, PRODUCTION184, PRODUCTION185, PRODUCTION186, PRODUCTION187, PRODUCTION188, PRODUCTION189, PRODUCTION190, PRODUCTION191, PRODUCTION192, PRODUCTION193, PRODUCTION194, PRODUCTION195, PRODUCTION196, PRODUCTION197, PRODUCTION198, PRODUCTION199, PRODUCTION200, PRODUCTION201, PRODUCTION202, PRODUCTION203, PRODUCTION204, PRODUCTION205, PRODUCTION206, PRODUCTION207, PRODUCTION208, PRODUCTION209, PRODUCTION210, PRODUCTION211, PRODUCTION212, PRODUCTION213, PRODUCTION214, PRODUCTION215, PRODUCTION216, PRODUCTION217, PRODUCTION218, PRODUCTION219, PRODUCTION220, PRODUCTION221, PRODUCTION222, PRODUCTION223, PRODUCTION224, PRODUCTION225, PRODUCTION226, PRODUCTION227, PRODUCTION228, PRODUCTION229, PRODUCTION230, PRODUCTION231, PRODUCTION232, PRODUCTION233, PRODUCTION234, PRODUCTION235, PRODUCTION236, PRODUCTION237, PRODUCTION238, PRODUCTION239, PRODUCTION240, PRODUCTION241, PRODUCTION242, PRODUCTION243, PRODUCTION244, PRODUCTION245, PRODUCTION246, PRODUCTION247, PRODUCTION248, PRODUCTION249, PRODUCTION250, PRODUCTION251, PRODUCTION252, PRODUCTION253, PRODUCTION254, PRODUCTION255, PRODUCTION256, PRODUCTION257, PRODUCTION258, PRODUCTION259, PRODUCTION260, PRODUCTION261, PRODUCTION262, PRODUCTION263, PRODUCTION264, PRODUCTION265, PRODUCTION266, PRODUCTION267, PRODUCTION268, PRODUCTION269, PRODUCTION270, PRODUCTION271, PRODUCTION272, PRODUCTION273, PRODUCTION274, PRODUCTION275, PRODUCTION276, PRODUCTION277, PRODUCTION278, PRODUCTION279, PRODUCTION280, PRODUCTION281, PRODUCTION282, PRODUCTION283, PRODUCTION284, PRODUCTION285, PRODUCTION286, PRODUCTION287, PRODUCTION288, PRODUCTION289, PRODUCTION290, PRODUCTION291, PRODUCTION292, PRODUCTION293, PRODUCTION294, PRODUCTION295, PRODUCTION296, PRODUCTION297, PRODUCTION298, PRODUCTION299, PRODUCTION300, PRODUCTION301, PRODUCTION302, PRODUCTION303, PRODUCTION304, PRODUCTION305, PRODUCTION306, PRODUCTION307, PRODUCTION308, PRODUCTION309, PRODUCTION310, PRODUCTION311, PRODUCTION312, PRODUCTION313, PRODUCTION314, PRODUCTION315, PRODUCTION316, PRODUCTION317, PRODUCTION318, PRODUCTION319, PRODUCTION320, PRODUCTION321, PRODUCTION322, PRODUCTION323, PRODUCTION324, PRODUCTION325, PRODUCTION326, PRODUCTION327, PRODUCTION328, PRODUCTION329, PRODUCTION330, PRODUCTION331, PRODUCTION332, PRODUCTION333, PRODUCTION334, PRODUCTION335, PRODUCTION336, PRODUCTION337, PRODUCTION338, PRODUCTION339, PRODUCTION340, PRODUCTION341, PRODUCTION342, PRODUCTION343, PRODUCTION344, PRODUCTION345, PRODUCTION346, PRODUCTION347, PRODUCTION348, PRODUCTION349, PRODUCTION350, PRODUCTION351, PRODUCTION352, PRODUCTION353, PRODUCTION354, PRODUCTION355, PRODUCTION356, PRODUCTION357, PRODUCTION358, PRODUCTION359, PRODUCTION360, PRODUCTION361, PRODUCTION362, PRODUCTION363, PRODUCTION364, PRODUCTION365, PRODUCTION366, PRODUCTION367, PRODUCTION368, PRODUCTION369, PRODUCTION370, PRODUCTION371, PRODUCTION372, PRODUCTION373, PRODUCTION374, PRODUCTION375, PRODUCTION376, PRODUCTION377, PRODUCTION378, PRODUCTION379, PRODUCTION380, PRODUCTION381, PRODUCTION382, PRODUCTION383, PRODUCTION384, PRODUCTION385, PRODUCTION386, PRODUCTION387, PRODUCTION388, PRODUCTION389, PRODUCTION390, PRODUCTION391, PRODUCTION392, PRODUCTION393, PRODUCTION394, PRODUCTION395, PRODUCTION396, PRODUCTION397, PRODUCTION398, PRODUCTION399, PRODUCTION400, PRODUCTION401, PRODUCTION402, PRODUCTION403, PRODUCTION404, PRODUCTION405, PRODUCTION406, PRODUCTION407, PRODUCTION408, PRODUCTION409, PRODUCTION410, PRODUCTION411, PRODUCTION412, PRODUCTION413, PRODUCTION414, PRODUCTION415, PRODUCTION416, PRODUCTION417, PRODUCTION418, PRODUCTION419, PRODUCTION420, PRODUCTION421, PRODUCTION422, PRODUCTION423, PRODUCTION424, PRODUCTION425, PRODUCTION426, PRODUCTION427, PRODUCTION428, PRODUCTION429, PRODUCTION430, PRODUCTION431, PRODUCTION432, PRODUCTION433, PRODUCTION434, PRODUCTION435, PRODUCTION436, PRODUCTION437, PRODUCTION438, PRODUCTION439, PRODUCTION440, PRODUCTION441, PRODUCTION442, PRODUCTION443, PRODUCTION444, PRODUCTION445, PRODUCTION446, PRODUCTION447, PRODUCTION448, PRODUCTION449, PRODUCTION450, PRODUCTION451, PRODUCTION452, PRODUCTION453, PRODUCTION454, PRODUCTION455, PRODUCTION456, PRODUCTION457, PRODUCTION458, PRODUCTION459, PRODUCTION460, PRODUCTION461, PRODUCTION462, PRODUCTION463, PRODUCTION464, PRODUCTION465, PRODUCTION466, PRODUCTION467, PRODUCTION468, PRODUCTION469, PRODUCTION470, PRODUCTION471, PRODUCTION472, PRODUCTION473, PRODUCTION474, PRODUCTION475, PRODUCTION476, PRODUCTION477, PRODUCTION478, PRODUCTION479, PRODUCTION480, PRODUCTION481, PRODUCTION482, PRODUCTION483, PRODUCTION484, PRODUCTION485, PRODUCTION486, PRODUCTION487, PRODUCTION488, PRODUCTION489, PRODUCTION490, PRODUCTION491, PRODUCTION492, PRODUCTION493, PRODUCTION494, PRODUCTION495, PRODUCTION496, PRODUCTION497, PRODUCTION498, PRODUCTION499, PRODUCTION500, PRODUCTION501, PRODUCTION502, PRODUCTION503, PRODUCTION504, PRODUCTION505, PRODUCTION506, PRODUCTION507, PRODUCTION508, PRODUCTION509, PRODUCTION510, PRODUCTION511, PRODUCTION512, PRODUCTION513, PRODUCTION514, PRODUCTION515, PRODUCTION516, PRODUCTION517, PRODUCTION518, PRODUCTION519, PRODUCTION520, PRODUCTION521, PRODUCTION522, PRODUCTION523, PRODUCTION524, PRODUCTION525, PRODUCTION526, PRODUCTION527, PRODUCTION528, PRODUCTION529, PRODUCTION530, PRODUCTION531, PRODUCTION532, PRODUCTION533, PRODUCTION534, PRODUCTION535, PRODUCTION536, PRODUCTION537, PRODUCTION538, PRODUCTION539, PRODUCTION540, PRODUCTION541, PRODUCTION542, PRODUCTION543, PRODUCTION544, PRODUCTION545, PRODUCTION546, PRODUCTION547, PRODUCTION548, PRODUCTION549, PRODUCTION550, PRODUCTION551, PRODUCTION552, PRODUCTION553, PRODUCTION554, PRODUCTION555, PRODUCTION556, PRODUCTION557, PRODUCTION558, PRODUCTION559, PRODUCTION560, PRODUCTION561, PRODUCTION562, PRODUCTION563, PRODUCTION564, PRODUCTION565, PRODUCTION566, PRODUCTION567, PRODUCTION568, PRODUCTION569, PRODUCTION570, PRODUCTION571, PRODUCTION572, PRODUCTION573, PRODUCTION574, PRODUCTION575, PRODUCTION576, PRODUCTION577, PRODUCTION578, PRODUCTION579, PRODUCTION580, PRODUCTION581, PRODUCTION582, PRODUCTION583, PRODUCTION584, PRODUCTION585, PRODUCTION586, PRODUCTION587, PRODUCTION588, PRODUCTION589, PRODUCTION590, PRODUCTION591, PRODUCTION592, PRODUCTION593, PRODUCTION594, PRODUCTION595, PRODUCTION596, PRODUCTION597, PRODUCTION598, PRODUCTION599, PRODUCTION600, PRODUCTION601, PRODUCTION602, PRODUCTION603, PRODUCTION604, PRODUCTION605, PRODUCTION606, PRODUCTION607, PRODUCTION608, PRODUCTION609, PRODUCTION610, PRODUCTION611, PRODUCTION612, PRODUCTION613, PRODUCTION614, PRODUCTION615, PRODUCTION616, PRODUCTION617, PRODUCTION618, PRODUCTION619, PRODUCTION620, PRODUCTION621, PRODUCTION622, PRODUCTION623, PRODUCTION624, PRODUCTION625, PRODUCTION626, PRODUCTION627, PRODUCTION628, PRODUCTION629, PRODUCTION630, PRODUCTION631, PRODUCTION632, PRODUCTION633, PRODUCTION634, PRODUCTION635, PRODUCTION636, PRODUCTION637, PRODUCTION638, PRODUCTION639, PRODUCTION640, PRODUCTION641, PRODUCTION642, PRODUCTION643, PRODUCTION644, PRODUCTION645, PRODUCTION646, PRODUCTION647, PRODUCTION648, PRODUCTION649, PRODUCTION650, PRODUCTION651, PRODUCTION652, PRODUCTION653, PRODUCTION654, PRODUCTION655, PRODUCTION656, PRODUCTION657, PRODUCTION658, PRODUCTION659, PRODUCTION660, PRODUCTION661, PRODUCTION662, PRODUCTION663, PRODUCTION664, PRODUCTION665, PRODUCTION666, PRODUCTION667, PRODUCTION668, PRODUCTION669, PRODUCTION670, PRODUCTION671, PRODUCTION672, PRODUCTION673, PRODUCTION674, PRODUCTION675, PRODUCTION676, PRODUCTION677, PRODUCTION678, PRODUCTION679, PRODUCTION680, PRODUCTION681, PRODUCTION682, PRODUCTION683, PRODUCTION684, PRODUCTION685, PRODUCTION686, PRODUCTION687, PRODUCTION688, PRODUCTION689, PRODUCTION690, PRODUCTION691, PRODUCTION692, PRODUCTION693, PRODUCTION694, PRODUCTION695, PRODUCTION696, PRODUCTION697, PRODUCTION698, PRODUCTION699, PRODUCTION700, PRODUCTION701, PRODUCTION702, PRODUCTION703, PRODUCTION704, PRODUCTION705, PRODUCTION706, PRODUCTION707, PRODUCTION708, PRODUCTION709, PRODUCTION710, PRODUCTION711, PRODUCTION712, PRODUCTION713, PRODUCTION714, PRODUCTION715, PRODUCTION716, PRODUCTION717, PRODUCTION718, PRODUCTION719, PRODUCTION720, PRODUCTION721, PRODUCTION722, PRODUCTION723, PRODUCTION724, PRODUCTION725, PRODUCTION726, PRODUCTION727, PRODUCTION728, PRODUCTION729, PRODUCTION730, PRODUCTION731, PRODUCTION732, PRODUCTION733, PRODUCTION734, PRODUCTION735, PRODUCTION736, PRODUCTION737, PRODUCTION738, PRODUCTION739, PRODUCTION740, PRODUCTION741, PRODUCTION742, PRODUCTION743, PRODUCTION744, PRODUCTION745, PRODUCTION746, PRODUCTION747, PRODUCTION748, PRODUCTION749, PRODUCTION750, PRODUCTION751, PRODUCTION752, PRODUCTION753, PRODUCTION754, PRODUCTION755, PRODUCTION756, PRODUCTION757, PRODUCTION758, PRODUCTION759, PRODUCTION760, PRODUCTION761, PRODUCTION762, PRODUCTION763, PRODUCTION764, PRODUCTION765, PRODUCTION766, PRODUCTION767, PRODUCTION768, PRODUCTION769, PRODUCTION770, PRODUCTION771, PRODUCTION772, PRODUCTION773, PRODUCTION774, PRODUCTION775, PRODUCTION776, PRODUCTION777, PRODUCTION778, PRODUCTION779, PRODUCTION780, PRODUCTION781, PRODUCTION782, PRODUCTION783, PRODUCTION784, PRODUCTION785, PRODUCTION786, PRODUCTION787, PRODUCTION788, PRODUCTION789, PRODUCTION790, PRODUCTION791, PRODUCTION792, PRODUCTION793, PRODUCTION794, PRODUCTION795, PRODUCTION796, PRODUCTION797, PRODUCTION798, PRODUCTION799, PRODUCTION800, PRODUCTION801, PRODUCTION802, PRODUCTION803, PRODUCTION804, PRODUCTION805, PRODUCTION806, PRODUCTION807, PRODUCTION808, PRODUCTION809, PRODUCTION810, PRODUCTION811, PRODUCTION812, PRODUCTION813, PRODUCTION814, PRODUCTION815, PRODUCTION816, PRODUCTION817, PRODUCTION818, PRODUCTION819, PRODUCTION820, PRODUCTION821, PRODUCTION822, PRODUCTION823, PRODUCTION824, PRODUCTION825, PRODUCTION826, PRODUCTION827, PRODUCTION828, PRODUCTION829, PRODUCTION830, PRODUCTION831, PRODUCTION832, PRODUCTION833, PRODUCTION834, PRODUCTION835, PRODUCTION836, PRODUCTION837, PRODUCTION838, PRODUCTION839, PRODUCTION840, PRODUCTION841, PRODUCTION842, PRODUCTION843, PRODUCTION844, PRODUCTION845, PRODUCTION846, PRODUCTION847, PRODUCTION848, PRODUCTION849, PRODUCTION850, PRODUCTION851, PRODUCTION852, PRODUCTION853, PRODUCTION854, PRODUCTION855, PRODUCTION856, PRODUCTION857, PRODUCTION858, PRODUCTION859, PRODUCTION860, PRODUCTION861, PRODUCTION862, PRODUCTION863, PRODUCTION864, PRODUCTION865, PRODUCTION866, PRODUCTION867, PRODUCTION868, PRODUCTION869, PRODUCTION870, PRODUCTION871, PRODUCTION872, PRODUCTION873, PRODUCTION874, PRODUCTION875, PRODUCTION876, PRODUCTION877, PRODUCTION878, PRODUCTION879, PRODUCTION880, PRODUCTION881, PRODUCTION882, PRODUCTION883, PRODUCTION884, PRODUCTION885, PRODUCTION886, PRODUCTION887, PRODUCTION888, PRODUCTION889, PRODUCTION890, PRODUCTION891, PRODUCTION892, PRODUCTION893, PRODUCTION894, PRODUCTION895, PRODUCTION896, PRODUCTION897, PRODUCTION898, PRODUCTION899, PRODUCTION900, PRODUCTION901, PRODUCTION902, PRODUCTION903, PRODUCTION904, PRODUCTION905, PRODUCTION906, PRODUCTION907, PRODUCTION908, PRODUCTION909, PRODUCTION910, XIOCONTROLSPECLIST, PRODUCTION912, PRODUCTION913, PRODUCTION914, PRODUCTION915, PRODUCTION916, PRODUCTION917, PRODUCTION918, PRODUCTION919, PRODUCTION920, PRODUCTION921, PRODUCTION922, PRODUCTION923, PRODUCTION924, PRODUCTION925, PRODUCTION926, PRODUCTION927, PRODUCTION928, PRODUCTION929, PRODUCTION930, PRODUCTION931, PRODUCTION932, PRODUCTION933, PRODUCTION934, PRODUCTION935, PRODUCTION936, PRODUCTION937, PRODUCTION938, PRODUCTION939, PRODUCTION940, PRODUCTION941, PRODUCTION942, PRODUCTION943, PRODUCTION944, PRODUCTION945, PRODUCTION946, PRODUCTION947, PRODUCTION948, PRODUCTION949, PRODUCTION950, PRODUCTION951, PRODUCTION952, PRODUCTION953, PRODUCTION954, PRODUCTION955, PRODUCTION956, PRODUCTION957, PRODUCTION958, PRODUCTION959, PRODUCTION960, PRODUCTION961, PRODUCTION962, PRODUCTION963, PRODUCTION964, PRODUCTION965, PRODUCTION966, PRODUCTION967, PRODUCTION968, PRODUCTION969, PRODUCTION970, PRODUCTION971, PRODUCTION972, PRODUCTION973, PRODUCTION974, PRODUCTION975, PRODUCTION976, PRODUCTION977, PRODUCTION978, PRODUCTION979, PRODUCTION980, PRODUCTION981, PRODUCTION982, PRODUCTION983, PRODUCTION984, PRODUCTION985, PRODUCTION986, PRODUCTION987, PRODUCTION988, PRODUCTION989, PRODUCTION990, PRODUCTION991, PRODUCTION992, PRODUCTION993, PRODUCTION994, PRODUCTION995, PRODUCTION996, PRODUCTION997, PRODUCTION998, PRODUCTION999, PRODUCTION1000, PRODUCTION1001, PRODUCTION1002, PRODUCTION1003, PRODUCTION1004, PRODUCTION1005, PRODUCTION1006, PRODUCTION1007, PRODUCTION1008, PRODUCTION1009, PRODUCTION1010, PRODUCTION1011, PRODUCTION1012, PRODUCTION1013, PRODUCTION1014, PRODUCTION1015, PRODUCTION1016, PRODUCTION1017, PRODUCTION1018, PRODUCTION1019, PRODUCTION1020, PRODUCTION1021, PRODUCTION1022, PRODUCTION1023, PRODUCTION1024, PRODUCTION1025, PRODUCTION1026, PRODUCTION1027, PRODUCTION1028, PRODUCTION1029, PRODUCTION1030, PRODUCTION1031, PRODUCTION1032, PRODUCTION1033, PRODUCTION1034, PRODUCTION1035, PRODUCTION1036, PRODUCTION1037, PRODUCTION1038, PRODUCTION1039, PRODUCTION1040, PRODUCTION1041, PRODUCTION1042, PRODUCTION1043, PRODUCTION1044, PRODUCTION1045, PRODUCTION1046, PRODUCTION1047, PRODUCTION1048, PRODUCTION1049, PRODUCTION1050, PRODUCTION1051, PRODUCTION1052, PRODUCTION1053, PRODUCTION1054, PRODUCTION1055, PRODUCTION1056, PRODUCTION1057, PRODUCTION1058, PRODUCTION1059, PRODUCTION1060, PRODUCTION1061, PRODUCTION1062, PRODUCTION1063, PRODUCTION1064, PRODUCTION1065, PRODUCTION1066, PRODUCTION1067, PRODUCTION1068, PRODUCTION1069, PRODUCTION1070, PRODUCTION1071, PRODUCTION1072, PRODUCTION1073, PRODUCTION1074, PRODUCTION1075, PRODUCTION1076, PRODUCTION1077, PRODUCTION1078, PRODUCTION1079, PRODUCTION1080, PRODUCTION1081, PRODUCTION1082, PRODUCTION1083, PRODUCTION1084, PRODUCTION1085, PRODUCTION1086, PRODUCTION1087, PRODUCTION1088, PRODUCTION1089, PRODUCTION1090, PRODUCTION1091, PRODUCTION1092, PRODUCTION1093, PRODUCTION1094, PRODUCTION1095, PRODUCTION1096, PRODUCTION1097, PRODUCTION1098, PRODUCTION1099, PRODUCTION1100, PRODUCTION1101, PRODUCTION1102, PRODUCTION1103, PRODUCTION1104, PRODUCTION1105, PRODUCTION1106, PRODUCTION1107, PRODUCTION1108, PRODUCTION1109, PRODUCTION1110, PRODUCTION1111, PRODUCTION1112, PRODUCTION1113, PRODUCTION1114, PRODUCTION1115, PRODUCTION1116, PRODUCTION1117, PRODUCTION1118, PRODUCTION1119, PRODUCTION1120, PRODUCTION1121, PRODUCTION1122, PRODUCTION1123, PRODUCTION1124, PRODUCTION1125, PRODUCTION1126, PRODUCTION1127, PRODUCTION1128, PRODUCTION1129, PRODUCTION1130, PRODUCTION1131, PRODUCTION1132, PRODUCTION1133, PRODUCTION1134, PRODUCTION1135, PRODUCTION1136, PRODUCTION1137, PRODUCTION1138, PRODUCTION1139, PRODUCTION1140, PRODUCTION1141, PRODUCTION1142, PRODUCTION1143, PRODUCTION1144, PRODUCTION1145, PRODUCTION1146, PRODUCTION1147, PRODUCTION1148, PRODUCTION1149, PRODUCTION1150, PRODUCTION1151, PRODUCTION1152, PRODUCTION1153, PRODUCTION1154, PRODUCTION1155, PRODUCTION1156, PRODUCTION1157, PRODUCTION1158, PRODUCTION1159, PRODUCTION1160, PRODUCTION1161, PRODUCTION1162, PRODUCTION1163, PRODUCTION1164, PRODUCTION1165, PRODUCTION1166, PRODUCTION1167, PRODUCTION1168, PRODUCTION1169, PRODUCTION1170, PRODUCTION1171, PRODUCTION1172, PRODUCTION1173, PRODUCTION1174, PRODUCTION1175, PRODUCTION1176, PRODUCTION1177, PRODUCTION1178, PRODUCTION1179, PRODUCTION1180, PRODUCTION1181, PRODUCTION1182, PRODUCTION1183, PRODUCTION1184, PRODUCTION1185, PRODUCTION1186, PRODUCTION1187, PRODUCTION1188, PRODUCTION1189, PRODUCTION1190, PRODUCTION1191, PRODUCTION1192, PRODUCTION1193, PRODUCTION1194, PRODUCTION1195, PRODUCTION1196, PRODUCTION1197, PRODUCTION1198, PRODUCTION1199, PRODUCTION1200, PRODUCTION1201, PRODUCTION1202, PRODUCTION1203, PRODUCTION1204, PRODUCTION1205, PRODUCTION1206, PRODUCTION1207, PRODUCTION1208, PRODUCTION1209, PRODUCTION1210, PRODUCTION1211, PRODUCTION1212, PRODUCTION1213, PRODUCTION1214, PRODUCTION1215, PRODUCTION1216, PRODUCTION1217, PRODUCTION1218, PRODUCTION1219, PRODUCTION1220, PRODUCTION1221, PRODUCTION1222, PRODUCTION1223, PRODUCTION1224, PRODUCTION1225, PRODUCTION1226, PRODUCTION1227, PRODUCTION1228, PRODUCTION1229, PRODUCTION1230, PRODUCTION1231, PRODUCTION1232, PRODUCTION1233, PRODUCTION1234, PRODUCTION1235, PRODUCTION1236, PRODUCTION1237, PRODUCTION1238, PRODUCTION1239, PRODUCTION1240, PRODUCTION1241, PRODUCTION1242, PRODUCTION1243, XSFDUMMYARGNAME, XSFVARNAME, PRODUCTION1246, PRODUCTION1247, PRODUCTION1248, PRODUCTION1249, PRODUCTION1250, PRODUCTION1251, PRODUCTION1252, PRODUCTION1253, PRODUCTION1254, PRODUCTION1255, PRODUCTION1256, PRODUCTION1257, PRODUCTION1258, PRODUCTION1259, PRODUCTION1260, PRODUCTION1261, PRODUCTION1262, PRODUCTION1263, PRODUCTION1264, PRODUCTION1265, PRODUCTION1266, PRODUCTION1267, PRODUCTION1268, ENDTYPESTMT1, ENDTYPESTMT2, ENTITYDECL3, ENTITYDECL4, ENTITYDECL5, INVALIDENTITYDECL6, INTENTSTMT7, OPTIONALSTMT8, ACCESSSTMT9, SAVESTMT10, DIMENSIONSTMT11, ALLOCATABLESTMT12, POINTERSTMT13, TARGETSTMT14, VARIABLE15, VARIABLE152, VARIABLE16, DATAREF17, SFDATAREF18, PRIMARY19, PRIMARY192, PRIMARY20, PRIMARY21, PRIMARY212, PRIMARY22, PRIMARY23, PRIMARY232, PRIMARY24, PRIMARY25, PRIMARY26, PRIMARY262, PRIMARY27, COPERAND28, COPERAND29, COPERAND30, UFPRIMARY31, UFPRIMARY312, UFPRIMARY32, UFPRIMARY33, UFPRIMARY34, UFPRIMARY342, UFPRIMARY35, MULTOPERAND36, UFFACTOR37, ADDOPERAND38, LEVEL2EXPR39, LEVEL3EXPR40, CEXPR41, LEVEL4EXPR42, ANDOPERAND43, OROPERAND44, EQUIVOPERAND45, LEVEL5EXPR46, ASSIGNMENTSTMT47, ASSIGNMENTSTMT472, ASSIGNMENTSTMT48, ASSIGNMENTSTMT49, ASSIGNMENTSTMT492, ASSIGNMENTSTMT50, ASSIGNMENTSTMT51, ASSIGNMENTSTMT512, ASSIGNMENTSTMT52, MASKEDELSEWHERESTMT53, ELSEWHERESTMT54, ENDWHERESTMT55, ENDWHERESTMT56, ENDFORALLSTMT57, ENDFORALLSTMT58, ENDIFSTMT59, ENDIFSTMT60, ENDSELECTSTMT61, ENDSELECTSTMT62, ENDDOSTMT63, ENDDOSTMT64, CYCLESTMT65, EXITSTMT66, FORMATSTMT67, ENDPROGRAMSTMT68, ENDPROGRAMSTMT69, ENDMODULESTMT70, ENDMODULESTMT71, USESTMT72, ENDBLOCKDATASTMT73, ENDBLOCKDATASTMT74, ENDBLOCKDATASTMT75, ENDBLOCKDATASTMT76, ENDINTERFACESTMT77, ENDINTERFACESTMT78, FUNCTIONSTMT79, ENDFUNCTIONSTMT80, ENDFUNCTIONSTMT81, SUBROUTINESTMT82, SUBROUTINESTMT822, ENDSUBROUTINESTMT83, ENDSUBROUTINESTMT84, ENTRYSTMT85, ENTRYSTMT852 };

    public Production getProduction(int index) { return productions[index]; }
}
