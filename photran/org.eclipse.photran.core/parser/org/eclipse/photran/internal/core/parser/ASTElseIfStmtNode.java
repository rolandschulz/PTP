// Generated by Ludwig version 1.0 alpha 6

package org.eclipse.photran.internal.core.parser; import org.eclipse.photran.internal.core.lexer.*;


/**
 * <ElseIfStmt> ::= LblDef:<LblDef> telseif:T_ELSEIF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN teos:T_EOS  :production599
 * <ElseIfStmt> ::= LblDef:<LblDef> telseif:T_ELSEIF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN EndName:<EndName> teos:T_EOS  :production600
 * <ElseIfStmt> ::= LblDef:<LblDef> telse:T_ELSE tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN teos:T_EOS  :production601
 * <ElseIfStmt> ::= LblDef:<LblDef> telse:T_ELSE tif:T_IF tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN tthen:T_THEN EndName:<EndName> teos:T_EOS  :production602
 */
public class ASTElseIfStmtNode extends ParseTreeNode
{
    public ASTElseIfStmtNode(Nonterminal nonterminal, Production production)
    {
        super(nonterminal, production);
    }

    public ASTLblDefNode getASTLblDef()
    {
        return (ASTLblDefNode)this.getChild("LblDef");
    }

    public Token getASTTelseif()
    {
        return this.getChildToken("telseif");
    }

    public Token getASTTlparen()
    {
        return this.getChildToken("tlparen");
    }

    public ASTExprNode getASTExpr()
    {
        return (ASTExprNode)this.getChild("Expr");
    }

    public Token getASTTrparen()
    {
        return this.getChildToken("trparen");
    }

    public Token getASTTthen()
    {
        return this.getChildToken("tthen");
    }

    public Token getASTTeos()
    {
        return this.getChildToken("teos");
    }

    public ASTEndNameNode getASTEndName()
    {
        return (ASTEndNameNode)this.getChild("EndName");
    }

    public Token getASTTelse()
    {
        return this.getChildToken("telse");
    }

    public Token getASTTif()
    {
        return this.getChildToken("tif");
    }

    protected void visitThisNodeUsing(ASTVisitor visitor) { visitor.visitASTElseIfStmtNode(this); }
}
