// Generated by Ludwig version 1.0 alpha 6

package org.eclipse.photran.internal.core.parser;

import org.eclipse.photran.internal.core.lexer.Token;


/**
 * <RelOp> ::= teq:T_EQ 
 * <RelOp> ::= tne:T_NE 
 * <RelOp> ::= tlt:T_LT 
 * <RelOp> ::= tle:T_LE 
 * <RelOp> ::= tgt:T_GT 
 * <RelOp> ::= tge:T_GE 
 * <RelOp> ::= teqeq:T_EQEQ 
 * <RelOp> ::= tslasheq:T_SLASHEQ 
 * <RelOp> ::= tlessthan:T_LESSTHAN 
 * <RelOp> ::= tlessthaneq:T_LESSTHANEQ 
 * <RelOp> ::= tgreaterthan:T_GREATERTHAN 
 * <RelOp> ::= tgreaterthaneq:T_GREATERTHANEQ 
 */
public class ASTRelOpNode extends ParseTreeNode
{
    public ASTRelOpNode(Nonterminal nonterminal, Production production)
    {
        super(nonterminal, production);
    }

    public Token getASTTeq()
    {
        return this.getChildToken("teq");
    }

    public Token getASTTne()
    {
        return this.getChildToken("tne");
    }

    public Token getASTTlt()
    {
        return this.getChildToken("tlt");
    }

    public Token getASTTle()
    {
        return this.getChildToken("tle");
    }

    public Token getASTTgt()
    {
        return this.getChildToken("tgt");
    }

    public Token getASTTge()
    {
        return this.getChildToken("tge");
    }

    public Token getASTTeqeq()
    {
        return this.getChildToken("teqeq");
    }

    public Token getASTTslasheq()
    {
        return this.getChildToken("tslasheq");
    }

    public Token getASTTlessthan()
    {
        return this.getChildToken("tlessthan");
    }

    public Token getASTTlessthaneq()
    {
        return this.getChildToken("tlessthaneq");
    }

    public Token getASTTgreaterthan()
    {
        return this.getChildToken("tgreaterthan");
    }

    public Token getASTTgreaterthaneq()
    {
        return this.getChildToken("tgreaterthaneq");
    }

    protected void visitThisNodeUsing(ASTVisitor visitor) { visitor.visitASTRelOpNode(this); }
}
