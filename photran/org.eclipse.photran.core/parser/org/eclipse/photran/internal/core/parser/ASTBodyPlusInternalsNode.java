// Generated by Ludwig version 1.0 alpha 6

package org.eclipse.photran.internal.core.parser; import org.eclipse.photran.internal.core.lexer.*;


/**
 * <BodyPlusInternals> ::= Body:<Body> ContainsStmt:<ContainsStmt> InternalSubprogram:<InternalSubprogram>  :production52
 * <BodyPlusInternals> ::= ContainsStmt:<ContainsStmt> InternalSubprogram:<InternalSubprogram>  :production53
 * <BodyPlusInternals> ::= @:<BodyPlusInternals> InternalSubprogram:<InternalSubprogram>  :production54
 */
public class ASTBodyPlusInternalsNode extends ParseTreeNode
{
    public ASTBodyPlusInternalsNode(Nonterminal nonterminal, Production production)
    {
        super(nonterminal, production);
    }

    public int count()
    {
        ParseTreeNode node = this;
        int count = 1;
        while (node.getChild("@") != null)
        {
            count++;
            node = node.getChild("@");
        }
        return count;
    }

    public ASTBodyNode getASTBody(int index)
    {
        ASTBodyPlusInternalsNode node = this;
        for (int i = 0; i < index; i++)
            node = (ASTBodyPlusInternalsNode)node.getChild("@");
        return (ASTBodyNode)node.getChild("Body");
    }

    public ASTContainsStmtNode getASTContainsStmt(int index)
    {
        ASTBodyPlusInternalsNode node = this;
        for (int i = 0; i < index; i++)
            node = (ASTBodyPlusInternalsNode)node.getChild("@");
        return (ASTContainsStmtNode)node.getChild("ContainsStmt");
    }

    public ASTInternalSubprogramNode getASTInternalSubprogram(int index)
    {
        ASTBodyPlusInternalsNode node = this;
        for (int i = 0; i < index; i++)
            node = (ASTBodyPlusInternalsNode)node.getChild("@");
        return (ASTInternalSubprogramNode)node.getChild("InternalSubprogram");
    }

    protected void visitThisNodeUsing(ASTVisitor visitor) { visitor.visitASTBodyPlusInternalsNode(this); }
}
