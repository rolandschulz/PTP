// Generated by Ludwig version 1.0 alpha 6

package org.eclipse.photran.internal.core.parser; import org.eclipse.photran.internal.core.lexer.*;


/**
 * <ExecutableConstruct> ::= ActionStmt:<ActionStmt>  :production75
 * <ExecutableConstruct> ::= CaseConstruct:<CaseConstruct>  :production76
 * <ExecutableConstruct> ::= DoConstruct:<DoConstruct>  :production77
 * <ExecutableConstruct> ::= ForallConstruct:<ForallConstruct>  :production78
 * <ExecutableConstruct> ::= IfConstruct:<IfConstruct>  :production79
 * <ExecutableConstruct> ::= WhereConstruct:<WhereConstruct>  :production80
 * <ExecutableConstruct> ::= EndDoStmt:<EndDoStmt>  :production81
 */
public class ASTExecutableConstructNode extends ParseTreeNode
{
    public ASTExecutableConstructNode(Nonterminal nonterminal, Production production)
    {
        super(nonterminal, production);
    }

    public ASTActionStmtNode getASTActionStmt()
    {
        return (ASTActionStmtNode)this.getChild("ActionStmt");
    }

    public ASTCaseConstructNode getASTCaseConstruct()
    {
        return (ASTCaseConstructNode)this.getChild("CaseConstruct");
    }

    public ASTDoConstructNode getASTDoConstruct()
    {
        return (ASTDoConstructNode)this.getChild("DoConstruct");
    }

    public ASTForallConstructNode getASTForallConstruct()
    {
        return (ASTForallConstructNode)this.getChild("ForallConstruct");
    }

    public ASTIfConstructNode getASTIfConstruct()
    {
        return (ASTIfConstructNode)this.getChild("IfConstruct");
    }

    public ASTWhereConstructNode getASTWhereConstruct()
    {
        return (ASTWhereConstructNode)this.getChild("WhereConstruct");
    }

    public ASTEndDoStmtNode getASTEndDoStmt()
    {
        return (ASTEndDoStmtNode)this.getChild("EndDoStmt");
    }

    protected void visitThisNodeUsing(ASTVisitor visitor) { visitor.visitASTExecutableConstructNode(this); }
}
