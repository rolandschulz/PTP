// Generated by Ludwig version 1.0 alpha 6

package org.eclipse.photran.internal.core.lexer;

import org.eclipse.photran.internal.core.parser.ASTVisitor;
import org.eclipse.photran.internal.core.parser.AbstractParseTreeNode;
import org.eclipse.photran.internal.core.parser.GenericParseTreeVisitor;
import org.eclipse.photran.internal.core.parser.ParseTreeVisitor;
import org.eclipse.photran.internal.core.parser.ParserSymbol;
import org.eclipse.photran.internal.core.parser.Terminal;

/**
 * Enumerates the terminal symbols in the grammar being parsed
 */
public class Token extends AbstractParseTreeNode implements ParserSymbol
{
    /**
     * The Terminal that this token is an instance of
     */
    protected Terminal terminal;

    /**
     * Returns the Terminal that this token is an instance of
     */
    public Terminal getTerminal() { return terminal; }

    /**
     * Sets the Terminal that this token is an instance of
     */
    public void setTerminal(Terminal value) { terminal = value; }

    /**
     * The filename in which the token occurred
     */
    protected String filename;

    /**
     * Returns the filename in which the token occurred
     */
    public String getFilename() { return filename; }

    /**
     * Sets the filename in which the token occurred
     */
    public void setFilename(String value) { filename = value; }

    /**
     * The line number on which the token starts (1=first line, 2=second, etc.)
     */
    protected int startLine;

    /**
     * Returns the line number on which the token starts (1=first line, 2=second, etc.)
     */
    public int getStartLine() { return startLine; }

    /**
     * Sets the line number on which the token starts (1=first line, 2=second, etc.)
     */
    public void setStartLine(int value) { startLine = value; }

    /**
     * The column number on which the token starts (1=first column, 2=second, etc.)
     */
    protected int startCol;

    /**
     * Returns the column number on which the token starts (1=first column, 2=second, etc.)
     */
    public int getStartCol() { return startCol; }

    /**
     * Sets the column number on which the token starts (1=first column, 2=second, etc.)
     */
    public void setStartCol(int value) { startCol = value; }

    /**
     * The line number on which the token ends (1=first line, 2=second, etc.)
     */
    protected int endLine;

    /**
     * Returns the line number on which the token ends (1=first line, 2=second, etc.)
     */
    public int getEndLine() { return endLine; }

    /**
     * Sets the line number on which the token ends (1=first line, 2=second, etc.)
     */
    public void setEndLine(int value) { endLine = value; }

    /**
     * The column number on which the token ends (1=first column, 2=second, etc.)
     */
    protected int endCol;

    /**
     * Returns the column number on which the token ends (1=first column, 2=second, etc.)
     */
    public int getEndCol() { return endCol; }

    /**
     * Sets the column number on which the token ends (1=first column, 2=second, etc.)
     */
    public void setEndCol(int value) { endCol = value; }

    /**
     * The start of the token, as a character offset in the file
     * 0=first character, 1=second, etc.
     */
    protected int offset;

    /**
     * Returns the start of the token, as a character offset in the file
     * 0=first character, 1=second, etc.
     */
    public int getOffset() { return offset; }

    /**
     * Sets the start of the token, as a character offset in the file
     * 0=first character, 1=second, etc.
     */
    public void setOffset(int value) { offset = value; }

    /**
     * The length of the token text, in characters
     */
    protected int length;

    /**
     * Returns the length of the token text, in characters
     */
    public int getLength() { return length; }

    /**
     * Sets the length of the token text, in characters
     */
    public void setLength(int value) { length = value; }

    /**
     * The token text
     */
    protected String text;

    /**
     * Returns the token text
     */
    public String getText() { return text; }

    /**
     * Sets the token text
     */
    public void setText(String value) { text = value; }

    /**
     * Whitespace and whitetext appearing before this token that should be associated with this token
     */
    protected String whiteBefore;

    /**
     * Returns whitespace and whitetext appearing before this token that should be associated with this token
     */
    public String getWhiteBefore() { return whiteBefore; }

    /**
     * Sets whitespace and whitetext appearing before this token that should be associated with this token
     */
    public void setWhiteBefore(String value) { whiteBefore = value; }

    /**
     * Whitespace and whitetext appearing after this token that should be associated with this token, not the next
     */
    protected String whiteAfter;

    /**
     * Returns whitespace and whitetext appearing after this token that should be associated with this token, not the next
     */
    public String getWhiteAfter() { return whiteAfter; }

    /**
     * Sets whitespace and whitetext appearing after this token that should be associated with this token, not the next
     */
    public void setWhiteAfter(String value) { whiteAfter = value; }

    public Token()
    {
    }

    public Token(Terminal theTerminal, String theText, int theOffset, int theLength, int theStartLine, int theStartCol, int theEndLine, int theEndCol)
    {
        terminal = theTerminal;
        text = theText;
        offset = theOffset;
        length = theLength;
        startLine = theStartLine;
        startCol = theStartCol;
        endLine = theEndLine;
        endCol = theEndCol;
    }

    /**
     * Returns a string describing the token
     */
    public String getDescription() { return terminal.getDescription() + ": \"" + text + "\""; }

    /**
     * See AbstractParseTreeNode
     */
    public void visitUsing(ParseTreeVisitor visitor) { ; }

    /**
     * See AbstractParseTreeNode
     */
    public void visitUsing(GenericParseTreeVisitor visitor) { visitor.visitToken(this); }

    /**
     * See AbstractParseTreeNode
     */
    public String toString(int numSpaces) { return indent(numSpaces) + getDescription() + "\n"; }

    /**
     * See AbstractParseTreeNode
     */
    public void visitTopDownUsing(ASTVisitor visitor) { ; }

    /**
     * See AbstractParseTreeNode
     */
    public void visitBottomUpUsing(ASTVisitor visitor) { ; }

    public String toString()
    {
        return getDescription();
    }
}
