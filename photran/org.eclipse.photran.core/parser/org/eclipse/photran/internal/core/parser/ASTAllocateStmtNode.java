// Generated by Ludwig version 1.0 alpha 6

package org.eclipse.photran.internal.core.parser; import org.eclipse.photran.internal.core.lexer.*;


/**
 * <AllocateStmt> ::= LblDef:<LblDef> tallocate:T_ALLOCATE tlparen:T_LPAREN AllocationList:<AllocationList> tcomma:T_COMMA tstateq:T_STATEQ Variable:<Variable> trparen:T_RPAREN teos:T_EOS  :production432
 * <AllocateStmt> ::= LblDef:<LblDef> tallocate:T_ALLOCATE tlparen:T_LPAREN AllocationList:<AllocationList> trparen:T_RPAREN teos:T_EOS  :production433
 */
public class ASTAllocateStmtNode extends ParseTreeNode
{
    public ASTAllocateStmtNode(Nonterminal nonterminal, Production production)
    {
        super(nonterminal, production);
    }

    public ASTLblDefNode getASTLblDef()
    {
        return (ASTLblDefNode)this.getChild("LblDef");
    }

    public Token getASTTallocate()
    {
        return this.getChildToken("tallocate");
    }

    public Token getASTTlparen()
    {
        return this.getChildToken("tlparen");
    }

    public ASTAllocationListNode getASTAllocationList()
    {
        return (ASTAllocationListNode)this.getChild("AllocationList");
    }

    public Token getASTTcomma()
    {
        return this.getChildToken("tcomma");
    }

    public Token getASTTstateq()
    {
        return this.getChildToken("tstateq");
    }

    public ASTVariableNode getASTVariable()
    {
        return (ASTVariableNode)this.getChild("Variable");
    }

    public Token getASTTrparen()
    {
        return this.getChildToken("trparen");
    }

    public Token getASTTeos()
    {
        return this.getChildToken("teos");
    }

    protected void visitThisNodeUsing(ASTVisitor visitor) { visitor.visitASTAllocateStmtNode(this); }
}
