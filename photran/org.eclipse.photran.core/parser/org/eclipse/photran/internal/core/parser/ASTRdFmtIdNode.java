// Generated by Ludwig version 1.0 alpha 6

package org.eclipse.photran.internal.core.parser; import org.eclipse.photran.internal.core.lexer.*;


/**
 * <RdFmtId> ::= LblRef:<LblRef>  :production703
 * <RdFmtId> ::= tasterisk:T_ASTERISK  :production704
 * <RdFmtId> ::= COperand:<COperand>  :production705
 * <RdFmtId> ::= COperand:<COperand> ConcatOp:<ConcatOp> CPrimary:<CPrimary>  :production706
 * <RdFmtId> ::= RdFmtIdExpr:<RdFmtIdExpr> ConcatOp:<ConcatOp> CPrimary:<CPrimary>  :production707
 */
public class ASTRdFmtIdNode extends ParseTreeNode
{
    public ASTRdFmtIdNode(Nonterminal nonterminal, Production production)
    {
        super(nonterminal, production);
    }

    public ASTLblRefNode getASTLblRef()
    {
        return (ASTLblRefNode)this.getChild("LblRef");
    }

    public Token getASTTasterisk()
    {
        return this.getChildToken("tasterisk");
    }

    public ASTCOperandNode getASTCOperand()
    {
        return (ASTCOperandNode)this.getChild("COperand");
    }

    public ASTConcatOpNode getASTConcatOp()
    {
        return (ASTConcatOpNode)this.getChild("ConcatOp");
    }

    public ASTCPrimaryNode getASTCPrimary()
    {
        return (ASTCPrimaryNode)this.getChild("CPrimary");
    }

    public ASTRdFmtIdExprNode getASTRdFmtIdExpr()
    {
        return (ASTRdFmtIdExprNode)this.getChild("RdFmtIdExpr");
    }

    protected void visitThisNodeUsing(ASTVisitor visitor) { visitor.visitASTRdFmtIdNode(this); }
}
