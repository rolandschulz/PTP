// Generated by Ludwig version 1.0 alpha 6

package org.eclipse.photran.internal.core.parser;

import org.eclipse.photran.internal.core.lexer.Token;


/**
 * <FmtSpec> ::= Formatedit:<Formatedit> 
 * <FmtSpec> ::= Formatsep:<Formatsep> 
 * <FmtSpec> ::= Formatsep:<Formatsep> Formatedit:<Formatedit> 
 * <FmtSpec> ::= FmtSpec:<FmtSpec> Formatsep:<Formatsep> 
 * <FmtSpec> ::= FmtSpec:<FmtSpec> Formatsep:<Formatsep> Formatedit:<Formatedit> 
 * <FmtSpec> ::= FmtSpec:<FmtSpec> tcomma:T_COMMA Formatedit:<Formatedit> 
 * <FmtSpec> ::= FmtSpec:<FmtSpec> tcomma:T_COMMA Formatsep:<Formatsep> 
 * <FmtSpec> ::= FmtSpec:<FmtSpec> tcomma:T_COMMA Formatsep:<Formatsep> Formatedit:<Formatedit> 
 */
public class ASTFmtSpecNode extends ParseTreeNode
{
    public ASTFmtSpecNode(Nonterminal nonterminal, Production production)
    {
        super(nonterminal, production);
    }

    public ASTFormateditNode getASTFormatedit()
    {
        return (ASTFormateditNode)this.getChild("Formatedit");
    }

    public ASTFormatsepNode getASTFormatsep()
    {
        return (ASTFormatsepNode)this.getChild("Formatsep");
    }

    public ASTFmtSpecNode getASTFmtSpec()
    {
        return (ASTFmtSpecNode)this.getChild("FmtSpec");
    }

    public Token getASTTcomma()
    {
        return this.getChildToken("tcomma");
    }

    protected void visitThisNodeUsing(ASTVisitor visitor) { visitor.visitASTFmtSpecNode(this); }
}
