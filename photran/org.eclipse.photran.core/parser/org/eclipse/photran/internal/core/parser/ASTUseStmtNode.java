// Generated by Ludwig version 1.0 alpha 6

package org.eclipse.photran.internal.core.parser;

import org.eclipse.photran.internal.core.lexer.Token;


/**
 * <UseStmt> ::= LblDef:<LblDef> tuse:T_USE Name:<Name> teos:T_EOS 
 * <UseStmt> ::= LblDef:<LblDef> tuse:T_USE Name:<Name> tcomma:T_COMMA RenameList:<RenameList> teos:T_EOS 
 * <UseStmt> ::= LblDef:<LblDef> tuse:T_USE Name:<Name> tcomma:T_COMMA tonly:T_ONLY tcolon:T_COLON ( OnlyList:<OnlyList> )? teos:T_EOS 
 */
public class ASTUseStmtNode extends ParseTreeNode
{
    public ASTUseStmtNode(Nonterminal nonterminal, Production production)
    {
        super(nonterminal, production);
    }

    public ASTLblDefNode getASTLblDef()
    {
        return (ASTLblDefNode)this.getChild("LblDef");
    }

    public Token getASTTuse()
    {
        return this.getChildToken("tuse");
    }

    public ASTNameNode getASTName()
    {
        return (ASTNameNode)this.getChild("Name");
    }

    public Token getASTTeos()
    {
        return this.getChildToken("teos");
    }

    public Token getASTTcomma()
    {
        return this.getChildToken("tcomma");
    }

    public ASTRenameListNode getASTRenameList()
    {
        return (ASTRenameListNode)this.getChild("RenameList");
    }

    public Token getASTTonly()
    {
        return this.getChildToken("tonly");
    }

    public Token getASTTcolon()
    {
        return this.getChildToken("tcolon");
    }

    public ASTOnlyListNode getASTOnlyList()
    {
        return (ASTOnlyListNode)this.getChild("OnlyList");
    }

    protected void visitThisNodeUsing(ASTVisitor visitor) { visitor.visitASTUseStmtNode(this); }
}
