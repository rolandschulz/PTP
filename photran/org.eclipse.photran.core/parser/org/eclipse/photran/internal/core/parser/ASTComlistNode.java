// Generated by Ludwig version 1.0 alpha 6

package org.eclipse.photran.internal.core.parser; import org.eclipse.photran.internal.core.lexer.*;


/**
 * <Comlist> ::= CommonBlockObject:<CommonBlockObject>  :production392
 * <Comlist> ::= Comblock:<Comblock> CommonBlockObject:<CommonBlockObject>  :production393
 * <Comlist> ::= @:<Comlist> tcomma:T_COMMA CommonBlockObject:<CommonBlockObject>  :production394
 * <Comlist> ::= @:<Comlist> Comblock:<Comblock> CommonBlockObject:<CommonBlockObject>  :production395
 * <Comlist> ::= @:<Comlist> tcomma:T_COMMA Comblock:<Comblock> CommonBlockObject:<CommonBlockObject>  :production396
 */
public class ASTComlistNode extends ParseTreeNode
{
    public ASTComlistNode(Nonterminal nonterminal, Production production)
    {
        super(nonterminal, production);
    }

    public int count()
    {
        ParseTreeNode node = this;
        int count = 1;
        while (node.getChild("@") != null)
        {
            count++;
            node = node.getChild("@");
        }
        return count;
    }

    public ASTCommonBlockObjectNode getASTCommonBlockObject(int index)
    {
        ASTComlistNode node = this;
        for (int i = 0; i < index; i++)
            node = (ASTComlistNode)node.getChild("@");
        return (ASTCommonBlockObjectNode)node.getChild("CommonBlockObject");
    }

    public ASTComblockNode getASTComblock(int index)
    {
        ASTComlistNode node = this;
        for (int i = 0; i < index; i++)
            node = (ASTComlistNode)node.getChild("@");
        return (ASTComblockNode)node.getChild("Comblock");
    }

    public Token getASTTcomma(int index)
    {
        ASTComlistNode node = this;
        for (int i = 0; i < index; i++)
            node = (ASTComlistNode)node.getChild("@");
        return node.getChildToken("tcomma");
    }

    protected void visitThisNodeUsing(ASTVisitor visitor) { visitor.visitASTComlistNode(this); }
}
