// Generated by Ludwig version 1.0 alpha 6

package org.eclipse.photran.internal.core.parser;

import org.eclipse.photran.internal.core.lexer.Token;


/**
 * <Primary> ::= LogicalConstant:<LogicalConstant> 
 * <Primary> ::= tscon:T_SCON 
 * <Primary> ::= UnsignedArithmeticConstant:<UnsignedArithmeticConstant> 
 * <Primary> ::= ArrayConstructor:<ArrayConstructor> 
 * <Primary> ::= Name:<Name> ( tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN ( SubstringRange:<SubstringRange> )? )? 
 * <Primary> ::= Name:<Name> tpercent:T_PERCENT DataRef:<DataRef> ( tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN ( SubstringRange:<SubstringRange> )? )? 
 * <Primary> ::= Name:<Name> tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN tpercent:T_PERCENT DataRef:<DataRef> ( tlparen2:T_LPAREN SectionSubscriptList2:<SectionSubscriptList> trparen2:T_RPAREN ( SubstringRange:<SubstringRange> )? )? 
 * <Primary> ::= FunctionReference:<FunctionReference> ( SubstringRange:<SubstringRange> )? 
 * <Primary> ::= FunctionReference:<FunctionReference> tpercent:T_PERCENT DataRef:<DataRef> ( tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN ( SubstringRange:<SubstringRange> )? )? 
 * <Primary> ::= tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN 
 * <Primary> ::= SubstrConst:<SubstrConst> 
 */
public class ASTPrimaryNode extends ParseTreeNode
{
    public ASTPrimaryNode(Nonterminal nonterminal, Production production)
    {
        super(nonterminal, production);
    }

    public ASTLogicalConstantNode getASTLogicalConstant()
    {
        return (ASTLogicalConstantNode)this.getChild("LogicalConstant");
    }

    public Token getASTTscon()
    {
        return this.getChildToken("tscon");
    }

    public ASTUnsignedArithmeticConstantNode getASTUnsignedArithmeticConstant()
    {
        return (ASTUnsignedArithmeticConstantNode)this.getChild("UnsignedArithmeticConstant");
    }

    public ASTArrayConstructorNode getASTArrayConstructor()
    {
        return (ASTArrayConstructorNode)this.getChild("ArrayConstructor");
    }

    public ASTNameNode getASTName()
    {
        return (ASTNameNode)this.getChild("Name");
    }

    public Token getASTTlparen()
    {
        return this.getChildToken("tlparen");
    }

    public ASTSectionSubscriptListNode getASTSectionSubscriptList()
    {
        return (ASTSectionSubscriptListNode)this.getChild("SectionSubscriptList");
    }

    public Token getASTTrparen()
    {
        return this.getChildToken("trparen");
    }

    public ASTSubstringRangeNode getASTSubstringRange()
    {
        return (ASTSubstringRangeNode)this.getChild("SubstringRange");
    }

    public Token getASTTpercent()
    {
        return this.getChildToken("tpercent");
    }

    public ASTDataRefNode getASTDataRef()
    {
        return (ASTDataRefNode)this.getChild("DataRef");
    }

    public Token getASTTlparen2()
    {
        return this.getChildToken("tlparen2");
    }

    public ASTSectionSubscriptListNode getASTSectionSubscriptList2()
    {
        return (ASTSectionSubscriptListNode)this.getChild("SectionSubscriptList2");
    }

    public Token getASTTrparen2()
    {
        return this.getChildToken("trparen2");
    }

    public ASTFunctionReferenceNode getASTFunctionReference()
    {
        return (ASTFunctionReferenceNode)this.getChild("FunctionReference");
    }

    public ASTExprNode getASTExpr()
    {
        return (ASTExprNode)this.getChild("Expr");
    }

    public ASTSubstrConstNode getASTSubstrConst()
    {
        return (ASTSubstrConstNode)this.getChild("SubstrConst");
    }

    protected void visitThisNodeUsing(ASTVisitor visitor) { visitor.visitASTPrimaryNode(this); }
}
