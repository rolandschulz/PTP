// Generated by Ludwig version 1.0 alpha 6

package org.eclipse.photran.internal.core.parser; import org.eclipse.photran.internal.core.lexer.*;


/**
 * <SpecificationPartConstruct> ::= UseStmt:<UseStmt>  :production37
 * <SpecificationPartConstruct> ::= ImplicitStmt:<ImplicitStmt>  :production38
 * <SpecificationPartConstruct> ::= ParameterStmt:<ParameterStmt>  :production39
 * <SpecificationPartConstruct> ::= FormatStmt:<FormatStmt>  :production40
 * <SpecificationPartConstruct> ::= EntryStmt:<EntryStmt>  :production41
 * <SpecificationPartConstruct> ::= DeclarationConstruct:<DeclarationConstruct>  :production42
 */
public class ASTSpecificationPartConstructNode extends ParseTreeNode
{
    public ASTSpecificationPartConstructNode(Nonterminal nonterminal, Production production)
    {
        super(nonterminal, production);
    }

    public ASTUseStmtNode getASTUseStmt()
    {
        return (ASTUseStmtNode)this.getChild("UseStmt");
    }

    public ASTImplicitStmtNode getASTImplicitStmt()
    {
        return (ASTImplicitStmtNode)this.getChild("ImplicitStmt");
    }

    public ASTParameterStmtNode getASTParameterStmt()
    {
        return (ASTParameterStmtNode)this.getChild("ParameterStmt");
    }

    public ASTFormatStmtNode getASTFormatStmt()
    {
        return (ASTFormatStmtNode)this.getChild("FormatStmt");
    }

    public ASTEntryStmtNode getASTEntryStmt()
    {
        return (ASTEntryStmtNode)this.getChild("EntryStmt");
    }

    public ASTDeclarationConstructNode getASTDeclarationConstruct()
    {
        return (ASTDeclarationConstructNode)this.getChild("DeclarationConstruct");
    }

    protected void visitThisNodeUsing(ASTVisitor visitor) { visitor.visitASTSpecificationPartConstructNode(this); }
}
