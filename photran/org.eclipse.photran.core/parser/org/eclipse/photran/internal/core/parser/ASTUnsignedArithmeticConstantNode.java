// Generated by Ludwig version 1.0 alpha 6

package org.eclipse.photran.internal.core.parser; import org.eclipse.photran.internal.core.lexer.*;


/**
 * <UnsignedArithmeticConstant> ::= ticon:T_ICON  :production162
 * <UnsignedArithmeticConstant> ::= trcon:T_RCON  :production163
 * <UnsignedArithmeticConstant> ::= tdcon:T_DCON  :production164
 * <UnsignedArithmeticConstant> ::= ComplexConst:<ComplexConst>  :production165
 * <UnsignedArithmeticConstant> ::= ticon:T_ICON tunderscore:T_UNDERSCORE KindParam:<KindParam>  :production166
 * <UnsignedArithmeticConstant> ::= trcon:T_RCON tunderscore:T_UNDERSCORE KindParam:<KindParam>  :production167
 * <UnsignedArithmeticConstant> ::= tdcon:T_DCON tunderscore:T_UNDERSCORE KindParam:<KindParam>  :production168
 */
public class ASTUnsignedArithmeticConstantNode extends ParseTreeNode
{
    public ASTUnsignedArithmeticConstantNode(Nonterminal nonterminal, Production production)
    {
        super(nonterminal, production);
    }

    public Token getASTTicon()
    {
        return this.getChildToken("ticon");
    }

    public Token getASTTrcon()
    {
        return this.getChildToken("trcon");
    }

    public Token getASTTdcon()
    {
        return this.getChildToken("tdcon");
    }

    public ASTComplexConstNode getASTComplexConst()
    {
        return (ASTComplexConstNode)this.getChild("ComplexConst");
    }

    public Token getASTTunderscore()
    {
        return this.getChildToken("tunderscore");
    }

    public ASTKindParamNode getASTKindParam()
    {
        return (ASTKindParamNode)this.getChild("KindParam");
    }

    protected void visitThisNodeUsing(ASTVisitor visitor) { visitor.visitASTUnsignedArithmeticConstantNode(this); }
}
