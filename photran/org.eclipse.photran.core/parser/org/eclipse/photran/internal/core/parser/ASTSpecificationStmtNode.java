// Generated by Ludwig version 1.0 alpha 6

package org.eclipse.photran.internal.core.parser; import org.eclipse.photran.internal.core.lexer.*;


/**
 * <SpecificationStmt> ::= AccessStmt:<AccessStmt>  :production61
 * <SpecificationStmt> ::= AllocatableStmt:<AllocatableStmt>  :production62
 * <SpecificationStmt> ::= CommonStmt:<CommonStmt>  :production63
 * <SpecificationStmt> ::= DataStmt:<DataStmt>  :production64
 * <SpecificationStmt> ::= DimensionStmt:<DimensionStmt>  :production65
 * <SpecificationStmt> ::= EquivalenceStmt:<EquivalenceStmt>  :production66
 * <SpecificationStmt> ::= ExternalStmt:<ExternalStmt>  :production67
 * <SpecificationStmt> ::= IntentStmt:<IntentStmt>  :production68
 * <SpecificationStmt> ::= IntrinsicStmt:<IntrinsicStmt>  :production69
 * <SpecificationStmt> ::= NamelistStmt:<NamelistStmt>  :production70
 * <SpecificationStmt> ::= OptionalStmt:<OptionalStmt>  :production71
 * <SpecificationStmt> ::= PointerStmt:<PointerStmt>  :production72
 * <SpecificationStmt> ::= SaveStmt:<SaveStmt>  :production73
 * <SpecificationStmt> ::= TargetStmt:<TargetStmt>  :production74
 */
public class ASTSpecificationStmtNode extends ParseTreeNode
{
    public ASTSpecificationStmtNode(Nonterminal nonterminal, Production production)
    {
        super(nonterminal, production);
    }

    public ASTAccessStmtNode getASTAccessStmt()
    {
        return (ASTAccessStmtNode)this.getChild("AccessStmt");
    }

    public ASTAllocatableStmtNode getASTAllocatableStmt()
    {
        return (ASTAllocatableStmtNode)this.getChild("AllocatableStmt");
    }

    public ASTCommonStmtNode getASTCommonStmt()
    {
        return (ASTCommonStmtNode)this.getChild("CommonStmt");
    }

    public ASTDataStmtNode getASTDataStmt()
    {
        return (ASTDataStmtNode)this.getChild("DataStmt");
    }

    public ASTDimensionStmtNode getASTDimensionStmt()
    {
        return (ASTDimensionStmtNode)this.getChild("DimensionStmt");
    }

    public ASTEquivalenceStmtNode getASTEquivalenceStmt()
    {
        return (ASTEquivalenceStmtNode)this.getChild("EquivalenceStmt");
    }

    public ASTExternalStmtNode getASTExternalStmt()
    {
        return (ASTExternalStmtNode)this.getChild("ExternalStmt");
    }

    public ASTIntentStmtNode getASTIntentStmt()
    {
        return (ASTIntentStmtNode)this.getChild("IntentStmt");
    }

    public ASTIntrinsicStmtNode getASTIntrinsicStmt()
    {
        return (ASTIntrinsicStmtNode)this.getChild("IntrinsicStmt");
    }

    public ASTNamelistStmtNode getASTNamelistStmt()
    {
        return (ASTNamelistStmtNode)this.getChild("NamelistStmt");
    }

    public ASTOptionalStmtNode getASTOptionalStmt()
    {
        return (ASTOptionalStmtNode)this.getChild("OptionalStmt");
    }

    public ASTPointerStmtNode getASTPointerStmt()
    {
        return (ASTPointerStmtNode)this.getChild("PointerStmt");
    }

    public ASTSaveStmtNode getASTSaveStmt()
    {
        return (ASTSaveStmtNode)this.getChild("SaveStmt");
    }

    public ASTTargetStmtNode getASTTargetStmt()
    {
        return (ASTTargetStmtNode)this.getChild("TargetStmt");
    }

    protected void visitThisNodeUsing(ASTVisitor visitor) { visitor.visitASTSpecificationStmtNode(this); }
}
