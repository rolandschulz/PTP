// Generated by Ludwig version 1.0 alpha 6

package org.eclipse.photran.internal.core.parser;

import org.eclipse.photran.internal.core.lexer.Token;


/**
 * <LoopControl> ::= VariableName:<VariableName> tequals:T_EQUALS Expr:<Expr> tcomma:T_COMMA Expr2:<Expr> 
 * <LoopControl> ::= VariableName:<VariableName> tequals:T_EQUALS Expr:<Expr> tcomma:T_COMMA Expr2:<Expr> tcomma2:T_COMMA Expr3:<Expr> 
 * <LoopControl> ::= twhile:T_WHILE tlparen:T_LPAREN Expr:<Expr> trparen:T_RPAREN 
 */
public class ASTLoopControlNode extends ParseTreeNode
{
    public ASTLoopControlNode(Nonterminal nonterminal, Production production)
    {
        super(nonterminal, production);
    }

    public ASTVariableNameNode getASTVariableName()
    {
        return (ASTVariableNameNode)this.getChild("VariableName");
    }

    public Token getASTTequals()
    {
        return this.getChildToken("tequals");
    }

    public ASTExprNode getASTExpr()
    {
        return (ASTExprNode)this.getChild("Expr");
    }

    public Token getASTTcomma()
    {
        return this.getChildToken("tcomma");
    }

    public ASTExprNode getASTExpr2()
    {
        return (ASTExprNode)this.getChild("Expr2");
    }

    public Token getASTTcomma2()
    {
        return this.getChildToken("tcomma2");
    }

    public ASTExprNode getASTExpr3()
    {
        return (ASTExprNode)this.getChild("Expr3");
    }

    public Token getASTTwhile()
    {
        return this.getChildToken("twhile");
    }

    public Token getASTTlparen()
    {
        return this.getChildToken("tlparen");
    }

    public Token getASTTrparen()
    {
        return this.getChildToken("trparen");
    }

    protected void visitThisNodeUsing(ASTVisitor visitor) { visitor.visitASTLoopControlNode(this); }
}
