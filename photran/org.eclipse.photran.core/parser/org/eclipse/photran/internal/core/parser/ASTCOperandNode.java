// Generated by Ludwig version 1.0 alpha 6

package org.eclipse.photran.internal.core.parser; import org.eclipse.photran.internal.core.lexer.*;


/**
 * <COperand> ::= tscon:T_SCON  :production467
 * <COperand> ::= Name:<Name> ( tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN )?  :production468
 * <COperand> ::= Name:<Name> ( tlparen:T_LPAREN SectionSubscriptList:<SectionSubscriptList> trparen:T_RPAREN )? tpercent:T_PERCENT DataRef:<DataRef> ( tlparen2:T_LPAREN SectionSubscriptList2:<SectionSubscriptList> trparen2:T_RPAREN )?  :production469
 * <COperand> ::= FunctionReference:<FunctionReference>  :production470
 */
public class ASTCOperandNode extends ParseTreeNode
{
    public ASTCOperandNode(Nonterminal nonterminal, Production production)
    {
        super(nonterminal, production);
    }

    public Token getASTTscon()
    {
        return this.getChildToken("tscon");
    }

    public ASTNameNode getASTName()
    {
        return (ASTNameNode)this.getChild("Name");
    }

    public Token getASTTlparen()
    {
        return this.getChildToken("tlparen");
    }

    public ASTSectionSubscriptListNode getASTSectionSubscriptList()
    {
        return (ASTSectionSubscriptListNode)this.getChild("SectionSubscriptList");
    }

    public Token getASTTrparen()
    {
        return this.getChildToken("trparen");
    }

    public Token getASTTpercent()
    {
        return this.getChildToken("tpercent");
    }

    public ASTDataRefNode getASTDataRef()
    {
        return (ASTDataRefNode)this.getChild("DataRef");
    }

    public Token getASTTlparen2()
    {
        return this.getChildToken("tlparen2");
    }

    public ASTSectionSubscriptListNode getASTSectionSubscriptList2()
    {
        return (ASTSectionSubscriptListNode)this.getChild("SectionSubscriptList2");
    }

    public Token getASTTrparen2()
    {
        return this.getChildToken("trparen2");
    }

    public ASTFunctionReferenceNode getASTFunctionReference()
    {
        return (ASTFunctionReferenceNode)this.getChild("FunctionReference");
    }

    protected void visitThisNodeUsing(ASTVisitor visitor) { visitor.visitASTCOperandNode(this); }
}
