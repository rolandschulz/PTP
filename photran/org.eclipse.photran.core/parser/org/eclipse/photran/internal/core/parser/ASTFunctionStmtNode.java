// Generated by Ludwig version 1.0 alpha 6

package org.eclipse.photran.internal.core.parser; import org.eclipse.photran.internal.core.lexer.*;


/**
 * <FunctionStmt> ::= LblDef:<LblDef> FunctionPrefix:<FunctionPrefix> FunctionName:<FunctionName> tlparen:T_LPAREN FunctionPars:<FunctionPars> trparen:T_RPAREN ( tresult:T_RESULT tlparen2:T_LPAREN Name:<Name> trparen2:T_RPAREN )? teos:T_EOS  :production891
 * <FunctionStmt> ::= LblDef:<LblDef> FunctionPrefix:<FunctionPrefix> FunctionName:<FunctionName> error:%error lookahead:T_EOS  :production892
 */
public class ASTFunctionStmtNode extends ParseTreeNode
{
    public ASTFunctionStmtNode(Nonterminal nonterminal, Production production)
    {
        super(nonterminal, production);
    }

    public ASTLblDefNode getASTLblDef()
    {
        return (ASTLblDefNode)this.getChild("LblDef");
    }

    public ASTFunctionPrefixNode getASTFunctionPrefix()
    {
        return (ASTFunctionPrefixNode)this.getChild("FunctionPrefix");
    }

    public ASTFunctionNameNode getASTFunctionName()
    {
        return (ASTFunctionNameNode)this.getChild("FunctionName");
    }

    public Token getASTTlparen()
    {
        return this.getChildToken("tlparen");
    }

    public ASTFunctionParsNode getASTFunctionPars()
    {
        return (ASTFunctionParsNode)this.getChild("FunctionPars");
    }

    public Token getASTTrparen()
    {
        return this.getChildToken("trparen");
    }

    public Token getASTTresult()
    {
        return this.getChildToken("tresult");
    }

    public Token getASTTlparen2()
    {
        return this.getChildToken("tlparen2");
    }

    public ASTNameNode getASTName()
    {
        return (ASTNameNode)this.getChild("Name");
    }

    public Token getASTTrparen2()
    {
        return this.getChildToken("trparen2");
    }

    public Token getASTTeos()
    {
        return this.getChildToken("teos");
    }

    public Token getASTError()
    {
        return this.getChildToken("error");
    }

    public Token getASTLookahead()
    {
        return this.getChildToken("lookahead");
    }

    protected void visitThisNodeUsing(ASTVisitor visitor) { visitor.visitASTFunctionStmtNode(this); }
}
