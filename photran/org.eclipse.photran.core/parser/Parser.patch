--- Parser.java.orig	2007-07-30 21:12:14.000000000 -0600
+++ Parser.java	2007-07-30 21:21:06.000000000 -0600
@@ -1,10 +1,13 @@
 package org.eclipse.photran.internal.core.parser;
 
 import java.io.PrintStream;
-import java.util.Stack;
-import java.util.List;
 import java.util.ArrayList;
 import java.util.LinkedList;
+import java.util.List;
+import java.util.Stack;
+
+import org.eclipse.photran.internal.core.lexer.ILexer;
+import org.eclipse.photran.internal.core.lexer.Token;
 
 /**
  * An LALR(1) parser
@@ -393,7 +396,7 @@
         private int index;
         private String description;
 
-        private Terminal(int index, String description)
+        public Terminal(int index, String description)
         {
             this.index = index;
             this.description = description;
@@ -14109,14 +14112,6 @@
             return sb.toString();
         }
     }
-    
-    public static interface ILexer
-    {
-        Token yylex();
-        String getFilename();
-        int getLastTokenLine();
-        int getLastTokenCol();
-    }
 
     /**
      * Common superclass for <code>Token</code>s and <code>InteriorNode</code>s, the two types of
@@ -14164,6 +14159,8 @@
         protected abstract void visitTopDownUsing(ASTVisitor visitor, boolean shouldVisitRoot);
         
         protected abstract void visitBottomUpUsing(ASTVisitor visitor, boolean shouldVisitRoot);
+        
+        public abstract void visitUsing(GenericParseTreeVisitor visitor);
     
         ///////////////////////////////////////////////////////////////////////////
         // Debugging Output
@@ -14188,7 +14185,7 @@
         // Source Code Reproduction
         ///////////////////////////////////////////////////////////////////////////
         
-        public abstract void printOn(PrintStream out);
+        public abstract String printOn(PrintStream out, String currentPreprocessorDirective);
     }
 
     public static class InteriorNode extends CSTNode
@@ -14203,6 +14200,7 @@
     
             @Override protected void visitBottomUpUsing(ASTVisitor visitor, boolean shouldVisitRoot) {}
             @Override protected void visitTopDownUsing(ASTVisitor visitor, boolean shouldVisitRoot) {}
+            @Override public void visitUsing(GenericParseTreeVisitor visitor) {}
             
             public String toString(int numSpaces)
             {
@@ -14213,9 +14211,9 @@
                 return sb.toString();
             }
     
-            public void printOn(PrintStream out)
+            @Override public String printOn(PrintStream out, String currentPreprocessorDirective)
             {
-                ;
+                return currentPreprocessorDirective;
             }
         }
         
@@ -14435,7 +14433,18 @@
         {
             ;
         }
-    
+
+        @Override public void visitUsing(GenericParseTreeVisitor visitor)
+        {
+            visitor.visitParseTreeNode(this);
+            
+            visitor.preparingToVisitChildrenOf(this);
+            if (childArray != null)
+                for (int i = 0; i < numChildren; i++)
+                    childArray[i].visitUsing(visitor);
+            visitor.doneVisitingChildrenOf(this);
+        }
+        
         ///////////////////////////////////////////////////////////////////////////
         // Debugging Output
         ///////////////////////////////////////////////////////////////////////////
@@ -14458,11 +14467,12 @@
         // Source Code Reproduction
         ///////////////////////////////////////////////////////////////////////////
         
-        public void printOn(PrintStream out)
+        @Override public String printOn(PrintStream out, String currentPreprocessorDirective)
         {
             if (childArray != null)
                 for (int i = 0; i < numChildren; i++)
-                    childArray[i].printOn(out);
+                    currentPreprocessorDirective = childArray[i].printOn(out, currentPreprocessorDirective);
+            return currentPreprocessorDirective;
         }
     }
     
@@ -14527,142 +14537,15 @@
         // Source Code Reproduction
         ///////////////////////////////////////////////////////////////////////////
         
-        public void printOn(PrintStream out)
+        @Override public String printOn(PrintStream out, String currentPreprocessorDirective)
         {
-            super.printOn(out);
+            currentPreprocessorDirective = super.printOn(out, currentPreprocessorDirective);
     
             if (symbolsDiscardedDuringErrorRecovery != null)
                 for (CSTNode discardedSymbol : symbolsDiscardedDuringErrorRecovery)
-                    discardedSymbol.printOn(out);
-        }
-    }
-
-    /**
-     * Enumerates the terminal symbols in the grammar being parsed
-     */
-    public static class Token extends CSTNode
-    {
-        ///////////////////////////////////////////////////////////////////////////
-        // Fields
-        ///////////////////////////////////////////////////////////////////////////
-        
-        /**
-         * The Terminal that this token is an instance of
-         */
-        protected Terminal terminal = null;
-    
-        /**
-         * Whitespace and whitetext appearing before this token that should be associated with this token
-         */
-        protected String whiteBefore = "";
-    
-        /**
-         * The token text
-         */
-        protected String text = "";
-    
-        /**
-         * Whitespace and whitetext appearing after this token that should be associated with this token, not the next
-         */
-        protected String whiteAfter = "";
-    
-        ///////////////////////////////////////////////////////////////////////////
-        // Constructors
-        ///////////////////////////////////////////////////////////////////////////
-        
-        public Token(Terminal terminal, String whiteBefore, String tokenText, String whiteAfter)
-        {
-            this.terminal    = terminal;
-            this.whiteBefore = whiteBefore == null ? "" : whiteBefore;
-            this.text   = tokenText   == null ? "" : tokenText;
-            this.whiteAfter  = whiteAfter  == null ? "" : whiteAfter;
-        }
-        
-        public Token(Terminal terminal, String tokenText)
-        {
-            this(terminal, null, tokenText, null);
-        }
-        
-        ///////////////////////////////////////////////////////////////////////////
-        // Accessor/Mutator Methods
-        ///////////////////////////////////////////////////////////////////////////
-    
-        /**
-         * Returns the Terminal that this token is an instance of
-         */
-        public Terminal getTerminal() { return terminal; }
-    
-        /**
-         * Sets the Terminal that this token is an instance of
-         */
-        public void setTerminal(Terminal value) { terminal = value; }
-    
-        /**
-         * Returns the token text
-         */
-        public String getText() { return text; }
-    
-        /**
-         * Sets the token text
-         */
-        public void setText(String value) { text = value == null ? "" : value; }
-    
-        /**
-         * Returns whitespace and whitetext appearing before this token that should be associated with this token
-         */
-        public String getWhiteBefore() { return whiteBefore; }
-    
-        /**
-         * Sets whitespace and whitetext appearing before this token that should be associated with this token
-         */
-        public void setWhiteBefore(String value) { whiteBefore = value == null ? "" : value; }
-    
-        /**
-         * Returns whitespace and whitetext appearing after this token that should be associated with this token, not the next
-         */
-        public String getWhiteAfter() { return whiteAfter; }
-    
-        /**
-         * Sets whitespace and whitetext appearing after this token that should be associated with this token, not the next
-         */
-        public void setWhiteAfter(String value) { whiteAfter = value == null ? "" : value; }
-    
-        ///////////////////////////////////////////////////////////////////////////
-        // Visitor Support
-        ///////////////////////////////////////////////////////////////////////////
-    
-        @Override protected void visitTopDownUsing(ASTVisitor visitor, boolean shouldVisitRoot)
-        {
-            if (shouldVisitRoot)
-                visitor.visitToken(this);
-        }
-    
-        @Override protected void visitBottomUpUsing(ASTVisitor visitor, boolean shouldVisitRoot)
-        {
-            if (shouldVisitRoot)
-                visitor.visitToken(this);
-        }
-    
-        ///////////////////////////////////////////////////////////////////////////
-        // Debugging Output
-        ///////////////////////////////////////////////////////////////////////////
-        
-        public String toString(int numSpaces) { return indent(numSpaces) + this + "\n"; }
-    
-        /**
-         * Returns a string describing the token
-         */
-        @Override public String toString() { return terminal + ": \"" + text + "\""; }
-        
-        ///////////////////////////////////////////////////////////////////////////
-        // Source Code Reproduction
-        ///////////////////////////////////////////////////////////////////////////
-        
-        public void printOn(PrintStream out)
-        {
-            out.print(whiteBefore);
-            out.print(text);
-            out.print(whiteAfter);
+                    currentPreprocessorDirective = discardedSymbol.printOn(out, currentPreprocessorDirective);
+            
+            return currentPreprocessorDirective;
         }
     }
 }
