/* The following code was generated by JFlex 1.4.1 on 1/29/09 11:10 AM */

/*******************************************************************************
 * Copyright (c) 2007 University of Illinois at Urbana-Champaign and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     UIUC - Initial API and implementation
 *******************************************************************************/

/*
 * First phase of fixed form lexical analysis for Fortran 95 parser
 *
 * FixedFormLexerPhase1 acts as a "token stream" feeding FreeFormLexerPhase2
 * and is feeded by FixedFormLexerPrepass
 * (See FixedFormLexerPrepass and FixedFormLexerPhase2.java and f95t.bnf)
 *
 * @author Jeffrey Overbey and Dirk Rossow
 * 
 * @see FixedFormLexerPrepass
 * @see FixedFormLexerPhase2
 * @see Parser
 *
 * NOTE: Get rid of (space out) "yybegin(YYSTANDARD);" in the lines
 * for any tokens that can appear in an IMPLICIT statement
 * (It was also omitted in the lines for T_SLASH so that
 * INTERFACE OPERATOR (/) would tokenize correctly.)
 *
 * Changes:
 * 29.06.2005 Jeff Overbey: Added Fortran INCLUDE and CPP directives
 */
 
package org.eclipse.photran.internal.core.lexer;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import java.util.LinkedList;
import org.eclipse.core.resources.IFile;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 1/29/09 11:10 AM from the specification file
 * <tt>FixedFormLexerPhase1.flex</tt>
 */
class FixedFormLexerPhase1 implements ILexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int OPERATORorFORMAT = 6;
  public static final int DBLQUOTED = 3;
  public static final int QUOTED = 2;
  public static final int YYINITIAL = 0;
  public static final int IDENT = 7;
  public static final int HOLLERITH = 4;
  public static final int YYSTANDARD = 5;
  public static final int IMPLICIT = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\46\1\2\2\36\1\1\22\0\1\46\1\36\1\16\1\37"+
    "\1\0\1\63\1\0\1\14\1\33\1\35\1\3\1\6\1\34\1\7"+
    "\1\11\1\64\2\15\6\20\2\4\1\60\1\36\1\62\1\53\1\61"+
    "\2\0\1\22\1\13\1\42\1\10\1\5\1\25\1\27\1\23\1\24"+
    "\1\12\1\56\1\41\1\45\1\40\1\17\1\30\1\57\1\44\1\26"+
    "\1\47\1\43\1\55\1\50\1\31\1\54\1\21\1\51\1\0\1\52"+
    "\1\0\1\32\1\0\1\22\1\13\1\42\1\10\1\5\1\25\1\27"+
    "\1\23\1\24\1\12\1\56\1\41\1\45\1\40\1\17\1\30\1\57"+
    "\1\44\1\26\1\47\1\43\1\55\1\50\1\31\1\54\1\21\12\0"+
    "\1\36\u1fa2\0\2\36\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\2\2\1\3\1\4\1\1\1\5\1\6"+
    "\3\1\1\7\1\10\10\1\1\11\1\12\1\13\1\14"+
    "\11\1\1\15\1\16\1\17\2\1\1\20\1\21\1\22"+
    "\1\23\1\24\1\4\1\1\1\5\1\6\10\1\1\12"+
    "\1\24\1\25\1\26\1\27\1\25\1\30\1\31\1\32"+
    "\1\12\1\33\1\34\1\35\7\0\1\36\36\0\1\37"+
    "\1\40\1\41\13\0\1\42\34\0\1\43\6\0\1\44"+
    "\1\45\3\0\1\46\1\47\1\50\1\51\3\0\1\52"+
    "\1\53\1\54\5\0\1\55\1\0\1\56\1\57\1\60"+
    "\1\61\3\0\1\62\17\0\1\63\26\0\1\64\11\0"+
    "\1\65\64\0\1\66\11\0\1\67\23\0\1\55\1\0"+
    "\1\70\1\0\1\55\10\0\1\71\12\0\1\72\1\0"+
    "\1\73\2\0\1\74\1\75\7\0\1\76\2\0\1\77"+
    "\1\0\1\100\2\0\1\101\1\102\1\103\2\0\1\104"+
    "\1\105\1\0\1\106\1\0\1\107\2\0\1\110\1\111"+
    "\2\0\1\112\1\113\25\0\1\114\1\0\1\115\2\0"+
    "\1\116\3\0\1\117\3\0\1\120\4\0\1\121\1\122"+
    "\1\123\3\0\1\124\12\0\2\125\5\0\1\126\2\0"+
    "\1\127\1\0\1\130\1\131\4\0\1\132\1\133\6\0"+
    "\1\134\1\135\3\0\1\136\5\0\1\137\1\140\1\141"+
    "\5\0\1\142\1\55\2\143\1\0\2\144\1\4\3\0"+
    "\1\145\1\0\1\146\14\0\1\147\14\0\1\150\1\151"+
    "\2\0\1\152\2\0\1\153\17\0\1\154\12\0\1\155"+
    "\1\156\1\157\3\0\1\160\1\161\2\0\1\162\5\0"+
    "\1\163\6\0\1\164\12\0\1\165\10\0\1\166\1\167"+
    "\1\170\1\171\2\0\1\172\2\0\1\173\6\0\1\174"+
    "\1\175\1\176\1\0\1\177\1\200\1\201\20\0\1\202"+
    "\5\0\1\203\1\0\1\204\3\0\1\205\1\206\2\0"+
    "\1\207\15\0\1\210\2\0\1\211\3\0\1\212\1\0"+
    "\1\213\1\214\1\0\1\215\11\0\1\216\10\0\1\217"+
    "\2\0\1\220\7\0\1\221\3\0\1\135\1\222\1\0"+
    "\1\223\1\224\1\225\1\226\1\227\1\230\1\0\1\231"+
    "\4\0\1\232\5\0\1\233\10\0\1\234\3\0\1\235"+
    "\1\0\1\236\2\0\1\237\10\0\1\240\1\241\1\242"+
    "\2\0\1\243\2\0\1\244\7\0\1\245\1\246\1\247"+
    "\1\0\1\250\3\0\1\251\2\0\1\252\4\0\1\253"+
    "\1\254\1\255\2\0\1\256\5\0\1\257\1\260\7\0"+
    "\1\261\6\0\1\262\1\263\1\204\4\0\1\264\1\265"+
    "\1\266\1\267\3\0\1\270\6\0\1\271\1\0\1\272"+
    "\1\0\1\273\2\0\1\274\5\0\1\275\2\0\1\276"+
    "\1\0\1\277\1\300\5\0\1\301\2\0\1\302\1\0"+
    "\1\303\2\0\1\304\1\305\1\0\1\306\1\307\3\0"+
    "\1\310\1\311\1\312\1\313\3\0\1\314\1\0\1\243"+
    "\1\315\1\316\4\0\1\317\1\320\1\321\1\322\1\323"+
    "\2\0\1\255\1\256\1\324\2\0\1\325\4\0\1\326"+
    "\1\327\1\0\1\330\1\0\1\331\2\0\1\332\1\333"+
    "\1\0\1\334\4\0\1\335\2\0\1\336\1\0\1\337"+
    "\2\0\1\340\1\341\2\0\1\324\1\0\1\342\1\343"+
    "\2\0\1\344\2\0\1\345\1\346\2\0\1\347\1\0"+
    "\1\350\2\0\1\351\1\352\1\0\1\351";

  private static int [] zzUnpackAction() {
    int [] result = new int[975];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u01dd\0\u01a8\0\u0212\0\u0247\0\u027c\0\u01a8\0\u01a8"+
    "\0\u02b1\0\u02e6\0\u031b\0\u01a8\0\u01a8\0\u0350\0\u0385\0\u03ba"+
    "\0\u03ef\0\u0424\0\u0459\0\u048e\0\u04c3\0\u01a8\0\u01a8\0\u01a8"+
    "\0\u01a8\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc\0\u0601\0\u0636"+
    "\0\u066b\0\u06a0\0\u01a8\0\u01a8\0\u06d5\0\u070a\0\u073f\0\u01a8"+
    "\0\u0774\0\u07a9\0\u01a8\0\u07de\0\u0813\0\u0848\0\u087d\0\u087d"+
    "\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0\0\u0a25"+
    "\0\u0a5a\0\u0a8f\0\u0ac4\0\u01a8\0\u0af9\0\u0b2e\0\u0b63\0\u01a8"+
    "\0\u01a8\0\u0b98\0\u01a8\0\u0bcd\0\u01a8\0\u0c02\0\u0c37\0\u0c6c"+
    "\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14"+
    "\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc"+
    "\0\u0ff1\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164"+
    "\0\u1199\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2\0\u12d7\0\u130c"+
    "\0\u1341\0\u1376\0\u13ab\0\u01a8\0\u01a8\0\u13e0\0\u1415\0\u144a"+
    "\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1588\0\u15bd\0\u15f2"+
    "\0\u1627\0\u165c\0\u1691\0\u16c6\0\u16fb\0\u1730\0\u1765\0\u179a"+
    "\0\u17cf\0\u1804\0\u1839\0\u186e\0\u18a3\0\u18d8\0\u190d\0\u1942"+
    "\0\u1977\0\u19ac\0\u19e1\0\u1a16\0\u1a4b\0\u1a80\0\u1ab5\0\u1aea"+
    "\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe\0\u1bf3\0\u1c28\0\u01a8\0\u1c5d"+
    "\0\u1c92\0\u1cc7\0\u1cfc\0\u1d31\0\u1d66\0\u01a8\0\u01a8\0\u1d9b"+
    "\0\u1dd0\0\u1e05\0\u01a8\0\u01a8\0\u01a8\0\u01a8\0\u1e3a\0\u1e6f"+
    "\0\u1ea4\0\u01a8\0\u01a8\0\u01a8\0\u1ed9\0\u1f0e\0\u1f43\0\u1f78"+
    "\0\u1fad\0\u1fe2\0\u2017\0\u01a8\0\u01a8\0\u01a8\0\u01a8\0\u204c"+
    "\0\u2081\0\u20b6\0\u20eb\0\u2120\0\u2155\0\u218a\0\u21bf\0\u21f4"+
    "\0\u2229\0\u225e\0\u2293\0\u22c8\0\u22fd\0\u2332\0\u2367\0\u239c"+
    "\0\u23d1\0\u2406\0\u01a8\0\u243b\0\u2470\0\u24a5\0\u24da\0\u250f"+
    "\0\u2544\0\u2579\0\u25ae\0\u25e3\0\u2618\0\u264d\0\u2682\0\u26b7"+
    "\0\u26ec\0\u2721\0\u2756\0\u278b\0\u27c0\0\u27f5\0\u282a\0\u285f"+
    "\0\u2894\0\u01a8\0\u28c9\0\u28fe\0\u2933\0\u2968\0\u299d\0\u29d2"+
    "\0\u2a07\0\u2a3c\0\u2a71\0\u01a8\0\u2aa6\0\u2adb\0\u2b10\0\u2b45"+
    "\0\u2b7a\0\u2baf\0\u2be4\0\u2c19\0\u2c4e\0\u2c83\0\u2cb8\0\u2ced"+
    "\0\u2d22\0\u2d57\0\u2d8c\0\u2dc1\0\u2df6\0\u2e2b\0\u2e60\0\u2e95"+
    "\0\u2eca\0\u2eff\0\u2f34\0\u2f69\0\u2f9e\0\u2fd3\0\u3008\0\u303d"+
    "\0\u3072\0\u30a7\0\u30dc\0\u3111\0\u3146\0\u317b\0\u31b0\0\u31e5"+
    "\0\u321a\0\u324f\0\u3284\0\u32b9\0\u32ee\0\u3323\0\u3358\0\u338d"+
    "\0\u33c2\0\u33f7\0\u342c\0\u3461\0\u3496\0\u34cb\0\u3500\0\u3535"+
    "\0\u356a\0\u359f\0\u35d4\0\u3609\0\u363e\0\u3673\0\u36a8\0\u36dd"+
    "\0\u3712\0\u3747\0\u01a8\0\u377c\0\u37b1\0\u37e6\0\u381b\0\u3850"+
    "\0\u3885\0\u38ba\0\u38ef\0\u3924\0\u3959\0\u398e\0\u39c3\0\u39f8"+
    "\0\u3a2d\0\u3a62\0\u3a97\0\u3acc\0\u3b01\0\u3b36\0\u3b6b\0\u3ba0"+
    "\0\u3bd5\0\u3bd5\0\u01a8\0\u3c0a\0\u3c3f\0\u3c74\0\u3ca9\0\u3cde"+
    "\0\u3d13\0\u3d48\0\u3d7d\0\u01a8\0\u3db2\0\u3de7\0\u3e1c\0\u3e51"+
    "\0\u3e86\0\u3ebb\0\u3ef0\0\u3f25\0\u3f5a\0\u3f8f\0\u01a8\0\u3fc4"+
    "\0\u3ff9\0\u402e\0\u4063\0\u4098\0\u01a8\0\u40cd\0\u4102\0\u4137"+
    "\0\u416c\0\u41a1\0\u41d6\0\u420b\0\u01a8\0\u4240\0\u4275\0\u01a8"+
    "\0\u42aa\0\u01a8\0\u42df\0\u4314\0\u01a8\0\u01a8\0\u01a8\0\u4349"+
    "\0\u437e\0\u01a8\0\u01a8\0\u43b3\0\u01a8\0\u43e8\0\u01a8\0\u441d"+
    "\0\u4452\0\u01a8\0\u4487\0\u44bc\0\u44f1\0\u01a8\0\u01a8\0\u4526"+
    "\0\u455b\0\u4590\0\u45c5\0\u45fa\0\u462f\0\u4664\0\u4699\0\u46ce"+
    "\0\u4703\0\u4738\0\u476d\0\u47a2\0\u47d7\0\u480c\0\u4841\0\u4876"+
    "\0\u48ab\0\u48e0\0\u4915\0\u494a\0\u497f\0\u49b4\0\u01a8\0\u49e9"+
    "\0\u4a1e\0\u01a8\0\u4a53\0\u4a88\0\u4abd\0\u01a8\0\u4af2\0\u4b27"+
    "\0\u4b5c\0\u01a8\0\u4b91\0\u4bc6\0\u4bfb\0\u4c30\0\u01a8\0\u01a8"+
    "\0\u01a8\0\u4c65\0\u4c9a\0\u4ccf\0\u01a8\0\u4d04\0\u4d39\0\u4d6e"+
    "\0\u4da3\0\u4dd8\0\u4e0d\0\u4e42\0\u4e77\0\u4eac\0\u4ee1\0\u4f16"+
    "\0\u01a8\0\u4f4b\0\u4f80\0\u4fb5\0\u4fea\0\u501f\0\u01a8\0\u5054"+
    "\0\u5089\0\u50be\0\u50f3\0\u01a8\0\u01a8\0\u5128\0\u515d\0\u5192"+
    "\0\u51c7\0\u01a8\0\u01a8\0\u51fc\0\u5231\0\u5266\0\u529b\0\u52d0"+
    "\0\u5305\0\u533a\0\u536f\0\u53a4\0\u53d9\0\u540e\0\u01a8\0\u5443"+
    "\0\u5478\0\u54ad\0\u54e2\0\u5517\0\u01a8\0\u01a8\0\u01a8\0\u554c"+
    "\0\u5581\0\u55b6\0\u55eb\0\u5620\0\u5655\0\u3ba0\0\u568a\0\u3c74"+
    "\0\u56bf\0\u56f4\0\u01a8\0\u3d48\0\u5729\0\u575e\0\u5793\0\u01a8"+
    "\0\u57c8\0\u01a8\0\u57fd\0\u5832\0\u5867\0\u589c\0\u58d1\0\u5906"+
    "\0\u593b\0\u5970\0\u59a5\0\u59da\0\u5a0f\0\u5a44\0\u01a8\0\u5a79"+
    "\0\u5aae\0\u5ae3\0\u5b18\0\u5b4d\0\u5b82\0\u5bb7\0\u5bec\0\u5c21"+
    "\0\u5c56\0\u5c8b\0\u5cc0\0\u01a8\0\u01a8\0\u5cf5\0\u5d2a\0\u01a8"+
    "\0\u5d5f\0\u5d94\0\u5dc9\0\u5dfe\0\u5e33\0\u5e68\0\u5e9d\0\u5ed2"+
    "\0\u5f07\0\u5f3c\0\u5f71\0\u5fa6\0\u5fdb\0\u6010\0\u6045\0\u607a"+
    "\0\u60af\0\u60e4\0\u01a8\0\u6119\0\u614e\0\u6183\0\u61b8\0\u61ed"+
    "\0\u6222\0\u6257\0\u628c\0\u62c1\0\u62f6\0\u01a8\0\u01a8\0\u01a8"+
    "\0\u632b\0\u6360\0\u6395\0\u01a8\0\u01a8\0\u63ca\0\u63ff\0\u01a8"+
    "\0\u6434\0\u6469\0\u649e\0\u64d3\0\u6508\0\u01a8\0\u653d\0\u6572"+
    "\0\u65a7\0\u65dc\0\u6611\0\u6646\0\u01a8\0\u667b\0\u66b0\0\u66e5"+
    "\0\u671a\0\u674f\0\u6784\0\u67b9\0\u67ee\0\u6823\0\u6858\0\u01a8"+
    "\0\u688d\0\u68c2\0\u68f7\0\u692c\0\u6961\0\u6996\0\u69cb\0\u6a00"+
    "\0\u01a8\0\u01a8\0\u01a8\0\u01a8\0\u6a35\0\u6a6a\0\u01a8\0\u6a9f"+
    "\0\u6ad4\0\u01a8\0\u6b09\0\u6b3e\0\u6b73\0\u6ba8\0\u6bdd\0\u6c12"+
    "\0\u01a8\0\u01a8\0\u6c47\0\u6c7c\0\u01a8\0\u01a8\0\u01a8\0\u6cb1"+
    "\0\u6ce6\0\u6d1b\0\u6d50\0\u6d85\0\u6dba\0\u6def\0\u6e24\0\u6e59"+
    "\0\u6e8e\0\u6ec3\0\u6ef8\0\u6f2d\0\u6f62\0\u6f97\0\u6fcc\0\u01a8"+
    "\0\u7001\0\u7036\0\u706b\0\u70a0\0\u70d5\0\u01a8\0\u710a\0\u713f"+
    "\0\u7174\0\u71a9\0\u71de\0\u01a8\0\u01a8\0\u7213\0\u7248\0\u01a8"+
    "\0\u727d\0\u72b2\0\u72e7\0\u731c\0\u7351\0\u7386\0\u73bb\0\u73f0"+
    "\0\u7425\0\u745a\0\u748f\0\u74c4\0\u74f9\0\u01a8\0\u752e\0\u7563"+
    "\0\u01a8\0\u7598\0\u75cd\0\u7602\0\u01a8\0\u7637\0\u01a8\0\u766c"+
    "\0\u76a1\0\u76d6\0\u770b\0\u7740\0\u7775\0\u77aa\0\u77df\0\u7814"+
    "\0\u7849\0\u787e\0\u78b3\0\u01a8\0\u78e8\0\u791d\0\u7952\0\u7987"+
    "\0\u79bc\0\u79f1\0\u7a26\0\u7a5b\0\u01a8\0\u7a90\0\u7ac5\0\u01a8"+
    "\0\u7afa\0\u7b2f\0\u7b64\0\u7b99\0\u7bce\0\u7c03\0\u7c38\0\u01a8"+
    "\0\u7c6d\0\u7ca2\0\u7cd7\0\u6a9f\0\u01a8\0\u7d0c\0\u01a8\0\u01a8"+
    "\0\u01a8\0\u01a8\0\u01a8\0\u01a8\0\u7d41\0\u01a8\0\u7d76\0\u7dab"+
    "\0\u7de0\0\u7e15\0\u01a8\0\u7e4a\0\u7e7f\0\u7eb4\0\u7ee9\0\u7f1e"+
    "\0\u01a8\0\u7f53\0\u7f88\0\u7fbd\0\u7ff2\0\u8027\0\u805c\0\u8091"+
    "\0\u80c6\0\u01a8\0\u80fb\0\u8130\0\u8165\0\u01a8\0\u819a\0\u01a8"+
    "\0\u81cf\0\u8204\0\u01a8\0\u8239\0\u826e\0\u82a3\0\u82d8\0\u830d"+
    "\0\u8342\0\u8377\0\u83ac\0\u01a8\0\u01a8\0\u01a8\0\u83e1\0\u8416"+
    "\0\u844b\0\u8480\0\u84b5\0\u01a8\0\u84ea\0\u851f\0\u8554\0\u8589"+
    "\0\u85be\0\u85f3\0\u8628\0\u01a8\0\u01a8\0\u01a8\0\u865d\0\u01a8"+
    "\0\u8692\0\u86c7\0\u86fc\0\u01a8\0\u8731\0\u8766\0\u01a8\0\u879b"+
    "\0\u87d0\0\u8805\0\u883a\0\u01a8\0\u01a8\0\u886f\0\u88a4\0\u88d9"+
    "\0\u890e\0\u8943\0\u8978\0\u89ad\0\u89e2\0\u8a17\0\u01a8\0\u8a4c"+
    "\0\u8a81\0\u8ab6\0\u8aeb\0\u8b20\0\u8b55\0\u8b8a\0\u8bbf\0\u01a8"+
    "\0\u8bf4\0\u8c29\0\u8c5e\0\u8c93\0\u8cc8\0\u8cfd\0\u01a8\0\u01a8"+
    "\0\u8130\0\u8d32\0\u8d67\0\u8d9c\0\u8dd1\0\u01a8\0\u01a8\0\u01a8"+
    "\0\u01a8\0\u8e06\0\u8e3b\0\u8e70\0\u01a8\0\u8ea5\0\u8eda\0\u8f0f"+
    "\0\u8f44\0\u8f79\0\u8fae\0\u01a8\0\u8fe3\0\u01a8\0\u9018\0\u01a8"+
    "\0\u904d\0\u9082\0\u01a8\0\u90b7\0\u90ec\0\u9121\0\u9156\0\u918b"+
    "\0\u01a8\0\u91c0\0\u91f5\0\u01a8\0\u922a\0\u01a8\0\u01a8\0\u925f"+
    "\0\u9294\0\u92c9\0\u92fe\0\u9333\0\u01a8\0\u9368\0\u939d\0\u01a8"+
    "\0\u93d2\0\u01a8\0\u9407\0\u943c\0\u01a8\0\u01a8\0\u9471\0\u01a8"+
    "\0\u01a8\0\u94a6\0\u94db\0\u9510\0\u01a8\0\u01a8\0\u01a8\0\u01a8"+
    "\0\u9545\0\u957a\0\u95af\0\u01a8\0\u95e4\0\u8f44\0\u01a8\0\u01a8"+
    "\0\u9619\0\u964e\0\u9683\0\u96b8\0\u01a8\0\u01a8\0\u01a8\0\u01a8"+
    "\0\u01a8\0\u96ed\0\u9722\0\u922a\0\u925f\0\u9757\0\u978c\0\u97c1"+
    "\0\u01a8\0\u97f6\0\u982b\0\u9860\0\u9895\0\u01a8\0\u01a8\0\u98ca"+
    "\0\u01a8\0\u98ff\0\u01a8\0\u9934\0\u9969\0\u01a8\0\u01a8\0\u999e"+
    "\0\u01a8\0\u99d3\0\u9a08\0\u9a3d\0\u9a72\0\u01a8\0\u9aa7\0\u9adc"+
    "\0\u01a8\0\u9b11\0\u01a8\0\u9b46\0\u9b7b\0\u01a8\0\u01a8\0\u9bb0"+
    "\0\u9be5\0\u9a3d\0\u9c1a\0\u01a8\0\u01a8\0\u9c4f\0\u9c84\0\u9cb9"+
    "\0\u9cee\0\u9d23\0\u01a8\0\u01a8\0\u9d58\0\u9cb9\0\u01a8\0\u9d8d"+
    "\0\u01a8\0\u9dc2\0\u9df7\0\u9e2c\0\u01a8\0\u9e61\0\u9e61";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[975];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\11\1\23\1\24\1\15\1\25\1\26"+
    "\1\15\1\27\1\30\1\11\1\31\1\32\1\33\1\34"+
    "\1\35\1\11\1\36\1\37\1\40\1\41\1\11\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\11\1\51"+
    "\1\52\1\53\1\54\1\55\1\11\1\56\1\57\1\11"+
    "\1\60\1\61\1\62\1\63\1\64\1\11\1\12\1\13"+
    "\1\14\1\65\1\66\1\67\1\70\1\71\1\72\1\11"+
    "\1\73\1\24\1\65\1\25\1\74\1\65\1\75\1\30"+
    "\1\11\1\76\1\77\1\33\1\100\1\35\1\11\1\36"+
    "\1\101\1\40\1\41\1\11\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\11\1\51\1\52\1\53\1\54"+
    "\1\55\1\11\1\56\1\57\1\11\1\60\1\61\1\62"+
    "\1\63\1\102\1\103\2\104\11\103\1\105\50\103\1\106"+
    "\2\104\13\106\1\107\46\106\1\110\2\111\62\110\1\11"+
    "\1\12\1\13\1\14\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\11\1\73\1\24\1\65\1\25\1\74\1\65"+
    "\1\75\1\30\1\11\1\76\1\77\1\33\1\100\1\35"+
    "\1\11\1\36\1\112\1\40\1\41\1\11\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\11\1\51\1\52"+
    "\1\53\1\54\1\55\1\11\1\56\1\57\1\11\1\60"+
    "\1\61\1\62\1\63\1\102\1\11\1\12\1\13\1\14"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\11\1\73"+
    "\1\24\1\65\1\25\1\74\1\65\1\75\1\30\1\11"+
    "\1\76\1\77\1\33\1\100\1\35\1\11\1\36\1\37"+
    "\1\40\1\41\1\11\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\11\1\51\1\52\1\53\1\54\1\55"+
    "\1\11\1\56\1\57\1\11\1\60\1\61\1\62\1\63"+
    "\1\64\2\113\1\0\2\113\1\114\2\113\1\114\1\113"+
    "\2\114\3\113\1\114\1\113\11\114\6\113\6\114\1\113"+
    "\2\114\3\113\4\114\5\113\67\0\1\13\65\0\1\115"+
    "\65\0\1\15\1\116\7\0\1\15\2\0\1\15\75\0"+
    "\1\117\6\0\1\120\1\121\2\0\1\122\12\0\1\123"+
    "\12\0\1\124\11\0\1\125\2\0\1\126\1\0\1\127"+
    "\45\0\1\130\2\0\1\131\1\0\2\131\3\0\1\132"+
    "\1\0\1\131\1\133\2\131\1\134\1\131\1\135\2\131"+
    "\6\0\1\136\1\137\4\131\1\0\1\140\1\131\3\0"+
    "\4\131\21\0\1\141\1\0\1\142\3\0\1\143\1\0"+
    "\1\144\14\0\1\145\37\0\1\146\1\0\1\147\11\0"+
    "\1\150\7\0\1\151\2\0\1\152\35\0\1\153\1\0"+
    "\1\154\56\0\1\155\2\0\1\156\12\0\1\157\12\0"+
    "\1\160\1\161\32\0\1\162\6\0\1\163\5\0\1\164"+
    "\1\165\11\0\1\166\4\0\1\167\36\0\1\170\4\0"+
    "\1\171\16\0\1\172\1\0\1\173\24\0\1\174\14\0"+
    "\1\175\1\0\1\176\16\0\1\177\3\0\1\200\22\0"+
    "\1\201\11\0\1\202\52\0\1\203\11\0\1\204\2\0"+
    "\1\205\20\0\1\206\1\207\25\0\1\210\2\0\1\211"+
    "\13\0\1\212\3\0\1\213\10\0\1\214\1\0\1\215"+
    "\26\0\1\216\11\0\1\217\2\0\1\220\20\0\1\221"+
    "\1\0\1\222\24\0\1\223\11\0\1\224\64\0\1\225"+
    "\2\0\1\226\1\227\15\0\1\230\12\0\1\231\36\0"+
    "\1\232\11\0\1\233\31\0\1\234\11\0\1\235\64\0"+
    "\1\236\64\0\1\237\2\0\1\240\1\241\30\0\1\242"+
    "\32\0\1\243\1\244\20\0\1\245\73\0\1\246\5\0"+
    "\1\247\22\0\1\250\2\0\1\251\66\0\1\252\113\0"+
    "\1\253\64\0\1\254\64\0\1\255\10\0\1\256\4\0"+
    "\1\65\1\257\2\0\1\260\1\261\3\0\1\65\2\0"+
    "\1\65\2\0\1\262\4\0\1\263\1\264\37\0\1\265"+
    "\10\0\1\265\2\0\1\265\5\0\1\266\2\0\1\117"+
    "\6\0\1\267\1\121\2\0\1\122\12\0\1\123\11\0"+
    "\1\270\10\0\1\270\2\0\1\270\50\0\1\271\1\124"+
    "\7\0\1\271\1\0\1\125\1\271\1\0\1\126\1\0"+
    "\1\127\44\0\1\272\1\130\2\0\1\131\1\0\2\131"+
    "\1\0\1\272\1\0\1\132\1\272\1\131\1\133\2\131"+
    "\1\134\1\131\1\135\2\131\6\0\1\136\1\137\4\131"+
    "\1\0\1\140\1\131\3\0\4\131\11\0\1\271\7\0"+
    "\1\141\1\271\1\142\1\0\1\271\1\0\1\143\1\0"+
    "\1\144\14\0\1\145\27\0\1\271\7\0\1\146\1\271"+
    "\1\147\1\0\1\271\7\0\1\150\7\0\1\151\2\0"+
    "\1\152\25\0\1\271\7\0\1\153\1\271\1\154\1\0"+
    "\1\271\50\0\1\271\3\0\1\162\4\0\1\271\1\0"+
    "\1\163\1\271\4\0\1\164\1\165\11\0\1\166\4\0"+
    "\1\167\23\0\1\271\10\0\1\271\1\0\1\170\1\271"+
    "\3\0\1\171\16\0\1\172\1\0\1\173\23\0\1\265"+
    "\1\201\7\0\1\265\1\0\1\202\1\265\51\0\1\273"+
    "\2\0\1\273\1\0\2\273\3\0\1\273\1\0\11\273"+
    "\6\0\6\273\1\0\2\273\3\0\4\273\4\0\1\274"+
    "\35\0\1\275\15\0\1\255\10\0\1\256\1\103\2\0"+
    "\11\103\1\0\50\103\14\0\1\276\50\0\1\106\2\0"+
    "\13\106\1\0\46\106\16\0\1\277\132\0\1\274\4\0"+
    "\2\114\2\0\1\114\1\0\2\114\1\0\1\114\1\0"+
    "\14\114\5\0\6\114\1\0\2\114\3\0\4\114\11\0"+
    "\1\300\10\0\1\300\2\0\1\300\70\0\1\301\22\0"+
    "\1\302\25\0\1\303\31\0\1\304\1\305\3\0\1\306"+
    "\22\0\1\307\20\0\1\310\102\0\1\311\63\0\1\312"+
    "\43\0\1\313\2\0\1\314\13\0\1\315\1\316\65\0"+
    "\1\317\70\0\1\320\61\0\1\321\1\322\24\0\1\131"+
    "\2\0\1\131\1\323\2\131\3\0\1\131\1\0\11\131"+
    "\6\0\6\131\1\0\2\131\3\0\3\131\1\324\12\0"+
    "\1\131\2\0\1\131\1\323\2\131\3\0\1\131\1\0"+
    "\11\131\6\0\6\131\1\0\2\131\3\0\4\131\12\0"+
    "\1\131\2\0\1\131\1\323\2\131\3\0\1\131\1\0"+
    "\11\131\6\0\4\131\1\325\1\131\1\0\2\131\3\0"+
    "\4\131\12\0\1\131\2\0\1\131\1\323\2\131\3\0"+
    "\1\131\1\0\11\131\6\0\1\326\5\131\1\0\2\131"+
    "\3\0\4\131\12\0\1\131\2\0\1\131\1\323\2\131"+
    "\3\0\1\131\1\0\1\131\1\327\7\131\6\0\6\131"+
    "\1\0\2\131\3\0\4\131\12\0\1\330\2\0\1\131"+
    "\1\323\2\131\3\0\1\131\1\0\11\131\6\0\6\131"+
    "\1\0\1\331\1\131\3\0\4\131\12\0\1\332\2\0"+
    "\1\131\1\323\2\131\3\0\1\333\1\0\11\131\6\0"+
    "\6\131\1\0\2\131\3\0\4\131\12\0\1\334\2\0"+
    "\1\131\1\323\2\131\3\0\1\131\1\0\11\131\6\0"+
    "\6\131\1\0\1\335\1\131\3\0\4\131\12\0\1\131"+
    "\2\0\1\131\1\323\2\131\3\0\1\131\1\0\11\131"+
    "\6\0\4\131\1\336\1\131\1\0\2\131\3\0\4\131"+
    "\22\0\1\337\64\0\1\340\111\0\1\341\62\0\1\342"+
    "\43\0\1\343\2\0\1\344\57\0\1\345\2\0\1\345"+
    "\61\0\1\346\2\0\1\346\51\0\1\347\41\0\1\350"+
    "\56\0\1\351\72\0\1\352\21\0\2\353\2\0\1\353"+
    "\2\0\1\353\1\0\1\353\2\0\1\353\1\0\1\353"+
    "\2\0\1\353\14\0\1\353\26\0\2\354\2\0\1\354"+
    "\2\0\1\354\1\0\1\354\2\0\1\354\1\0\1\354"+
    "\2\0\1\354\14\0\1\354\77\0\1\355\35\0\1\356"+
    "\64\0\1\357\25\0\1\360\51\0\1\361\65\0\1\362"+
    "\4\0\1\363\63\0\1\162\4\0\1\364\37\0\1\365"+
    "\12\0\1\366\3\0\1\367\36\0\1\370\22\0\1\371"+
    "\4\0\1\372\7\0\1\373\35\0\1\374\100\0\1\375"+
    "\60\0\1\376\1\377\63\0\1\u0100\73\0\1\u0101\56\0"+
    "\1\u0102\15\0\1\u0103\62\0\1\u0104\30\0\1\u0105\5\0"+
    "\1\u0106\50\0\1\u0107\70\0\1\u0108\2\0\1\u0109\21\0"+
    "\1\u010a\60\0\1\u010b\73\0\1\u010c\55\0\1\u010d\50\0"+
    "\1\u010e\1\0\1\u010f\46\0\1\u0110\15\0\1\u0111\14\0"+
    "\1\u0112\1\u0113\33\0\1\u0114\30\0\1\u0115\25\0\1\u0116"+
    "\11\0\1\u0117\4\0\1\u0118\100\0\1\u0119\1\u011a\2\0"+
    "\1\u011b\25\0\1\u011c\104\0\1\u011d\12\0\1\u011e\70\0"+
    "\1\u011f\44\0\1\u0120\100\0\1\u0121\55\0\1\u0122\63\0"+
    "\1\u0123\7\0\1\u0124\71\0\1\u0125\60\0\1\u0126\3\0"+
    "\1\u0127\60\0\1\u0128\63\0\1\u0129\53\0\1\u012a\75\0"+
    "\1\u012b\4\0\1\u012c\45\0\1\u012d\12\0\1\u012e\45\0"+
    "\1\u012f\61\0\1\u0130\2\0\1\u0131\104\0\1\u0132\27\0"+
    "\1\u0133\103\0\1\u0134\1\u0135\61\0\1\u0136\3\0\1\u0137"+
    "\13\0\1\u0138\4\0\1\u0139\1\u013a\57\0\1\u013b\31\0"+
    "\1\u013c\120\0\1\u013d\25\0\1\u013e\107\0\1\u013f\60\0"+
    "\1\u0140\45\0\1\u0141\16\0\1\u0142\64\0\1\u0143\101\0"+
    "\1\u0144\64\0\1\u0145\63\0\1\u0146\30\0\1\u0147\1\0"+
    "\2\u0148\5\0\1\u0147\2\0\1\u0147\50\0\1\u0149\1\0"+
    "\2\u014a\5\0\1\u0149\2\0\1\u0149\44\0\4\u014b\1\272"+
    "\1\u014c\2\u014b\1\260\1\u014b\2\0\1\u014b\1\272\1\u014b"+
    "\1\0\1\272\11\0\6\u014b\6\0\1\u014b\2\0\3\u014b"+
    "\4\0\5\u014b\4\0\1\265\4\0\1\u014d\3\0\1\265"+
    "\2\0\1\265\50\0\1\265\10\0\1\265\2\0\1\265"+
    "\50\0\1\265\3\0\1\303\4\0\1\265\2\0\1\265"+
    "\21\0\1\304\1\305\3\0\1\306\21\0\1\270\10\0"+
    "\1\270\2\0\1\270\7\0\1\263\40\0\1\271\4\0"+
    "\1\u014e\3\0\1\271\2\0\1\271\50\0\1\272\1\u014c"+
    "\2\0\1\260\4\0\1\272\2\0\1\272\53\0\1\u014f"+
    "\24\0\1\u0150\1\u0151\33\0\1\300\4\0\1\u0152\3\0"+
    "\1\300\2\0\1\300\72\0\1\u0153\20\0\1\u0154\22\0"+
    "\1\u0155\67\0\1\u0156\2\0\1\u0157\10\0\1\u0158\1\u0159"+
    "\1\u015a\1\0\1\u015b\14\0\1\u015c\1\0\1\u015d\1\u015e"+
    "\2\0\1\u015f\30\0\1\u0160\112\0\1\u0161\63\0\1\u0162"+
    "\65\0\1\u0163\24\0\1\u0164\132\0\1\u0165\35\0\1\u0166"+
    "\101\0\1\u0167\30\0\1\u0168\14\0\1\u0169\66\0\1\u016a"+
    "\64\0\1\u016b\53\0\1\u016c\73\0\1\u016d\47\0\1\u016e"+
    "\64\0\1\u016f\64\0\1\131\2\0\1\131\1\u0170\2\131"+
    "\3\0\1\131\1\0\11\131\6\0\6\131\1\0\2\131"+
    "\3\0\1\131\1\u0171\2\131\12\0\1\131\2\0\1\131"+
    "\1\u0172\2\131\3\0\1\131\1\0\11\131\6\0\6\131"+
    "\1\0\2\131\3\0\4\131\12\0\1\131\2\0\1\u0173"+
    "\1\323\2\131\3\0\1\131\1\0\11\131\6\0\6\131"+
    "\1\0\2\131\3\0\4\131\12\0\1\131\2\0\1\131"+
    "\1\323\2\131\3\0\1\131\1\0\11\131\6\0\1\131"+
    "\1\u0174\4\131\1\0\2\131\3\0\4\131\12\0\1\131"+
    "\2\0\1\131\1\u0175\2\131\3\0\1\131\1\0\11\131"+
    "\6\0\6\131\1\0\2\131\3\0\4\131\12\0\1\131"+
    "\2\0\1\131\1\u0176\2\131\3\0\1\131\1\0\11\131"+
    "\6\0\6\131\1\0\2\131\3\0\4\131\12\0\1\131"+
    "\2\0\1\131\1\u0177\2\131\3\0\1\131\1\0\11\131"+
    "\6\0\6\131\1\0\2\131\3\0\3\131\1\u0178\12\0"+
    "\1\131\2\0\1\131\1\323\2\131\3\0\1\131\1\0"+
    "\11\131\6\0\6\131\1\0\1\u0179\1\131\3\0\4\131"+
    "\12\0\1\131\2\0\1\131\1\u017a\2\131\3\0\1\131"+
    "\1\0\11\131\6\0\6\131\1\0\2\131\3\0\4\131"+
    "\12\0\1\131\2\0\1\131\1\u017b\2\131\3\0\1\131"+
    "\1\0\11\131\6\0\6\131\1\0\2\131\3\0\4\131"+
    "\12\0\1\131\2\0\1\131\1\323\2\131\3\0\1\131"+
    "\1\0\11\131\6\0\3\131\1\u017c\2\131\1\0\2\131"+
    "\3\0\4\131\21\0\1\u017d\1\337\64\0\1\340\1\u017d"+
    "\124\0\1\u017e\16\0\1\u017f\116\0\1\u0180\62\0\1\u0181"+
    "\40\0\1\u0182\1\345\2\0\1\345\61\0\1\346\1\u0182"+
    "\1\0\1\346\104\0\1\u0183\3\0\1\u0184\44\0\1\u0185"+
    "\114\0\1\u0186\14\0\2\353\2\0\1\353\2\0\1\353"+
    "\1\u0187\1\353\2\0\1\353\1\0\1\353\2\0\1\353"+
    "\14\0\1\353\26\0\2\354\2\0\1\354\2\0\1\354"+
    "\1\0\1\354\1\u0187\1\0\1\354\1\0\1\354\2\0"+
    "\1\354\14\0\1\354\44\0\1\u0188\111\0\1\u0189\34\0"+
    "\1\u018a\4\0\1\u018b\100\0\1\u018c\43\0\1\u018d\52\0"+
    "\1\u018e\103\0\1\u018f\107\0\1\u0190\22\0\1\u0191\105\0"+
    "\1\u0192\101\0\1\u0193\62\0\1\u0194\30\0\1\u0195\36\0"+
    "\1\u0196\63\0\1\u0197\40\0\1\u0198\21\0\1\u0199\45\0"+
    "\1\u019a\22\0\1\u019b\41\0\1\u019c\47\0\1\u019d\121\0"+
    "\1\u019e\75\0\1\u019f\16\0\1\u01a0\122\0\1\u01a1\26\0"+
    "\1\u01a2\64\0\1\u01a3\117\0\1\u01a4\70\0\1\u01a5\50\0"+
    "\1\u01a6\103\0\1\u01a7\22\0\1\u01a8\64\0\1\u01a9\76\0"+
    "\1\u01aa\55\0\1\u01ab\114\0\1\u01ac\50\0\1\u01ad\21\0"+
    "\1\u01ae\4\0\1\u01af\64\0\1\u01b0\37\0\1\u01b1\64\0"+
    "\1\u01b2\60\0\1\u01b3\103\0\1\u01b4\30\0\1\u01b5\121\0"+
    "\1\u01b6\51\0\1\u01b7\12\0\1\u01b8\4\0\1\u01b9\55\0"+
    "\1\u01ba\14\0\1\u01bb\17\0\1\u01bc\100\0\1\u01bd\1\0"+
    "\1\u01be\102\0\1\u01bf\45\0\1\214\37\0\1\u011d\1\u01c0"+
    "\1\u01c1\62\u011d\42\0\1\u01c2\44\0\1\u01c3\102\0\1\u01be"+
    "\34\0\1\u01c4\123\0\1\u01c5\37\0\1\u01c6\47\0\1\u01c7"+
    "\24\0\1\u01c8\37\0\1\u01c9\120\0\1\u01ca\36\0\1\u01cb"+
    "\124\0\1\u01cc\64\0\1\u01cd\35\0\1\u01ce\107\0\1\u01cf"+
    "\45\0\1\u01d0\14\0\1\u01d1\24\0\1\u01d2\120\0\1\u01d3"+
    "\67\0\1\u01d4\46\0\1\u01d5\64\0\1\u01d6\77\0\1\u01d7"+
    "\72\0\1\u01d8\34\0\1\u01d9\55\0\1\u01da\30\0\1\u01db"+
    "\66\0\1\u01dc\62\0\1\u01dd\1\0\1\u01de\7\0\1\u01df"+
    "\54\0\1\u01e0\45\0\1\u01e1\100\0\1\u01e2\67\0\1\u01e3"+
    "\50\0\1\u01e4\75\0\1\u01e5\31\0\1\u01e6\126\0\1\u01e7"+
    "\61\0\1\u01e8\61\0\1\u01e9\72\0\1\u01ea\37\0\1\u01eb"+
    "\105\0\1\u01ec\31\0\1\u01ed\60\0\1\u0147\4\0\1\u0152"+
    "\3\0\1\u0147\2\0\1\u0147\50\0\1\u01ee\10\0\1\u01ee"+
    "\2\0\1\u01ee\50\0\1\u0149\10\0\1\u0149\2\0\1\u0149"+
    "\50\0\1\u01ee\1\0\2\u0148\5\0\1\u01ee\2\0\1\u01ee"+
    "\50\0\1\u01ef\10\0\1\u01ef\2\0\1\u01ef\50\0\1\u01f0"+
    "\10\0\1\u01f0\2\0\1\u01f0\51\0\1\u01f1\2\0\1\u01f1"+
    "\1\0\2\u01f1\3\0\1\u01f1\1\0\11\u01f1\6\0\6\u01f1"+
    "\1\0\2\u01f1\3\0\4\u01f1\12\0\1\273\2\0\1\273"+
    "\1\0\2\273\3\0\1\273\1\0\11\273\6\0\6\273"+
    "\1\0\2\273\3\0\4\273\6\0\1\u01f2\1\u01f3\31\0"+
    "\1\u01f3\1\0\1\u01f3\32\0\1\u01f4\10\0\1\u01f4\2\0"+
    "\1\u01f4\113\0\1\u01f5\55\0\1\u01f6\3\0\1\u01f7\37\0"+
    "\1\u01f8\106\0\1\u01f9\50\0\1\u01fa\12\0\1\u01fb\43\0"+
    "\1\u01fc\4\0\1\u01fd\16\0\1\u01fe\26\0\1\u01ff\35\0"+
    "\1\u0200\65\0\1\u0201\37\0\1\u0202\121\0\1\u0203\33\0"+
    "\1\u0204\51\0\1\u0205\61\0\1\u0206\133\0\1\u0207\15\0"+
    "\1\u0208\103\0\1\u0209\23\0\1\u020a\71\0\1\u020b\50\0"+
    "\1\u020c\67\0\1\u020d\63\0\1\u020e\66\0\1\u020f\64\0"+
    "\1\u0210\60\0\1\u0211\65\0\1\u0212\62\0\1\u0213\31\0"+
    "\1\131\2\0\1\131\1\u0214\2\131\3\0\1\131\1\0"+
    "\11\131\6\0\6\131\1\0\2\131\3\0\4\131\12\0"+
    "\1\131\2\0\1\131\1\u0215\2\131\3\0\1\131\1\0"+
    "\11\131\6\0\6\131\1\0\2\131\3\0\4\131\12\0"+
    "\1\131\2\0\1\131\1\323\2\131\3\0\1\131\1\0"+
    "\5\131\1\u0216\3\131\6\0\6\131\1\0\2\131\3\0"+
    "\4\131\12\0\1\131\2\0\1\131\1\323\2\131\3\0"+
    "\1\131\1\0\11\131\6\0\6\131\1\0\2\131\3\0"+
    "\1\131\1\u0217\2\131\12\0\1\131\2\0\1\131\1\u0218"+
    "\2\131\3\0\1\131\1\0\11\131\6\0\6\131\1\0"+
    "\2\131\3\0\4\131\12\0\1\u0219\2\0\1\131\1\323"+
    "\2\131\3\0\1\131\1\0\11\131\6\0\6\131\1\0"+
    "\2\131\3\0\4\131\33\0\1\u021a\114\0\1\u021b\64\0"+
    "\1\u021c\13\0\1\u021d\101\0\1\u021e\61\0\1\u021f\105\0"+
    "\1\u0220\70\0\1\u0221\62\0\1\u0222\51\0\1\u0223\77\0"+
    "\1\u0224\64\0\1\u0225\50\0\1\u0226\55\0\1\u0227\67\0"+
    "\1\u0228\102\0\1\u0229\53\0\1\u022a\104\0\1\u022b\60\0"+
    "\1\u022c\50\0\1\u022d\10\0\1\u022e\3\0\1\u022f\44\0"+
    "\1\u0230\64\0\1\u0231\104\0\1\u0232\44\0\1\u0233\101\0"+
    "\1\u0234\45\0\1\u0235\30\0\1\u0236\52\0\1\u0237\76\0"+
    "\1\u0238\60\0\1\u0239\57\0\1\u023a\27\0\1\u023b\132\0"+
    "\1\u023c\57\0\1\u01a4\4\0\1\u023d\30\0\1\u023e\110\0"+
    "\1\u023f\7\0\1\u0240\33\0\1\u0241\106\0\1\u0242\44\0"+
    "\1\u0243\107\0\1\u0244\64\0\1\u0245\63\0\1\u01ae\4\0"+
    "\1\u01af\16\0\1\u0246\124\0\1\u0247\43\0\1\u0248\64\0"+
    "\1\u0249\104\0\1\u024a\25\0\1\u024b\64\0\1\u024c\126\0"+
    "\1\u024d\37\0\1\u024e\66\0\1\u01bd\65\0\1\u011d\44\0"+
    "\1\u011d\76\0\1\u024f\47\0\1\u01c1\123\0\1\u0250\52\0"+
    "\1\u0251\42\0\1\u01bd\123\0\1\u0252\46\0\1\u0253\55\0"+
    "\1\u0254\4\0\1\u0255\50\0\1\u0256\30\0\1\u0257\11\0"+
    "\1\u0258\35\0\1\u0259\45\0\1\u025a\121\0\1\u025b\44\0"+
    "\1\u025c\1\0\1\u025d\101\0\1\u025e\42\0\1\u025f\67\0"+
    "\1\u0260\47\0\1\u0261\105\0\1\u0262\43\0\1\u0263\132\0"+
    "\1\u0264\55\0\1\u0265\70\0\1\u0266\2\0\1\u0267\14\0"+
    "\1\u0268\122\0\1\u0269\76\0\1\u026a\55\0\1\u026b\64\0"+
    "\1\u026c\60\0\1\u026d\34\0\1\u026e\115\0\1\u026f\30\0"+
    "\1\u0270\64\0\1\u0271\64\0\1\u0272\64\0\1\u0273\126\0"+
    "\1\u0274\22\0\1\u0275\132\0\1\u0276\15\0\1\u01ef\1\u014e"+
    "\7\0\1\u01ef\2\0\1\u01ef\100\0\1\u0150\1\u0151\31\0"+
    "\1\u01f3\135\0\1\u0277\21\0\1\u0278\114\0\1\u0279\43\0"+
    "\1\u027a\114\0\1\u027b\61\0\1\u027c\61\0\1\u027d\63\0"+
    "\1\u027e\65\0\1\u027f\36\0\1\u0280\70\0\1\u0281\55\0"+
    "\1\u0282\104\0\1\u0283\41\0\1\u0284\103\0\1\u0285\104\0"+
    "\1\u0286\60\0\1\u0287\51\0\1\u0288\62\0\1\u0289\63\0"+
    "\1\u028a\61\0\1\u028b\111\0\1\u028c\61\0\1\u028d\76\0"+
    "\1\u028e\33\0\1\u028f\47\0\1\u0290\126\0\1\u0291\43\0"+
    "\1\u0292\43\0\1\u0293\2\0\1\131\1\323\2\131\3\0"+
    "\1\131\1\0\11\131\6\0\6\131\1\0\2\131\3\0"+
    "\4\131\12\0\1\131\2\0\1\131\1\u0294\2\131\3\0"+
    "\1\131\1\0\11\131\6\0\6\131\1\0\2\131\3\0"+
    "\4\131\12\0\1\131\2\0\1\131\1\u0295\2\131\3\0"+
    "\1\131\1\0\11\131\6\0\6\131\1\0\2\131\3\0"+
    "\4\131\35\0\1\u0296\44\0\1\u0297\127\0\1\u0298\21\0"+
    "\1\u0299\123\0\1\u029a\55\0\1\u029b\66\0\1\u029c\44\0"+
    "\1\u029d\66\0\1\u029e\100\0\1\u029f\47\0\1\u02a0\63\0"+
    "\1\u02a1\70\0\1\u02a2\76\0\1\u02a3\73\0\1\u02a4\44\0"+
    "\1\u02a5\103\0\1\u022a\4\0\1\u02a6\21\0\1\u02a7\61\0"+
    "\1\u02a8\126\0\1\u02a9\42\0\1\u02aa\77\0\1\u02ab\70\0"+
    "\1\u02ac\67\0\1\u02ad\57\0\1\u02ae\63\0\1\u02af\72\0"+
    "\1\u02b0\41\0\1\u02b1\107\0\1\u02b2\55\0\1\u02b3\67\0"+
    "\1\u02b4\47\0\1\u02b5\103\0\1\u02b6\43\0\1\u02b7\100\0"+
    "\1\u02b8\31\0\1\u02b9\103\0\1\u02ba\45\0\1\u02bb\121\0"+
    "\1\u02bc\50\0\1\u02bd\60\0\1\u02be\52\0\1\u02bf\116\0"+
    "\1\u02c0\71\0\1\u02c1\61\0\1\u011d\63\0\1\u02c2\66\0"+
    "\1\u02c3\24\0\1\u02c4\105\0\1\u02c5\113\0\1\u02c6\47\0"+
    "\1\u02c7\77\0\1\u02c8\35\0\1\u02c9\65\0\1\u02ca\103\0"+
    "\1\u02cb\42\0\1\u02cc\66\0\1\u02cd\100\0\1\u02ce\31\0"+
    "\1\u02cf\117\0\1\u02d0\66\0\1\u02d1\67\0\1\u02d2\63\0"+
    "\1\u02d3\24\0\1\u02d4\10\0\1\u02d4\2\0\1\u02d4\113\0"+
    "\1\u02d5\43\0\1\u02d6\76\0\1\u02d7\34\0\1\u02d8\122\0"+
    "\1\u026e\4\0\1\u02d9\16\0\1\u02da\126\0\1\u02db\70\0"+
    "\1\u02dc\35\0\1\u02dd\66\0\1\u02de\60\0\1\u02df\104\0"+
    "\1\u02e0\27\0\1\u02e1\101\0\1\u02e2\47\0\1\u02e3\121\0"+
    "\1\u02e4\27\0\1\u02e5\123\0\1\u02e6\47\0\1\u02e7\100\0"+
    "\1\u02e8\26\0\1\u02e9\123\0\1\u02ea\60\0\1\u02eb\46\0"+
    "\1\u02ec\111\0\1\u02ed\22\0\1\u02ee\120\0\1\u02ef\65\0"+
    "\1\u02f0\27\0\1\u02f1\126\0\1\u02f2\56\0\1\u02f3\26\0"+
    "\1\u02f4\24\0\1\u02f5\107\0\1\u02f6\35\0\1\u02f7\45\0"+
    "\1\131\2\0\1\131\1\u02f8\2\131\3\0\1\131\1\0"+
    "\11\131\6\0\6\131\1\0\2\131\3\0\4\131\27\0"+
    "\1\u02f9\64\0\1\u02fa\115\0\1\u02fb\30\0\1\u02fc\67\0"+
    "\1\u02fd\47\0\1\u02fe\121\0\1\u02ff\44\0\1\u0300\107\0"+
    "\1\u0301\63\0\1\u0302\67\0\1\u0303\70\0\1\u0304\64\0"+
    "\1\u0305\64\0\1\u0306\60\0\1\u0307\22\0\1\u0308\123\0"+
    "\1\u0309\42\0\1\u030a\70\0\1\u030b\43\0\1\u030c\103\0"+
    "\1\u030d\107\0\1\u030e\34\0\1\u030f\107\0\1\u0310\64\0"+
    "\1\u0311\4\0\1\u0312\64\0\1\u0313\70\0\1\u0314\57\0"+
    "\1\u02b6\4\0\1\u0315\53\0\1\u0316\51\0\1\u0317\101\0"+
    "\1\u0318\37\0\1\u0319\114\0\1\u031a\41\0\1\u031b\105\0"+
    "\1\u031c\62\0\1\u031d\70\0\1\u031e\22\0\1\u031f\67\0"+
    "\1\u01be\76\0\1\u011d\104\0\1\u0320\27\0\1\u0321\126\0"+
    "\1\u0322\43\0\1\u0323\112\0\1\u0324\63\0\1\u0325\52\0"+
    "\1\u0326\63\0\1\u0327\67\0\1\u0328\52\0\1\u0329\102\0"+
    "\1\u032a\37\0\1\u032b\66\0\1\u032c\64\0\1\u032d\101\0"+
    "\1\u032e\64\0\1\u032f\101\0\1\u0330\52\0\1\u0331\61\0"+
    "\1\u0332\72\0\1\u0333\57\0\1\u0334\41\0\1\u0335\111\0"+
    "\1\u0336\61\0\1\u0337\30\0\1\u0338\106\0\1\u0339\104\0"+
    "\1\u033a\37\0\1\u033b\106\0\1\u033c\25\0\1\u033d\101\0"+
    "\1\u033e\52\0\1\u033f\122\0\1\u02f3\4\0\1\u0340\15\0"+
    "\1\u0341\10\0\1\u0341\2\0\1\u0341\110\0\1\u0342\37\0"+
    "\1\u0343\107\0\1\u0344\71\0\1\u0345\61\0\1\u0346\61\0"+
    "\1\u0347\76\0\1\u0348\60\0\1\u0349\64\0\1\u034a\22\0"+
    "\1\u034b\76\0\1\u034c\52\0\1\u034d\14\0\1\u034e\65\0"+
    "\1\u034f\55\0\1\u0350\1\0\1\u0350\27\0\1\u0308\21\0"+
    "\1\u0351\123\0\1\u0352\46\0\1\u0353\107\0\1\u0354\22\0"+
    "\1\u0355\117\0\1\u0356\46\0\1\u0357\47\0\1\u0358\103\0"+
    "\1\u0359\64\0\1\u035a\106\0\1\u0317\4\0\1\u035b\51\0"+
    "\1\u035c\31\0\1\u035d\76\0\1\u035e\111\0\1\u035f\25\0"+
    "\1\u0360\132\0\1\u0361\55\0\1\u0362\64\0\1\u0363\67\0"+
    "\1\u0364\20\0\1\u0365\107\0\1\u0366\43\0\1\u0367\62\0"+
    "\1\u0368\66\0\1\u0369\126\0\1\u036a\64\0\1\u036b\72\0"+
    "\1\u036c\14\0\1\u036d\67\0\1\u036e\101\0\1\u036f\100\0"+
    "\1\u0370\47\0\1\u0371\107\0\1\u0372\60\0\1\u0373\43\0"+
    "\1\u0374\47\0\1\u0375\125\0\1\u0339\4\0\1\u0376\30\0"+
    "\1\u0377\106\0\1\u0378\30\0\1\u0379\117\0\1\u037a\73\0"+
    "\1\u037b\22\0\1\u037c\117\0\1\u037d\31\0\1\u037e\101\0"+
    "\1\u037f\47\0\1\u0380\117\0\1\u0381\64\0\1\u0382\37\0"+
    "\1\u0383\124\0\1\u0384\11\0\1\u0350\2\0\11\u0350\1\u0385"+
    "\1\u0350\1\u0385\46\u0350\4\0\1\u0386\10\0\1\u0386\2\0"+
    "\1\u0386\51\0\1\u0387\121\0\1\u0388\32\0\1\u0389\102\0"+
    "\1\u038a\60\0\1\u038b\102\0\1\u038c\77\0\1\u038d\55\0"+
    "\1\u038e\60\0\1\u038f\31\0\1\u0390\67\0\1\u0391\120\0"+
    "\1\u0392\44\0\1\u0393\44\0\1\u0394\10\0\1\u0394\2\0"+
    "\1\u0394\50\0\1\u0395\10\0\1\u0395\2\0\1\u0395\110\0"+
    "\1\u0396\67\0\1\u0397\22\0\1\u0398\64\0\1\u0399\101\0"+
    "\1\u039a\64\0\1\u039b\61\0\1\u039c\114\0\1\u039d\62\0"+
    "\1\u039e\63\0\1\u039f\62\0\1\u03a0\27\0\1\u03a1\121\0"+
    "\1\u03a2\71\0\1\u03a3\34\0\1\u03a4\106\0\1\u03a5\23\0"+
    "\1\u0350\1\u01c0\1\u01c1\11\u0350\1\u0385\1\u0350\1\u0385\46\u0350"+
    "\53\0\1\u03a6\16\0\1\u03a7\120\0\1\u03a8\30\0\1\u03a9"+
    "\103\0\1\u03aa\100\0\1\u03ab\27\0\1\u03ac\66\0\1\u03ad"+
    "\132\0\1\u03ae\60\0\1\u03af\57\0\1\u03b0\62\0\1\u03b1"+
    "\50\0\1\u03b2\45\0\1\u03b3\103\0\1\u03b4\103\0\1\u03b5"+
    "\26\0\1\u03b6\132\0\1\u03b7\21\0\1\u03b8\102\0\1\u03b9"+
    "\42\0\1\u03ba\10\0\1\u03ba\2\0\1\u03ba\54\0\1\u03bb"+
    "\76\0\1\u03bc\47\0\1\u03bd\117\0\1\u03be\52\0\1\u03bf"+
    "\64\0\1\u03c0\60\0\1\u03c1\66\0\1\u03c2\113\0\1\u03c3"+
    "\16\0\1\u03c4\103\0\1\u03c5\106\0\1\u03c6\4\0\1\u03c7"+
    "\24\0\1\u03c8\113\0\1\u03c9\41\0\1\u03ca\106\0\1\u03cb"+
    "\63\0\1\u03cc\31\0\1\u03cd\62\0\1\u03ce\65\0\1\u03cf"+
    "\10\0\1\u03cf\2\0\1\u03cf\44\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[40598];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\11\1\1\1\11\3\1\2\11\3\1\2\11"+
    "\10\1\4\11\11\1\2\11\3\1\1\11\2\1\1\11"+
    "\20\1\1\11\3\1\2\11\1\1\1\11\1\1\1\11"+
    "\7\0\1\1\36\0\2\11\1\1\13\0\1\1\34\0"+
    "\1\11\6\0\2\11\3\0\4\11\2\0\1\2\3\11"+
    "\5\0\1\1\1\0\4\11\3\0\1\1\17\0\1\11"+
    "\26\0\1\11\11\0\1\11\64\0\1\1\11\0\1\11"+
    "\23\0\1\1\1\0\1\1\1\0\1\15\5\0\1\2"+
    "\2\0\1\11\12\0\1\11\1\0\1\1\2\0\1\1"+
    "\1\11\7\0\1\11\2\0\1\11\1\0\1\11\2\0"+
    "\3\11\2\0\2\11\1\0\1\11\1\0\1\11\2\0"+
    "\1\11\1\1\2\0\2\11\25\0\1\1\1\0\1\11"+
    "\2\0\1\11\3\0\1\11\3\0\1\11\4\0\3\11"+
    "\3\0\1\11\12\0\1\1\1\11\5\0\1\11\2\0"+
    "\1\1\1\0\2\11\4\0\2\11\6\0\2\1\3\0"+
    "\1\11\5\0\3\11\5\0\4\1\1\0\1\5\1\15"+
    "\1\1\3\0\1\11\1\0\1\11\14\0\1\11\14\0"+
    "\2\11\2\0\1\11\2\0\1\1\17\0\1\11\12\0"+
    "\3\11\3\0\2\11\2\0\1\11\5\0\1\11\6\0"+
    "\1\11\12\0\1\11\10\0\4\11\2\0\1\11\2\0"+
    "\1\11\6\0\2\11\1\1\1\0\3\11\20\0\1\11"+
    "\5\0\1\11\1\0\1\1\3\0\2\11\2\0\1\11"+
    "\15\0\1\11\2\0\1\11\3\0\1\11\1\0\1\11"+
    "\1\1\1\0\1\1\11\0\1\11\10\0\1\11\2\0"+
    "\1\11\7\0\1\11\3\0\1\1\1\11\1\0\6\11"+
    "\1\0\1\11\4\0\1\11\5\0\1\11\10\0\1\11"+
    "\3\0\1\11\1\0\1\11\2\0\1\11\10\0\3\11"+
    "\2\0\1\1\2\0\1\11\7\0\3\11\1\0\1\11"+
    "\3\0\1\11\2\0\1\11\4\0\2\11\1\1\2\0"+
    "\1\1\5\0\1\11\1\1\7\0\1\11\6\0\2\11"+
    "\1\1\4\0\4\11\3\0\1\11\6\0\1\11\1\0"+
    "\1\11\1\0\1\11\2\0\1\11\5\0\1\11\2\0"+
    "\1\11\1\0\2\11\5\0\1\11\2\0\1\11\1\0"+
    "\1\11\2\0\2\11\1\0\2\11\3\0\4\11\3\0"+
    "\1\11\1\0\1\1\2\11\4\0\5\11\2\0\3\1"+
    "\2\0\1\11\4\0\2\11\1\0\1\11\1\0\1\11"+
    "\2\0\2\11\1\0\1\11\4\0\1\11\2\0\1\11"+
    "\1\0\1\11\2\0\2\11\2\0\1\1\1\0\2\11"+
    "\2\0\1\1\2\0\2\11\2\0\1\11\1\0\1\11"+
    "\2\0\1\1\1\11\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[975];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	private FixedFormLexerPrepass prepass;
    	
	private TokenFactory tokenFactory;
    
    public FixedFormLexerPhase1(InputStream in, FixedFormLexerPrepass _prepass, TokenFactory tokenFactory) {
		this(new LineAppendingInputStream(in));
		this.prepass=_prepass;
		this.tokenFactory = tokenFactory;
    }
    
    //unset start of line state
    private void unsetSOL() {
    	if (yystate()==YYINITIAL) yybegin(YYSTANDARD); 
    }
    
    public int getLine() {
      return prepass.getLine(yychar);
    }
    public int getCol() {
      return prepass.getColumn(yychar);
    }
    
    protected IFile lastTokenFile = null;
    protected int lastTokenLine = 1, lastTokenCol = 1, lastTokenFileOffset = 0, lastTokenStreamOffset = 0, lastTokenLength = 0;
    
	private IToken token(Terminal terminal)
	{
		lastTokenLine = prepass.getLine(yychar)+1;
		lastTokenCol = prepass.getColumn(yychar)+1;
		lastTokenFileOffset = prepass.getOffset(yychar);
		lastTokenStreamOffset = prepass.getOffset(yychar);
		lastTokenLength = prepass.getOffset(yychar+yylength()-1)-prepass.getOffset(yychar)+1;
		return tokenFactory.createToken(terminal,
		                 "",
		                 terminal == Terminal.T_SCON || terminal == Terminal.T_HCON
		                     ? stringBuffer.toString()
		                     : yytext(),
		                 "");
	}

	/*
	private IToken token(Terminal terminal)
	{
		IToken t = new Token();
		t.setTerminal(terminal);
		t.setFilename(this.filename);
		t.setFileOffset(prepass.getOffset(yychar));
		t.setStreamOffset(prepass.getOffset(yychar));
		t.setLength(prepass.getOffset(yychar+yylength()-1)-prepass.getOffset(yychar)+1);
		t.setText(terminal == Terminal.T_SCON || terminal == Terminal.T_HCON
		          ? stringBuffer.toString()
		          : yytext());
		t.setStartLine(prepass.getLine(yychar)+1);
		t.setStartCol(prepass.getColumn(yychar)+1);
		t.setEndLine(prepass.getLine(yychar+yylength()-1)+1);
		t.setEndCol(prepass.getColumn(yychar+yylength()-1)+1);

		return t;
	}
	*/

	private StringBuffer stringBuffer = null;
	private int hollerithLength = 0;

	private boolean wantEos = false;
	
	private String filename = "<stdin>";
    
	public FixedFormLexerPhase1(java.io.InputStream in, FixedFormLexerPrepass _prepass, String filename, TokenFactory tokenFactory)
	{
	    this(in, _prepass, tokenFactory);
	    this.filename = filename;
	}
	
    public String getFilename()
    {
        return filename;
    }
    
    public TokenFactory getTokenFactory()
    {
    	return tokenFactory;
    }

    public int getLastTokenLine()
    {
        return lastTokenLine;
    }

    public int getLastTokenCol()
    {
        return lastTokenCol;
    }
    
    public IFile getLastTokenFile()
    {
        return lastTokenFile;
    }
    
    public int getLastTokenFileOffset()
    {
        return lastTokenFileOffset;
    }
    
    public int getLastTokenStreamOffset()
    {
        return lastTokenStreamOffset;
    }
    
    public int getLastTokenLength()
    {
        return lastTokenLength;
    }

//	private List/*<NonTreeToken>*/ nonTreeTokens = new LinkedList();
//    public List/*<NonTreeToken>*/ getNonTreeTokens()
//    {
//    	return nonTreeTokens;
//    }
//
	private void storeNonTreeToken()
	{
//		nonTreeTokens.add(new NonTreeToken(this.filename,
//				prepass.getOffset(yychar),   // int offset
//				prepass.getLine(yychar)+1,   // int row
//				prepass.getColumn(yychar)+1, // int col
//		        yytext()));
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  FixedFormLexerPhase1(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  FixedFormLexerPhase1(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 188) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IToken yylex() throws java.io.IOException, Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;
    int zzPushbackPosL = zzPushbackPos = -1;
    boolean zzWasPushback;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;

      zzWasPushback = false;

      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            zzPushbackPos = zzPushbackPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            zzPushbackPosL = zzPushbackPos;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 2) == 2 )
            zzPushbackPosL = zzCurrentPosL;

          if ( (zzAttributes & 1) == 1 ) {
            zzWasPushback = (zzAttributes & 4) == 4;
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;
      if (zzWasPushback)
        zzMarkedPos = zzPushbackPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 50: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_END);
          }
        case 235: break;
        case 153: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_EXTENDS);
          }
        case 236: break;
        case 109: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FORMEQ);
          }
        case 237: break;
        case 202: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_BLOCKDATA);
          }
        case 238: break;
        case 78: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SAVE);
          }
        case 239: break;
        case 110: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_FINAL);
          }
        case 240: break;
        case 168: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_POINTER);
          }
        case 241: break;
        case 234: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_NON_OVERRIDABLE);
          }
        case 242: break;
        case 22: 
          { throw new Exception("Lexer Error (line " + (getLine()+1) + ", col " + (getCol()+1) + "): String literal spans multiple lines without continuation");
          }
        case 243: break;
        case 95: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_THEN);
          }
        case 244: break;
        case 122: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_READEQ);
          }
        case 245: break;
        case 85: 
          { storeNonTreeToken();
          }
        case 246: break;
        case 157: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DIRECTEQ);
          }
        case 247: break;
        case 86: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NONE);
          }
        case 248: break;
        case 231: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_ASYNCHRONOUSEQ);
          }
        case 249: break;
        case 138: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_IMPORT);
          }
        case 250: break;
        case 206: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_INTRINSIC);
          }
        case 251: break;
        case 61: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ERREQ);
          }
        case 252: break;
        case 55: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_USE);
          }
        case 253: break;
        case 105: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_AND);
          }
        case 254: break;
        case 142: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PUBLIC);
          }
        case 255: break;
        case 10: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_LPAREN);
          }
        case 256: break;
        case 24: 
          { stringBuffer.append('\"');
								  yybegin(YYSTANDARD);
								  wantEos = true;
								  return token(Terminal.T_SCON);
          }
        case 257: break;
        case 26: 
          { throw new Exception("Lexer Error (line " + (getLine()+1) + ", col " + (getCol()+1) + "): Hollerith literal spans multiple lines without continuation");
          }
        case 258: break;
        case 174: 
          { wantEos = true; unsetSOL();          ; return token(Terminal.T_COMPLEX);
          }
        case 259: break;
        case 156: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DEFAULT);
          }
        case 260: break;
        case 45: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_RCON);
          }
        case 261: break;
        case 226: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDBLOCKDATA);
          }
        case 262: break;
        case 25: 
          { hollerithLength--;
									stringBuffer.append(yytext());
									if (hollerithLength==0) {
									  	yybegin(YYSTANDARD);
									  	wantEos = true;
									  	return token(Terminal.T_HCON);
									 }
          }
        case 263: break;
        case 30: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DO);
          }
        case 264: break;
        case 127: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_VALUE);
          }
        case 265: break;
        case 59: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_ENUM);
          }
        case 266: break;
        case 107: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_BLOCK);
          }
        case 267: break;
        case 20: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_SLASH);
          }
        case 268: break;
        case 83: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_PASS);
          }
        case 269: break;
        case 137: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_INTENT);
          }
        case 270: break;
        case 232: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_NON_INTRINSIC);
          }
        case 271: break;
        case 98: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_KIND);
          }
        case 272: break;
        case 3: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_ASTERISK);
          }
        case 273: break;
        case 180: 
          { wantEos = true; yybegin(OPERATORorFORMAT);  return token(Terminal.T_OPERATOR);
          }
        case 274: break;
        case 161: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ACTIONEQ);
          }
        case 275: break;
        case 91: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CALL);
          }
        case 276: break;
        case 186: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FUNCTION);
          }
        case 277: break;
        case 204: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_IOLENGTHEQ);
          }
        case 278: break;
        case 8: 
          { stringBuffer = new StringBuffer();
								  stringBuffer.append('\"');
								  yybegin(DBLQUOTED);
          }
        case 279: break;
        case 11: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_COMMA);
          }
        case 280: break;
        case 65: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_GE);
          }
        case 281: break;
        case 143: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_NOPASS);
          }
        case 282: break;
        case 192: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CONTINUE);
          }
        case 283: break;
        case 19: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PERCENT);
          }
        case 284: break;
        case 49: 
          { stringBuffer.append('\"');
          }
        case 285: break;
        case 89: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_LENEQ);
          }
        case 286: break;
        case 4: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_ICON);
          }
        case 287: break;
        case 212: 
          { wantEos = true; unsetSOL();          ; return token(Terminal.T_CHARACTER);
          }
        case 288: break;
        case 103: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENTRY);
          }
        case 289: break;
        case 222: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDFUNCTION);
          }
        case 290: break;
        case 167: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_GENERIC);
          }
        case 291: break;
        case 77: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FMTEQ);
          }
        case 292: break;
        case 173: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_LOGICAL);
          }
        case 293: break;
        case 5: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_PLUS);
          }
        case 294: break;
        case 185: 
          { wantEos = true; yybegin(IMPLICIT); return token(Terminal.T_IMPLICIT);
          }
        case 295: break;
        case 90: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CASE);
          }
        case 296: break;
        case 76: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FILE);
          }
        case 297: break;
        case 40: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_SLASHEQ);
          }
        case 298: break;
        case 131: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DELIMEQ);
          }
        case 299: break;
        case 68: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_LE);
          }
        case 300: break;
        case 170: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PRIVATE);
          }
        case 301: break;
        case 97: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_WAIT);
          }
        case 302: break;
        case 48: 
          { stringBuffer.append('\'');
          }
        case 303: break;
        case 81: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_POSEQ);
          }
        case 304: break;
        case 125: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_WHILE);
          }
        case 305: break;
        case 64: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_OR);
          }
        case 306: break;
        case 199: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ELSEWHERE);
          }
        case 307: break;
        case 27: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_UNEXPECTED_CHARACTER);
          }
        case 308: break;
        case 133: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_NEQV);
          }
        case 309: break;
        case 132: 
          { wantEos = true; unsetSOL();          ; return token(Terminal.T_DOUBLE);
          }
        case 310: break;
        case 123: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_RECLEQ);
          }
        case 311: break;
        case 169: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PROGRAM);
          }
        case 312: break;
        case 41: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_SLASHSLASH);
          }
        case 313: break;
        case 163: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_INTEGER);
          }
        case 314: break;
        case 121: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_UNITEQ);
          }
        case 315: break;
        case 88: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NMLEQ);
          }
        case 316: break;
        case 15: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_EQUALS);
          }
        case 317: break;
        case 208: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PARAMETER);
          }
        case 318: break;
        case 214: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDPROGRAM);
          }
        case 319: break;
        case 221: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_READWRITEEQ);
          }
        case 320: break;
        case 159: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_OPENEDEQ);
          }
        case 321: break;
        case 29: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_POW);
          }
        case 322: break;
        case 112: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SIZEEQ);
          }
        case 323: break;
        case 166: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_STREAMEQ);
          }
        case 324: break;
        case 70: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_BCON);
          }
        case 325: break;
        case 14: 
          { wantEos = true;                     return token(Terminal.T_RBRACKET);
          }
        case 326: break;
        case 196: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDMODULE);
          }
        case 327: break;
        case 195: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDSELECT);
          }
        case 328: break;
        case 188: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_PENDINGEQ);
          }
        case 329: break;
        case 42: 
          { stringBuffer = new StringBuffer();
								  String text = yytext();
								  stringBuffer.append(text);								  
								  hollerithLength=Integer.parseInt(text.substring(0,text.length()-1));
								  if (hollerithLength==0) throw new Exception("Lexer Error (line " + (getLine()+1) + ", col " + (getCol()+1) + "): Invalid length of hollerith literal: 0"); 
								  yybegin(HOLLERITH);
          }
        case 330: break;
        case 18: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_LESSTHAN);
          }
        case 331: break;
        case 189: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NEXTRECEQ);
          }
        case 332: break;
        case 184: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ALLOCATE);
          }
        case 333: break;
        case 82: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PADEQ);
          }
        case 334: break;
        case 171: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NULLIFY);
          }
        case 335: break;
        case 203: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_ASSOCIATE);
          }
        case 336: break;
        case 2: 
          { yybegin(YYINITIAL); boolean b = wantEos; wantEos = false; if (b) return token(Terminal.T_EOS); else storeNonTreeToken();
          }
        case 337: break;
        case 104: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_EQV);
          }
        case 338: break;
        case 155: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDTYPE);
          }
        case 339: break;
        case 181: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_OPTIONAL);
          }
        case 340: break;
        case 187: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SEQUENCE);
          }
        case 341: break;
        case 102: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDIF);
          }
        case 342: break;
        case 80: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_GOTO);
          }
        case 343: break;
        case 54: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_LEN);
          }
        case 344: break;
        case 154: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDFILE);
          }
        case 345: break;
        case 139: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FORALL);
          }
        case 346: break;
        case 53: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_IDEQ);
          }
        case 347: break;
        case 57: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_EXIT);
          }
        case 348: break;
        case 218: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FORMATTEDEQ);
          }
        case 349: break;
        case 106: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_NOT);
          }
        case 350: break;
        case 56: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DCON);
          }
        case 351: break;
        case 209: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_PRECISION);
          }
        case 352: break;
        case 73: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_OPEN);
          }
        case 353: break;
        case 114: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_STATEQ);
          }
        case 354: break;
        case 28: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_IDENT);
          }
        case 355: break;
        case 147: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_RETURN);
          }
        case 356: break;
        case 183: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_ABSTRACT);
          }
        case 357: break;
        case 39: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_LESSTHANEQ);
          }
        case 358: break;
        case 219: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SELECTCASE);
          }
        case 359: break;
        case 217: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ASSIGNMENT);
          }
        case 360: break;
        case 36: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_EQEQ);
          }
        case 361: break;
        case 179: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_DECIMALEQ);
          }
        case 362: break;
        case 66: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_GT);
          }
        case 363: break;
        case 136: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_IOMSGEQ);
          }
        case 364: break;
        case 152: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_WRITEEQ);
          }
        case 365: break;
        case 79: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_STOP);
          }
        case 366: break;
        case 140: 
          { wantEos = true; yybegin(OPERATORorFORMAT); return token(Terminal.T_FORMAT);
          }
        case 367: break;
        case 52: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_OUT);
          }
        case 368: break;
        case 145: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_COMMON);
          }
        case 369: break;
        case 118: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CLOSE);
          }
        case 370: break;
        case 35: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_TO);
          }
        case 371: break;
        case 165: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_STATUSEQ);
          }
        case 372: break;
        case 43: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PCON);
          }
        case 373: break;
        case 21: 
          { stringBuffer.append( yytext() );
          }
        case 374: break;
        case 177: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDWHERE);
          }
        case 375: break;
        case 9: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_UNDERSCORE);
          }
        case 376: break;
        case 92: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_READ);
          }
        case 377: break;
        case 126: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_WRITE);
          }
        case 378: break;
        case 75: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_ZCON);
          }
        case 379: break;
        case 224: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ALLOCATABLE);
          }
        case 380: break;
        case 6: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_MINUS);
          }
        case 381: break;
        case 198: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ELEMENTAL);
          }
        case 382: break;
        case 220: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SUBROUTINE);
          }
        case 383: break;
        case 201: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_BACKSPACE);
          }
        case 384: break;
        case 38: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_GREATERTHANEQ);
          }
        case 385: break;
        case 69: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_LT);
          }
        case 386: break;
        case 63: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_EQ);
          }
        case 387: break;
        case 96: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_TYPE);
          }
        case 388: break;
        case 164: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_INQUIRE);
          }
        case 389: break;
        case 205: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_INTERFACE);
          }
        case 390: break;
        case 60: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ELSE);
          }
        case 391: break;
        case 44: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_XCON);
          }
        case 392: break;
        case 172: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NUMBEREQ);
          }
        case 393: break;
        case 128: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_KINDEQ);
          }
        case 394: break;
        case 229: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_UNFORMATTEDEQ);
          }
        case 395: break;
        case 94: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_RECEQ);
          }
        case 396: break;
        case 200: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DIMENSION);
          }
        case 397: break;
        case 67: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_NE);
          }
        case 398: break;
        case 46: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_LPARENSLASH);
          }
        case 399: break;
        case 233: 
          { wantEos = true; unsetSOL();          ; return token(Terminal.T_DOUBLEPRECISION);
          }
        case 400: break;
        case 33: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_IN);
          }
        case 401: break;
        case 134: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_TRUE);
          }
        case 402: break;
        case 124: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_WHERE);
          }
        case 403: break;
        case 160: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ACCESSEQ);
          }
        case 404: break;
        case 207: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_POSITIONEQ);
          }
        case 405: break;
        case 23: 
          { stringBuffer.append('\'');
								  yybegin(YYSTANDARD);
								  wantEos = true;
								  return token(Terminal.T_SCON);
          }
        case 406: break;
        case 227: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDINTERFACE);
          }
        case 407: break;
        case 16: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_COLON);
          }
        case 408: break;
        case 84: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PURE);
          }
        case 409: break;
        case 210: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PROCEDURE);
          }
        case 410: break;
        case 7: 
          { stringBuffer = new StringBuffer();
								  stringBuffer.append('\'');
								  yybegin(QUOTED);
          }
        case 411: break;
        case 62: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DATA);
          }
        case 412: break;
        case 151: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_TARGET);
          }
        case 413: break;
        case 34: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_GO);
          }
        case 414: break;
        case 72: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_OCON);
          }
        case 415: break;
        case 130: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ELSEIF);
          }
        case 416: break;
        case 117: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NAMEEQ);
          }
        case 417: break;
        case 215: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_ENUMERATOR);
          }
        case 418: break;
        case 13: 
          { wantEos = true;                     return token(Terminal.T_LBRACKET);
          }
        case 419: break;
        case 115: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PAUSE);
          }
        case 420: break;
        case 31: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_IF);
          }
        case 421: break;
        case 32: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_IS);
          }
        case 422: break;
        case 101: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDDO);
          }
        case 423: break;
        case 108: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_INOUT);
          }
        case 424: break;
        case 51: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_XDOP);
          }
        case 425: break;
        case 87: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_NULL);
          }
        case 426: break;
        case 120: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CYCLE);
          }
        case 427: break;
        case 135: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_BLANKEQ);
          }
        case 428: break;
        case 71: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_BIND);
          }
        case 429: break;
        case 116: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PRINT);
          }
        case 430: break;
        case 216: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DEALLOCATE);
          }
        case 431: break;
        case 190: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NAMELIST);
          }
        case 432: break;
        case 119: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_CLASS);
          }
        case 433: break;
        case 144: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NAMEDEQ);
          }
        case 434: break;
        case 113: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_SIGNEQ);
          }
        case 435: break;
        case 47: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SLASHRPAREN);
          }
        case 436: break;
        case 1: 
          { yypushback(1); 
									int state=yystate();
									yybegin(IDENT);
									IToken token = yylex();
									yybegin(state);
									return token;
          }
        case 437: break;
        case 175: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_EXTERNAL);
          }
        case 438: break;
        case 12: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_RPAREN);
          }
        case 439: break;
        case 191: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CONTAINS);
          }
        case 440: break;
        case 148: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_REWIND);
          }
        case 441: break;
        case 146: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_RESULT);
          }
        case 442: break;
        case 111: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FILEEQ);
          }
        case 443: break;
        case 225: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SEQUENTIALEQ);
          }
        case 444: break;
        case 149: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_ROUNDEQ);
          }
        case 445: break;
        case 213: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_RECURSIVE);
          }
        case 446: break;
        case 230: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDSUBROUTINE);
          }
        case 447: break;
        case 37: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_EQGREATERTHAN);
          }
        case 448: break;
        case 223: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_EQUIVALENCE);
          }
        case 449: break;
        case 150: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_MODULE);
          }
        case 450: break;
        case 141: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SELECT);
          }
        case 451: break;
        case 194: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDFORALL);
          }
        case 452: break;
        case 197: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_ENCODINGEQ);
          }
        case 453: break;
        case 100: 
          { wantEos = true;                     return token(Terminal.T_X_IMPL);
          }
        case 454: break;
        case 228: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_ASYNCHRONOUS);
          }
        case 455: break;
        case 178: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_DEFERRED);
          }
        case 456: break;
        case 93: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_REAL);
          }
        case 457: break;
        case 158: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_FALSE);
          }
        case 458: break;
        case 193: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_VOLATILE);
          }
        case 459: break;
        case 211: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_PROTECTED);
          }
        case 460: break;
        case 74: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ONLY);
          }
        case 461: break;
        case 58: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDEQ);
          }
        case 462: break;
        case 17: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_GREATERTHAN);
          }
        case 463: break;
        case 162: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_IOSTATEQ);
          }
        case 464: break;
        case 182: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ADVANCEEQ);
          }
        case 465: break;
        case 176: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDBLOCK);
          }
        case 466: break;
        case 99: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FCON);
          }
        case 467: break;
        case 129: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_EXISTEQ);
          }
        case 468: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case OPERATORorFORMAT: {
              wantEos = false; yybegin(YYSTANDARD); return token(Terminal.END_OF_INPUT);
            }
            case 976: break;
            case DBLQUOTED: {
              throw new Exception("Lexer Error (line " + (getLine()+1) + ", col " + (getCol()+1) + "): End of file encountered before string literal terminated");
            }
            case 977: break;
            case QUOTED: {
              throw new Exception("Lexer Error (line " + (getLine()+1) + ", col " + (getCol()+1) + "): End of file encountered before string literal terminated");
            }
            case 978: break;
            case YYINITIAL: {
              wantEos = false; yybegin(YYSTANDARD); return token(Terminal.END_OF_INPUT);
            }
            case 979: break;
            case HOLLERITH: {
              throw new Exception("Lexer Error (line " + (getLine()+1) + ", col " + (getCol()+1) + "): End of file encountered before hollerith literal terminated");
            }
            case 980: break;
            case YYSTANDARD: {
              wantEos = false; yybegin(YYSTANDARD); return token(Terminal.END_OF_INPUT);
            }
            case 981: break;
            case IMPLICIT: {
              wantEos = false; yybegin(YYSTANDARD); return token(Terminal.END_OF_INPUT);
            }
            case 982: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
