/* The following code was generated by JFlex 1.4.1 on 12/8/09 7:36 AM */

/*******************************************************************************
 * Copyright (c) 2009 University of Illinois at Urbana-Champaign and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     UIUC - Initial API and implementation
 *******************************************************************************/

/*
 * First phase of fixed form lexical analysis for Fortran 95 parser
 *
 * FixedFormLexerPhase1 acts as a "token stream" feeding FreeFormLexerPhase2
 * and is feeded by FixedFormLexerPrepass
 * (See FixedFormLexerPrepass and FixedFormLexerPhase2.java and f95t.bnf)
 *
 * @author Jeffrey Overbey and Dirk Rossow
 *
 * @see FixedFormLexerPrepass
 * @see FixedFormLexerPhase2
 * @see Parser
 *
 * NOTE: Get rid of (space out) "yybegin(YYSTANDARD);" in the lines
 * for any tokens that can appear in an IMPLICIT statement
 * (It was also omitted in the lines for T_SLASH so that
 * INTERFACE OPERATOR (/) would tokenize correctly.)
 *
 * Changes:
 * 29.06.2005 Jeff Overbey: Added Fortran INCLUDE and CPP directives
 */

package org.eclipse.photran.internal.core.lexer;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import java.util.LinkedList;
import org.eclipse.core.resources.IFile;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 12/8/09 7:36 AM from the specification file
 * <tt>FixedFormLexerPhase1.flex</tt>
 */
class FixedFormLexerPhase1 implements ILexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int OPERATORorFORMAT = 6;
  public static final int DBLQUOTED = 3;
  public static final int QUOTED = 2;
  public static final int YYINITIAL = 0;
  public static final int IDENT = 7;
  public static final int HOLLERITH = 4;
  public static final int YYSTANDARD = 5;
  public static final int IMPLICIT = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\47\1\2\2\37\1\1\22\0\1\47\1\37\1\16\1\40"+
    "\1\0\1\64\1\0\1\14\1\33\1\35\1\3\1\6\1\34\1\7"+
    "\1\11\1\65\2\15\6\20\2\4\1\61\1\36\1\63\1\56\1\62"+
    "\2\0\1\22\1\13\1\43\1\10\1\5\1\25\1\27\1\23\1\24"+
    "\1\12\1\52\1\42\1\46\1\41\1\17\1\30\1\60\1\45\1\26"+
    "\1\50\1\44\1\57\1\53\1\31\1\51\1\21\1\54\1\0\1\55"+
    "\1\0\1\32\1\0\1\22\1\13\1\43\1\10\1\5\1\25\1\27"+
    "\1\23\1\24\1\12\1\52\1\42\1\46\1\41\1\17\1\30\1\60"+
    "\1\45\1\26\1\50\1\44\1\57\1\53\1\31\1\51\1\21\12\0"+
    "\1\37\u1fa2\0\2\37\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\2\2\1\3\1\4\1\1\1\5\1\6"+
    "\3\1\1\7\1\10\10\1\1\11\1\12\1\13\1\14"+
    "\12\1\1\15\1\16\1\17\1\1\1\20\1\21\1\22"+
    "\1\23\1\24\1\4\1\1\1\5\1\6\10\1\1\12"+
    "\1\24\1\25\1\26\1\27\1\25\1\30\1\31\1\32"+
    "\1\12\1\33\1\34\1\35\7\0\1\36\36\0\1\37"+
    "\1\40\1\41\14\0\1\42\36\0\1\43\7\0\1\44"+
    "\1\45\2\0\1\46\1\47\1\50\1\51\1\52\3\0"+
    "\1\53\1\54\1\55\5\0\1\56\1\0\1\57\1\60"+
    "\1\61\1\62\3\0\1\63\17\0\1\64\26\0\1\65"+
    "\6\0\1\66\2\0\1\67\66\0\1\70\14\0\1\71"+
    "\25\0\1\56\1\0\1\72\1\0\1\56\10\0\1\73"+
    "\13\0\1\74\1\0\1\75\2\0\1\76\1\77\7\0"+
    "\1\100\2\0\1\101\1\0\1\102\2\0\1\103\1\104"+
    "\1\105\2\0\1\106\1\107\1\0\1\110\1\0\1\111"+
    "\2\0\1\112\1\113\2\0\1\114\1\115\30\0\1\116"+
    "\1\0\1\117\2\0\1\120\4\0\1\121\2\0\1\122"+
    "\1\0\1\123\4\0\1\124\1\125\1\126\3\0\1\127"+
    "\12\0\2\130\5\0\1\131\2\0\1\132\1\0\1\133"+
    "\1\134\1\0\1\135\4\0\1\136\1\137\10\0\1\140"+
    "\1\141\3\0\1\142\6\0\1\143\1\144\1\145\1\146"+
    "\5\0\1\56\2\147\1\0\2\150\1\4\3\0\1\151"+
    "\1\0\1\152\15\0\1\153\14\0\1\154\1\155\2\0"+
    "\1\156\2\0\1\157\20\0\1\160\14\0\1\161\1\162"+
    "\1\163\3\0\1\164\1\165\3\0\1\166\10\0\1\167"+
    "\6\0\1\170\12\0\1\171\11\0\1\172\1\173\1\0"+
    "\1\174\1\175\3\0\1\176\2\0\1\177\7\0\1\200"+
    "\1\201\1\202\1\203\1\0\1\204\1\205\21\0\1\206"+
    "\5\0\1\207\1\0\1\210\3\0\1\211\1\212\2\0"+
    "\1\213\16\0\1\214\2\0\1\215\3\0\1\216\1\217"+
    "\1\0\1\220\1\221\1\222\1\0\1\223\15\0\1\224"+
    "\10\0\1\225\2\0\1\226\11\0\1\227\3\0\1\230"+
    "\1\0\1\141\1\231\1\0\1\232\1\233\1\234\1\235"+
    "\1\236\1\237\1\240\1\0\1\241\4\0\1\242\10\0"+
    "\1\243\10\0\1\244\3\0\1\245\1\0\1\246\2\0"+
    "\1\247\10\0\1\250\1\251\1\252\1\253\2\0\1\254"+
    "\2\0\1\255\10\0\1\256\1\257\1\260\2\0\1\261"+
    "\1\0\1\262\3\0\1\263\2\0\1\264\4\0\1\265"+
    "\1\266\1\267\4\0\1\270\6\0\1\271\1\272\12\0"+
    "\1\273\6\0\1\274\1\275\1\210\4\0\1\276\1\277"+
    "\1\300\1\301\3\0\1\302\6\0\1\303\1\0\1\304"+
    "\1\0\1\305\5\0\1\306\5\0\1\307\2\0\1\310"+
    "\2\0\1\311\1\0\1\312\2\0\1\313\3\0\1\314"+
    "\2\0\1\315\1\0\1\316\5\0\1\317\1\320\1\0"+
    "\1\321\1\322\3\0\1\323\1\324\1\325\1\326\3\0"+
    "\1\327\1\0\1\254\1\330\1\331\4\0\1\332\2\0"+
    "\1\333\1\334\1\335\1\336\1\337\2\0\1\267\2\0"+
    "\1\270\1\340\2\0\1\341\5\0\1\342\2\0\1\343"+
    "\1\0\1\344\1\0\1\345\2\0\1\346\1\347\1\0"+
    "\1\350\1\351\1\352\3\0\1\353\2\0\1\354\2\0"+
    "\1\355\3\0\1\356\1\357\2\0\1\360\1\361\2\0"+
    "\1\362\1\340\1\0\1\363\1\364\1\0\1\365\1\366"+
    "\1\0\1\367\2\0\1\370\1\371\2\0\1\372\1\0"+
    "\1\373\2\0\1\374\1\375\1\0\1\374";

  private static int [] zzUnpackAction() {
    int [] result = new int[1063];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\u01b0\0\u01e6\0\u01b0\0\u021c\0\u0252\0\u0288\0\u01b0\0\u01b0"+
    "\0\u02be\0\u02f4\0\u032a\0\u01b0\0\u01b0\0\u0360\0\u0396\0\u03cc"+
    "\0\u0402\0\u0438\0\u046e\0\u04a4\0\u04da\0\u01b0\0\u01b0\0\u01b0"+
    "\0\u01b0\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e\0\u0654"+
    "\0\u068a\0\u06c0\0\u06f6\0\u01b0\0\u01b0\0\u072c\0\u0762\0\u01b0"+
    "\0\u0798\0\u07ce\0\u01b0\0\u0804\0\u083a\0\u0870\0\u08a6\0\u08a6"+
    "\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56"+
    "\0\u0a8c\0\u0ac2\0\u0af8\0\u01b0\0\u0b2e\0\u0b64\0\u0b9a\0\u01b0"+
    "\0\u01b0\0\u0bd0\0\u01b0\0\u0c06\0\u01b0\0\u0c3c\0\u0c72\0\u0ca8"+
    "\0\u0cde\0\u0d14\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58"+
    "\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008"+
    "\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8"+
    "\0\u11ee\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u1332\0\u1368"+
    "\0\u139e\0\u13d4\0\u140a\0\u01b0\0\u01b0\0\u1440\0\u1476\0\u14ac"+
    "\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c"+
    "\0\u1692\0\u16c8\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c"+
    "\0\u1842\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986\0\u19bc"+
    "\0\u19f2\0\u1a28\0\u1a5e\0\u1a94\0\u1aca\0\u1b00\0\u1b36\0\u1b6c"+
    "\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0\0\u1ce6\0\u1d1c"+
    "\0\u1d52\0\u01b0\0\u1d88\0\u1dbe\0\u1df4\0\u1e2a\0\u1e60\0\u1e96"+
    "\0\u1ecc\0\u01b0\0\u01b0\0\u1f02\0\u1f38\0\u01b0\0\u01b0\0\u01b0"+
    "\0\u01b0\0\u01b0\0\u1f6e\0\u1fa4\0\u1fda\0\u01b0\0\u01b0\0\u01b0"+
    "\0\u2010\0\u2046\0\u207c\0\u20b2\0\u20e8\0\u211e\0\u2154\0\u01b0"+
    "\0\u01b0\0\u01b0\0\u01b0\0\u218a\0\u21c0\0\u21f6\0\u222c\0\u2262"+
    "\0\u2298\0\u22ce\0\u2304\0\u233a\0\u2370\0\u23a6\0\u23dc\0\u2412"+
    "\0\u2448\0\u247e\0\u24b4\0\u24ea\0\u2520\0\u2556\0\u01b0\0\u258c"+
    "\0\u25c2\0\u25f8\0\u262e\0\u2664\0\u269a\0\u26d0\0\u2706\0\u273c"+
    "\0\u2772\0\u27a8\0\u27de\0\u2814\0\u284a\0\u2880\0\u28b6\0\u28ec"+
    "\0\u2922\0\u2958\0\u298e\0\u29c4\0\u29fa\0\u01b0\0\u2a30\0\u2a66"+
    "\0\u2a9c\0\u2ad2\0\u2b08\0\u2b3e\0\u2b74\0\u2baa\0\u2be0\0\u01b0"+
    "\0\u2c16\0\u2c4c\0\u2c82\0\u2cb8\0\u2cee\0\u2d24\0\u2d5a\0\u2d90"+
    "\0\u2dc6\0\u2dfc\0\u2e32\0\u2e68\0\u2e9e\0\u2ed4\0\u2f0a\0\u2f40"+
    "\0\u2f76\0\u2fac\0\u2fe2\0\u3018\0\u304e\0\u3084\0\u30ba\0\u30f0"+
    "\0\u3126\0\u315c\0\u3192\0\u31c8\0\u31fe\0\u3234\0\u326a\0\u32a0"+
    "\0\u32d6\0\u330c\0\u3342\0\u3378\0\u33ae\0\u33e4\0\u341a\0\u3450"+
    "\0\u3486\0\u34bc\0\u34f2\0\u3528\0\u355e\0\u3594\0\u35ca\0\u3600"+
    "\0\u3636\0\u366c\0\u36a2\0\u36d8\0\u370e\0\u3744\0\u377a\0\u37b0"+
    "\0\u37e6\0\u381c\0\u3852\0\u3888\0\u38be\0\u38f4\0\u392a\0\u3960"+
    "\0\u3996\0\u39cc\0\u3a02\0\u01b0\0\u3a38\0\u3a6e\0\u3aa4\0\u3ada"+
    "\0\u3b10\0\u3b46\0\u3b7c\0\u3bb2\0\u3be8\0\u3c1e\0\u3c54\0\u3c8a"+
    "\0\u3cc0\0\u3cf6\0\u3d2c\0\u3d62\0\u3d98\0\u3dce\0\u3e04\0\u3e3a"+
    "\0\u3e70\0\u3ea6\0\u3edc\0\u3f12\0\u3f12\0\u01b0\0\u3f48\0\u3f7e"+
    "\0\u3fb4\0\u3fea\0\u4020\0\u4056\0\u408c\0\u40c2\0\u01b0\0\u40f8"+
    "\0\u412e\0\u4164\0\u419a\0\u41d0\0\u4206\0\u423c\0\u4272\0\u42a8"+
    "\0\u42de\0\u4314\0\u01b0\0\u434a\0\u4380\0\u43b6\0\u43ec\0\u4422"+
    "\0\u01b0\0\u4458\0\u448e\0\u44c4\0\u44fa\0\u4530\0\u4566\0\u459c"+
    "\0\u01b0\0\u45d2\0\u4608\0\u01b0\0\u463e\0\u01b0\0\u4674\0\u46aa"+
    "\0\u01b0\0\u01b0\0\u01b0\0\u46e0\0\u4716\0\u01b0\0\u01b0\0\u474c"+
    "\0\u01b0\0\u4782\0\u01b0\0\u47b8\0\u47ee\0\u01b0\0\u4824\0\u485a"+
    "\0\u4890\0\u01b0\0\u01b0\0\u48c6\0\u48fc\0\u4932\0\u4968\0\u499e"+
    "\0\u49d4\0\u4a0a\0\u4a40\0\u4a76\0\u4aac\0\u4ae2\0\u4b18\0\u4b4e"+
    "\0\u4b84\0\u4bba\0\u4bf0\0\u4c26\0\u4c5c\0\u4c92\0\u4cc8\0\u4cfe"+
    "\0\u4d34\0\u4d6a\0\u4da0\0\u4dd6\0\u4e0c\0\u01b0\0\u4e42\0\u4e78"+
    "\0\u01b0\0\u4eae\0\u4ee4\0\u4f1a\0\u4f50\0\u01b0\0\u4f86\0\u4fbc"+
    "\0\u4ff2\0\u5028\0\u01b0\0\u505e\0\u5094\0\u50ca\0\u5100\0\u01b0"+
    "\0\u01b0\0\u01b0\0\u5136\0\u516c\0\u51a2\0\u01b0\0\u51d8\0\u520e"+
    "\0\u5244\0\u527a\0\u52b0\0\u52e6\0\u531c\0\u5352\0\u5388\0\u53be"+
    "\0\u53f4\0\u01b0\0\u542a\0\u5460\0\u5496\0\u54cc\0\u5502\0\u01b0"+
    "\0\u5538\0\u556e\0\u55a4\0\u55da\0\u01b0\0\u01b0\0\u5610\0\u01b0"+
    "\0\u5646\0\u567c\0\u56b2\0\u56e8\0\u01b0\0\u01b0\0\u571e\0\u5754"+
    "\0\u578a\0\u57c0\0\u57f6\0\u582c\0\u5862\0\u5898\0\u58ce\0\u5904"+
    "\0\u593a\0\u5970\0\u59a6\0\u01b0\0\u59dc\0\u5a12\0\u5a48\0\u5a7e"+
    "\0\u5ab4\0\u5aea\0\u01b0\0\u01b0\0\u5b20\0\u01b0\0\u5b56\0\u5b8c"+
    "\0\u5bc2\0\u5bf8\0\u5c2e\0\u3edc\0\u5c64\0\u3fb4\0\u5c9a\0\u5cd0"+
    "\0\u01b0\0\u408c\0\u5d06\0\u5d3c\0\u5d72\0\u01b0\0\u5da8\0\u01b0"+
    "\0\u5dde\0\u5e14\0\u5e4a\0\u5e80\0\u5eb6\0\u5eec\0\u5f22\0\u5f58"+
    "\0\u5f8e\0\u5fc4\0\u5ffa\0\u6030\0\u6066\0\u01b0\0\u609c\0\u60d2"+
    "\0\u6108\0\u613e\0\u6174\0\u61aa\0\u61e0\0\u6216\0\u624c\0\u6282"+
    "\0\u62b8\0\u62ee\0\u01b0\0\u01b0\0\u6324\0\u635a\0\u01b0\0\u6390"+
    "\0\u63c6\0\u63fc\0\u6432\0\u6468\0\u649e\0\u64d4\0\u650a\0\u6540"+
    "\0\u6576\0\u65ac\0\u65e2\0\u6618\0\u664e\0\u6684\0\u66ba\0\u66f0"+
    "\0\u6726\0\u675c\0\u01b0\0\u6792\0\u67c8\0\u67fe\0\u6834\0\u686a"+
    "\0\u68a0\0\u68d6\0\u690c\0\u6942\0\u6978\0\u69ae\0\u69e4\0\u01b0"+
    "\0\u01b0\0\u01b0\0\u6a1a\0\u6a50\0\u6a86\0\u01b0\0\u01b0\0\u6abc"+
    "\0\u6af2\0\u6b28\0\u01b0\0\u6b5e\0\u6b94\0\u6bca\0\u6c00\0\u6c36"+
    "\0\u6c6c\0\u6ca2\0\u6cd8\0\u01b0\0\u6d0e\0\u6d44\0\u6d7a\0\u6db0"+
    "\0\u6de6\0\u6e1c\0\u01b0\0\u6e52\0\u6e88\0\u6ebe\0\u6ef4\0\u6f2a"+
    "\0\u6f60\0\u6f96\0\u6fcc\0\u7002\0\u7038\0\u01b0\0\u706e\0\u70a4"+
    "\0\u70da\0\u7110\0\u7146\0\u717c\0\u71b2\0\u71e8\0\u721e\0\u01b0"+
    "\0\u01b0\0\u7254\0\u01b0\0\u01b0\0\u728a\0\u72c0\0\u72f6\0\u01b0"+
    "\0\u732c\0\u7362\0\u01b0\0\u7398\0\u73ce\0\u7404\0\u743a\0\u7470"+
    "\0\u74a6\0\u74dc\0\u01b0\0\u01b0\0\u01b0\0\u7512\0\u7548\0\u01b0"+
    "\0\u01b0\0\u757e\0\u75b4\0\u75ea\0\u7620\0\u7656\0\u768c\0\u76c2"+
    "\0\u76f8\0\u772e\0\u7764\0\u779a\0\u77d0\0\u7806\0\u783c\0\u7872"+
    "\0\u78a8\0\u78de\0\u01b0\0\u7914\0\u794a\0\u7980\0\u79b6\0\u79ec"+
    "\0\u01b0\0\u7a22\0\u7a58\0\u7a8e\0\u7ac4\0\u7afa\0\u01b0\0\u01b0"+
    "\0\u7b30\0\u7b66\0\u01b0\0\u7b9c\0\u7bd2\0\u7c08\0\u7c3e\0\u7c74"+
    "\0\u7caa\0\u7ce0\0\u7d16\0\u7d4c\0\u7d82\0\u7db8\0\u7dee\0\u7e24"+
    "\0\u7e5a\0\u01b0\0\u7e90\0\u7ec6\0\u01b0\0\u7efc\0\u7f32\0\u7f68"+
    "\0\u01b0\0\u01b0\0\u7f9e\0\u01b0\0\u01b0\0\u7fd4\0\u800a\0\u8040"+
    "\0\u8076\0\u80ac\0\u80e2\0\u8118\0\u814e\0\u8184\0\u81ba\0\u81f0"+
    "\0\u8226\0\u825c\0\u8292\0\u82c8\0\u82fe\0\u01b0\0\u8334\0\u836a"+
    "\0\u83a0\0\u83d6\0\u840c\0\u8442\0\u8478\0\u84ae\0\u01b0\0\u84e4"+
    "\0\u851a\0\u01b0\0\u8550\0\u8586\0\u85bc\0\u85f2\0\u8628\0\u865e"+
    "\0\u8694\0\u86ca\0\u8700\0\u01b0\0\u8736\0\u876c\0\u87a2\0\u01b0"+
    "\0\u87d8\0\u732c\0\u01b0\0\u880e\0\u01b0\0\u01b0\0\u01b0\0\u01b0"+
    "\0\u01b0\0\u01b0\0\u01b0\0\u8844\0\u01b0\0\u887a\0\u88b0\0\u88e6"+
    "\0\u891c\0\u01b0\0\u8952\0\u8988\0\u89be\0\u89f4\0\u8a2a\0\u8a60"+
    "\0\u8a96\0\u8acc\0\u01b0\0\u8b02\0\u8b38\0\u8b6e\0\u8ba4\0\u8bda"+
    "\0\u8c10\0\u8c46\0\u8c7c\0\u01b0\0\u8cb2\0\u8ce8\0\u8d1e\0\u01b0"+
    "\0\u8d54\0\u01b0\0\u8d8a\0\u8dc0\0\u01b0\0\u8df6\0\u8e2c\0\u8e62"+
    "\0\u8e98\0\u8ece\0\u8f04\0\u8f3a\0\u8f70\0\u01b0\0\u01b0\0\u01b0"+
    "\0\u01b0\0\u8fa6\0\u8fdc\0\u9012\0\u9048\0\u907e\0\u01b0\0\u90b4"+
    "\0\u90ea\0\u9120\0\u9156\0\u918c\0\u91c2\0\u91f8\0\u922e\0\u01b0"+
    "\0\u01b0\0\u01b0\0\u9264\0\u929a\0\u01b0\0\u92d0\0\u01b0\0\u9306"+
    "\0\u933c\0\u9372\0\u01b0\0\u93a8\0\u93de\0\u01b0\0\u9414\0\u944a"+
    "\0\u9480\0\u94b6\0\u01b0\0\u01b0\0\u94ec\0\u9522\0\u9558\0\u958e"+
    "\0\u95c4\0\u95fa\0\u9630\0\u9666\0\u969c\0\u96d2\0\u9708\0\u973e"+
    "\0\u01b0\0\u9774\0\u97aa\0\u97e0\0\u9816\0\u984c\0\u9882\0\u98b8"+
    "\0\u98ee\0\u9924\0\u995a\0\u9990\0\u01b0\0\u99c6\0\u99fc\0\u9a32"+
    "\0\u9a68\0\u9a9e\0\u9ad4\0\u01b0\0\u01b0\0\u8ce8\0\u9b0a\0\u9b40"+
    "\0\u9b76\0\u9bac\0\u01b0\0\u01b0\0\u01b0\0\u01b0\0\u9be2\0\u9c18"+
    "\0\u9c4e\0\u01b0\0\u9c84\0\u9cba\0\u9cf0\0\u9d26\0\u9d5c\0\u9d92"+
    "\0\u01b0\0\u9dc8\0\u01b0\0\u9dfe\0\u01b0\0\u9e34\0\u9e6a\0\u9ea0"+
    "\0\u9ed6\0\u9f0c\0\u01b0\0\u9f42\0\u9f78\0\u9fae\0\u9fe4\0\ua01a"+
    "\0\u01b0\0\ua050\0\ua086\0\u01b0\0\ua0bc\0\ua0f2\0\u01b0\0\ua128"+
    "\0\u01b0\0\ua15e\0\ua194\0\u01b0\0\ua1ca\0\ua200\0\ua236\0\u01b0"+
    "\0\ua26c\0\ua2a2\0\u01b0\0\ua2d8\0\u01b0\0\ua30e\0\ua344\0\ua37a"+
    "\0\ua3b0\0\ua3e6\0\u01b0\0\u01b0\0\ua41c\0\u01b0\0\u01b0\0\ua452"+
    "\0\ua488\0\ua4be\0\u01b0\0\u01b0\0\u01b0\0\u01b0\0\ua4f4\0\ua52a"+
    "\0\ua560\0\u01b0\0\ua596\0\u9d26\0\u01b0\0\u01b0\0\ua5cc\0\ua602"+
    "\0\ua638\0\ua66e\0\u01b0\0\ua6a4\0\ua6da\0\u01b0\0\u01b0\0\u01b0"+
    "\0\u01b0\0\u01b0\0\ua710\0\ua746\0\ua0bc\0\ua77c\0\ua7b2\0\ua15e"+
    "\0\ua7e8\0\ua81e\0\ua854\0\u01b0\0\ua88a\0\ua8c0\0\ua8f6\0\ua92c"+
    "\0\ua962\0\u01b0\0\ua998\0\ua9ce\0\u01b0\0\uaa04\0\u01b0\0\uaa3a"+
    "\0\u01b0\0\uaa70\0\uaaa6\0\u01b0\0\u01b0\0\uaadc\0\u01b0\0\u01b0"+
    "\0\u01b0\0\uab12\0\uab48\0\uab7e\0\u01b0\0\uabb4\0\uabea\0\u01b0"+
    "\0\uac20\0\uac56\0\u01b0\0\uac8c\0\uacc2\0\uacf8\0\u01b0\0\u01b0"+
    "\0\uad2e\0\uad64\0\u01b0\0\u01b0\0\uad9a\0\uadd0\0\u01b0\0\uabb4"+
    "\0\uae06\0\u01b0\0\u01b0\0\uae3c\0\u01b0\0\u01b0\0\uae72\0\uaea8"+
    "\0\uaede\0\uaf14\0\u01b0\0\u01b0\0\uaf4a\0\uaea8\0\u01b0\0\uaf80"+
    "\0\u01b0\0\uafb6\0\uafec\0\ub022\0\u01b0\0\ub058\0\ub058";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1063];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\11\1\23\1\24\1\15\1\25\1\26"+
    "\1\15\1\27\1\30\1\11\1\31\1\32\1\33\1\34"+
    "\1\35\1\11\1\36\1\37\1\40\1\41\1\13\1\11"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\11"+
    "\1\51\1\11\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\11\1\60\1\61\1\62\1\63\1\64\1\11\1\12"+
    "\1\13\1\14\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\11\1\73\1\24\1\65\1\25\1\74\1\65\1\75"+
    "\1\30\1\11\1\76\1\77\1\33\1\100\1\35\1\11"+
    "\1\36\1\101\1\40\1\41\1\13\1\11\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\11\1\51\1\11"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\11\1\60"+
    "\1\61\1\62\1\63\1\102\1\103\2\104\11\103\1\105"+
    "\51\103\1\106\2\104\13\106\1\107\47\106\1\110\2\111"+
    "\63\110\1\11\1\12\1\13\1\14\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\11\1\73\1\24\1\65\1\25"+
    "\1\74\1\65\1\75\1\30\1\11\1\76\1\77\1\33"+
    "\1\100\1\35\1\11\1\36\1\112\1\40\1\41\1\13"+
    "\1\11\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\11\1\51\1\11\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\11\1\60\1\61\1\62\1\63\1\102\1\11"+
    "\1\12\1\13\1\14\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\11\1\73\1\24\1\65\1\25\1\74\1\65"+
    "\1\75\1\30\1\11\1\76\1\77\1\33\1\100\1\35"+
    "\1\11\1\36\1\37\1\40\1\41\1\13\1\11\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\11\1\51"+
    "\1\11\1\52\1\53\1\54\1\55\1\56\1\57\1\11"+
    "\1\60\1\61\1\62\1\63\1\64\2\113\1\0\2\113"+
    "\1\114\2\113\1\114\1\113\2\114\3\113\1\114\1\113"+
    "\11\114\7\113\6\114\1\113\4\114\3\113\2\114\5\113"+
    "\70\0\1\13\66\0\1\115\66\0\1\15\1\116\7\0"+
    "\1\15\2\0\1\15\76\0\1\117\7\0\1\120\1\121"+
    "\2\0\1\122\12\0\1\123\12\0\1\124\11\0\1\125"+
    "\2\0\1\126\1\0\1\127\46\0\1\130\2\0\1\131"+
    "\1\0\2\131\3\0\1\132\1\0\1\131\1\133\2\131"+
    "\1\134\1\131\1\135\2\131\7\0\1\136\1\137\4\131"+
    "\1\0\1\140\3\131\3\0\2\131\21\0\1\141\1\0"+
    "\1\142\3\0\1\143\1\0\1\144\15\0\1\145\37\0"+
    "\1\146\1\0\1\147\11\0\1\150\10\0\1\151\2\0"+
    "\1\152\35\0\1\153\1\0\1\154\57\0\1\155\2\0"+
    "\1\156\12\0\1\157\13\0\1\160\1\161\32\0\1\162"+
    "\6\0\1\163\5\0\1\164\1\165\12\0\1\166\4\0"+
    "\1\167\36\0\1\170\4\0\1\171\17\0\1\172\1\0"+
    "\1\173\24\0\1\174\14\0\1\175\1\0\1\176\17\0"+
    "\1\177\3\0\1\200\1\201\21\0\1\202\11\0\1\203"+
    "\53\0\1\204\11\0\1\205\2\0\1\206\21\0\1\207"+
    "\1\210\25\0\1\211\2\0\1\212\13\0\1\213\3\0"+
    "\1\214\11\0\1\215\1\0\1\216\26\0\1\217\11\0"+
    "\1\220\2\0\1\221\21\0\1\222\1\0\1\223\24\0"+
    "\1\224\11\0\1\225\65\0\1\226\2\0\1\227\1\230"+
    "\16\0\1\231\2\0\1\232\3\0\1\233\42\0\1\234"+
    "\12\0\1\235\31\0\1\236\11\0\1\237\53\0\1\240"+
    "\11\0\1\241\65\0\1\242\2\0\1\243\1\244\25\0"+
    "\1\245\40\0\1\246\63\0\1\247\1\250\21\0\1\251"+
    "\76\0\1\252\3\0\1\253\22\0\1\254\2\0\1\255"+
    "\121\0\1\256\65\0\1\257\3\0\1\260\61\0\1\261"+
    "\6\0\1\262\4\0\1\65\1\263\2\0\1\264\1\265"+
    "\3\0\1\65\2\0\1\65\2\0\1\266\4\0\1\267"+
    "\1\270\40\0\1\271\10\0\1\271\2\0\1\271\5\0"+
    "\1\272\2\0\1\117\7\0\1\273\1\121\2\0\1\122"+
    "\12\0\1\123\11\0\1\274\10\0\1\274\2\0\1\274"+
    "\51\0\1\275\1\124\7\0\1\275\1\0\1\125\1\275"+
    "\1\0\1\126\1\0\1\127\45\0\1\276\1\130\2\0"+
    "\1\131\1\0\2\131\1\0\1\276\1\0\1\132\1\276"+
    "\1\131\1\133\2\131\1\134\1\131\1\135\2\131\7\0"+
    "\1\136\1\137\4\131\1\0\1\140\3\131\3\0\2\131"+
    "\11\0\1\275\7\0\1\141\1\275\1\142\1\0\1\275"+
    "\1\0\1\143\1\0\1\144\15\0\1\145\27\0\1\275"+
    "\7\0\1\146\1\275\1\147\1\0\1\275\7\0\1\150"+
    "\10\0\1\151\2\0\1\152\25\0\1\275\7\0\1\153"+
    "\1\275\1\154\1\0\1\275\51\0\1\275\3\0\1\162"+
    "\4\0\1\275\1\0\1\163\1\275\4\0\1\164\1\165"+
    "\12\0\1\166\4\0\1\167\23\0\1\275\10\0\1\275"+
    "\1\0\1\170\1\275\3\0\1\171\17\0\1\172\1\0"+
    "\1\173\23\0\1\271\1\202\7\0\1\271\1\0\1\203"+
    "\1\271\52\0\1\277\2\0\1\277\1\0\2\277\3\0"+
    "\1\277\1\0\11\277\7\0\6\277\1\0\4\277\3\0"+
    "\2\277\4\0\1\300\35\0\1\301\20\0\1\261\6\0"+
    "\1\262\1\103\2\0\11\103\1\0\51\103\14\0\1\302"+
    "\51\0\1\106\2\0\13\106\1\0\47\106\16\0\1\303"+
    "\134\0\1\300\4\0\2\114\2\0\1\114\1\0\2\114"+
    "\1\0\1\114\1\0\14\114\6\0\6\114\1\0\4\114"+
    "\3\0\2\114\11\0\1\304\10\0\1\304\2\0\1\304"+
    "\71\0\1\305\23\0\1\306\25\0\1\307\32\0\1\310"+
    "\1\311\3\0\1\312\22\0\1\313\20\0\1\314\104\0"+
    "\1\315\64\0\1\316\43\0\1\317\2\0\1\320\14\0"+
    "\1\321\1\322\66\0\1\323\71\0\1\324\62\0\1\325"+
    "\1\326\24\0\1\131\2\0\1\131\1\327\2\131\3\0"+
    "\1\131\1\0\11\131\7\0\6\131\1\0\4\131\3\0"+
    "\1\131\1\330\12\0\1\131\2\0\1\131\1\327\2\131"+
    "\3\0\1\131\1\0\11\131\7\0\6\131\1\0\4\131"+
    "\3\0\2\131\12\0\1\131\2\0\1\131\1\327\2\131"+
    "\3\0\1\131\1\0\11\131\7\0\4\131\1\331\1\131"+
    "\1\0\4\131\3\0\2\131\12\0\1\131\2\0\1\131"+
    "\1\327\2\131\3\0\1\131\1\0\11\131\7\0\1\332"+
    "\5\131\1\0\4\131\3\0\2\131\12\0\1\131\2\0"+
    "\1\131\1\327\2\131\3\0\1\131\1\0\1\131\1\333"+
    "\7\131\7\0\6\131\1\0\4\131\3\0\2\131\12\0"+
    "\1\334\2\0\1\131\1\327\2\131\3\0\1\131\1\0"+
    "\11\131\7\0\6\131\1\0\1\335\3\131\3\0\2\131"+
    "\12\0\1\336\2\0\1\131\1\327\2\131\3\0\1\337"+
    "\1\0\11\131\7\0\6\131\1\0\4\131\3\0\2\131"+
    "\12\0\1\340\2\0\1\131\1\327\2\131\3\0\1\131"+
    "\1\0\11\131\7\0\6\131\1\0\1\341\3\131\3\0"+
    "\2\131\12\0\1\131\2\0\1\131\1\327\2\131\3\0"+
    "\1\131\1\0\11\131\7\0\4\131\1\342\1\131\1\0"+
    "\4\131\3\0\2\131\22\0\1\343\65\0\1\344\113\0"+
    "\1\345\63\0\1\346\43\0\1\347\2\0\1\350\60\0"+
    "\1\351\2\0\1\351\62\0\1\352\2\0\1\352\52\0"+
    "\1\353\42\0\1\354\57\0\1\355\73\0\1\356\21\0"+
    "\2\357\2\0\1\357\2\0\1\357\1\0\1\357\2\0"+
    "\1\357\1\0\1\357\2\0\1\357\15\0\1\357\26\0"+
    "\2\360\2\0\1\360\2\0\1\360\1\0\1\360\2\0"+
    "\1\360\1\0\1\360\2\0\1\360\15\0\1\360\101\0"+
    "\1\361\34\0\1\362\65\0\1\363\22\0\1\364\56\0"+
    "\1\365\66\0\1\366\4\0\1\367\64\0\1\162\6\0"+
    "\1\370\35\0\1\371\13\0\1\372\3\0\1\373\36\0"+
    "\1\374\23\0\1\375\4\0\1\376\7\0\1\377\27\0"+
    "\1\u0100\5\0\1\u0101\102\0\1\u0102\61\0\1\u0103\1\u0104"+
    "\64\0\1\u0105\74\0\1\u0106\57\0\1\u0107\15\0\1\u0108"+
    "\64\0\1\u0109\27\0\1\u010a\5\0\1\u010b\51\0\1\u010c"+
    "\71\0\1\u010d\2\0\1\u010e\22\0\1\u010f\61\0\1\u0110"+
    "\65\0\1\u0111\74\0\1\u0112\56\0\1\u0113\50\0\1\u0114"+
    "\1\0\1\u0115\47\0\1\u0116\15\0\1\u0117\15\0\1\u0118"+
    "\1\u0119\33\0\1\u011a\31\0\1\u011b\25\0\1\u011c\11\0"+
    "\1\u011d\4\0\1\u011e\102\0\1\u011f\1\u0120\2\0\1\u0121"+
    "\25\0\1\u0122\105\0\1\u0123\13\0\1\u0124\71\0\1\u0125"+
    "\44\0\1\u0126\102\0\1\u0127\55\0\1\u0128\64\0\1\u0129"+
    "\10\0\1\u012a\72\0\1\u012b\61\0\1\u012c\3\0\1\u012d"+
    "\61\0\1\u012e\64\0\1\u012f\53\0\1\u0130\13\0\1\u0131"+
    "\32\0\1\u0132\30\0\1\u0133\4\0\1\u0134\45\0\1\u0135"+
    "\13\0\1\u0136\45\0\1\u0137\62\0\1\u0138\2\0\1\u0139"+
    "\67\0\1\u013a\104\0\1\u013b\27\0\1\u013c\104\0\1\u013d"+
    "\1\u013e\14\0\1\u013f\45\0\1\u0140\3\0\1\u0141\14\0"+
    "\1\u0142\4\0\1\u0143\2\0\1\u0144\56\0\1\u0145\67\0"+
    "\1\u0146\27\0\1\u0147\122\0\1\u0148\25\0\1\u0149\110\0"+
    "\1\u014a\76\0\1\u014b\50\0\1\u014c\46\0\1\u014d\16\0"+
    "\1\u014e\65\0\1\u014f\103\0\1\u0150\65\0\1\u0151\27\0"+
    "\1\u0152\1\0\2\u0153\5\0\1\u0152\2\0\1\u0152\51\0"+
    "\1\u0154\1\0\2\u0155\5\0\1\u0154\2\0\1\u0154\45\0"+
    "\4\u0156\1\276\1\u0157\2\u0156\1\264\1\u0156\2\0\1\u0156"+
    "\1\276\1\u0156\1\0\1\276\11\0\7\u0156\6\0\1\u0156"+
    "\4\0\3\u0156\2\0\5\u0156\4\0\1\271\4\0\1\u0158"+
    "\3\0\1\271\2\0\1\271\51\0\1\271\10\0\1\271"+
    "\2\0\1\271\51\0\1\271\3\0\1\307\4\0\1\271"+
    "\2\0\1\271\22\0\1\310\1\311\3\0\1\312\21\0"+
    "\1\274\10\0\1\274\2\0\1\274\7\0\1\267\41\0"+
    "\1\275\4\0\1\u0159\3\0\1\275\2\0\1\275\51\0"+
    "\1\276\1\u0157\2\0\1\264\4\0\1\276\2\0\1\276"+
    "\54\0\1\u015a\24\0\1\u015b\1\u015c\34\0\1\304\4\0"+
    "\1\u015d\3\0\1\304\2\0\1\304\73\0\1\u015e\21\0"+
    "\1\u015f\22\0\1\u0160\70\0\1\u0161\2\0\1\u0162\10\0"+
    "\1\u0163\1\u0164\1\u0165\1\0\1\u0166\12\0\1\u0167\2\0"+
    "\1\u0168\1\0\1\u0169\2\0\1\u016a\2\0\1\u016b\26\0"+
    "\1\u016c\114\0\1\u016d\64\0\1\u016e\66\0\1\u016f\24\0"+
    "\1\u0170\136\0\1\u0171\33\0\1\u0172\103\0\1\u0173\30\0"+
    "\1\u0174\14\0\1\u0175\67\0\1\u0176\65\0\1\u0177\54\0"+
    "\1\u0178\74\0\1\u0179\50\0\1\u017a\65\0\1\u017b\65\0"+
    "\1\131\2\0\1\131\1\u017c\2\131\3\0\1\131\1\0"+
    "\11\131\7\0\6\131\1\0\4\131\3\0\1\u017d\1\131"+
    "\12\0\1\131\2\0\1\131\1\u017e\2\131\3\0\1\131"+
    "\1\0\11\131\7\0\6\131\1\0\4\131\3\0\2\131"+
    "\12\0\1\131\2\0\1\u017f\1\327\2\131\3\0\1\131"+
    "\1\0\11\131\7\0\6\131\1\0\4\131\3\0\2\131"+
    "\12\0\1\131\2\0\1\131\1\327\2\131\3\0\1\131"+
    "\1\0\11\131\7\0\1\131\1\u0180\4\131\1\0\4\131"+
    "\3\0\2\131\12\0\1\131\2\0\1\131\1\u0181\2\131"+
    "\3\0\1\131\1\0\11\131\7\0\6\131\1\0\4\131"+
    "\3\0\2\131\12\0\1\131\2\0\1\131\1\u0182\2\131"+
    "\3\0\1\131\1\0\11\131\7\0\6\131\1\0\4\131"+
    "\3\0\2\131\12\0\1\131\2\0\1\131\1\u0183\2\131"+
    "\3\0\1\131\1\0\11\131\7\0\6\131\1\0\4\131"+
    "\3\0\1\131\1\u0184\12\0\1\131\2\0\1\131\1\327"+
    "\2\131\3\0\1\131\1\0\11\131\7\0\6\131\1\0"+
    "\1\u0185\3\131\3\0\2\131\12\0\1\131\2\0\1\131"+
    "\1\u0186\2\131\3\0\1\131\1\0\11\131\7\0\6\131"+
    "\1\0\4\131\3\0\2\131\12\0\1\131\2\0\1\131"+
    "\1\u0187\2\131\3\0\1\131\1\0\11\131\7\0\6\131"+
    "\1\0\4\131\3\0\2\131\12\0\1\131\2\0\1\131"+
    "\1\327\2\131\3\0\1\131\1\0\11\131\7\0\3\131"+
    "\1\u0188\2\131\1\0\4\131\3\0\2\131\21\0\1\u0189"+
    "\1\343\65\0\1\344\1\u0189\121\0\1\u018a\23\0\1\u018b"+
    "\120\0\1\u018c\63\0\1\u018d\40\0\1\u018e\1\351\2\0"+
    "\1\351\62\0\1\352\1\u018e\1\0\1\352\106\0\1\u018f"+
    "\3\0\1\u0190\44\0\1\u0191\112\0\1\u0192\20\0\2\357"+
    "\2\0\1\357\2\0\1\357\1\u0193\1\357\2\0\1\357"+
    "\1\0\1\357\2\0\1\357\15\0\1\357\26\0\2\360"+
    "\2\0\1\360\2\0\1\360\1\0\1\360\1\u0193\1\0"+
    "\1\360\1\0\1\360\2\0\1\360\15\0\1\360\44\0"+
    "\1\u0194\113\0\1\u0195\34\0\1\u0196\4\0\1\u0197\102\0"+
    "\1\u0198\43\0\1\u0199\6\0\1\u019a\44\0\1\u019b\104\0"+
    "\1\u019c\111\0\1\u019d\22\0\1\u019e\106\0\1\u019f\103\0"+
    "\1\u01a0\63\0\1\u01a1\30\0\1\u01a2\37\0\1\u01a3\64\0"+
    "\1\u01a4\50\0\1\u01a5\55\0\1\u01a6\22\0\1\u01a7\1\0"+
    "\1\u01a8\43\0\1\u01a9\23\0\1\u01aa\41\0\1\u01ab\50\0"+
    "\1\u01ac\123\0\1\u01ad\100\0\1\u01ae\14\0\1\u01af\124\0"+
    "\1\u01b0\26\0\1\u01b1\65\0\1\u01b2\121\0\1\u01b3\71\0"+
    "\1\u01b4\1\u01b5\47\0\1\u01b6\105\0\1\u01b7\22\0\1\u01b8"+
    "\123\0\1\u01b9\27\0\1\u01ba\77\0\1\u01bb\56\0\1\u01bc"+
    "\116\0\1\u01bd\50\0\1\u01be\22\0\1\u01bf\6\0\1\u01c0"+
    "\65\0\1\u01c1\35\0\1\u01c2\65\0\1\u01c3\61\0\1\u01c4"+
    "\105\0\1\u01c5\30\0\1\u01c6\123\0\1\u01c7\51\0\1\u01c8"+
    "\13\0\1\u01c9\4\0\1\u01ca\56\0\1\u01cb\15\0\1\u01cc"+
    "\16\0\1\u01cd\101\0\1\u01ce\1\0\1\u01cf\104\0\1\u01d0"+
    "\45\0\1\215\40\0\1\u0123\1\u01d1\1\u01d2\63\u0123\43\0"+
    "\1\u01d3\44\0\1\u01d4\104\0\1\u01cf\34\0\1\u01d5\125\0"+
    "\1\u01d6\37\0\1\u01d7\50\0\1\u01d8\24\0\1\u01d9\40\0"+
    "\1\u01da\122\0\1\u01db\36\0\1\u01dc\130\0\1\u01dd\65\0"+
    "\1\u01de\33\0\1\u01df\113\0\1\u01e0\37\0\1\u01e1\111\0"+
    "\1\u01e2\45\0\1\u01e3\15\0\1\u01e4\24\0\1\u01e5\122\0"+
    "\1\u01e6\70\0\1\u01e7\46\0\1\u01e8\65\0\1\u01e9\107\0"+
    "\1\u01ea\57\0\1\u01eb\73\0\1\u01ec\34\0\1\u01ed\65\0"+
    "\1\u01ee\56\0\1\u01ef\31\0\1\u01f0\67\0\1\u01f1\63\0"+
    "\1\u01f2\1\0\1\u01f3\11\0\1\u01f4\53\0\1\u01f5\45\0"+
    "\1\u01f6\102\0\1\u01f7\43\0\1\u01f8\112\0\1\u01f9\50\0"+
    "\1\u01fa\77\0\1\u01fb\31\0\1\u01fc\70\0\1\u01fd\125\0"+
    "\1\u01fe\62\0\1\u01ff\62\0\1\u0200\73\0\1\u0201\37\0"+
    "\1\u0202\107\0\1\u0203\25\0\1\u0152\4\0\1\u015d\3\0"+
    "\1\u0152\2\0\1\u0152\51\0\1\u0204\10\0\1\u0204\2\0"+
    "\1\u0204\51\0\1\u0154\10\0\1\u0154\2\0\1\u0154\51\0"+
    "\1\u0204\1\0\2\u0153\5\0\1\u0204\2\0\1\u0204\51\0"+
    "\1\u0205\10\0\1\u0205\2\0\1\u0205\51\0\1\u0206\10\0"+
    "\1\u0206\2\0\1\u0206\52\0\1\u0207\2\0\1\u0207\1\0"+
    "\2\u0207\3\0\1\u0207\1\0\11\u0207\7\0\6\u0207\1\0"+
    "\4\u0207\3\0\2\u0207\12\0\1\277\2\0\1\277\1\0"+
    "\2\277\3\0\1\277\1\0\11\277\7\0\6\277\1\0"+
    "\4\277\3\0\2\277\6\0\1\u0208\1\u0209\31\0\1\u0209"+
    "\1\0\2\u0209\32\0\1\u020a\10\0\1\u020a\2\0\1\u020a"+
    "\115\0\1\u020b\56\0\1\u020c\3\0\1\u020d\37\0\1\u020e"+
    "\110\0\1\u020f\50\0\1\u0210\13\0\1\u0211\43\0\1\u0212"+
    "\4\0\1\u0213\17\0\1\u0214\26\0\1\u0215\36\0\1\u0216"+
    "\66\0\1\u0217\65\0\1\u0218\37\0\1\u0219\117\0\1\u021a"+
    "\37\0\1\u021b\52\0\1\u021c\62\0\1\u021d\131\0\1\u021e"+
    "\21\0\1\u021f\104\0\1\u0220\26\0\1\u0221\71\0\1\u0222"+
    "\50\0\1\u0223\70\0\1\u0224\64\0\1\u0225\67\0\1\u0226"+
    "\65\0\1\u0227\61\0\1\u0228\66\0\1\u0229\63\0\1\u022a"+
    "\31\0\1\131\2\0\1\131\1\u022b\2\131\3\0\1\131"+
    "\1\0\11\131\7\0\6\131\1\0\4\131\3\0\2\131"+
    "\12\0\1\131\2\0\1\131\1\u022c\2\131\3\0\1\131"+
    "\1\0\11\131\7\0\6\131\1\0\4\131\3\0\2\131"+
    "\12\0\1\131\2\0\1\131\1\327\2\131\3\0\1\131"+
    "\1\0\5\131\1\u022d\3\131\7\0\6\131\1\0\4\131"+
    "\3\0\2\131\12\0\1\131\2\0\1\131\1\327\2\131"+
    "\3\0\1\131\1\0\11\131\7\0\6\131\1\0\4\131"+
    "\3\0\1\u022e\1\131\12\0\1\131\2\0\1\131\1\u022f"+
    "\2\131\3\0\1\131\1\0\11\131\7\0\6\131\1\0"+
    "\4\131\3\0\2\131\12\0\1\u0230\2\0\1\131\1\327"+
    "\2\131\3\0\1\131\1\0\11\131\7\0\6\131\1\0"+
    "\4\131\3\0\2\131\33\0\1\u0231\111\0\1\u0232\65\0"+
    "\1\u0233\20\0\1\u0234\102\0\1\u0235\62\0\1\u0236\107\0"+
    "\1\u0237\71\0\1\u0238\63\0\1\u0239\51\0\1\u023a\101\0"+
    "\1\u023b\65\0\1\u023c\72\0\1\u023d\43\0\1\u023e\56\0"+
    "\1\u023f\70\0\1\u0240\104\0\1\u0241\53\0\1\u0242\106\0"+
    "\1\u0243\61\0\1\u0244\50\0\1\u0245\11\0\1\u0246\3\0"+
    "\1\u0247\44\0\1\u0248\65\0\1\u0249\46\0\1\u024a\125\0"+
    "\1\u024b\44\0\1\u024c\106\0\1\u024d\62\0\1\u024e\45\0"+
    "\1\u024f\33\0\1\u0250\51\0\1\u0251\101\0\1\u0252\57\0"+
    "\1\u0253\60\0\1\u0254\27\0\1\u0255\136\0\1\u0256\56\0"+
    "\1\u01b3\6\0\1\u0257\26\0\1\u0258\65\0\1\u0259\112\0"+
    "\1\u025a\11\0\1\u025b\31\0\1\u025c\65\0\1\u025d\1\0"+
    "\1\u025e\21\0\1\u025f\64\0\1\u0260\44\0\1\u0261\111\0"+
    "\1\u0262\65\0\1\u0263\64\0\1\u01bf\6\0\1\u01c0\14\0"+
    "\1\u0264\126\0\1\u0265\43\0\1\u0266\65\0\1\u0267\106\0"+
    "\1\u0268\25\0\1\u0269\65\0\1\u026a\130\0\1\u026b\37\0"+
    "\1\u026c\67\0\1\u01ce\66\0\1\u0123\45\0\1\u0123\77\0"+
    "\1\u026d\50\0\1\u01d2\125\0\1\u026e\52\0\1\u026f\43\0"+
    "\1\u01ce\125\0\1\u0270\46\0\1\u0271\56\0\1\u0272\4\0"+
    "\1\u0273\51\0\1\u0274\31\0\1\u0275\13\0\1\u0276\33\0"+
    "\1\u0277\46\0\1\u0278\123\0\1\u0279\70\0\1\u027a\41\0"+
    "\1\u027b\1\0\1\u027c\103\0\1\u027d\42\0\1\u027e\70\0"+
    "\1\u027f\50\0\1\u0280\106\0\1\u0281\63\0\1\u0282\46\0"+
    "\1\u0283\136\0\1\u0284\54\0\1\u0285\63\0\1\u0286\75\0"+
    "\1\u0287\2\0\1\u0288\12\0\1\u0289\124\0\1\u028a\101\0"+
    "\1\u028b\54\0\1\u028c\65\0\1\u028d\61\0\1\u028e\34\0"+
    "\1\u028f\122\0\1\u0290\62\0\1\u0291\30\0\1\u0292\136\0"+
    "\1\u0293\14\0\1\u0294\65\0\1\u0295\65\0\1\u0296\130\0"+
    "\1\u0297\22\0\1\u0298\64\0\1\u0205\1\u0159\7\0\1\u0205"+
    "\2\0\1\u0205\101\0\1\u015b\1\u015c\32\0\1\u0209\141\0"+
    "\1\u0299\17\0\1\u029a\116\0\1\u029b\43\0\1\u029c\116\0"+
    "\1\u029d\62\0\1\u029e\62\0\1\u029f\64\0\1\u02a0\66\0"+
    "\1\u02a1\36\0\1\u02a2\71\0\1\u02a3\72\0\1\u02a4\51\0"+
    "\1\u02a5\105\0\1\u02a6\42\0\1\u02a7\104\0\1\u02a8\106\0"+
    "\1\u02a9\61\0\1\u02aa\51\0\1\u02ab\63\0\1\u02ac\64\0"+
    "\1\u02ad\62\0\1\u02ae\113\0\1\u02af\62\0\1\u02b0\101\0"+
    "\1\u02b1\31\0\1\u02b2\50\0\1\u02b3\130\0\1\u02b4\43\0"+
    "\1\u02b5\44\0\1\u02b6\2\0\1\131\1\327\2\131\3\0"+
    "\1\131\1\0\11\131\7\0\6\131\1\0\4\131\3\0"+
    "\2\131\12\0\1\131\2\0\1\131\1\u02b7\2\131\3\0"+
    "\1\131\1\0\11\131\7\0\6\131\1\0\4\131\3\0"+
    "\2\131\12\0\1\131\2\0\1\131\1\u02b8\2\131\3\0"+
    "\1\131\1\0\11\131\7\0\6\131\1\0\4\131\3\0"+
    "\2\131\35\0\1\u02b9\45\0\1\u02ba\133\0\1\u02bb\17\0"+
    "\1\u02bc\125\0\1\u02bd\56\0\1\u02be\67\0\1\u02bf\44\0"+
    "\1\u02c0\67\0\1\u02c1\102\0\1\u02c2\47\0\1\u02c3\64\0"+
    "\1\u02c4\62\0\1\u02c5\74\0\1\u02c6\100\0\1\u02c7\74\0"+
    "\1\u02c8\44\0\1\u02c9\105\0\1\u0242\6\0\1\u02ca\17\0"+
    "\1\u02cb\62\0\1\u02cc\130\0\1\u02cd\42\0\1\u02ce\101\0"+
    "\1\u02cf\71\0\1\u02d0\46\0\1\u02d1\107\0\1\u02d2\60\0"+
    "\1\u02d3\27\0\1\u02d4\122\0\1\u02d5\73\0\1\u02d6\41\0"+
    "\1\u02d7\111\0\1\u02d8\56\0\1\u02d9\70\0\1\u02da\31\0"+
    "\1\u02db\103\0\1\u02dc\105\0\1\u02dd\61\0\1\u02de\71\0"+
    "\1\u02df\24\0\1\u02e0\104\0\1\u02e1\102\0\1\u02e2\31\0"+
    "\1\u02e3\104\0\1\u02e4\46\0\1\u02e5\123\0\1\u02e6\50\0"+
    "\1\u02e7\61\0\1\u02e8\53\0\1\u02e9\120\0\1\u02ea\72\0"+
    "\1\u02eb\62\0\1\u0123\64\0\1\u02ec\67\0\1\u02ed\24\0"+
    "\1\u02ee\106\0\1\u02ef\116\0\1\u02f0\47\0\1\u02f1\102\0"+
    "\1\u02f2\33\0\1\u02f3\66\0\1\u02f4\105\0\1\u02f5\42\0"+
    "\1\u02f6\50\0\1\u02f7\104\0\1\u02f8\70\0\1\u02f9\11\0"+
    "\1\u02fa\31\0\1\u02fb\121\0\1\u02fc\67\0\1\u02fd\65\0"+
    "\1\u02fe\70\0\1\u02ff\71\0\1\u0300\60\0\1\u0301\24\0"+
    "\1\u0302\10\0\1\u0302\2\0\1\u0302\115\0\1\u0303\43\0"+
    "\1\u0304\100\0\1\u0305\34\0\1\u0306\124\0\1\u028f\6\0"+
    "\1\u0307\60\0\1\u0308\21\0\1\u0309\130\0\1\u030a\73\0"+
    "\1\u030b\33\0\1\u030c\67\0\1\u030d\61\0\1\u030e\106\0"+
    "\1\u030f\27\0\1\u0310\102\0\1\u0311\50\0\1\u0312\123\0"+
    "\1\u0313\27\0\1\u0314\125\0\1\u0315\1\u0316\46\0\1\u0317"+
    "\13\0\1\u0318\72\0\1\u0319\61\0\1\u031a\26\0\1\u031b"+
    "\125\0\1\u031c\61\0\1\u031d\46\0\1\u031e\113\0\1\u031f"+
    "\22\0\1\u0320\122\0\1\u0321\66\0\1\u0322\27\0\1\u0323"+
    "\130\0\1\u0324\57\0\1\u0325\26\0\1\u0326\24\0\1\u0327"+
    "\113\0\1\u0328\33\0\1\u0329\46\0\1\131\2\0\1\131"+
    "\1\u032a\2\131\3\0\1\131\1\0\11\131\7\0\6\131"+
    "\1\0\4\131\3\0\2\131\27\0\1\u032b\65\0\1\u032c"+
    "\121\0\1\u032d\26\0\1\u032e\70\0\1\u032f\50\0\1\u0330"+
    "\123\0\1\u0331\44\0\1\u0332\111\0\1\u0333\64\0\1\u0334"+
    "\70\0\1\u0335\45\0\1\u0336\113\0\1\u0337\65\0\1\u0338"+
    "\65\0\1\u0339\57\0\1\u033a\22\0\1\u033b\125\0\1\u033c"+
    "\42\0\1\u033d\71\0\1\u033e\44\0\1\u033f\104\0\1\u0340"+
    "\111\0\1\u0341\34\0\1\u0342\111\0\1\u0343\65\0\1\u0344"+
    "\4\0\1\u0345\65\0\1\u0346\61\0\1\u0347\77\0\1\u0348"+
    "\56\0\1\u02dd\6\0\1\u0349\51\0\1\u034a\45\0\1\u034b"+
    "\111\0\1\u034c\62\0\1\u034d\51\0\1\u034e\103\0\1\u034f"+
    "\37\0\1\u0350\116\0\1\u0351\41\0\1\u0352\107\0\1\u0353"+
    "\63\0\1\u0354\71\0\1\u0355\22\0\1\u0356\70\0\1\u01cf"+
    "\77\0\1\u0123\106\0\1\u0357\27\0\1\u0358\130\0\1\u0359"+
    "\43\0\1\u035a\110\0\1\u035b\72\0\1\u035c\51\0\1\u035d"+
    "\64\0\1\u035e\65\0\1\u035f\70\0\1\u0360\65\0\1\u0361"+
    "\52\0\1\u0362\104\0\1\u0363\37\0\1\u0364\65\0\1\u0365"+
    "\67\0\1\u0366\65\0\1\u0367\103\0\1\u0368\65\0\1\u0369"+
    "\75\0\1\u036a\60\0\1\u036b\62\0\1\u036c\73\0\1\u036d"+
    "\60\0\1\u036e\41\0\1\u036f\65\0\1\u0370\113\0\1\u0371"+
    "\25\0\1\u0372\104\0\1\u0373\103\0\1\u0374\30\0\1\u0375"+
    "\107\0\1\u0376\106\0\1\u0377\37\0\1\u0378\110\0\1\u0379"+
    "\25\0\1\u037a\102\0\1\u037b\53\0\1\u037c\124\0\1\u0325"+
    "\6\0\1\u037d\13\0\1\u037e\10\0\1\u037e\2\0\1\u037e"+
    "\112\0\1\u037f\37\0\1\u0380\111\0\1\u0381\72\0\1\u0382"+
    "\62\0\1\u0383\62\0\1\u0384\101\0\1\u0385\57\0\1\u0386"+
    "\65\0\1\u0387\22\0\1\u0388\77\0\1\u0389\53\0\1\u038a"+
    "\14\0\1\u038b\66\0\1\u038c\56\0\1\u038d\1\0\1\u038d"+
    "\30\0\1\u033b\21\0\1\u038e\125\0\1\u038f\46\0\1\u0390"+
    "\111\0\1\u0391\22\0\1\u0392\121\0\1\u0393\46\0\1\u0394"+
    "\50\0\1\u0395\104\0\1\u0396\65\0\1\u0397\103\0\1\u0398"+
    "\52\0\1\u0399\55\0\1\u039a\115\0\1\u034e\6\0\1\u039b"+
    "\50\0\1\u039c\31\0\1\u039d\77\0\1\u039e\113\0\1\u039f"+
    "\25\0\1\u03a0\136\0\1\u03a1\54\0\1\u03a2\65\0\1\u03a3"+
    "\70\0\1\u03a4\20\0\1\u03a5\110\0\1\u03a6\65\0\1\u03a7"+
    "\56\0\1\u03a8\53\0\1\u03a9\63\0\1\u03aa\67\0\1\u03ab"+
    "\122\0\1\u03ac\73\0\1\u03ad\65\0\1\u03ae\74\0\1\u03af"+
    "\13\0\1\u03b0\70\0\1\u03b1\102\0\1\u03b2\102\0\1\u03b3"+
    "\47\0\1\u03b4\111\0\1\u03b5\61\0\1\u03b6\31\0\1\u03b7"+
    "\77\0\1\u03b8\53\0\1\u03b9\120\0\1\u03ba\27\0\1\u03bb"+
    "\127\0\1\u0376\6\0\1\u03bc\26\0\1\u03bd\110\0\1\u03be"+
    "\30\0\1\u03bf\121\0\1\u03c0\74\0\1\u03c1\22\0\1\u03c2"+
    "\121\0\1\u03c3\31\0\1\u03c4\102\0\1\u03c5\50\0\1\u03c6"+
    "\121\0\1\u03c7\65\0\1\u03c8\37\0\1\u03c9\130\0\1\u03ca"+
    "\7\0\1\u038d\2\0\11\u038d\1\u03cb\1\u038d\1\u03cb\47\u038d"+
    "\4\0\1\u03cc\10\0\1\u03cc\2\0\1\u03cc\52\0\1\u03cd"+
    "\123\0\1\u03ce\32\0\1\u03cf\103\0\1\u03d0\61\0\1\u03d1"+
    "\104\0\1\u03d2\31\0\1\u03d3\65\0\1\u03d4\125\0\1\u03d5"+
    "\76\0\1\u03d6\54\0\1\u03d7\61\0\1\u03d8\31\0\1\u03d9"+
    "\70\0\1\u03da\122\0\1\u03db\44\0\1\u03dc\45\0\1\u03dd"+
    "\10\0\1\u03dd\2\0\1\u03dd\71\0\1\u03de\105\0\1\u03df"+
    "\25\0\1\u03e0\10\0\1\u03e0\2\0\1\u03e0\112\0\1\u03e1"+
    "\70\0\1\u03e2\22\0\1\u03e3\65\0\1\u03e4\102\0\1\u03e5"+
    "\65\0\1\u03e6\62\0\1\u03e7\116\0\1\u03e8\61\0\1\u03e9"+
    "\67\0\1\u03ea\63\0\1\u03eb\43\0\1\u03ec\110\0\1\u03ed"+
    "\63\0\1\u03ee\27\0\1\u03ef\123\0\1\u03f0\72\0\1\u03f1"+
    "\34\0\1\u03f2\110\0\1\u03f3\23\0\1\u038d\1\u01d1\1\u01d2"+
    "\11\u038d\1\u03cb\1\u038d\1\u03cb\47\u038d\56\0\1\u03f4\14\0"+
    "\1\u03f5\122\0\1\u03f6\30\0\1\u03f7\106\0\1\u03f8\110\0"+
    "\1\u03f9\40\0\1\u03fa\102\0\1\u03fb\43\0\1\u03fc\74\0"+
    "\1\u03fd\42\0\1\u03fe\67\0\1\u03ff\136\0\1\u0400\57\0"+
    "\1\u0401\60\0\1\u0402\63\0\1\u0403\50\0\1\u0404\103\0"+
    "\1\u0405\70\0\1\u0406\62\0\1\u0407\30\0\1\u0408\104\0"+
    "\1\u0409\105\0\1\u040a\26\0\1\u040b\136\0\1\u040c\17\0"+
    "\1\u040d\103\0\1\u040e\100\0\1\u040f\30\0\1\u0410\10\0"+
    "\1\u0410\2\0\1\u0410\55\0\1\u0411\77\0\1\u0412\50\0"+
    "\1\u0413\121\0\1\u0414\31\0\1\u0415\65\0\1\u0416\106\0"+
    "\1\u0417\65\0\1\u0418\61\0\1\u0419\67\0\1\u041a\117\0"+
    "\1\u041b\14\0\1\u041c\104\0\1\u041d\110\0\1\u041e\6\0"+
    "\1\u041f\22\0\1\u0420\115\0\1\u0421\41\0\1\u0422\110\0"+
    "\1\u0423\64\0\1\u0424\31\0\1\u0425\63\0\1\u0426\66\0"+
    "\1\u0427\10\0\1\u0427\2\0\1\u0427\45\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[45198];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\11\1\1\1\11\3\1\2\11\3\1\2\11"+
    "\10\1\4\11\12\1\2\11\2\1\1\11\2\1\1\11"+
    "\20\1\1\11\3\1\2\11\1\1\1\11\1\1\1\11"+
    "\7\0\1\1\36\0\2\11\1\1\14\0\1\1\36\0"+
    "\1\11\7\0\2\11\2\0\5\11\2\0\1\2\3\11"+
    "\5\0\1\1\1\0\4\11\3\0\1\1\17\0\1\11"+
    "\26\0\1\11\6\0\1\1\2\0\1\11\66\0\1\1"+
    "\14\0\1\11\25\0\1\1\1\0\1\1\1\0\1\15"+
    "\5\0\1\2\2\0\1\11\13\0\1\11\1\0\1\1"+
    "\2\0\1\1\1\11\7\0\1\11\2\0\1\11\1\0"+
    "\1\11\2\0\3\11\2\0\2\11\1\0\1\11\1\0"+
    "\1\11\2\0\1\11\1\1\2\0\2\11\30\0\1\1"+
    "\1\0\1\11\2\0\1\11\4\0\1\11\2\0\1\1"+
    "\1\0\1\11\4\0\3\11\3\0\1\11\12\0\1\1"+
    "\1\11\5\0\1\11\2\0\1\1\1\0\2\11\1\0"+
    "\1\11\4\0\2\11\10\0\2\1\3\0\1\11\6\0"+
    "\2\11\1\1\1\11\5\0\3\1\1\0\1\5\1\15"+
    "\1\1\3\0\1\11\1\0\1\11\15\0\1\11\14\0"+
    "\2\11\2\0\1\11\2\0\1\1\20\0\1\11\14\0"+
    "\3\11\3\0\2\11\3\0\1\11\10\0\1\11\6\0"+
    "\1\11\12\0\1\11\11\0\2\11\1\0\2\11\3\0"+
    "\1\11\2\0\1\11\7\0\3\11\1\1\1\0\2\11"+
    "\21\0\1\11\5\0\1\11\1\0\1\1\3\0\2\11"+
    "\2\0\1\11\16\0\1\11\2\0\1\11\3\0\2\11"+
    "\1\0\2\11\1\1\1\0\1\1\15\0\1\11\10\0"+
    "\1\11\2\0\1\11\11\0\1\11\3\0\1\11\1\0"+
    "\1\1\1\11\1\0\7\11\1\0\1\11\4\0\1\11"+
    "\10\0\1\11\10\0\1\11\3\0\1\11\1\0\1\11"+
    "\2\0\1\11\10\0\4\11\2\0\1\1\2\0\1\11"+
    "\10\0\3\11\2\0\1\11\1\0\1\11\3\0\1\11"+
    "\2\0\1\11\4\0\2\11\1\1\4\0\1\1\6\0"+
    "\1\11\1\1\12\0\1\11\6\0\2\11\1\1\4\0"+
    "\4\11\3\0\1\11\6\0\1\11\1\0\1\11\1\0"+
    "\1\11\5\0\1\11\5\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\0\1\11\2\0\1\11\3\0\1\11\2\0"+
    "\1\11\1\0\1\11\5\0\2\11\1\0\2\11\3\0"+
    "\4\11\3\0\1\11\1\0\1\1\2\11\4\0\1\11"+
    "\2\0\5\11\2\0\1\1\2\0\2\1\2\0\1\11"+
    "\5\0\1\11\2\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\2\11\1\0\3\11\3\0\1\11\2\0\1\11"+
    "\2\0\1\11\3\0\2\11\2\0\2\11\2\0\1\11"+
    "\1\1\1\0\2\11\1\0\2\11\1\0\1\1\2\0"+
    "\2\11\2\0\1\11\1\0\1\11\2\0\1\1\1\11"+
    "\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1063];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    private IToken prevToken = null;

    private FixedFormLexerPrepass prepass;

    private TokenFactory tokenFactory;

    public FixedFormLexerPhase1(InputStream in, FixedFormLexerPrepass _prepass, TokenFactory tokenFactory) {
        this(new LineAppendingInputStream(in));
        this.prepass=_prepass;
        this.tokenFactory = tokenFactory;
    }

    //unset start of line state
    private void unsetSOL() {
        if (yystate()==YYINITIAL) yybegin(YYSTANDARD);
    }

    public int getLine() {
        return prepass.getLine(yychar);
    }

    public int getCol() {
        return prepass.getColumn(yychar);
    }

    protected IFile lastTokenFile = null;
    protected int lastTokenLine = 1, lastTokenCol = 1, lastTokenFileOffset = 0, lastTokenStreamOffset = 0, lastTokenLength = 0;

    private IToken token(Terminal terminal)
    {
        //For some there are 2 terminals of type Terminal.END_OF_INPUT that get here in a row
        // so, technically, the function below sets the whitespaceAfter on the first one it sees,
        // which is not really the expected behavior, but that token's whitespace is not used for
        // anything anyway, so this should be OK
        if(prevToken != null && terminal == Terminal.END_OF_INPUT)
        {
            //We need to manually set this, because the input string to the lexer does not
            // have any whitespace, or at the very list has it trimmed, so we are loosing all
            // of the trailing whitespace on any refactoring. That is why we assign it as
            // whitespaceAfter to the last END_OF_STATEMENT token before END_OF_INPUT
            String whiteAfter = prepass.getTrailingWhitespace();
            prevToken.setWhiteAfter(whiteAfter);
        }

        lastTokenLine = prepass.getLine(yychar)+1;
        lastTokenCol = prepass.getColumn(yychar)+1;
        lastTokenFileOffset = prepass.getOffset(yychar);
        lastTokenStreamOffset = prepass.getOffset(yychar);
        lastTokenLength = prepass.getOffset(yychar+yylength()-1)-prepass.getOffset(yychar)+1;

        //For some reason the author of above code needed to add 1 to the line/col values
        // for my code, I actually need the original value of token positions, so
        // I added those variables for that
        int tokLine = lastTokenLine-1;
        int tokCol = lastTokenCol-1;
        int tokOff = lastTokenFileOffset;

        String tokenText = "";
        //If it is the end of statement, use text from original string to get the line separator.
        // For some reason the text returned by yytext() in this case is always '/n', while the
        // actual separator is '/r/n'
        if(terminal == Terminal.T_EOS)
        {
            tokenText = prepass.getFileEOL();
        }
        //If it is the end of input, use the Lexer's text.
        else if(terminal == Terminal.END_OF_INPUT)
        {
            tokenText = yytext();
        }
        //If it is a quote, use text accumulated in the buffer string
        else if(terminal == Terminal.T_SCON || terminal == Terminal.T_HCON)
        {
            tokenText = stringBuffer.toString();
            //lastTokenColumn and lastTokenOffset of quoted strings actually IS the position of the last character
            // of that string (for some reason w/o the final quote). So, in order to correctly map it to the whitespace
            // before it, we need to shift the column and offset we are using by 1 less than the length of the string
            tokCol = tokCol - (tokenText.length() - 1);
            tokOff = tokOff - (tokenText.length() - 1);
        }
        //Otherwise, use the text directly from file (that way all the whitespace is preserved in the
        // tokens text)
        else
            tokenText = prepass.getTokenText(lastTokenFileOffset, lastTokenLength);

        prevToken = tokenFactory.createToken(terminal,
                                        prepass.getWhitespaceBefore(tokLine, tokCol, tokOff),
                                        tokenText,
                                        "");

        if(!tokenText.equals(yytext()) && terminal != Terminal.T_EOS)
        {
            prevToken.setPreprocessorDirective(new FixedFormReplacement(tokenText));
            prevToken.setText(yytext());
        }

        return prevToken;
    }

    /*
    private IToken token(Terminal terminal)
    {
        IToken t = new Token();
        t.setTerminal(terminal);
        t.setFilename(this.filename);
        t.setFileOffset(prepass.getOffset(yychar));
        t.setStreamOffset(prepass.getOffset(yychar));
        t.setLength(prepass.getOffset(yychar+yylength()-1)-prepass.getOffset(yychar)+1);
        t.setText(terminal == Terminal.T_SCON || terminal == Terminal.T_HCON
                  ? stringBuffer.toString()
                  : yytext());
        t.setStartLine(prepass.getLine(yychar)+1);
        t.setStartCol(prepass.getColumn(yychar)+1);
        t.setEndLine(prepass.getLine(yychar+yylength()-1)+1);
        t.setEndCol(prepass.getColumn(yychar+yylength()-1)+1);

        return t;
    }
    */

    private StringBuffer stringBuffer = null;
    private int hollerithLength = 0;

    private boolean wantEos = false;

    private String filename = "<stdin>";

    public FixedFormLexerPhase1(java.io.InputStream in, FixedFormLexerPrepass _prepass, IFile file, String filename, TokenFactory tokenFactory)
    {
        this(in, _prepass, tokenFactory);
        this.lastTokenFile = file;
        this.filename = filename;
    }

    public String getFilename()
    {
        return filename;
    }

    public TokenFactory getTokenFactory()
    {
        return tokenFactory;
    }

    public int getLastTokenLine()
    {
        return lastTokenLine;
    }

    public int getLastTokenCol()
    {
        return lastTokenCol;
    }

    public IFile getLastTokenFile()
    {
        return lastTokenFile;
    }

    public int getLastTokenFileOffset()
    {
        return lastTokenFileOffset;
    }

    public int getLastTokenStreamOffset()
    {
        return lastTokenStreamOffset;
    }

    public int getLastTokenLength()
    {
        return lastTokenLength;
    }

//    private List/*<NonTreeToken>*/ nonTreeTokens = new LinkedList();
//    public List/*<NonTreeToken>*/ getNonTreeTokens()
//    {
//      return nonTreeTokens;
//    }
//
      private void storeNonTreeToken()
      {
//        nonTreeTokens.add(new NonTreeToken(this.filename,
//                          prepass.getOffset(yychar),   // int offset
//                          prepass.getLine(yychar)+1,   // int row
//                          prepass.getColumn(yychar)+1, // int col
//                          yytext()));
      }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  FixedFormLexerPhase1(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  FixedFormLexerPhase1(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 188) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IToken yylex() throws java.io.IOException, LexerException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;
    int zzPushbackPosL = zzPushbackPos = -1;
    boolean zzWasPushback;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;

      zzWasPushback = false;

      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            zzPushbackPos = zzPushbackPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            zzPushbackPosL = zzPushbackPos;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 2) == 2 )
            zzPushbackPosL = zzCurrentPosL;

          if ( (zzAttributes & 1) == 1 ) {
            zzWasPushback = (zzAttributes & 4) == 4;
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;
      if (zzWasPushback)
        zzMarkedPos = zzPushbackPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 51: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_END);
          }
        case 254: break;
        case 161: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_EXTENDS);
          }
        case 255: break;
        case 113: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FORMEQ);
          }
        case 256: break;
        case 213: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_BLOCKDATA);
          }
        case 257: break;
        case 80: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SAVE);
          }
        case 258: break;
        case 114: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_FINAL);
          }
        case 259: break;
        case 178: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_POINTER);
          }
        case 260: break;
        case 253: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_NON_OVERRIDABLE);
          }
        case 261: break;
        case 99: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_THEN);
          }
        case 262: break;
        case 176: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SYNCALL);
          }
        case 263: break;
        case 126: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_READEQ);
          }
        case 264: break;
        case 88: 
          { storeNonTreeToken();
          }
        case 265: break;
        case 165: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DIRECTEQ);
          }
        case 266: break;
        case 89: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NONE);
          }
        case 267: break;
        case 250: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_ASYNCHRONOUSEQ);
          }
        case 268: break;
        case 143: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_IMPORT);
          }
        case 269: break;
        case 217: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_INTRINSIC);
          }
        case 270: break;
        case 63: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ERREQ);
          }
        case 271: break;
        case 57: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_USE);
          }
        case 272: break;
        case 109: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_AND);
          }
        case 273: break;
        case 148: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PUBLIC);
          }
        case 274: break;
        case 10: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_LPAREN);
          }
        case 275: break;
        case 93: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_LOCK);
          }
        case 276: break;
        case 164: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DEFAULT);
          }
        case 277: break;
        case 46: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_RCON);
          }
        case 278: break;
        case 243: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDBLOCKDATA);
          }
        case 279: break;
        case 24: 
          { stringBuffer.append('\"');
                                                  yybegin(YYSTANDARD);
                                                  wantEos = true;
                                                  return token(Terminal.T_SCON);
          }
        case 280: break;
        case 30: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DO);
          }
        case 281: break;
        case 132: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_VALUE);
          }
        case 282: break;
        case 61: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_ENUM);
          }
        case 283: break;
        case 111: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_BLOCK);
          }
        case 284: break;
        case 20: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_SLASH);
          }
        case 285: break;
        case 152: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_UNLOCK);
          }
        case 286: break;
        case 86: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_PASS);
          }
        case 287: break;
        case 141: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_INTENT);
          }
        case 288: break;
        case 251: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_NON_INTRINSIC);
          }
        case 289: break;
        case 101: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_KIND);
          }
        case 290: break;
        case 3: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_ASTERISK);
          }
        case 291: break;
        case 190: 
          { wantEos = true; yybegin(OPERATORorFORMAT);  return token(Terminal.T_OPERATOR);
          }
        case 292: break;
        case 170: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ACTIONEQ);
          }
        case 293: break;
        case 95: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CALL);
          }
        case 294: break;
        case 196: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FUNCTION);
          }
        case 295: break;
        case 235: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CONTIGUOUS);
          }
        case 296: break;
        case 215: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_IOLENGTHEQ);
          }
        case 297: break;
        case 234: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SYNCMEMORY);
          }
        case 298: break;
        case 144: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_IMPURE);
          }
        case 299: break;
        case 11: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_COMMA);
          }
        case 300: break;
        case 149: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_NOPASS);
          }
        case 301: break;
        case 67: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_GE);
          }
        case 302: break;
        case 233: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SYNCIMAGES);
          }
        case 303: break;
        case 202: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CONTINUE);
          }
        case 304: break;
        case 19: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PERCENT);
          }
        case 305: break;
        case 50: 
          { stringBuffer.append('\"');
          }
        case 306: break;
        case 184: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_COMPLEX);
          }
        case 307: break;
        case 92: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_LENEQ);
          }
        case 308: break;
        case 4: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_ICON);
          }
        case 309: break;
        case 107: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENTRY);
          }
        case 310: break;
        case 237: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDFUNCTION);
          }
        case 311: break;
        case 177: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_GENERIC);
          }
        case 312: break;
        case 79: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FMTEQ);
          }
        case 313: break;
        case 183: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_LOGICAL);
          }
        case 314: break;
        case 5: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_PLUS);
          }
        case 315: break;
        case 94: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CASE);
          }
        case 316: break;
        case 78: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FILE);
          }
        case 317: break;
        case 25: 
          { hollerithLength--;
                                                    stringBuffer.append(yytext());
                                                    if (hollerithLength==0) {
                                                            yybegin(YYSTANDARD);
                                                            wantEos = true;
                                                            return token(Terminal.T_HCON);
                                                     }
          }
        case 318: break;
        case 41: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_SLASHEQ);
          }
        case 319: break;
        case 135: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DELIMEQ);
          }
        case 320: break;
        case 70: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_LE);
          }
        case 321: break;
        case 180: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PRIVATE);
          }
        case 322: break;
        case 26: 
          { throw new LexerException(this, "Lexer Error (line " + (getLine()+1) + ", col " + (getCol()+1) + "): Hollerith literal spans multiple lines without continuation");
          }
        case 323: break;
        case 102: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_WAIT);
          }
        case 324: break;
        case 49: 
          { stringBuffer.append('\'');
          }
        case 325: break;
        case 84: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_POSEQ);
          }
        case 326: break;
        case 130: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_WHILE);
          }
        case 327: break;
        case 157: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_MEMORY);
          }
        case 328: break;
        case 22: 
          { throw new LexerException(this, "Lexer Error (line " + (getLine()+1) + ", col " + (getCol()+1) + "): String literal spans multiple lines without continuation");
          }
        case 329: break;
        case 66: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_OR);
          }
        case 330: break;
        case 142: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_IMAGES);
          }
        case 331: break;
        case 210: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ELSEWHERE);
          }
        case 332: break;
        case 27: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_UNEXPECTED_CHARACTER);
          }
        case 333: break;
        case 137: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_NEQV);
          }
        case 334: break;
        case 127: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_RECLEQ);
          }
        case 335: break;
        case 179: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PROGRAM);
          }
        case 336: break;
        case 42: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_SLASHSLASH);
          }
        case 337: break;
        case 172: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_INTEGER);
          }
        case 338: break;
        case 125: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_UNITEQ);
          }
        case 339: break;
        case 91: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NMLEQ);
          }
        case 340: break;
        case 15: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_EQUALS);
          }
        case 341: break;
        case 220: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PARAMETER);
          }
        case 342: break;
        case 7: 
          { stringBuffer = new StringBuffer();
                                                  stringBuffer.append('\'');
                                                  yybegin(QUOTED);
          }
        case 343: break;
        case 226: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDPROGRAM);
          }
        case 344: break;
        case 236: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_READWRITEEQ);
          }
        case 345: break;
        case 167: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_OPENEDEQ);
          }
        case 346: break;
        case 29: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_POW);
          }
        case 347: break;
        case 116: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SIZEEQ);
          }
        case 348: break;
        case 175: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_STREAMEQ);
          }
        case 349: break;
        case 72: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_BCON);
          }
        case 350: break;
        case 14: 
          { wantEos = true;                     return token(Terminal.T_RBRACKET);
          }
        case 351: break;
        case 207: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDMODULE);
          }
        case 352: break;
        case 206: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDSELECT);
          }
        case 353: break;
        case 198: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_PENDINGEQ);
          }
        case 354: break;
        case 136: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_DOUBLE);
          }
        case 355: break;
        case 18: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_LESSTHAN);
          }
        case 356: break;
        case 199: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NEXTRECEQ);
          }
        case 357: break;
        case 194: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ALLOCATE);
          }
        case 358: break;
        case 85: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PADEQ);
          }
        case 359: break;
        case 181: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NULLIFY);
          }
        case 360: break;
        case 214: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_ASSOCIATE);
          }
        case 361: break;
        case 2: 
          { yybegin(YYINITIAL); boolean b = wantEos; wantEos = false; if (b) return token(Terminal.T_EOS); else storeNonTreeToken();
          }
        case 362: break;
        case 108: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_EQV);
          }
        case 363: break;
        case 163: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDTYPE);
          }
        case 364: break;
        case 191: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_OPTIONAL);
          }
        case 365: break;
        case 197: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SEQUENCE);
          }
        case 366: break;
        case 106: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDIF);
          }
        case 367: break;
        case 83: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_GOTO);
          }
        case 368: break;
        case 56: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_LEN);
          }
        case 369: break;
        case 162: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDFILE);
          }
        case 370: break;
        case 145: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FORALL);
          }
        case 371: break;
        case 55: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_IDEQ);
          }
        case 372: break;
        case 59: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_EXIT);
          }
        case 373: break;
        case 230: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FORMATTEDEQ);
          }
        case 374: break;
        case 218: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SUBMODULE);
          }
        case 375: break;
        case 23: 
          { stringBuffer.append('\'');
                                                  yybegin(YYSTANDARD);
                                                  wantEos = true;
                                                  return token(Terminal.T_SCON);
          }
        case 376: break;
        case 110: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_NOT);
          }
        case 377: break;
        case 58: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DCON);
          }
        case 378: break;
        case 221: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_PRECISION);
          }
        case 379: break;
        case 242: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CODIMENSION);
          }
        case 380: break;
        case 75: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_OPEN);
          }
        case 381: break;
        case 118: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_STATEQ);
          }
        case 382: break;
        case 28: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_IDENT);
          }
        case 383: break;
        case 154: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_RETURN);
          }
        case 384: break;
        case 193: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_ABSTRACT);
          }
        case 385: break;
        case 39: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_LESSTHANEQ);
          }
        case 386: break;
        case 231: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SELECTCASE);
          }
        case 387: break;
        case 229: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ASSIGNMENT);
          }
        case 388: break;
        case 224: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_CHARACTER);
          }
        case 389: break;
        case 40: 
          { wantEos = true;                      return token(Terminal.T_NE);
          }
        case 390: break;
        case 36: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_EQEQ);
          }
        case 391: break;
        case 8: 
          { stringBuffer = new StringBuffer();
                                                  stringBuffer.append('\"');
                                                  yybegin(DBLQUOTED);
          }
        case 392: break;
        case 189: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_DECIMALEQ);
          }
        case 393: break;
        case 82: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SYNC);
          }
        case 394: break;
        case 68: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_GT);
          }
        case 395: break;
        case 140: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_IOMSGEQ);
          }
        case 396: break;
        case 160: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_WRITEEQ);
          }
        case 397: break;
        case 81: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_STOP);
          }
        case 398: break;
        case 146: 
          { wantEos = true; yybegin(OPERATORorFORMAT); return token(Terminal.T_FORMAT);
          }
        case 399: break;
        case 53: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_OUT);
          }
        case 400: break;
        case 151: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_COMMON);
          }
        case 401: break;
        case 122: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CLOSE);
          }
        case 402: break;
        case 35: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_TO);
          }
        case 403: break;
        case 174: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_STATUSEQ);
          }
        case 404: break;
        case 44: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PCON);
          }
        case 405: break;
        case 21: 
          { stringBuffer.append( yytext() );
          }
        case 406: break;
        case 187: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDWHERE);
          }
        case 407: break;
        case 9: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_UNDERSCORE);
          }
        case 408: break;
        case 96: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_READ);
          }
        case 409: break;
        case 131: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_WRITE);
          }
        case 410: break;
        case 77: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_ZCON);
          }
        case 411: break;
        case 240: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ALLOCATABLE);
          }
        case 412: break;
        case 6: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_MINUS);
          }
        case 413: break;
        case 209: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ELEMENTAL);
          }
        case 414: break;
        case 232: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SUBROUTINE);
          }
        case 415: break;
        case 212: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_BACKSPACE);
          }
        case 416: break;
        case 38: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_GREATERTHANEQ);
          }
        case 417: break;
        case 71: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_LT);
          }
        case 418: break;
        case 54: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ALL);
          }
        case 419: break;
        case 65: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_EQ);
          }
        case 420: break;
        case 245: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDSUBMODULE);
          }
        case 421: break;
        case 100: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_TYPE);
          }
        case 422: break;
        case 173: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_INQUIRE);
          }
        case 423: break;
        case 216: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_INTERFACE);
          }
        case 424: break;
        case 62: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ELSE);
          }
        case 425: break;
        case 45: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_XCON);
          }
        case 426: break;
        case 182: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NUMBEREQ);
          }
        case 427: break;
        case 1: 
          { yypushback(1);
                                                        int state=yystate();
                                                        yybegin(IDENT);
                                                        IToken token = yylex();
                                                        yybegin(state);
                                                        return token;
          }
        case 428: break;
        case 128: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_KINDEQ);
          }
        case 429: break;
        case 248: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_UNFORMATTEDEQ);
          }
        case 430: break;
        case 98: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_RECEQ);
          }
        case 431: break;
        case 252: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_DOUBLEPRECISION);
          }
        case 432: break;
        case 168: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ALLSTOP);
          }
        case 433: break;
        case 211: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DIMENSION);
          }
        case 434: break;
        case 69: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_NE);
          }
        case 435: break;
        case 47: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_LPARENSLASH);
          }
        case 436: break;
        case 33: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_IN);
          }
        case 437: break;
        case 138: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_TRUE);
          }
        case 438: break;
        case 129: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_WHERE);
          }
        case 439: break;
        case 169: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ACCESSEQ);
          }
        case 440: break;
        case 219: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_POSITIONEQ);
          }
        case 441: break;
        case 244: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDINTERFACE);
          }
        case 442: break;
        case 16: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_COLON);
          }
        case 443: break;
        case 87: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PURE);
          }
        case 444: break;
        case 222: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PROCEDURE);
          }
        case 445: break;
        case 64: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DATA);
          }
        case 446: break;
        case 159: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_TARGET);
          }
        case 447: break;
        case 34: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_GO);
          }
        case 448: break;
        case 74: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_OCON);
          }
        case 449: break;
        case 134: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ELSEIF);
          }
        case 450: break;
        case 121: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NAMEEQ);
          }
        case 451: break;
        case 227: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_ENUMERATOR);
          }
        case 452: break;
        case 13: 
          { wantEos = true;                     return token(Terminal.T_LBRACKET);
          }
        case 453: break;
        case 119: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PAUSE);
          }
        case 454: break;
        case 31: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_IF);
          }
        case 455: break;
        case 32: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_IS);
          }
        case 456: break;
        case 105: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDDO);
          }
        case 457: break;
        case 112: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_INOUT);
          }
        case 458: break;
        case 52: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_XDOP);
          }
        case 459: break;
        case 90: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_NULL);
          }
        case 460: break;
        case 124: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CYCLE);
          }
        case 461: break;
        case 139: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_BLANKEQ);
          }
        case 462: break;
        case 73: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_BIND);
          }
        case 463: break;
        case 120: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PRINT);
          }
        case 464: break;
        case 43: 
          { stringBuffer = new StringBuffer();
                                                  String text = yytext();
                                                  stringBuffer.append(text);
                                                  hollerithLength=Integer.parseInt(text.substring(0,text.length()-1));
                                                  if (hollerithLength==0)
                                                      throw new LexerException(this, "Lexer Error (line " + (getLine()+1) + ", col " + (getCol()+1) + "): Invalid length of hollerith literal: 0");
                                                  yybegin(HOLLERITH);
          }
        case 465: break;
        case 228: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DEALLOCATE);
          }
        case 466: break;
        case 246: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDPROCEDURE);
          }
        case 467: break;
        case 200: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NAMELIST);
          }
        case 468: break;
        case 123: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_CLASS);
          }
        case 469: break;
        case 150: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NAMEDEQ);
          }
        case 470: break;
        case 117: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_SIGNEQ);
          }
        case 471: break;
        case 48: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SLASHRPAREN);
          }
        case 472: break;
        case 185: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_EXTERNAL);
          }
        case 473: break;
        case 12: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_RPAREN);
          }
        case 474: break;
        case 201: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CONTAINS);
          }
        case 475: break;
        case 155: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_REWIND);
          }
        case 476: break;
        case 153: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_RESULT);
          }
        case 477: break;
        case 203: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CRITICAL);
          }
        case 478: break;
        case 115: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FILEEQ);
          }
        case 479: break;
        case 241: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SEQUENTIALEQ);
          }
        case 480: break;
        case 156: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_ROUNDEQ);
          }
        case 481: break;
        case 225: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_RECURSIVE);
          }
        case 482: break;
        case 249: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDSUBROUTINE);
          }
        case 483: break;
        case 37: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_EQGREATERTHAN);
          }
        case 484: break;
        case 239: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_EQUIVALENCE);
          }
        case 485: break;
        case 158: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_MODULE);
          }
        case 486: break;
        case 147: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SELECT);
          }
        case 487: break;
        case 205: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDFORALL);
          }
        case 488: break;
        case 208: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_ENCODINGEQ);
          }
        case 489: break;
        case 104: 
          { wantEos = true;                     return token(Terminal.T_X_IMPL);
          }
        case 490: break;
        case 247: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_ASYNCHRONOUS);
          }
        case 491: break;
        case 188: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_DEFERRED);
          }
        case 492: break;
        case 195: 
          { wantEos = true; yybegin(IMPLICIT);   return token(Terminal.T_IMPLICIT);
          }
        case 493: break;
        case 97: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_REAL);
          }
        case 494: break;
        case 238: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDCRITICAL);
          }
        case 495: break;
        case 166: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_FALSE);
          }
        case 496: break;
        case 204: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_VOLATILE);
          }
        case 497: break;
        case 223: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_PROTECTED);
          }
        case 498: break;
        case 76: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ONLY);
          }
        case 499: break;
        case 60: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDEQ);
          }
        case 500: break;
        case 17: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_GREATERTHAN);
          }
        case 501: break;
        case 171: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_IOSTATEQ);
          }
        case 502: break;
        case 192: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ADVANCEEQ);
          }
        case 503: break;
        case 186: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDBLOCK);
          }
        case 504: break;
        case 103: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FCON);
          }
        case 505: break;
        case 133: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_EXISTEQ);
          }
        case 506: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case OPERATORorFORMAT: {
              wantEos = false; yybegin(YYSTANDARD); return token(Terminal.END_OF_INPUT);
            }
            case 1064: break;
            case DBLQUOTED: {
              throw new LexerException(this, "Lexer Error (line " + (getLine()+1) + ", col " + (getCol()+1) + "): End of file encountered before string literal terminated");
            }
            case 1065: break;
            case QUOTED: {
              throw new LexerException(this, "Lexer Error (line " + (getLine()+1) + ", col " + (getCol()+1) + "): End of file encountered before string literal terminated");
            }
            case 1066: break;
            case YYINITIAL: {
              wantEos = false; yybegin(YYSTANDARD); return token(Terminal.END_OF_INPUT);
            }
            case 1067: break;
            case HOLLERITH: {
              throw new LexerException(this, "Lexer Error (line " + (getLine()+1) + ", col " + (getCol()+1) + "): End of file encountered before hollerith literal terminated");
            }
            case 1068: break;
            case YYSTANDARD: {
              wantEos = false; yybegin(YYSTANDARD); return token(Terminal.END_OF_INPUT);
            }
            case 1069: break;
            case IMPLICIT: {
              wantEos = false; yybegin(YYSTANDARD); return token(Terminal.END_OF_INPUT);
            }
            case 1070: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
