/* The following code was generated by JFlex 1.4.1 on 8/26/08 9:58 PM */

/*******************************************************************************
 * Copyright (c) 2007 University of Illinois at Urbana-Champaign and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     UIUC - Initial API and implementation
 *******************************************************************************/

/*
 * First phase of fixed form lexical analysis for Fortran 95 parser
 *
 * FixedFormLexerPhase1 acts as a "token stream" feeding FreeFormLexerPhase2
 * and is feeded by FixedFormLexerPrepass
 * (See FixedFormLexerPrepass and FixedFormLexerPhase2.java and f95t.bnf)
 *
 * @author Jeffrey Overbey and Dirk Rossow
 * 
 * @see FixedFormLexerPrepass
 * @see FixedFormLexerPhase2
 * @see Parser
 *
 * NOTE: Get rid of (space out) "yybegin(YYSTANDARD);" in the lines
 * for any tokens that can appear in an IMPLICIT statement
 * (It was also omitted in the lines for T_SLASH so that
 * INTERFACE OPERATOR (/) would tokenize correctly.)
 *
 * Changes:
 * 29.06.2005 Jeff Overbey: Added Fortran INCLUDE and CPP directives
 */
 
package org.eclipse.photran.internal.core.lexer;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import java.util.LinkedList;
import org.eclipse.core.resources.IFile;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 8/26/08 9:58 PM from the specification file
 * <tt>FixedFormLexerPhase1.flex</tt>
 */
class FixedFormLexerPhase1 implements ILexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int OPERATORorFORMAT = 6;
  public static final int DBLQUOTED = 3;
  public static final int QUOTED = 2;
  public static final int YYINITIAL = 0;
  public static final int IDENT = 7;
  public static final int HOLLERITH = 4;
  public static final int YYSTANDARD = 5;
  public static final int IMPLICIT = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\46\1\2\2\36\1\1\22\0\1\46\1\36\1\16\1\37"+
    "\1\0\1\61\1\0\1\14\1\33\1\35\1\3\1\6\1\34\1\7"+
    "\1\11\1\62\2\15\6\20\2\4\1\56\1\36\1\60\1\53\1\57"+
    "\2\0\1\22\1\13\1\42\1\10\1\5\1\25\1\27\1\23\1\24"+
    "\1\12\1\51\1\41\1\45\1\40\1\17\1\30\1\55\1\44\1\26"+
    "\1\47\1\43\1\50\1\54\1\31\1\52\1\21\4\0\1\32\1\0"+
    "\1\22\1\13\1\42\1\10\1\5\1\25\1\27\1\23\1\24\1\12"+
    "\1\51\1\41\1\45\1\40\1\17\1\30\1\55\1\44\1\26\1\47"+
    "\1\43\1\50\1\54\1\31\1\52\1\21\12\0\1\36\u1fa2\0\2\36"+
    "\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\2\2\1\3\1\4\1\1\1\5\1\6"+
    "\3\1\1\7\1\10\10\1\1\11\1\12\1\13\1\14"+
    "\12\1\1\15\1\1\1\16\1\17\1\20\1\21\1\22"+
    "\1\4\1\1\1\5\1\6\10\1\1\12\1\22\1\23"+
    "\1\24\1\25\1\23\1\26\1\27\1\30\1\12\1\31"+
    "\1\32\1\33\7\0\1\34\35\0\1\35\1\36\13\0"+
    "\1\37\32\0\1\40\6\0\1\41\1\42\2\0\1\43"+
    "\1\44\1\45\1\46\3\0\1\47\1\50\1\51\5\0"+
    "\1\52\1\0\1\53\1\54\1\55\1\56\3\0\1\57"+
    "\15\0\1\60\26\0\1\61\71\0\1\62\11\0\1\63"+
    "\21\0\1\52\1\0\1\64\1\0\1\52\10\0\1\65"+
    "\11\0\1\66\1\0\1\67\2\0\1\70\1\71\6\0"+
    "\1\72\2\0\1\73\1\0\1\74\2\0\1\75\1\76"+
    "\1\77\2\0\1\100\1\101\1\0\1\102\1\0\1\103"+
    "\2\0\1\104\1\105\2\0\1\106\1\107\22\0\1\110"+
    "\1\0\1\111\2\0\1\112\2\0\1\113\2\0\1\114"+
    "\2\0\1\115\1\116\3\0\1\117\12\0\2\120\5\0"+
    "\1\121\2\0\1\122\1\0\1\123\1\124\4\0\1\125"+
    "\1\126\6\0\1\127\1\130\3\0\1\131\4\0\1\132"+
    "\1\133\2\0\1\134\3\0\1\52\2\135\1\0\2\136"+
    "\1\4\3\0\1\137\1\0\1\140\13\0\1\141\13\0"+
    "\1\142\1\143\2\0\1\144\2\0\1\145\15\0\1\146"+
    "\11\0\1\147\1\150\1\151\3\0\1\152\2\0\1\153"+
    "\3\0\1\154\6\0\1\155\11\0\1\156\10\0\1\157"+
    "\1\160\1\161\1\162\1\0\1\163\3\0\1\164\6\0"+
    "\1\165\1\166\1\167\1\170\1\171\1\172\17\0\1\173"+
    "\5\0\1\174\1\175\3\0\1\176\1\177\2\0\1\200"+
    "\16\0\1\201\4\0\1\202\1\203\1\0\1\204\7\0"+
    "\1\205\10\0\1\206\1\0\1\207\7\0\1\210\3\0"+
    "\1\130\1\211\1\0\1\212\1\213\1\214\1\215\1\0"+
    "\1\216\1\217\4\0\1\220\5\0\1\221\7\0\1\222"+
    "\2\0\1\223\1\0\1\224\2\0\1\225\7\0\1\226"+
    "\1\227\1\230\2\0\1\231\2\0\1\232\7\0\1\233"+
    "\1\234\1\235\3\0\1\236\2\0\1\237\3\0\1\240"+
    "\1\241\1\242\2\0\1\243\5\0\1\244\1\245\7\0"+
    "\1\246\5\0\1\247\1\175\4\0\1\250\1\251\1\252"+
    "\1\253\2\0\1\254\6\0\1\255\1\0\1\256\1\0"+
    "\1\257\7\0\1\260\1\0\1\261\1\0\1\262\1\263"+
    "\5\0\1\264\2\0\1\265\1\0\1\266\2\0\1\267"+
    "\1\0\1\270\1\271\3\0\1\272\1\273\1\274\3\0"+
    "\1\275\1\0\1\231\1\276\1\277\4\0\1\300\1\301"+
    "\1\302\1\303\1\304\1\0\1\242\1\243\1\305\2\0"+
    "\1\306\4\0\1\307\1\310\1\0\1\311\1\0\1\312"+
    "\2\0\1\313\1\314\1\0\1\315\3\0\1\316\2\0"+
    "\1\317\1\0\1\320\2\0\1\321\1\322\1\0\1\305"+
    "\1\0\1\323\1\324\2\0\1\325\1\0\1\326\1\327"+
    "\4\0\1\330\1\331\1\0\1\330";

  private static int [] zzUnpackAction() {
    int [] result = new int[908];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\u01cb\0\u0198\0\u01fe\0\u0231\0\u0264\0\u0198\0\u0198"+
    "\0\u0297\0\u02ca\0\u02fd\0\u0198\0\u0198\0\u0330\0\u0363\0\u0396"+
    "\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495\0\u0198\0\u0198\0\u0198"+
    "\0\u0198\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594\0\u05c7\0\u05fa"+
    "\0\u062d\0\u0660\0\u0693\0\u06c6\0\u06f9\0\u0198\0\u072c\0\u075f"+
    "\0\u0198\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u082b\0\u085e\0\u0891"+
    "\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990\0\u09c3\0\u09f6\0\u0a29"+
    "\0\u0a5c\0\u0198\0\u0a8f\0\u0ac2\0\u0af5\0\u0198\0\u0198\0\u0b28"+
    "\0\u0198\0\u0b5b\0\u0198\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a"+
    "\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2"+
    "\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a"+
    "\0\u0fbd\0\u0ff0\0\u1023\0\u1056\0\u1089\0\u10bc\0\u10ef\0\u1122"+
    "\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u1221\0\u1254\0\u1287\0\u12ba"+
    "\0\u0198\0\u12ed\0\u1320\0\u1353\0\u1386\0\u13b9\0\u13ec\0\u141f"+
    "\0\u1452\0\u1485\0\u14b8\0\u14eb\0\u151e\0\u1551\0\u1584\0\u15b7"+
    "\0\u15ea\0\u161d\0\u1650\0\u1683\0\u16b6\0\u16e9\0\u171c\0\u174f"+
    "\0\u1782\0\u17b5\0\u17e8\0\u181b\0\u184e\0\u1881\0\u18b4\0\u18e7"+
    "\0\u191a\0\u194d\0\u1980\0\u19b3\0\u19e6\0\u1a19\0\u1a4c\0\u1a7f"+
    "\0\u0198\0\u1ab2\0\u1ae5\0\u1b18\0\u1b4b\0\u1b7e\0\u1bb1\0\u0198"+
    "\0\u0198\0\u1be4\0\u1c17\0\u0198\0\u0198\0\u0198\0\u0198\0\u1c4a"+
    "\0\u1c7d\0\u1cb0\0\u0198\0\u0198\0\u0198\0\u1ce3\0\u1d16\0\u1d49"+
    "\0\u1d7c\0\u1daf\0\u1de2\0\u1e15\0\u0198\0\u0198\0\u0198\0\u0198"+
    "\0\u1e48\0\u1e7b\0\u1eae\0\u1ee1\0\u1f14\0\u1f47\0\u1f7a\0\u1fad"+
    "\0\u1fe0\0\u2013\0\u2046\0\u2079\0\u20ac\0\u20df\0\u2112\0\u2145"+
    "\0\u2178\0\u0198\0\u21ab\0\u21de\0\u2211\0\u2244\0\u2277\0\u22aa"+
    "\0\u22dd\0\u2310\0\u2343\0\u2376\0\u23a9\0\u23dc\0\u240f\0\u2442"+
    "\0\u2475\0\u24a8\0\u24db\0\u250e\0\u2541\0\u2574\0\u25a7\0\u25da"+
    "\0\u0198\0\u260d\0\u2640\0\u2673\0\u26a6\0\u26d9\0\u270c\0\u273f"+
    "\0\u2772\0\u27a5\0\u27d8\0\u280b\0\u283e\0\u2871\0\u28a4\0\u28d7"+
    "\0\u290a\0\u293d\0\u2970\0\u29a3\0\u29d6\0\u2a09\0\u2a3c\0\u2a6f"+
    "\0\u2aa2\0\u2ad5\0\u2b08\0\u2b3b\0\u2b6e\0\u2ba1\0\u2bd4\0\u2c07"+
    "\0\u2c3a\0\u2c6d\0\u2ca0\0\u2cd3\0\u2d06\0\u2d39\0\u2d6c\0\u2d9f"+
    "\0\u2dd2\0\u2e05\0\u2e38\0\u2e6b\0\u2e9e\0\u2ed1\0\u2f04\0\u2f37"+
    "\0\u2f6a\0\u2f9d\0\u2fd0\0\u3003\0\u3036\0\u3069\0\u309c\0\u30cf"+
    "\0\u3102\0\u3135\0\u3168\0\u319b\0\u31ce\0\u3201\0\u3234\0\u3267"+
    "\0\u329a\0\u32cd\0\u3300\0\u3333\0\u0198\0\u3366\0\u3399\0\u33cc"+
    "\0\u33ff\0\u3432\0\u3465\0\u3498\0\u34cb\0\u34fe\0\u3531\0\u3564"+
    "\0\u3597\0\u35ca\0\u35fd\0\u3630\0\u3663\0\u3696\0\u36c9\0\u36fc"+
    "\0\u372f\0\u372f\0\u0198\0\u3762\0\u3795\0\u37c8\0\u37fb\0\u382e"+
    "\0\u3861\0\u3894\0\u38c7\0\u0198\0\u38fa\0\u392d\0\u3960\0\u3993"+
    "\0\u39c6\0\u39f9\0\u3a2c\0\u3a5f\0\u3a92\0\u0198\0\u3ac5\0\u3af8"+
    "\0\u3b2b\0\u3b5e\0\u3b91\0\u0198\0\u3bc4\0\u3bf7\0\u3c2a\0\u3c5d"+
    "\0\u3c90\0\u3cc3\0\u0198\0\u3cf6\0\u3d29\0\u0198\0\u3d5c\0\u0198"+
    "\0\u3d8f\0\u3dc2\0\u0198\0\u0198\0\u0198\0\u3df5\0\u3e28\0\u0198"+
    "\0\u0198\0\u3e5b\0\u0198\0\u3e8e\0\u0198\0\u3ec1\0\u3ef4\0\u0198"+
    "\0\u3f27\0\u3f5a\0\u3f8d\0\u0198\0\u0198\0\u3fc0\0\u3ff3\0\u4026"+
    "\0\u4059\0\u408c\0\u40bf\0\u40f2\0\u4125\0\u4158\0\u418b\0\u41be"+
    "\0\u41f1\0\u4224\0\u4257\0\u428a\0\u42bd\0\u42f0\0\u4323\0\u4356"+
    "\0\u4389\0\u0198\0\u43bc\0\u43ef\0\u0198\0\u4422\0\u4455\0\u0198"+
    "\0\u4488\0\u44bb\0\u0198\0\u44ee\0\u4521\0\u0198\0\u0198\0\u4554"+
    "\0\u4587\0\u45ba\0\u0198\0\u45ed\0\u4620\0\u4653\0\u4686\0\u46b9"+
    "\0\u46ec\0\u471f\0\u4752\0\u4785\0\u47b8\0\u47eb\0\u0198\0\u481e"+
    "\0\u4851\0\u4884\0\u48b7\0\u48ea\0\u0198\0\u491d\0\u4950\0\u4983"+
    "\0\u49b6\0\u0198\0\u0198\0\u49e9\0\u4a1c\0\u4a4f\0\u4a82\0\u0198"+
    "\0\u0198\0\u4ab5\0\u4ae8\0\u4b1b\0\u4b4e\0\u4b81\0\u4bb4\0\u4be7"+
    "\0\u4c1a\0\u4c4d\0\u4c80\0\u4cb3\0\u0198\0\u4ce6\0\u4d19\0\u4d4c"+
    "\0\u4d7f\0\u0198\0\u0198\0\u4db2\0\u4de5\0\u4e18\0\u4e4b\0\u4e7e"+
    "\0\u4eb1\0\u36fc\0\u4ee4\0\u37c8\0\u4f17\0\u4f4a\0\u0198\0\u3894"+
    "\0\u4f7d\0\u4fb0\0\u4fe3\0\u0198\0\u5016\0\u0198\0\u5049\0\u507c"+
    "\0\u50af\0\u50e2\0\u5115\0\u5148\0\u517b\0\u51ae\0\u51e1\0\u5214"+
    "\0\u5247\0\u0198\0\u527a\0\u52ad\0\u52e0\0\u5313\0\u5346\0\u5379"+
    "\0\u53ac\0\u53df\0\u5412\0\u5445\0\u5478\0\u0198\0\u0198\0\u54ab"+
    "\0\u54de\0\u0198\0\u5511\0\u5544\0\u5577\0\u55aa\0\u55dd\0\u5610"+
    "\0\u5643\0\u5676\0\u56a9\0\u56dc\0\u570f\0\u5742\0\u5775\0\u57a8"+
    "\0\u57db\0\u580e\0\u0198\0\u5841\0\u5874\0\u58a7\0\u58da\0\u590d"+
    "\0\u5940\0\u5973\0\u59a6\0\u59d9\0\u0198\0\u0198\0\u0198\0\u5a0c"+
    "\0\u5a3f\0\u5a72\0\u0198\0\u5aa5\0\u5ad8\0\u0198\0\u5b0b\0\u5b3e"+
    "\0\u5b71\0\u0198\0\u5ba4\0\u5bd7\0\u5c0a\0\u5c3d\0\u5c70\0\u5ca3"+
    "\0\u0198\0\u5cd6\0\u5d09\0\u5d3c\0\u5d6f\0\u5da2\0\u5dd5\0\u5e08"+
    "\0\u5e3b\0\u5e6e\0\u0198\0\u5ea1\0\u5ed4\0\u5f07\0\u5f3a\0\u5f6d"+
    "\0\u5fa0\0\u5fd3\0\u6006\0\u0198\0\u0198\0\u0198\0\u0198\0\u6039"+
    "\0\u0198\0\u606c\0\u609f\0\u60d2\0\u0198\0\u6105\0\u6138\0\u616b"+
    "\0\u619e\0\u61d1\0\u6204\0\u0198\0\u0198\0\u0198\0\u0198\0\u6237"+
    "\0\u0198\0\u626a\0\u629d\0\u62d0\0\u6303\0\u6336\0\u6369\0\u639c"+
    "\0\u63cf\0\u6402\0\u6435\0\u6468\0\u649b\0\u64ce\0\u6501\0\u6534"+
    "\0\u0198\0\u6567\0\u659a\0\u65cd\0\u6600\0\u6633\0\u0198\0\u6666"+
    "\0\u6699\0\u66cc\0\u66ff\0\u0198\0\u0198\0\u6732\0\u6765\0\u0198"+
    "\0\u6798\0\u67cb\0\u67fe\0\u6831\0\u6864\0\u6897\0\u68ca\0\u68fd"+
    "\0\u6930\0\u6963\0\u6996\0\u69c9\0\u69fc\0\u6a2f\0\u0198\0\u6a62"+
    "\0\u6a95\0\u6ac8\0\u6afb\0\u0198\0\u6b2e\0\u6b61\0\u6b94\0\u6bc7"+
    "\0\u6bfa\0\u6c2d\0\u6c60\0\u6c93\0\u6cc6\0\u6cf9\0\u0198\0\u6d2c"+
    "\0\u6d5f\0\u6d92\0\u6dc5\0\u6df8\0\u6e2b\0\u6e5e\0\u6e91\0\u0198"+
    "\0\u6ec4\0\u0198\0\u6ef7\0\u6f2a\0\u6f5d\0\u6f90\0\u6fc3\0\u6ff6"+
    "\0\u7029\0\u0198\0\u705c\0\u708f\0\u70c2\0\u609f\0\u0198\0\u70f5"+
    "\0\u0198\0\u0198\0\u0198\0\u0198\0\u7128\0\u0198\0\u0198\0\u715b"+
    "\0\u718e\0\u71c1\0\u71f4\0\u0198\0\u7227\0\u725a\0\u728d\0\u72c0"+
    "\0\u72f3\0\u0198\0\u7326\0\u7359\0\u738c\0\u73bf\0\u73f2\0\u7425"+
    "\0\u7458\0\u0198\0\u748b\0\u74be\0\u0198\0\u74f1\0\u0198\0\u7524"+
    "\0\u7557\0\u0198\0\u758a\0\u75bd\0\u75f0\0\u7623\0\u7656\0\u7689"+
    "\0\u76bc\0\u0198\0\u0198\0\u0198\0\u76ef\0\u7722\0\u7755\0\u7788"+
    "\0\u77bb\0\u0198\0\u77ee\0\u7821\0\u7854\0\u7887\0\u78ba\0\u78ed"+
    "\0\u7920\0\u0198\0\u0198\0\u0198\0\u7953\0\u7986\0\u79b9\0\u0198"+
    "\0\u79ec\0\u7a1f\0\u0198\0\u7a52\0\u7a85\0\u7ab8\0\u0198\0\u0198"+
    "\0\u7aeb\0\u7b1e\0\u7b51\0\u7b84\0\u7bb7\0\u7bea\0\u7c1d\0\u7c50"+
    "\0\u7c83\0\u0198\0\u7cb6\0\u7ce9\0\u7d1c\0\u7d4f\0\u7d82\0\u7db5"+
    "\0\u7de8\0\u7e1b\0\u0198\0\u7e4e\0\u7e81\0\u7eb4\0\u7ee7\0\u7f1a"+
    "\0\u0198\0\u748b\0\u7f4d\0\u7f80\0\u7fb3\0\u7fe6\0\u0198\0\u0198"+
    "\0\u0198\0\u0198\0\u8019\0\u804c\0\u0198\0\u807f\0\u80b2\0\u80e5"+
    "\0\u8118\0\u814b\0\u817e\0\u0198\0\u81b1\0\u0198\0\u81e4\0\u0198"+
    "\0\u8217\0\u824a\0\u827d\0\u82b0\0\u82e3\0\u8316\0\u8349\0\u0198"+
    "\0\u837c\0\u0198\0\u83af\0\u0198\0\u0198\0\u83e2\0\u8415\0\u8448"+
    "\0\u847b\0\u84ae\0\u0198\0\u84e1\0\u8514\0\u0198\0\u8547\0\u0198"+
    "\0\u857a\0\u85ad\0\u0198\0\u85e0\0\u0198\0\u0198\0\u8613\0\u8646"+
    "\0\u8679\0\u0198\0\u0198\0\u0198\0\u86ac\0\u86df\0\u8712\0\u0198"+
    "\0\u8745\0\u8118\0\u0198\0\u0198\0\u8778\0\u87ab\0\u87de\0\u8811"+
    "\0\u0198\0\u0198\0\u0198\0\u0198\0\u0198\0\u8844\0\u83af\0\u83e2"+
    "\0\u8877\0\u88aa\0\u88dd\0\u0198\0\u8910\0\u8943\0\u8976\0\u89a9"+
    "\0\u0198\0\u0198\0\u89dc\0\u0198\0\u8a0f\0\u0198\0\u8a42\0\u8a75"+
    "\0\u0198\0\u0198\0\u8aa8\0\u0198\0\u8adb\0\u8b0e\0\u8b41\0\u0198"+
    "\0\u8b74\0\u8ba7\0\u0198\0\u8bda\0\u0198\0\u8c0d\0\u8c40\0\u0198"+
    "\0\u0198\0\u8c73\0\u8b0e\0\u8ca6\0\u0198\0\u0198\0\u8cd9\0\u8d0c"+
    "\0\u0198\0\u8d3f\0\u0198\0\u0198\0\u8d72\0\u8da5\0\u8dd8\0\u8e0b"+
    "\0\u8e3e\0\u0198\0\u8e71\0\u8e71";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[908];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\11\1\23\1\24\1\15\1\25\1\26"+
    "\1\15\1\27\1\30\1\11\1\31\1\32\1\33\1\34"+
    "\1\35\1\11\1\36\1\37\1\40\1\41\1\11\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\11\1\51"+
    "\1\52\1\53\1\11\1\54\1\55\1\11\1\56\1\57"+
    "\1\60\1\61\1\62\1\11\1\12\1\13\1\14\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\11\1\71\1\24"+
    "\1\63\1\25\1\72\1\63\1\73\1\30\1\11\1\74"+
    "\1\75\1\33\1\76\1\35\1\11\1\36\1\77\1\40"+
    "\1\41\1\11\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\11\1\51\1\52\1\53\1\11\1\54\1\55"+
    "\1\11\1\56\1\57\1\60\1\61\1\100\1\101\2\102"+
    "\11\101\1\103\46\101\1\104\2\102\13\104\1\105\44\104"+
    "\1\106\2\107\60\106\1\11\1\12\1\13\1\14\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\11\1\71\1\24"+
    "\1\63\1\25\1\72\1\63\1\73\1\30\1\11\1\74"+
    "\1\75\1\33\1\76\1\35\1\11\1\36\1\110\1\40"+
    "\1\41\1\11\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\11\1\51\1\52\1\53\1\11\1\54\1\55"+
    "\1\11\1\56\1\57\1\60\1\61\1\100\1\11\1\12"+
    "\1\13\1\14\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\11\1\71\1\24\1\63\1\25\1\72\1\63\1\73"+
    "\1\30\1\11\1\74\1\75\1\33\1\76\1\35\1\11"+
    "\1\36\1\37\1\40\1\41\1\11\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\11\1\51\1\52\1\53"+
    "\1\11\1\54\1\55\1\11\1\56\1\57\1\60\1\61"+
    "\1\62\2\111\1\0\2\111\1\112\2\111\1\112\1\111"+
    "\2\112\3\111\1\112\1\111\11\112\6\111\6\112\1\111"+
    "\4\112\1\111\2\112\5\111\65\0\1\13\63\0\1\113"+
    "\63\0\1\15\1\114\7\0\1\15\2\0\1\15\73\0"+
    "\1\115\6\0\1\116\1\117\2\0\1\120\10\0\1\121"+
    "\12\0\1\122\11\0\1\123\2\0\1\124\1\0\1\125"+
    "\43\0\1\126\2\0\1\127\1\0\2\127\3\0\1\130"+
    "\1\0\1\127\1\131\2\127\1\132\1\127\1\133\2\127"+
    "\6\0\1\134\1\135\4\127\1\0\1\136\3\127\1\0"+
    "\2\127\21\0\1\137\1\0\1\140\3\0\1\141\1\0"+
    "\1\142\14\0\1\143\35\0\1\144\1\0\1\145\11\0"+
    "\1\146\7\0\1\147\2\0\1\150\33\0\1\151\1\0"+
    "\1\152\54\0\1\153\2\0\1\154\12\0\1\155\12\0"+
    "\1\156\1\157\37\0\1\160\5\0\1\161\12\0\1\162"+
    "\4\0\1\163\34\0\1\164\4\0\1\165\16\0\1\166"+
    "\1\0\1\167\22\0\1\170\14\0\1\171\1\0\1\172"+
    "\16\0\1\173\3\0\1\174\20\0\1\175\11\0\1\176"+
    "\62\0\1\177\2\0\1\200\20\0\1\201\1\202\23\0"+
    "\1\203\2\0\1\204\13\0\1\205\3\0\1\206\10\0"+
    "\1\207\1\0\1\210\24\0\1\211\11\0\1\212\2\0"+
    "\1\213\20\0\1\214\1\0\1\215\22\0\1\216\11\0"+
    "\1\217\62\0\1\220\2\0\1\221\1\222\15\0\1\223"+
    "\10\0\1\224\36\0\1\225\11\0\1\226\27\0\1\227"+
    "\74\0\1\230\62\0\1\231\2\0\1\232\1\233\26\0"+
    "\1\234\27\0\1\235\2\0\1\236\64\0\1\237\111\0"+
    "\1\240\3\0\1\241\26\0\1\242\20\0\1\243\71\0"+
    "\1\244\62\0\1\245\62\0\1\246\6\0\1\247\4\0"+
    "\1\63\1\250\2\0\1\251\1\252\3\0\1\63\2\0"+
    "\1\63\2\0\1\253\4\0\1\254\1\255\35\0\1\256"+
    "\10\0\1\256\2\0\1\256\5\0\1\257\2\0\1\115"+
    "\6\0\1\260\1\117\2\0\1\120\10\0\1\121\11\0"+
    "\1\261\10\0\1\261\2\0\1\261\46\0\1\262\1\122"+
    "\7\0\1\262\1\0\1\123\1\262\1\0\1\124\1\0"+
    "\1\125\42\0\1\263\1\126\2\0\1\127\1\0\2\127"+
    "\1\0\1\263\1\0\1\130\1\263\1\127\1\131\2\127"+
    "\1\132\1\127\1\133\2\127\6\0\1\134\1\135\4\127"+
    "\1\0\1\136\3\127\1\0\2\127\11\0\1\262\7\0"+
    "\1\137\1\262\1\140\1\0\1\262\1\0\1\141\1\0"+
    "\1\142\14\0\1\143\25\0\1\262\7\0\1\144\1\262"+
    "\1\145\1\0\1\262\7\0\1\146\7\0\1\147\2\0"+
    "\1\150\23\0\1\262\7\0\1\151\1\262\1\152\1\0"+
    "\1\262\46\0\1\262\10\0\1\262\1\0\1\160\1\262"+
    "\4\0\1\161\12\0\1\162\4\0\1\163\21\0\1\262"+
    "\10\0\1\262\1\0\1\164\1\262\3\0\1\165\16\0"+
    "\1\166\1\0\1\167\21\0\1\256\1\175\7\0\1\256"+
    "\1\0\1\176\1\256\47\0\1\264\2\0\1\264\1\0"+
    "\2\264\3\0\1\264\1\0\11\264\6\0\6\264\1\0"+
    "\4\264\1\0\2\264\4\0\1\265\35\0\1\266\15\0"+
    "\1\246\6\0\1\247\1\101\2\0\11\101\1\0\46\101"+
    "\14\0\1\267\46\0\1\104\2\0\13\104\1\0\44\104"+
    "\16\0\1\270\126\0\1\265\4\0\2\112\2\0\1\112"+
    "\1\0\2\112\1\0\1\112\1\0\14\112\5\0\6\112"+
    "\1\0\4\112\1\0\2\112\11\0\1\271\10\0\1\271"+
    "\2\0\1\271\66\0\1\272\22\0\1\273\23\0\1\274"+
    "\32\0\1\275\3\0\1\276\20\0\1\277\20\0\1\300"+
    "\100\0\1\301\61\0\1\302\41\0\1\303\2\0\1\304"+
    "\13\0\1\305\64\0\1\306\66\0\1\307\57\0\1\310"+
    "\1\311\22\0\1\127\2\0\1\127\1\312\2\127\3\0"+
    "\1\127\1\0\11\127\6\0\6\127\1\0\4\127\1\0"+
    "\1\127\1\313\12\0\1\127\2\0\1\127\1\312\2\127"+
    "\3\0\1\127\1\0\11\127\6\0\6\127\1\0\4\127"+
    "\1\0\2\127\12\0\1\127\2\0\1\127\1\312\2\127"+
    "\3\0\1\127\1\0\11\127\6\0\4\127\1\314\1\127"+
    "\1\0\4\127\1\0\2\127\12\0\1\127\2\0\1\127"+
    "\1\312\2\127\3\0\1\127\1\0\11\127\6\0\1\315"+
    "\5\127\1\0\4\127\1\0\2\127\12\0\1\127\2\0"+
    "\1\127\1\312\2\127\3\0\1\127\1\0\1\127\1\316"+
    "\7\127\6\0\6\127\1\0\4\127\1\0\2\127\12\0"+
    "\1\317\2\0\1\127\1\312\2\127\3\0\1\127\1\0"+
    "\11\127\6\0\6\127\1\0\1\320\3\127\1\0\2\127"+
    "\12\0\1\321\2\0\1\127\1\312\2\127\3\0\1\322"+
    "\1\0\11\127\6\0\6\127\1\0\4\127\1\0\2\127"+
    "\12\0\1\323\2\0\1\127\1\312\2\127\3\0\1\127"+
    "\1\0\11\127\6\0\6\127\1\0\1\324\3\127\1\0"+
    "\2\127\12\0\1\127\2\0\1\127\1\312\2\127\3\0"+
    "\1\127\1\0\11\127\6\0\4\127\1\325\1\127\1\0"+
    "\4\127\1\0\2\127\22\0\1\326\62\0\1\327\107\0"+
    "\1\330\60\0\1\331\41\0\1\332\2\0\1\333\55\0"+
    "\1\334\2\0\1\334\57\0\1\335\2\0\1\335\47\0"+
    "\1\336\41\0\1\337\54\0\1\340\70\0\1\341\17\0"+
    "\2\342\2\0\1\342\2\0\1\342\1\0\1\342\2\0"+
    "\1\342\1\0\1\342\2\0\1\342\14\0\1\342\24\0"+
    "\2\343\2\0\1\343\2\0\1\343\1\0\1\343\2\0"+
    "\1\343\1\0\1\343\2\0\1\343\14\0\1\343\70\0"+
    "\1\344\40\0\1\345\62\0\1\346\23\0\1\347\51\0"+
    "\1\350\63\0\1\351\4\0\1\352\41\0\1\353\12\0"+
    "\1\354\40\0\1\355\22\0\1\356\4\0\1\357\5\0"+
    "\1\360\35\0\1\361\76\0\1\362\56\0\1\363\1\364"+
    "\61\0\1\365\71\0\1\366\54\0\1\367\13\0\1\370"+
    "\55\0\1\371\33\0\1\372\54\0\1\373\66\0\1\374"+
    "\2\0\1\375\100\0\1\376\71\0\1\377\37\0\1\u0100"+
    "\1\0\1\u0101\44\0\1\u0102\15\0\1\u0103\14\0\1\u0104"+
    "\1\u0105\31\0\1\u0106\30\0\1\u0107\23\0\1\u0108\11\0"+
    "\1\u0109\4\0\1\u010a\76\0\1\u010b\1\u010c\2\0\1\u010d"+
    "\23\0\1\u010e\102\0\1\u010f\12\0\1\u0110\66\0\1\u0111"+
    "\42\0\1\u0112\76\0\1\u0113\53\0\1\u0114\61\0\1\u0115"+
    "\7\0\1\u0116\67\0\1\u0117\56\0\1\u0118\3\0\1\u0119"+
    "\56\0\1\u011a\61\0\1\u011b\51\0\1\u011c\73\0\1\u011d"+
    "\4\0\1\u011e\43\0\1\u011f\12\0\1\u0120\43\0\1\u0121"+
    "\57\0\1\u0122\2\0\1\u0123\102\0\1\u0124\25\0\1\u0125"+
    "\101\0\1\u0126\1\u0127\57\0\1\u0128\3\0\1\u0129\13\0"+
    "\1\u012a\4\0\1\u012b\4\0\1\u012c\16\0\1\u012d\116\0"+
    "\1\u012e\23\0\1\u012f\105\0\1\u0130\73\0\1\u0131\62\0"+
    "\1\u0132\61\0\1\u0133\27\0\1\u0134\16\0\1\u0135\62\0"+
    "\1\u0136\42\0\1\u0137\1\0\2\u0138\5\0\1\u0137\2\0"+
    "\1\u0137\46\0\1\u0139\1\0\2\u013a\5\0\1\u0139\2\0"+
    "\1\u0139\42\0\4\u013b\1\263\1\u013c\2\u013b\1\251\1\u013b"+
    "\2\0\1\u013b\1\263\1\u013b\1\0\1\263\11\0\6\u013b"+
    "\6\0\1\u013b\4\0\1\u013b\2\0\5\u013b\4\0\1\256"+
    "\4\0\1\u013d\3\0\1\256\2\0\1\256\46\0\1\256"+
    "\10\0\1\256\2\0\1\256\46\0\1\256\3\0\1\274"+
    "\4\0\1\256\2\0\1\256\22\0\1\275\3\0\1\276"+
    "\17\0\1\261\10\0\1\261\2\0\1\261\7\0\1\254"+
    "\36\0\1\262\4\0\1\u013e\3\0\1\262\2\0\1\262"+
    "\46\0\1\263\1\u013c\2\0\1\251\4\0\1\263\2\0"+
    "\1\263\51\0\1\u013f\24\0\1\u0140\1\u0141\31\0\1\271"+
    "\4\0\1\u0142\3\0\1\271\2\0\1\271\70\0\1\u0143"+
    "\20\0\1\u0144\20\0\1\u0145\65\0\1\u0146\2\0\1\u0147"+
    "\10\0\1\u0148\1\u0149\1\u014a\1\0\1\u014b\14\0\1\u014c"+
    "\1\0\1\u014d\3\0\1\u014e\1\u014f\53\0\1\u0150\61\0"+
    "\1\u0151\63\0\1\u0152\22\0\1\u0153\130\0\1\u0154\33\0"+
    "\1\u0155\77\0\1\u0156\26\0\1\u0157\14\0\1\u0158\64\0"+
    "\1\u0159\51\0\1\u015a\71\0\1\u015b\45\0\1\u015c\62\0"+
    "\1\u015d\62\0\1\127\2\0\1\127\1\u015e\2\127\3\0"+
    "\1\127\1\0\11\127\6\0\6\127\1\0\1\127\1\u015f"+
    "\2\127\1\0\2\127\12\0\1\127\2\0\1\127\1\u0160"+
    "\2\127\3\0\1\127\1\0\11\127\6\0\6\127\1\0"+
    "\4\127\1\0\2\127\12\0\1\127\2\0\1\u0161\1\312"+
    "\2\127\3\0\1\127\1\0\11\127\6\0\6\127\1\0"+
    "\4\127\1\0\2\127\12\0\1\127\2\0\1\127\1\312"+
    "\2\127\3\0\1\127\1\0\11\127\6\0\1\127\1\u0162"+
    "\4\127\1\0\4\127\1\0\2\127\12\0\1\127\2\0"+
    "\1\127\1\u0163\2\127\3\0\1\127\1\0\11\127\6\0"+
    "\6\127\1\0\4\127\1\0\2\127\12\0\1\127\2\0"+
    "\1\127\1\u0164\2\127\3\0\1\127\1\0\11\127\6\0"+
    "\6\127\1\0\4\127\1\0\2\127\12\0\1\127\2\0"+
    "\1\127\1\u0165\2\127\3\0\1\127\1\0\11\127\6\0"+
    "\6\127\1\0\4\127\1\0\1\127\1\u0166\12\0\1\127"+
    "\2\0\1\127\1\312\2\127\3\0\1\127\1\0\11\127"+
    "\6\0\6\127\1\0\1\u0167\3\127\1\0\2\127\12\0"+
    "\1\127\2\0\1\127\1\u0168\2\127\3\0\1\127\1\0"+
    "\11\127\6\0\6\127\1\0\4\127\1\0\2\127\12\0"+
    "\1\127\2\0\1\127\1\u0169\2\127\3\0\1\127\1\0"+
    "\11\127\6\0\6\127\1\0\4\127\1\0\2\127\12\0"+
    "\1\127\2\0\1\127\1\312\2\127\3\0\1\127\1\0"+
    "\11\127\6\0\3\127\1\u016a\2\127\1\0\4\127\1\0"+
    "\2\127\21\0\1\u016b\1\326\62\0\1\327\1\u016b\115\0"+
    "\1\u016c\21\0\1\u016d\114\0\1\u016e\60\0\1\u016f\36\0"+
    "\1\u0170\1\334\2\0\1\334\57\0\1\335\1\u0170\1\0"+
    "\1\335\102\0\1\u0171\3\0\1\u0172\42\0\1\u0173\110\0"+
    "\1\u0174\14\0\2\342\2\0\1\342\2\0\1\342\1\u0175"+
    "\1\342\2\0\1\342\1\0\1\342\2\0\1\342\14\0"+
    "\1\342\24\0\2\343\2\0\1\343\2\0\1\343\1\0"+
    "\1\343\1\u0175\1\0\1\343\1\0\1\343\2\0\1\343"+
    "\14\0\1\343\42\0\1\u0176\107\0\1\u0177\37\0\1\u0178"+
    "\76\0\1\u0179\41\0\1\u017a\50\0\1\u017b\101\0\1\u017c"+
    "\105\0\1\u017d\20\0\1\u017e\120\0\1\u017f\60\0\1\u0180"+
    "\26\0\1\u0181\36\0\1\u0182\61\0\1\u0183\60\0\1\u0184"+
    "\43\0\1\u0185\22\0\1\u0186\37\0\1\u0187\45\0\1\u0188"+
    "\117\0\1\u0189\73\0\1\u018a\14\0\1\u018b\120\0\1\u018c"+
    "\24\0\1\u018d\62\0\1\u018e\121\0\1\u018f\46\0\1\u0190"+
    "\101\0\1\u0191\20\0\1\u0192\74\0\1\u0193\103\0\1\u0194"+
    "\46\0\1\u0195\111\0\1\u0196\35\0\1\u0197\62\0\1\u0198"+
    "\56\0\1\u0199\101\0\1\u019a\26\0\1\u019b\117\0\1\u019c"+
    "\47\0\1\u019d\12\0\1\u019e\4\0\1\u019f\53\0\1\u01a0"+
    "\7\0\1\u01a1\22\0\1\u01a2\76\0\1\u01a3\1\0\1\u01a4"+
    "\100\0\1\u01a5\43\0\1\207\35\0\1\u010f\1\u01a6\1\u01a7"+
    "\60\u010f\42\0\1\u01a8\42\0\1\u01a9\100\0\1\u01a4\32\0"+
    "\1\u01aa\121\0\1\u01ab\35\0\1\u01ac\45\0\1\u01ad\24\0"+
    "\1\u01ae\35\0\1\u01af\116\0\1\u01b0\34\0\1\u01b1\122\0"+
    "\1\u01b2\62\0\1\u01b3\33\0\1\u01b4\105\0\1\u01b5\43\0"+
    "\1\u01b6\14\0\1\u01b7\22\0\1\u01b8\116\0\1\u01b9\65\0"+
    "\1\u01ba\44\0\1\u01bb\62\0\1\u01bc\75\0\1\u01bd\70\0"+
    "\1\u01be\32\0\1\u01bf\53\0\1\u01c0\30\0\1\u01c1\64\0"+
    "\1\u01c2\60\0\1\u01c3\1\0\1\u01c4\7\0\1\u01c5\52\0"+
    "\1\u01c6\43\0\1\u01c7\101\0\1\u01c8\46\0\1\u01c9\73\0"+
    "\1\u01ca\27\0\1\u01cb\77\0\1\u01cc\103\0\1\u01cd\27\0"+
    "\1\u01ce\116\0\1\u01cf\57\0\1\u01d0\70\0\1\u01d1\17\0"+
    "\1\u0137\4\0\1\u0142\3\0\1\u0137\2\0\1\u0137\46\0"+
    "\1\u01d2\10\0\1\u01d2\2\0\1\u01d2\46\0\1\u0139\10\0"+
    "\1\u0139\2\0\1\u0139\46\0\1\u01d2\1\0\2\u0138\5\0"+
    "\1\u01d2\2\0\1\u01d2\46\0\1\u01d3\10\0\1\u01d3\2\0"+
    "\1\u01d3\46\0\1\u01d4\10\0\1\u01d4\2\0\1\u01d4\47\0"+
    "\1\u01d5\2\0\1\u01d5\1\0\2\u01d5\3\0\1\u01d5\1\0"+
    "\11\u01d5\6\0\6\u01d5\1\0\4\u01d5\1\0\2\u01d5\12\0"+
    "\1\264\2\0\1\264\1\0\2\264\3\0\1\264\1\0"+
    "\11\264\6\0\6\264\1\0\4\264\1\0\2\264\6\0"+
    "\1\u01d6\1\u01d7\31\0\1\u01d7\1\0\1\u01d7\30\0\1\u01d8"+
    "\10\0\1\u01d8\2\0\1\u01d8\111\0\1\u01d9\53\0\1\u01da"+
    "\3\0\1\u01db\35\0\1\u01dc\104\0\1\u01dd\46\0\1\u01de"+
    "\12\0\1\u01df\41\0\1\u01e0\4\0\1\u01e1\16\0\1\u01e2"+
    "\24\0\1\u01e3\35\0\1\u01e4\63\0\1\u01e5\35\0\1\u01e6"+
    "\115\0\1\u01e7\33\0\1\u01e8\44\0\1\u01e9\127\0\1\u01ea"+
    "\15\0\1\u01eb\101\0\1\u01ec\27\0\1\u01ed\56\0\1\u01ee"+
    "\53\0\1\u01ef\65\0\1\u01f0\61\0\1\u01f1\64\0\1\u01f2"+
    "\56\0\1\u01f3\63\0\1\u01f4\60\0\1\u01f5\27\0\1\127"+
    "\2\0\1\127\1\u01f6\2\127\3\0\1\127\1\0\11\127"+
    "\6\0\6\127\1\0\4\127\1\0\2\127\12\0\1\127"+
    "\2\0\1\127\1\u01f7\2\127\3\0\1\127\1\0\11\127"+
    "\6\0\6\127\1\0\4\127\1\0\2\127\12\0\1\127"+
    "\2\0\1\127\1\312\2\127\3\0\1\127\1\0\5\127"+
    "\1\u01f8\3\127\6\0\6\127\1\0\4\127\1\0\2\127"+
    "\12\0\1\127\2\0\1\127\1\312\2\127\3\0\1\127"+
    "\1\0\11\127\6\0\6\127\1\0\1\127\1\u01f9\2\127"+
    "\1\0\2\127\12\0\1\127\2\0\1\127\1\u01fa\2\127"+
    "\3\0\1\127\1\0\11\127\6\0\6\127\1\0\4\127"+
    "\1\0\2\127\12\0\1\u01fb\2\0\1\127\1\312\2\127"+
    "\3\0\1\127\1\0\11\127\6\0\6\127\1\0\4\127"+
    "\1\0\2\127\33\0\1\u01fc\105\0\1\u01fd\62\0\1\u01fe"+
    "\16\0\1\u01ff\77\0\1\u0200\57\0\1\u0201\103\0\1\u0202"+
    "\66\0\1\u0203\45\0\1\u0204\75\0\1\u0205\62\0\1\u0206"+
    "\46\0\1\u0207\53\0\1\u0208\65\0\1\u0209\100\0\1\u020a"+
    "\71\0\1\u020b\56\0\1\u020c\46\0\1\u020d\10\0\1\u020e"+
    "\3\0\1\u020f\42\0\1\u0210\62\0\1\u0211\62\0\1\u0212"+
    "\77\0\1\u0213\43\0\1\u0214\30\0\1\u0215\50\0\1\u0216"+
    "\74\0\1\u0217\56\0\1\u0218\55\0\1\u0219\25\0\1\u021a"+
    "\130\0\1\u021b\26\0\1\u021c\106\0\1\u021d\7\0\1\u021e"+
    "\53\0\1\u021f\65\0\1\u0220\62\0\1\u0221\20\0\1\u0222"+
    "\122\0\1\u0223\41\0\1\u0224\62\0\1\u0225\102\0\1\u0226"+
    "\23\0\1\u0227\62\0\1\u0228\124\0\1\u0229\35\0\1\u022a"+
    "\64\0\1\u01a3\63\0\1\u010f\42\0\1\u010f\74\0\1\u022b"+
    "\45\0\1\u01a7\121\0\1\u022c\50\0\1\u022d\40\0\1\u01a3"+
    "\121\0\1\u022e\44\0\1\u022f\53\0\1\u0230\53\0\1\u0231"+
    "\30\0\1\u0232\11\0\1\u0233\33\0\1\u0234\43\0\1\u0235"+
    "\117\0\1\u0236\42\0\1\u0237\1\0\1\u0238\77\0\1\u0239"+
    "\40\0\1\u023a\65\0\1\u023b\45\0\1\u023c\103\0\1\u023d"+
    "\41\0\1\u023e\130\0\1\u023f\53\0\1\u0240\71\0\1\u0241"+
    "\1\u0242\11\0\1\u0243\120\0\1\u0244\74\0\1\u0245\53\0"+
    "\1\u0246\62\0\1\u0247\56\0\1\u0248\63\0\1\u0249\26\0"+
    "\1\u024a\124\0\1\u024b\20\0\1\u024c\130\0\1\u024d\14\0"+
    "\1\u024e\62\0\1\u024f\62\0\1\u0250\61\0\1\u01d3\1\u013e"+
    "\7\0\1\u01d3\2\0\1\u01d3\76\0\1\u0140\1\u0141\27\0"+
    "\1\u01d7\133\0\1\u0251\17\0\1\u0252\112\0\1\u0253\41\0"+
    "\1\u0254\112\0\1\u0255\57\0\1\u0256\57\0\1\u0257\61\0"+
    "\1\u0258\63\0\1\u0259\34\0\1\u025a\66\0\1\u025b\53\0"+
    "\1\u025c\102\0\1\u025d\37\0\1\u025e\121\0\1\u025f\56\0"+
    "\1\u0260\47\0\1\u0261\60\0\1\u0262\61\0\1\u0263\57\0"+
    "\1\u0264\107\0\1\u0265\57\0\1\u0266\74\0\1\u0267\14\0"+
    "\1\u0268\124\0\1\u0269\41\0\1\u026a\41\0\1\u026b\2\0"+
    "\1\127\1\312\2\127\3\0\1\127\1\0\11\127\6\0"+
    "\6\127\1\0\4\127\1\0\2\127\12\0\1\127\2\0"+
    "\1\127\1\u026c\2\127\3\0\1\127\1\0\11\127\6\0"+
    "\6\127\1\0\4\127\1\0\2\127\12\0\1\127\2\0"+
    "\1\127\1\u026d\2\127\3\0\1\127\1\0\11\127\6\0"+
    "\6\127\1\0\4\127\1\0\2\127\35\0\1\u026e\42\0"+
    "\1\u026f\125\0\1\u0270\17\0\1\u0271\121\0\1\u0272\53\0"+
    "\1\u0273\64\0\1\u0274\42\0\1\u0275\100\0\1\u0276\45\0"+
    "\1\u0277\61\0\1\u0278\66\0\1\u0279\74\0\1\u027a\71\0"+
    "\1\u027b\42\0\1\u027c\43\0\1\u027d\57\0\1\u027e\124\0"+
    "\1\u027f\40\0\1\u0280\75\0\1\u0281\66\0\1\u0282\60\0"+
    "\1\u0283\61\0\1\u0284\70\0\1\u0285\37\0\1\u0286\105\0"+
    "\1\u0287\53\0\1\u0288\65\0\1\u0289\45\0\1\u028a\60\0"+
    "\1\u028b\43\0\1\u028c\101\0\1\u028d\43\0\1\u028e\117\0"+
    "\1\u028f\46\0\1\u0290\56\0\1\u0291\50\0\1\u0292\114\0"+
    "\1\u0293\67\0\1\u0294\57\0\1\u010f\61\0\1\u0295\64\0"+
    "\1\u0296\22\0\1\u0297\103\0\1\u0298\104\0\1\u0299\65\0"+
    "\1\u029a\33\0\1\u029b\63\0\1\u029c\101\0\1\u029d\40\0"+
    "\1\u029e\64\0\1\u029f\76\0\1\u02a0\27\0\1\u02a1\115\0"+
    "\1\u02a2\64\0\1\u02a3\65\0\1\u02a4\61\0\1\u02a5\22\0"+
    "\1\u02a6\10\0\1\u02a6\2\0\1\u02a6\111\0\1\u02a7\41\0"+
    "\1\u02a8\74\0\1\u02a9\32\0\1\u02aa\57\0\1\u02ab\124\0"+
    "\1\u02ac\37\0\1\u02ad\111\0\1\u02ae\35\0\1\u02af\56\0"+
    "\1\u02b0\102\0\1\u02b1\25\0\1\u02b2\77\0\1\u02b3\45\0"+
    "\1\u02b4\117\0\1\u02b5\25\0\1\u02b6\121\0\1\u02b7\45\0"+
    "\1\u02b8\76\0\1\u02b9\24\0\1\u02ba\121\0\1\u02bb\40\0"+
    "\1\u02bc\107\0\1\u02bd\20\0\1\u02be\116\0\1\u02bf\63\0"+
    "\1\u02c0\25\0\1\u02c1\124\0\1\u02c2\16\0\1\u02c3\24\0"+
    "\1\u02c4\105\0\1\u02c5\33\0\1\u02c6\43\0\1\127\2\0"+
    "\1\127\1\u02c7\2\127\3\0\1\127\1\0\11\127\6\0"+
    "\6\127\1\0\4\127\1\0\2\127\27\0\1\u02c8\62\0"+
    "\1\u02c9\113\0\1\u02ca\26\0\1\u02cb\65\0\1\u02cc\45\0"+
    "\1\u02cd\117\0\1\u02ce\65\0\1\u02cf\61\0\1\u02d0\65\0"+
    "\1\u02d1\66\0\1\u02d2\62\0\1\u02d3\62\0\1\u02d4\56\0"+
    "\1\u02d5\20\0\1\u02d6\121\0\1\u02d7\40\0\1\u02d8\66\0"+
    "\1\u02d9\41\0\1\u02da\101\0\1\u02db\105\0\1\u02dc\32\0"+
    "\1\u02dd\105\0\1\u02de\62\0\1\u02df\4\0\1\u02e0\62\0"+
    "\1\u02e1\66\0\1\u02e2\51\0\1\u02e3\64\0\1\u02e4\35\0"+
    "\1\u02e5\112\0\1\u02e6\37\0\1\u02e7\103\0\1\u02e8\60\0"+
    "\1\u02e9\66\0\1\u02ea\20\0\1\u02eb\65\0\1\u01a4\74\0"+
    "\1\u010f\102\0\1\u02ec\25\0\1\u02ed\103\0\1\u02ee\106\0"+
    "\1\u02ef\63\0\1\u02f0\50\0\1\u02f1\61\0\1\u02f2\65\0"+
    "\1\u02f3\50\0\1\u02f4\100\0\1\u02f5\35\0\1\u02f6\64\0"+
    "\1\u02f7\62\0\1\u02f8\77\0\1\u02f9\62\0\1\u02fa\72\0"+
    "\1\u02fb\55\0\1\u02fc\57\0\1\u02fd\70\0\1\u02fe\55\0"+
    "\1\u02ff\37\0\1\u0300\107\0\1\u0301\57\0\1\u0302\26\0"+
    "\1\u0303\124\0\1\u0304\35\0\1\u0305\104\0\1\u0306\23\0"+
    "\1\u0307\77\0\1\u0308\50\0\1\u0309\56\0\1\u030a\10\0"+
    "\1\u030a\2\0\1\u030a\106\0\1\u030b\35\0\1\u030c\105\0"+
    "\1\u030d\67\0\1\u030e\57\0\1\u030f\57\0\1\u0310\74\0"+
    "\1\u0311\56\0\1\u0312\20\0\1\u0313\74\0\1\u0314\50\0"+
    "\1\u0315\14\0\1\u0316\63\0\1\u0317\53\0\1\u0318\1\0"+
    "\1\u0318\27\0\1\u02d6\17\0\1\u0319\121\0\1\u031a\44\0"+
    "\1\u031b\105\0\1\u031c\20\0\1\u031d\115\0\1\u031e\44\0"+
    "\1\u031f\45\0\1\u0320\101\0\1\u0321\62\0\1\u0322\76\0"+
    "\1\u0323\27\0\1\u0324\74\0\1\u0325\107\0\1\u0326\23\0"+
    "\1\u0327\130\0\1\u0328\53\0\1\u0329\65\0\1\u032a\16\0"+
    "\1\u032b\105\0\1\u032c\41\0\1\u032d\60\0\1\u032e\64\0"+
    "\1\u032f\124\0\1\u0330\62\0\1\u0331\63\0\1\u0332\17\0"+
    "\1\u0333\65\0\1\u0334\77\0\1\u0335\76\0\1\u0336\45\0"+
    "\1\u0337\105\0\1\u0338\56\0\1\u0339\41\0\1\u033a\45\0"+
    "\1\u033b\74\0\1\u033c\104\0\1\u033d\26\0\1\u033e\115\0"+
    "\1\u033f\71\0\1\u0340\20\0\1\u0341\115\0\1\u0342\27\0"+
    "\1\u0343\77\0\1\u0344\100\0\1\u0345\62\0\1\u0346\35\0"+
    "\1\u0347\122\0\1\u0348\7\0\1\u0318\2\0\11\u0318\1\u0349"+
    "\1\u0318\1\u0349\44\u0318\4\0\1\u034a\10\0\1\u034a\2\0"+
    "\1\u034a\47\0\1\u034b\117\0\1\u034c\30\0\1\u034d\100\0"+
    "\1\u034e\56\0\1\u034f\100\0\1\u0350\75\0\1\u0351\53\0"+
    "\1\u0352\56\0\1\u0353\27\0\1\u0354\65\0\1\u0355\116\0"+
    "\1\u0356\22\0\1\u0357\10\0\1\u0357\2\0\1\u0357\46\0"+
    "\1\u0358\10\0\1\u0358\2\0\1\u0358\106\0\1\u0359\65\0"+
    "\1\u035a\20\0\1\u035b\62\0\1\u035c\77\0\1\u035d\62\0"+
    "\1\u035e\57\0\1\u035f\112\0\1\u0360\60\0\1\u0361\61\0"+
    "\1\u0362\60\0\1\u0363\25\0\1\u0364\117\0\1\u0365\67\0"+
    "\1\u0366\32\0\1\u0367\104\0\1\u0368\21\0\1\u0318\1\u01a6"+
    "\1\u01a7\11\u0318\1\u0349\1\u0318\1\u0349\44\u0318\53\0\1\u0369"+
    "\14\0\1\u036a\116\0\1\u036b\26\0\1\u036c\101\0\1\u036d"+
    "\41\0\1\u036e\64\0\1\u036f\130\0\1\u0370\56\0\1\u0371"+
    "\55\0\1\u0372\60\0\1\u0373\46\0\1\u0374\43\0\1\u0375"+
    "\101\0\1\u0376\101\0\1\u0377\24\0\1\u0378\130\0\1\u0379"+
    "\17\0\1\u037a\56\0\1\u037b\10\0\1\u037b\2\0\1\u037b"+
    "\52\0\1\u037c\74\0\1\u037d\45\0\1\u037e\115\0\1\u037f"+
    "\50\0\1\u0380\62\0\1\u0381\56\0\1\u0382\113\0\1\u0383"+
    "\14\0\1\u0384\101\0\1\u0385\51\0\1\u0386\66\0\1\u0387"+
    "\104\0\1\u0388\61\0\1\u0389\27\0\1\u038a\60\0\1\u038b"+
    "\63\0\1\u038c\10\0\1\u038c\2\0\1\u038c\42\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[36516];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\11\1\1\1\11\3\1\2\11\3\1\2\11"+
    "\10\1\4\11\14\1\1\11\2\1\1\11\20\1\1\11"+
    "\3\1\2\11\1\1\1\11\1\1\1\11\7\0\1\1"+
    "\35\0\1\11\1\1\13\0\1\1\32\0\1\11\6\0"+
    "\2\11\2\0\4\11\2\0\1\2\3\11\5\0\1\1"+
    "\1\0\4\11\3\0\1\1\15\0\1\11\26\0\1\11"+
    "\71\0\1\1\11\0\1\11\21\0\1\1\1\0\1\1"+
    "\1\0\1\15\5\0\1\2\2\0\1\11\11\0\1\11"+
    "\1\0\1\1\2\0\1\1\1\11\6\0\1\11\2\0"+
    "\1\11\1\0\1\11\2\0\3\11\2\0\2\11\1\0"+
    "\1\11\1\0\1\11\2\0\1\11\1\1\2\0\2\11"+
    "\22\0\1\1\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\2\0\1\11\2\0\2\11\3\0\1\11\12\0\1\1"+
    "\1\11\5\0\1\11\2\0\1\1\1\0\2\11\4\0"+
    "\2\11\6\0\2\1\3\0\1\11\4\0\2\11\2\0"+
    "\1\1\3\0\3\1\1\0\1\5\1\15\1\1\3\0"+
    "\1\11\1\0\1\11\13\0\1\11\13\0\2\11\2\0"+
    "\1\11\2\0\1\1\15\0\1\11\11\0\3\11\3\0"+
    "\1\11\2\0\1\11\3\0\1\11\6\0\1\11\11\0"+
    "\1\11\10\0\4\11\1\0\1\11\3\0\1\11\6\0"+
    "\4\11\1\1\1\11\17\0\1\11\5\0\1\11\1\1"+
    "\3\0\2\11\2\0\1\11\16\0\1\11\4\0\1\11"+
    "\1\1\1\0\1\1\7\0\1\11\10\0\1\11\1\0"+
    "\1\11\7\0\1\11\3\0\1\1\1\11\1\0\4\11"+
    "\1\0\2\11\4\0\1\11\5\0\1\11\7\0\1\11"+
    "\2\0\1\11\1\0\1\11\2\0\1\11\7\0\3\11"+
    "\2\0\1\1\2\0\1\11\7\0\3\11\3\0\1\11"+
    "\2\0\1\11\3\0\2\11\1\1\2\0\1\1\5\0"+
    "\1\11\1\1\7\0\1\11\5\0\1\11\1\1\4\0"+
    "\4\11\2\0\1\11\6\0\1\11\1\0\1\11\1\0"+
    "\1\11\7\0\1\11\1\0\1\11\1\0\2\11\5\0"+
    "\1\11\2\0\1\11\1\0\1\11\2\0\1\11\1\0"+
    "\2\11\3\0\3\11\3\0\1\11\1\0\1\1\2\11"+
    "\4\0\5\11\1\0\3\1\2\0\1\11\4\0\2\11"+
    "\1\0\1\11\1\0\1\11\2\0\2\11\1\0\1\11"+
    "\3\0\1\11\2\0\1\11\1\0\1\11\2\0\2\11"+
    "\1\0\1\1\1\0\2\11\2\0\1\11\1\0\2\11"+
    "\4\0\1\1\1\11\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[908];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	private FixedFormLexerPrepass prepass;
    	
	private TokenFactory tokenFactory;
    
    public FixedFormLexerPhase1(InputStream in, FixedFormLexerPrepass _prepass, TokenFactory tokenFactory) {
		this(new LineAppendingInputStream(in));
		this.prepass=_prepass;
		this.tokenFactory = tokenFactory;
    }
    
    //unset start of line state
    private void unsetSOL() {
    	if (yystate()==YYINITIAL) yybegin(YYSTANDARD); 
    }
    
    public int getLine() {
      return prepass.getLine(yychar);
    }
    public int getCol() {
      return prepass.getColumn(yychar);
    }
    
    protected IFile lastTokenFile = null;
    protected int lastTokenLine = 1, lastTokenCol = 1, lastTokenFileOffset = 0, lastTokenStreamOffset = 0, lastTokenLength = 0;
    
	private IToken token(Terminal terminal)
	{
		lastTokenLine = prepass.getLine(yychar)+1;
		lastTokenCol = prepass.getColumn(yychar)+1;
		lastTokenFileOffset = prepass.getOffset(yychar);
		lastTokenStreamOffset = prepass.getOffset(yychar);
		lastTokenLength = prepass.getOffset(yychar+yylength()-1)-prepass.getOffset(yychar)+1;
		return tokenFactory.createToken(terminal,
		                 "",
		                 terminal == Terminal.T_SCON || terminal == Terminal.T_HCON
		                     ? stringBuffer.toString()
		                     : yytext(),
		                 "");
	}

	/*
	private IToken token(Terminal terminal)
	{
		IToken t = new Token();
		t.setTerminal(terminal);
		t.setFilename(this.filename);
		t.setFileOffset(prepass.getOffset(yychar));
		t.setStreamOffset(prepass.getOffset(yychar));
		t.setLength(prepass.getOffset(yychar+yylength()-1)-prepass.getOffset(yychar)+1);
		t.setText(terminal == Terminal.T_SCON || terminal == Terminal.T_HCON
		          ? stringBuffer.toString()
		          : yytext());
		t.setStartLine(prepass.getLine(yychar)+1);
		t.setStartCol(prepass.getColumn(yychar)+1);
		t.setEndLine(prepass.getLine(yychar+yylength()-1)+1);
		t.setEndCol(prepass.getColumn(yychar+yylength()-1)+1);

		return t;
	}
	*/

	private StringBuffer stringBuffer = null;
	private int hollerithLength = 0;

	private boolean wantEos = false;
	
	private String filename = "<stdin>";
    
	public FixedFormLexerPhase1(java.io.InputStream in, FixedFormLexerPrepass _prepass, String filename, TokenFactory tokenFactory)
	{
	    this(in, _prepass, tokenFactory);
	    this.filename = filename;
	}
	
    public String getFilename()
    {
        return filename;
    }
    
    public TokenFactory getTokenFactory()
    {
    	return tokenFactory;
    }

    public int getLastTokenLine()
    {
        return lastTokenLine;
    }

    public int getLastTokenCol()
    {
        return lastTokenCol;
    }
    
    public IFile getLastTokenFile()
    {
        return lastTokenFile;
    }
    
    public int getLastTokenFileOffset()
    {
        return lastTokenFileOffset;
    }
    
    public int getLastTokenStreamOffset()
    {
        return lastTokenStreamOffset;
    }
    
    public int getLastTokenLength()
    {
        return lastTokenLength;
    }

//	private List/*<NonTreeToken>*/ nonTreeTokens = new LinkedList();
//    public List/*<NonTreeToken>*/ getNonTreeTokens()
//    {
//    	return nonTreeTokens;
//    }
//
	private void storeNonTreeToken()
	{
//		nonTreeTokens.add(new NonTreeToken(this.filename,
//				prepass.getOffset(yychar),   // int offset
//				prepass.getLine(yychar)+1,   // int row
//				prepass.getColumn(yychar)+1, // int col
//		        yytext()));
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  FixedFormLexerPhase1(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  FixedFormLexerPhase1(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 182) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IToken yylex() throws java.io.IOException, Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;
    int zzPushbackPosL = zzPushbackPos = -1;
    boolean zzWasPushback;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;

      zzWasPushback = false;

      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            zzPushbackPos = zzPushbackPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            zzPushbackPosL = zzPushbackPos;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 2) == 2 )
            zzPushbackPosL = zzCurrentPosL;

          if ( (zzAttributes & 1) == 1 ) {
            zzWasPushback = (zzAttributes & 4) == 4;
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;
      if (zzWasPushback)
        zzMarkedPos = zzPushbackPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 47: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_END);
          }
        case 218: break;
        case 143: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_EXTENDS);
          }
        case 219: break;
        case 103: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FORMEQ);
          }
        case 220: break;
        case 188: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_BLOCKDATA);
          }
        case 221: break;
        case 74: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SAVE);
          }
        case 222: break;
        case 104: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_FINAL);
          }
        case 223: break;
        case 157: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_POINTER);
          }
        case 224: break;
        case 217: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_NON_OVERRIDABLE);
          }
        case 225: break;
        case 20: 
          { throw new Exception("Lexer Error (line " + (getLine()+1) + ", col " + (getCol()+1) + "): String literal spans multiple lines without continuation");
          }
        case 226: break;
        case 90: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_THEN);
          }
        case 227: break;
        case 115: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_READEQ);
          }
        case 228: break;
        case 80: 
          { storeNonTreeToken();
          }
        case 229: break;
        case 147: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DIRECTEQ);
          }
        case 230: break;
        case 81: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NONE);
          }
        case 231: break;
        case 191: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_INTRINSIC);
          }
        case 232: break;
        case 57: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ERREQ);
          }
        case 233: break;
        case 51: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_USE);
          }
        case 234: break;
        case 99: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_AND);
          }
        case 235: break;
        case 133: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PUBLIC);
          }
        case 236: break;
        case 10: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_LPAREN);
          }
        case 237: break;
        case 22: 
          { stringBuffer.append('\"');
								  yybegin(YYSTANDARD);
								  wantEos = true;
								  return token(Terminal.T_SCON);
          }
        case 238: break;
        case 24: 
          { throw new Exception("Lexer Error (line " + (getLine()+1) + ", col " + (getCol()+1) + "): Hollerith literal spans multiple lines without continuation");
          }
        case 239: break;
        case 163: 
          { wantEos = true; unsetSOL();          ; return token(Terminal.T_COMPLEX);
          }
        case 240: break;
        case 146: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DEFAULT);
          }
        case 241: break;
        case 42: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_RCON);
          }
        case 242: break;
        case 211: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDBLOCKDATA);
          }
        case 243: break;
        case 23: 
          { hollerithLength--;
									stringBuffer.append(yytext());
									if (hollerithLength==0) {
									  	yybegin(YYSTANDARD);
									  	wantEos = true;
									  	return token(Terminal.T_HCON);
									 }
          }
        case 244: break;
        case 28: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DO);
          }
        case 245: break;
        case 117: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_VALUE);
          }
        case 246: break;
        case 55: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_ENUM);
          }
        case 247: break;
        case 101: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_BLOCK);
          }
        case 248: break;
        case 18: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_SLASH);
          }
        case 249: break;
        case 78: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_PASS);
          }
        case 250: break;
        case 129: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_INTENT);
          }
        case 251: break;
        case 92: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_KIND);
          }
        case 252: break;
        case 3: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_ASTERISK);
          }
        case 253: break;
        case 168: 
          { wantEos = true; yybegin(OPERATORorFORMAT);  return token(Terminal.T_OPERATOR);
          }
        case 254: break;
        case 151: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ACTIONEQ);
          }
        case 255: break;
        case 86: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CALL);
          }
        case 256: break;
        case 174: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FUNCTION);
          }
        case 257: break;
        case 189: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_IOLENGTHEQ);
          }
        case 258: break;
        case 8: 
          { stringBuffer = new StringBuffer();
								  stringBuffer.append('\"');
								  yybegin(DBLQUOTED);
          }
        case 259: break;
        case 11: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_COMMA);
          }
        case 260: break;
        case 61: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_GE);
          }
        case 261: break;
        case 134: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_NOPASS);
          }
        case 262: break;
        case 179: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CONTINUE);
          }
        case 263: break;
        case 17: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PERCENT);
          }
        case 264: break;
        case 46: 
          { stringBuffer.append('\"');
          }
        case 265: break;
        case 84: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_LENEQ);
          }
        case 266: break;
        case 4: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_ICON);
          }
        case 267: break;
        case 197: 
          { wantEos = true; unsetSOL();          ; return token(Terminal.T_CHARACTER);
          }
        case 268: break;
        case 97: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENTRY);
          }
        case 269: break;
        case 207: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDFUNCTION);
          }
        case 270: break;
        case 156: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_GENERIC);
          }
        case 271: break;
        case 73: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FMTEQ);
          }
        case 272: break;
        case 162: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_LOGICAL);
          }
        case 273: break;
        case 5: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_PLUS);
          }
        case 274: break;
        case 173: 
          { wantEos = true; yybegin(IMPLICIT); return token(Terminal.T_IMPLICIT);
          }
        case 275: break;
        case 85: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CASE);
          }
        case 276: break;
        case 72: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FILE);
          }
        case 277: break;
        case 37: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_SLASHEQ);
          }
        case 278: break;
        case 124: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DELIMEQ);
          }
        case 279: break;
        case 64: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_LE);
          }
        case 280: break;
        case 159: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PRIVATE);
          }
        case 281: break;
        case 45: 
          { stringBuffer.append('\'');
          }
        case 282: break;
        case 120: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_WHILE);
          }
        case 283: break;
        case 60: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_OR);
          }
        case 284: break;
        case 185: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ELSEWHERE);
          }
        case 285: break;
        case 25: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_UNEXPECTED_CHARACTER);
          }
        case 286: break;
        case 126: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_NEQV);
          }
        case 287: break;
        case 125: 
          { wantEos = true; unsetSOL();          ; return token(Terminal.T_DOUBLE);
          }
        case 288: break;
        case 116: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_RECLEQ);
          }
        case 289: break;
        case 158: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PROGRAM);
          }
        case 290: break;
        case 38: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_SLASHSLASH);
          }
        case 291: break;
        case 153: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_INTEGER);
          }
        case 292: break;
        case 114: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_UNITEQ);
          }
        case 293: break;
        case 83: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NMLEQ);
          }
        case 294: break;
        case 13: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_EQUALS);
          }
        case 295: break;
        case 193: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PARAMETER);
          }
        case 296: break;
        case 199: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDPROGRAM);
          }
        case 297: break;
        case 206: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_READWRITEEQ);
          }
        case 298: break;
        case 149: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_OPENEDEQ);
          }
        case 299: break;
        case 27: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_POW);
          }
        case 300: break;
        case 106: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SIZEEQ);
          }
        case 301: break;
        case 66: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_BCON);
          }
        case 302: break;
        case 183: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDMODULE);
          }
        case 303: break;
        case 182: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDSELECT);
          }
        case 304: break;
        case 39: 
          { stringBuffer = new StringBuffer();
								  String text = yytext();
								  stringBuffer.append(text);								  
								  hollerithLength=Integer.parseInt(text.substring(0,text.length()-1));
								  if (hollerithLength==0) throw new Exception("Lexer Error (line " + (getLine()+1) + ", col " + (getCol()+1) + "): Invalid length of hollerith literal: 0"); 
								  yybegin(HOLLERITH);
          }
        case 305: break;
        case 16: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_LESSTHAN);
          }
        case 306: break;
        case 176: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NEXTRECEQ);
          }
        case 307: break;
        case 172: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ALLOCATE);
          }
        case 308: break;
        case 77: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PADEQ);
          }
        case 309: break;
        case 160: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NULLIFY);
          }
        case 310: break;
        case 2: 
          { yybegin(YYINITIAL); boolean b = wantEos; wantEos = false; if (b) return token(Terminal.T_EOS); else storeNonTreeToken();
          }
        case 311: break;
        case 98: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_EQV);
          }
        case 312: break;
        case 145: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDTYPE);
          }
        case 313: break;
        case 169: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_OPTIONAL);
          }
        case 314: break;
        case 175: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SEQUENCE);
          }
        case 315: break;
        case 96: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDIF);
          }
        case 316: break;
        case 76: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_GOTO);
          }
        case 317: break;
        case 50: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_LEN);
          }
        case 318: break;
        case 144: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDFILE);
          }
        case 319: break;
        case 130: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FORALL);
          }
        case 320: break;
        case 53: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_EXIT);
          }
        case 321: break;
        case 203: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FORMATTEDEQ);
          }
        case 322: break;
        case 100: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_NOT);
          }
        case 323: break;
        case 52: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DCON);
          }
        case 324: break;
        case 194: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_PRECISION);
          }
        case 325: break;
        case 69: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_OPEN);
          }
        case 326: break;
        case 107: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_STATEQ);
          }
        case 327: break;
        case 26: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_IDENT);
          }
        case 328: break;
        case 138: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_RETURN);
          }
        case 329: break;
        case 171: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_ABSTRACT);
          }
        case 330: break;
        case 36: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_LESSTHANEQ);
          }
        case 331: break;
        case 204: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SELECTCASE);
          }
        case 332: break;
        case 202: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ASSIGNMENT);
          }
        case 333: break;
        case 33: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_EQEQ);
          }
        case 334: break;
        case 62: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_GT);
          }
        case 335: break;
        case 75: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_STOP);
          }
        case 336: break;
        case 142: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_WRITEEQ);
          }
        case 337: break;
        case 131: 
          { wantEos = true; yybegin(OPERATORorFORMAT); return token(Terminal.T_FORMAT);
          }
        case 338: break;
        case 49: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_OUT);
          }
        case 339: break;
        case 136: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_COMMON);
          }
        case 340: break;
        case 111: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CLOSE);
          }
        case 341: break;
        case 32: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_TO);
          }
        case 342: break;
        case 155: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_STATUSEQ);
          }
        case 343: break;
        case 40: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PCON);
          }
        case 344: break;
        case 19: 
          { stringBuffer.append( yytext() );
          }
        case 345: break;
        case 166: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDWHERE);
          }
        case 346: break;
        case 9: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_UNDERSCORE);
          }
        case 347: break;
        case 87: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_READ);
          }
        case 348: break;
        case 121: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_WRITE);
          }
        case 349: break;
        case 71: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_ZCON);
          }
        case 350: break;
        case 209: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ALLOCATABLE);
          }
        case 351: break;
        case 6: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_MINUS);
          }
        case 352: break;
        case 184: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ELEMENTAL);
          }
        case 353: break;
        case 205: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SUBROUTINE);
          }
        case 354: break;
        case 187: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_BACKSPACE);
          }
        case 355: break;
        case 35: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_GREATERTHANEQ);
          }
        case 356: break;
        case 65: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_LT);
          }
        case 357: break;
        case 59: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_EQ);
          }
        case 358: break;
        case 91: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_TYPE);
          }
        case 359: break;
        case 154: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_INQUIRE);
          }
        case 360: break;
        case 190: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_INTERFACE);
          }
        case 361: break;
        case 56: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ELSE);
          }
        case 362: break;
        case 41: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_XCON);
          }
        case 363: break;
        case 161: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NUMBEREQ);
          }
        case 364: break;
        case 118: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_KINDEQ);
          }
        case 365: break;
        case 214: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_UNFORMATTEDEQ);
          }
        case 366: break;
        case 89: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_RECEQ);
          }
        case 367: break;
        case 186: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DIMENSION);
          }
        case 368: break;
        case 63: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_NE);
          }
        case 369: break;
        case 43: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_LPARENSLASH);
          }
        case 370: break;
        case 216: 
          { wantEos = true; unsetSOL();          ; return token(Terminal.T_DOUBLEPRECISION);
          }
        case 371: break;
        case 30: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_IN);
          }
        case 372: break;
        case 127: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_TRUE);
          }
        case 373: break;
        case 119: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_WHERE);
          }
        case 374: break;
        case 150: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ACCESSEQ);
          }
        case 375: break;
        case 192: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_POSITIONEQ);
          }
        case 376: break;
        case 21: 
          { stringBuffer.append('\'');
								  yybegin(YYSTANDARD);
								  wantEos = true;
								  return token(Terminal.T_SCON);
          }
        case 377: break;
        case 212: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDINTERFACE);
          }
        case 378: break;
        case 14: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_COLON);
          }
        case 379: break;
        case 79: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PURE);
          }
        case 380: break;
        case 195: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PROCEDURE);
          }
        case 381: break;
        case 7: 
          { stringBuffer = new StringBuffer();
								  stringBuffer.append('\'');
								  yybegin(QUOTED);
          }
        case 382: break;
        case 58: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DATA);
          }
        case 383: break;
        case 141: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_TARGET);
          }
        case 384: break;
        case 31: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_GO);
          }
        case 385: break;
        case 68: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_OCON);
          }
        case 386: break;
        case 123: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ELSEIF);
          }
        case 387: break;
        case 110: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NAMEEQ);
          }
        case 388: break;
        case 200: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_ENUMERATOR);
          }
        case 389: break;
        case 108: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PAUSE);
          }
        case 390: break;
        case 29: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_IF);
          }
        case 391: break;
        case 95: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDDO);
          }
        case 392: break;
        case 102: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_INOUT);
          }
        case 393: break;
        case 48: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_XDOP);
          }
        case 394: break;
        case 82: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_NULL);
          }
        case 395: break;
        case 113: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CYCLE);
          }
        case 396: break;
        case 128: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_BLANKEQ);
          }
        case 397: break;
        case 67: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_BIND);
          }
        case 398: break;
        case 109: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PRINT);
          }
        case 399: break;
        case 201: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DEALLOCATE);
          }
        case 400: break;
        case 177: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NAMELIST);
          }
        case 401: break;
        case 112: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_CLASS);
          }
        case 402: break;
        case 135: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NAMEDEQ);
          }
        case 403: break;
        case 44: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SLASHRPAREN);
          }
        case 404: break;
        case 1: 
          { yypushback(1); 
									int state=yystate();
									yybegin(IDENT);
									IToken token = yylex();
									yybegin(state);
									return token;
          }
        case 405: break;
        case 164: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_EXTERNAL);
          }
        case 406: break;
        case 12: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_RPAREN);
          }
        case 407: break;
        case 178: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CONTAINS);
          }
        case 408: break;
        case 139: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_REWIND);
          }
        case 409: break;
        case 137: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_RESULT);
          }
        case 410: break;
        case 105: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FILEEQ);
          }
        case 411: break;
        case 210: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SEQUENTIALEQ);
          }
        case 412: break;
        case 198: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_RECURSIVE);
          }
        case 413: break;
        case 215: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDSUBROUTINE);
          }
        case 414: break;
        case 34: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_EQGREATERTHAN);
          }
        case 415: break;
        case 208: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_EQUIVALENCE);
          }
        case 416: break;
        case 132: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SELECT);
          }
        case 417: break;
        case 140: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_MODULE);
          }
        case 418: break;
        case 181: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDFORALL);
          }
        case 419: break;
        case 94: 
          { wantEos = true;                     return token(Terminal.T_X_IMPL);
          }
        case 420: break;
        case 213: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_ASYNCHRONOUS);
          }
        case 421: break;
        case 167: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_DEFERRED);
          }
        case 422: break;
        case 88: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_REAL);
          }
        case 423: break;
        case 148: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_FALSE);
          }
        case 424: break;
        case 180: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_VOLATILE);
          }
        case 425: break;
        case 196: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_PROTECTED);
          }
        case 426: break;
        case 70: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ONLY);
          }
        case 427: break;
        case 54: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDEQ);
          }
        case 428: break;
        case 15: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_GREATERTHAN);
          }
        case 429: break;
        case 152: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_IOSTATEQ);
          }
        case 430: break;
        case 170: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ADVANCEEQ);
          }
        case 431: break;
        case 165: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDBLOCK);
          }
        case 432: break;
        case 93: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FCON);
          }
        case 433: break;
        case 122: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_EXISTEQ);
          }
        case 434: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case OPERATORorFORMAT: {
              wantEos = false; yybegin(YYSTANDARD); return token(Terminal.END_OF_INPUT);
            }
            case 909: break;
            case DBLQUOTED: {
              throw new Exception("Lexer Error (line " + (getLine()+1) + ", col " + (getCol()+1) + "): End of file encountered before string literal terminated");
            }
            case 910: break;
            case QUOTED: {
              throw new Exception("Lexer Error (line " + (getLine()+1) + ", col " + (getCol()+1) + "): End of file encountered before string literal terminated");
            }
            case 911: break;
            case YYINITIAL: {
              wantEos = false; yybegin(YYSTANDARD); return token(Terminal.END_OF_INPUT);
            }
            case 912: break;
            case HOLLERITH: {
              throw new Exception("Lexer Error (line " + (getLine()+1) + ", col " + (getCol()+1) + "): End of file encountered before hollerith literal terminated");
            }
            case 913: break;
            case YYSTANDARD: {
              wantEos = false; yybegin(YYSTANDARD); return token(Terminal.END_OF_INPUT);
            }
            case 914: break;
            case IMPLICIT: {
              wantEos = false; yybegin(YYSTANDARD); return token(Terminal.END_OF_INPUT);
            }
            case 915: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
