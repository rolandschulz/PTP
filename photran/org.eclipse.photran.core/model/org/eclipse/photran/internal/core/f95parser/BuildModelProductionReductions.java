// Generated by Rex version 1.0 alpha 4

package org.eclipse.photran.internal.core.f95parser;

import java.util.LinkedList;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.Iterator;
import org.eclipse.photran.internal.core.model.FortranElement;
import org.eclipse.cdt.core.model.CModelException;


/**
 * Represents the parsing state corresponding to
 */
public class BuildModelProductionReductions implements AbstractProductionReductions
{
    private BuildModelProductionReductions() {;} // Singleton
    private static BuildModelProductionReductions singletonInstance = null;
    public static final BuildModelProductionReductions getInstance() { if (singletonInstance == null) singletonInstance = new BuildModelProductionReductions(); return singletonInstance; }

    /**
     * Contains the user code that should be run upon a each reduction
     */
    private final BuildModelParserAction userActions = BuildModelParserAction.getInstance();

    /**
     * Reduce by <xExecutableProgram> ::= <xProgramUnit>  ;
     */
    public void reduceByProduction1(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xExecutableProgram> ::= <xProgramUnit>  ;
        FortranElement v1 = (FortranElement)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Map/*<FortranElement, FortranElementInfo>*/ userValue = userActions.production1UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XexecutableprogramNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xExecutableProgram> ::= <xExecutableProgram> <xProgramUnit>  ;
     */
    public void reduceByProduction2(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xExecutableProgram> ::= <xExecutableProgram> <xProgramUnit>  ;
        FortranElement v2 = (FortranElement)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Map/*<FortranElement, FortranElementInfo>*/ v1 = (Map/*<FortranElement, FortranElementInfo>*/)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Map/*<FortranElement, FortranElementInfo>*/ userValue = userActions.production2UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XexecutableprogramNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xProgramUnit> ::= <xMainProgram>  ;
     */
    public void reduceByProduction3(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xProgramUnit> ::= <xMainProgram>  ;
        FortranElement v1 = (FortranElement)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        FortranElement userValue = userActions.production3UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XprogramunitNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xProgramUnit> ::= <xFunctionSubprogram>  ;
     */
    public void reduceByProduction4(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xProgramUnit> ::= <xFunctionSubprogram>  ;
        FortranElement v1 = (FortranElement)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        FortranElement userValue = userActions.production4UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XprogramunitNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xProgramUnit> ::= <xSubroutineSubprogram>  ;
     */
    public void reduceByProduction5(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xProgramUnit> ::= <xSubroutineSubprogram>  ;
        FortranElement v1 = (FortranElement)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        FortranElement userValue = userActions.production5UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XprogramunitNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xProgramUnit> ::= <xModule>  ;
     */
    public void reduceByProduction6(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xProgramUnit> ::= <xModule>  ;
        FortranElement v1 = (FortranElement)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        FortranElement userValue = userActions.production6UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XprogramunitNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xProgramUnit> ::= <xBlockDataSubprogram>  ;
     */
    public void reduceByProduction7(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xProgramUnit> ::= <xBlockDataSubprogram>  ;
        FortranElement v1 = (FortranElement)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        FortranElement userValue = userActions.production7UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XprogramunitNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xMainProgram> ::= <xMainRange>  ;
     */
    public void reduceByProduction8(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xMainProgram> ::= <xMainRange>  ;
        List/*<FortranElement>*/ v1 = (List/*<FortranElement>*/)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        FortranElement userValue = userActions.production8UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XmainprogramNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xMainProgram> ::= <xProgramStmt> <xMainRange>  ;
     */
    public void reduceByProduction9(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xMainProgram> ::= <xProgramStmt> <xMainRange>  ;
        List/*<FortranElement>*/ v2 = (List/*<FortranElement>*/)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        FortranElement userValue = userActions.production9UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XmainprogramNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xMainRange> ::= <xBody> <xEndProgramStmt>  ;
     */
    public void reduceByProduction10(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xMainRange> ::= <xBody> <xEndProgramStmt>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        List/*<FortranElement>*/ userValue = userActions.production10UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XmainrangeNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xMainRange> ::= <xBodyPlusInternals> <xEndProgramStmt>  ;
     */
    public void reduceByProduction11(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xMainRange> ::= <xBodyPlusInternals> <xEndProgramStmt>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        List/*<FortranElement>*/ v1 = (List/*<FortranElement>*/)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        List/*<FortranElement>*/ userValue = userActions.production11UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XmainrangeNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xMainRange> ::= <xEndProgramStmt>  ;
     */
    public void reduceByProduction12(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xMainRange> ::= <xEndProgramStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        List/*<FortranElement>*/ userValue = userActions.production12UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XmainrangeNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xBody> ::= <xBodyConstruct>  ;
     */
    public void reduceByProduction13(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xBody> ::= <xBodyConstruct>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production13UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XbodyNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xBody> ::= <xBody> <xBodyConstruct>  ;
     */
    public void reduceByProduction14(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xBody> ::= <xBody> <xBodyConstruct>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production14UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XbodyNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xBodyConstruct> ::= <xSpecificationPartConstruct>  ;
     */
    public void reduceByProduction15(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xBodyConstruct> ::= <xSpecificationPartConstruct>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production15UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XbodyconstructNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xBodyConstruct> ::= <xExecutableConstruct>  ;
     */
    public void reduceByProduction16(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xBodyConstruct> ::= <xExecutableConstruct>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production16UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XbodyconstructNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xFunctionSubprogram> ::= <xFunctionStmt> <xFunctionRange>  ;
     */
    public void reduceByProduction17(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFunctionSubprogram> ::= <xFunctionStmt> <xFunctionRange>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        FortranElement userValue = userActions.production17UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XfunctionsubprogramNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xFunctionRange> ::= <xBody> <xEndFunctionStmt>  ;
     */
    public void reduceByProduction18(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFunctionRange> ::= <xBody> <xEndFunctionStmt>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production18UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XfunctionrangeNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xFunctionRange> ::= <xEndFunctionStmt>  ;
     */
    public void reduceByProduction19(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFunctionRange> ::= <xEndFunctionStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production19UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XfunctionrangeNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xFunctionRange> ::= <xBodyPlusInternals> <xEndFunctionStmt>  ;
     */
    public void reduceByProduction20(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFunctionRange> ::= <xBodyPlusInternals> <xEndFunctionStmt>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        List/*<FortranElement>*/ v1 = (List/*<FortranElement>*/)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production20UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XfunctionrangeNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xSubroutineSubprogram> ::= <xSubroutineStmt> <xSubroutineRange>  ;
     */
    public void reduceByProduction21(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSubroutineSubprogram> ::= <xSubroutineStmt> <xSubroutineRange>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        FortranElement userValue = userActions.production21UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XsubroutinesubprogramNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xSubroutineRange> ::= <xBody> <xEndSubroutineStmt>  ;
     */
    public void reduceByProduction22(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSubroutineRange> ::= <xBody> <xEndSubroutineStmt>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production22UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XsubroutinerangeNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xSubroutineRange> ::= <xEndSubroutineStmt>  ;
     */
    public void reduceByProduction23(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSubroutineRange> ::= <xEndSubroutineStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production23UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XsubroutinerangeNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSubroutineRange> ::= <xBodyPlusInternals> <xEndSubroutineStmt>  ;
     */
    public void reduceByProduction24(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSubroutineRange> ::= <xBodyPlusInternals> <xEndSubroutineStmt>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        List/*<FortranElement>*/ v1 = (List/*<FortranElement>*/)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production24UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XsubroutinerangeNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xModule> ::= <xModuleStmt> <xModuleBlock>  ;
     */
    public void reduceByProduction25(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xModule> ::= <xModuleStmt> <xModuleBlock>  ;
        List/*<FortranElement>*/ v2 = (List/*<FortranElement>*/)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        FortranElement userValue = userActions.production25UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XmoduleNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xModuleBlock> ::= <xModuleBody> <xEndModuleStmt>  ;
     */
    public void reduceByProduction26(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xModuleBlock> ::= <xModuleBody> <xEndModuleStmt>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        List/*<FortranElement>*/ v1 = (List/*<FortranElement>*/)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        List/*<FortranElement>*/ userValue = userActions.production26UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XmoduleblockNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xModuleBlock> ::= <xEndModuleStmt>  ;
     */
    public void reduceByProduction27(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xModuleBlock> ::= <xEndModuleStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        List/*<FortranElement>*/ userValue = userActions.production27UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XmoduleblockNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xModuleBody> ::= <xSpecificationPartConstruct>  ;
     */
    public void reduceByProduction28(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xModuleBody> ::= <xSpecificationPartConstruct>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        List/*<FortranElement>*/ userValue = userActions.production28UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XmodulebodyNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xModuleBody> ::= <xModuleBody> <xSpecificationPartConstruct>  ;
     */
    public void reduceByProduction29(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xModuleBody> ::= <xModuleBody> <xSpecificationPartConstruct>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        List/*<FortranElement>*/ v1 = (List/*<FortranElement>*/)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        List/*<FortranElement>*/ userValue = userActions.production29UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XmodulebodyNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xModuleBody> ::= <xModuleSubprogramPartConstruct>  ;
     */
    public void reduceByProduction30(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xModuleBody> ::= <xModuleSubprogramPartConstruct>  ;
        FortranElement v1 = (FortranElement)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        List/*<FortranElement>*/ userValue = userActions.production30UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XmodulebodyNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xModuleBody> ::= <xModuleBody> <xModuleSubprogramPartConstruct>  ;
     */
    public void reduceByProduction31(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xModuleBody> ::= <xModuleBody> <xModuleSubprogramPartConstruct>  ;
        FortranElement v2 = (FortranElement)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        List/*<FortranElement>*/ v1 = (List/*<FortranElement>*/)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        List/*<FortranElement>*/ userValue = userActions.production31UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XmodulebodyNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xBlockDataSubprogram> ::= <xBlockDataStmt> <xBlockDataBody> <xEndBlockDataStmt>  ;
     */
    public void reduceByProduction32(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xBlockDataSubprogram> ::= <xBlockDataStmt> <xBlockDataBody> <xEndBlockDataStmt>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        FortranElement userValue = userActions.production32UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XblockdatasubprogramNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xBlockDataSubprogram> ::= <xBlockDataStmt> <xEndBlockDataStmt>  ;
     */
    public void reduceByProduction33(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xBlockDataSubprogram> ::= <xBlockDataStmt> <xEndBlockDataStmt>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        FortranElement userValue = userActions.production33UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XblockdatasubprogramNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xBlockDataBody> ::= <xBlockDataBodyConstruct>  ;
     */
    public void reduceByProduction34(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xBlockDataBody> ::= <xBlockDataBodyConstruct>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production34UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XblockdatabodyNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xBlockDataBody> ::= <xBlockDataBody> <xBlockDataBodyConstruct>  ;
     */
    public void reduceByProduction35(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xBlockDataBody> ::= <xBlockDataBody> <xBlockDataBodyConstruct>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production35UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XblockdatabodyNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xBlockDataBodyConstruct> ::= <xSpecificationPartConstruct>  ;
     */
    public void reduceByProduction36(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xBlockDataBodyConstruct> ::= <xSpecificationPartConstruct>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production36UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XblockdatabodyconstructNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSpecificationPartConstruct> ::= <xUseStmt>  ;
     */
    public void reduceByProduction37(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSpecificationPartConstruct> ::= <xUseStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production37UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XspecificationpartconstructNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSpecificationPartConstruct> ::= <T_xImplicitStmt>  ;
     */
    public void reduceByProduction38(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSpecificationPartConstruct> ::= <T_xImplicitStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production38UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XspecificationpartconstructNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSpecificationPartConstruct> ::= <xParameterStmt>  ;
     */
    public void reduceByProduction39(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSpecificationPartConstruct> ::= <xParameterStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production39UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XspecificationpartconstructNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSpecificationPartConstruct> ::= <xFormatStmt>  ;
     */
    public void reduceByProduction40(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSpecificationPartConstruct> ::= <xFormatStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production40UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XspecificationpartconstructNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSpecificationPartConstruct> ::= <xEntryStmt>  ;
     */
    public void reduceByProduction41(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSpecificationPartConstruct> ::= <xEntryStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production41UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XspecificationpartconstructNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSpecificationPartConstruct> ::= <xDeclarationConstruct>  ;
     */
    public void reduceByProduction42(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSpecificationPartConstruct> ::= <xDeclarationConstruct>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production42UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XspecificationpartconstructNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xDeclarationConstruct> ::= <xDerivedTypeDef>  ;
     */
    public void reduceByProduction43(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDeclarationConstruct> ::= <xDerivedTypeDef>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production43UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XdeclarationconstructNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xDeclarationConstruct> ::= <xInterfaceBlock>  ;
     */
    public void reduceByProduction44(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDeclarationConstruct> ::= <xInterfaceBlock>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production44UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XdeclarationconstructNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xDeclarationConstruct> ::= <xTypeDeclarationStmt>  ;
     */
    public void reduceByProduction45(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDeclarationConstruct> ::= <xTypeDeclarationStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production45UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XdeclarationconstructNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xDeclarationConstruct> ::= <xSpecificationStmt>  ;
     */
    public void reduceByProduction46(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDeclarationConstruct> ::= <xSpecificationStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production46UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XdeclarationconstructNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xExecutionPartConstruct> ::= <xObsoleteExecutionPartConstruct>  ;
     */
    public void reduceByProduction47(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xExecutionPartConstruct> ::= <xObsoleteExecutionPartConstruct>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production47UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XexecutionpartconstructNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xExecutionPartConstruct> ::= <xExecutableConstruct>  ;
     */
    public void reduceByProduction48(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xExecutionPartConstruct> ::= <xExecutableConstruct>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production48UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XexecutionpartconstructNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xExecutionPartConstruct> ::= <xFormatStmt>  ;
     */
    public void reduceByProduction49(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xExecutionPartConstruct> ::= <xFormatStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production49UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XexecutionpartconstructNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xExecutionPartConstruct> ::= <xEntryStmt>  ;
     */
    public void reduceByProduction50(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xExecutionPartConstruct> ::= <xEntryStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production50UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XexecutionpartconstructNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xObsoleteExecutionPartConstruct> ::= <xDataStmt>  ;
     */
    public void reduceByProduction51(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xObsoleteExecutionPartConstruct> ::= <xDataStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production51UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XobsoleteexecutionpartconstructNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xBodyPlusInternals> ::= <xBody> <xContainsStmt> <xInternalSubprogram>  ;
     */
    public void reduceByProduction52(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xBodyPlusInternals> ::= <xBody> <xContainsStmt> <xInternalSubprogram>  ;
        FortranElement v3 = (FortranElement)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        List/*<FortranElement>*/ userValue = userActions.production52UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XbodyplusinternalsNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xBodyPlusInternals> ::= <xContainsStmt> <xInternalSubprogram>  ;
     */
    public void reduceByProduction53(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xBodyPlusInternals> ::= <xContainsStmt> <xInternalSubprogram>  ;
        FortranElement v2 = (FortranElement)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        List/*<FortranElement>*/ userValue = userActions.production53UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XbodyplusinternalsNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xBodyPlusInternals> ::= <xBodyPlusInternals> <xInternalSubprogram>  ;
     */
    public void reduceByProduction54(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xBodyPlusInternals> ::= <xBodyPlusInternals> <xInternalSubprogram>  ;
        FortranElement v2 = (FortranElement)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        List/*<FortranElement>*/ v1 = (List/*<FortranElement>*/)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        List/*<FortranElement>*/ userValue = userActions.production54UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XbodyplusinternalsNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xInternalSubprogram> ::= <xFunctionSubprogram>  ;
     */
    public void reduceByProduction55(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInternalSubprogram> ::= <xFunctionSubprogram>  ;
        FortranElement v1 = (FortranElement)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        FortranElement userValue = userActions.production55UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XinternalsubprogramNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xInternalSubprogram> ::= <xSubroutineSubprogram>  ;
     */
    public void reduceByProduction56(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInternalSubprogram> ::= <xSubroutineSubprogram>  ;
        FortranElement v1 = (FortranElement)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        FortranElement userValue = userActions.production56UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XinternalsubprogramNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xModuleSubprogramPartConstruct> ::= <xContainsStmt>  ;
     */
    public void reduceByProduction57(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xModuleSubprogramPartConstruct> ::= <xContainsStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        FortranElement userValue = userActions.production57UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XmodulesubprogrampartconstructNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xModuleSubprogramPartConstruct> ::= <xModuleSubprogram>  ;
     */
    public void reduceByProduction58(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xModuleSubprogramPartConstruct> ::= <xModuleSubprogram>  ;
        FortranElement v1 = (FortranElement)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        FortranElement userValue = userActions.production58UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XmodulesubprogrampartconstructNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xModuleSubprogram> ::= <xFunctionSubprogram>  ;
     */
    public void reduceByProduction59(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xModuleSubprogram> ::= <xFunctionSubprogram>  ;
        FortranElement v1 = (FortranElement)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        FortranElement userValue = userActions.production59UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XmodulesubprogramNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xModuleSubprogram> ::= <xSubroutineSubprogram>  ;
     */
    public void reduceByProduction60(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xModuleSubprogram> ::= <xSubroutineSubprogram>  ;
        FortranElement v1 = (FortranElement)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        FortranElement userValue = userActions.production60UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XmodulesubprogramNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSpecificationStmt> ::= <xAccessStmt>  ;
     */
    public void reduceByProduction61(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSpecificationStmt> ::= <xAccessStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production61UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XspecificationstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSpecificationStmt> ::= <xAllocatableStmt>  ;
     */
    public void reduceByProduction62(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSpecificationStmt> ::= <xAllocatableStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production62UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XspecificationstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSpecificationStmt> ::= <xCommonStmt>  ;
     */
    public void reduceByProduction63(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSpecificationStmt> ::= <xCommonStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production63UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XspecificationstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSpecificationStmt> ::= <xDataStmt>  ;
     */
    public void reduceByProduction64(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSpecificationStmt> ::= <xDataStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production64UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XspecificationstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSpecificationStmt> ::= <xDimensionStmt>  ;
     */
    public void reduceByProduction65(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSpecificationStmt> ::= <xDimensionStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production65UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XspecificationstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSpecificationStmt> ::= <xEquivalenceStmt>  ;
     */
    public void reduceByProduction66(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSpecificationStmt> ::= <xEquivalenceStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production66UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XspecificationstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSpecificationStmt> ::= <xExternalStmt>  ;
     */
    public void reduceByProduction67(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSpecificationStmt> ::= <xExternalStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production67UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XspecificationstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSpecificationStmt> ::= <xIntentStmt>  ;
     */
    public void reduceByProduction68(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSpecificationStmt> ::= <xIntentStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production68UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XspecificationstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSpecificationStmt> ::= <xIntrinsicStmt>  ;
     */
    public void reduceByProduction69(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSpecificationStmt> ::= <xIntrinsicStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production69UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XspecificationstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSpecificationStmt> ::= <xNamelistStmt>  ;
     */
    public void reduceByProduction70(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSpecificationStmt> ::= <xNamelistStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production70UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XspecificationstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSpecificationStmt> ::= <xOptionalStmt>  ;
     */
    public void reduceByProduction71(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSpecificationStmt> ::= <xOptionalStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production71UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XspecificationstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSpecificationStmt> ::= <xPointerStmt>  ;
     */
    public void reduceByProduction72(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSpecificationStmt> ::= <xPointerStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production72UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XspecificationstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSpecificationStmt> ::= <xSaveStmt>  ;
     */
    public void reduceByProduction73(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSpecificationStmt> ::= <xSaveStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production73UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XspecificationstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSpecificationStmt> ::= <xTargetStmt>  ;
     */
    public void reduceByProduction74(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSpecificationStmt> ::= <xTargetStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production74UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XspecificationstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xExecutableConstruct> ::= <xActionStmt>  ;
     */
    public void reduceByProduction75(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xExecutableConstruct> ::= <xActionStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production75UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XexecutableconstructNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xExecutableConstruct> ::= <xCaseConstruct>  ;
     */
    public void reduceByProduction76(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xExecutableConstruct> ::= <xCaseConstruct>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production76UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XexecutableconstructNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xExecutableConstruct> ::= <xDoConstruct>  ;
     */
    public void reduceByProduction77(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xExecutableConstruct> ::= <xDoConstruct>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production77UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XexecutableconstructNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xExecutableConstruct> ::= <xForallConstruct>  ;
     */
    public void reduceByProduction78(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xExecutableConstruct> ::= <xForallConstruct>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production78UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XexecutableconstructNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xExecutableConstruct> ::= <xIfConstruct>  ;
     */
    public void reduceByProduction79(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xExecutableConstruct> ::= <xIfConstruct>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production79UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XexecutableconstructNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xExecutableConstruct> ::= <xWhereConstruct>  ;
     */
    public void reduceByProduction80(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xExecutableConstruct> ::= <xWhereConstruct>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production80UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XexecutableconstructNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xExecutableConstruct> ::= <xEndDoStmt>  ;
     */
    public void reduceByProduction81(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xExecutableConstruct> ::= <xEndDoStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production81UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XexecutableconstructNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xActionStmt> ::= <xObsoleteActionStmt>  ;
     */
    public void reduceByProduction82(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xActionStmt> ::= <xObsoleteActionStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production82UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XactionstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xActionStmt> ::= <xAllocateStmt>  ;
     */
    public void reduceByProduction83(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xActionStmt> ::= <xAllocateStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production83UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XactionstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xActionStmt> ::= <xAssignmentStmt>  ;
     */
    public void reduceByProduction84(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xActionStmt> ::= <xAssignmentStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production84UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XactionstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xActionStmt> ::= <xBackspaceStmt>  ;
     */
    public void reduceByProduction85(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xActionStmt> ::= <xBackspaceStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production85UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XactionstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xActionStmt> ::= <xCallStmt>  ;
     */
    public void reduceByProduction86(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xActionStmt> ::= <xCallStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production86UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XactionstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xActionStmt> ::= <xCloseStmt>  ;
     */
    public void reduceByProduction87(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xActionStmt> ::= <xCloseStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production87UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XactionstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xActionStmt> ::= <xContinueStmt>  ;
     */
    public void reduceByProduction88(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xActionStmt> ::= <xContinueStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production88UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XactionstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xActionStmt> ::= <xCycleStmt>  ;
     */
    public void reduceByProduction89(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xActionStmt> ::= <xCycleStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production89UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XactionstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xActionStmt> ::= <xDeallocateStmt>  ;
     */
    public void reduceByProduction90(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xActionStmt> ::= <xDeallocateStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production90UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XactionstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xActionStmt> ::= <xEndfileStmt>  ;
     */
    public void reduceByProduction91(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xActionStmt> ::= <xEndfileStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production91UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XactionstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xActionStmt> ::= <xExitStmt>  ;
     */
    public void reduceByProduction92(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xActionStmt> ::= <xExitStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production92UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XactionstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xActionStmt> ::= <xForallStmt>  ;
     */
    public void reduceByProduction93(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xActionStmt> ::= <xForallStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production93UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XactionstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xActionStmt> ::= <xGotoStmt>  ;
     */
    public void reduceByProduction94(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xActionStmt> ::= <xGotoStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production94UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XactionstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xActionStmt> ::= <xIfStmt>  ;
     */
    public void reduceByProduction95(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xActionStmt> ::= <xIfStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production95UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XactionstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xActionStmt> ::= <xInquireStmt>  ;
     */
    public void reduceByProduction96(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xActionStmt> ::= <xInquireStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production96UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XactionstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xActionStmt> ::= <xNullifyStmt>  ;
     */
    public void reduceByProduction97(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xActionStmt> ::= <xNullifyStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production97UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XactionstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xActionStmt> ::= <xOpenStmt>  ;
     */
    public void reduceByProduction98(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xActionStmt> ::= <xOpenStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production98UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XactionstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xActionStmt> ::= <xPointerAssignmentStmt>  ;
     */
    public void reduceByProduction99(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xActionStmt> ::= <xPointerAssignmentStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production99UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XactionstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xActionStmt> ::= <xPrintStmt>  ;
     */
    public void reduceByProduction100(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xActionStmt> ::= <xPrintStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production100UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XactionstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xActionStmt> ::= <xReadStmt>  ;
     */
    public void reduceByProduction101(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xActionStmt> ::= <xReadStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production101UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XactionstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xActionStmt> ::= <xReturnStmt>  ;
     */
    public void reduceByProduction102(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xActionStmt> ::= <xReturnStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production102UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XactionstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xActionStmt> ::= <xRewindStmt>  ;
     */
    public void reduceByProduction103(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xActionStmt> ::= <xRewindStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production103UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XactionstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xActionStmt> ::= <xStopStmt>  ;
     */
    public void reduceByProduction104(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xActionStmt> ::= <xStopStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production104UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XactionstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xActionStmt> ::= <xWhereStmt>  ;
     */
    public void reduceByProduction105(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xActionStmt> ::= <xWhereStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production105UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XactionstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xActionStmt> ::= <xWriteStmt>  ;
     */
    public void reduceByProduction106(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xActionStmt> ::= <xWriteStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production106UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XactionstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xObsoleteActionStmt> ::= <xStmtFunctionStmt>  ;
     */
    public void reduceByProduction107(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xObsoleteActionStmt> ::= <xStmtFunctionStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production107UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XobsoleteactionstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xObsoleteActionStmt> ::= <xArithmeticIfStmt>  ;
     */
    public void reduceByProduction108(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xObsoleteActionStmt> ::= <xArithmeticIfStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production108UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XobsoleteactionstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xObsoleteActionStmt> ::= <xComputedGotoStmt>  ;
     */
    public void reduceByProduction109(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xObsoleteActionStmt> ::= <xComputedGotoStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production109UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XobsoleteactionstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xName> ::= T_IDENT  ;
     */
    public void reduceByProduction110(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xName> ::= T_IDENT  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production110UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XnameNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xConstant> ::= <xNamedConstantUse>  ;
     */
    public void reduceByProduction111(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xConstant> ::= <xNamedConstantUse>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production111UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XconstantNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xConstant> ::= <xUnsignedArithmeticConstant>  ;
     */
    public void reduceByProduction112(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xConstant> ::= <xUnsignedArithmeticConstant>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production112UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XconstantNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xConstant> ::= T_PLUS <xUnsignedArithmeticConstant>  ;
     */
    public void reduceByProduction113(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xConstant> ::= T_PLUS <xUnsignedArithmeticConstant>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production113UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XconstantNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xConstant> ::= T_MINUS <xUnsignedArithmeticConstant>  ;
     */
    public void reduceByProduction114(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xConstant> ::= T_MINUS <xUnsignedArithmeticConstant>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production114UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XconstantNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xConstant> ::= T_SCON  ;
     */
    public void reduceByProduction115(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xConstant> ::= T_SCON  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production115UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XconstantNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xConstant> ::= T_ICON T_UNDERSCORE T_SCON  ;
     */
    public void reduceByProduction116(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xConstant> ::= T_ICON T_UNDERSCORE T_SCON  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production116UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XconstantNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xConstant> ::= <xNamedConstantUse> T_UNDERSCORE T_SCON  ;
     */
    public void reduceByProduction117(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xConstant> ::= <xNamedConstantUse> T_UNDERSCORE T_SCON  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production117UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XconstantNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xConstant> ::= <xLogicalConstant>  ;
     */
    public void reduceByProduction118(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xConstant> ::= <xLogicalConstant>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production118UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XconstantNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xConstant> ::= <xStructureConstructor>  ;
     */
    public void reduceByProduction119(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xConstant> ::= <xStructureConstructor>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production119UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XconstantNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xConstant> ::= <xBozLiteralConstant>  ;
     */
    public void reduceByProduction120(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xConstant> ::= <xBozLiteralConstant>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production120UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XconstantNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xConstant> ::= T_HCON  ;
     */
    public void reduceByProduction121(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xConstant> ::= T_HCON  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production121UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XconstantNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xNamedConstant> ::= T_IDENT  ;
     */
    public void reduceByProduction122(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xNamedConstant> ::= T_IDENT  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production122UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XnamedconstantNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xNamedConstantUse> ::= T_IDENT  ;
     */
    public void reduceByProduction123(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xNamedConstantUse> ::= T_IDENT  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production123UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XnamedconstantuseNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xPowerOp> ::= T_POW  ;
     */
    public void reduceByProduction124(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPowerOp> ::= T_POW  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production124UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XpoweropNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xMultOp> ::= T_ASTERISK  ;
     */
    public void reduceByProduction125(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xMultOp> ::= T_ASTERISK  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production125UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XmultopNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xMultOp> ::= T_SLASH  ;
     */
    public void reduceByProduction126(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xMultOp> ::= T_SLASH  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production126UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XmultopNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xAddOp> ::= T_PLUS  ;
     */
    public void reduceByProduction127(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAddOp> ::= T_PLUS  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production127UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XaddopNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xAddOp> ::= T_MINUS  ;
     */
    public void reduceByProduction128(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAddOp> ::= T_MINUS  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production128UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XaddopNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSign> ::= T_PLUS  ;
     */
    public void reduceByProduction129(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSign> ::= T_PLUS  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production129UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XsignNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSign> ::= T_MINUS  ;
     */
    public void reduceByProduction130(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSign> ::= T_MINUS  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production130UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XsignNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xConcatOp> ::= T_SLASHSLASH  ;
     */
    public void reduceByProduction131(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xConcatOp> ::= T_SLASHSLASH  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production131UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XconcatopNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xRelOp> ::= T_EQ  ;
     */
    public void reduceByProduction132(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xRelOp> ::= T_EQ  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production132UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XrelopNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xRelOp> ::= T_NE  ;
     */
    public void reduceByProduction133(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xRelOp> ::= T_NE  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production133UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XrelopNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xRelOp> ::= T_LT  ;
     */
    public void reduceByProduction134(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xRelOp> ::= T_LT  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production134UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XrelopNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xRelOp> ::= T_LE  ;
     */
    public void reduceByProduction135(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xRelOp> ::= T_LE  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production135UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XrelopNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xRelOp> ::= T_GT  ;
     */
    public void reduceByProduction136(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xRelOp> ::= T_GT  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production136UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XrelopNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xRelOp> ::= T_GE  ;
     */
    public void reduceByProduction137(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xRelOp> ::= T_GE  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production137UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XrelopNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xRelOp> ::= T_EQEQ  ;
     */
    public void reduceByProduction138(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xRelOp> ::= T_EQEQ  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production138UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XrelopNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xRelOp> ::= T_SLASHEQ  ;
     */
    public void reduceByProduction139(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xRelOp> ::= T_SLASHEQ  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production139UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XrelopNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xRelOp> ::= T_LESSTHAN  ;
     */
    public void reduceByProduction140(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xRelOp> ::= T_LESSTHAN  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production140UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XrelopNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xRelOp> ::= T_LESSTHANEQ  ;
     */
    public void reduceByProduction141(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xRelOp> ::= T_LESSTHANEQ  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production141UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XrelopNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xRelOp> ::= T_GREATERTHAN  ;
     */
    public void reduceByProduction142(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xRelOp> ::= T_GREATERTHAN  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production142UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XrelopNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xRelOp> ::= T_GREATERTHANEQ  ;
     */
    public void reduceByProduction143(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xRelOp> ::= T_GREATERTHANEQ  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production143UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XrelopNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xNotOp> ::= T_NOT  ;
     */
    public void reduceByProduction144(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xNotOp> ::= T_NOT  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production144UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XnotopNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xAndOp> ::= T_AND  ;
     */
    public void reduceByProduction145(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAndOp> ::= T_AND  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production145UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XandopNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xOrOp> ::= T_OR  ;
     */
    public void reduceByProduction146(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xOrOp> ::= T_OR  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production146UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XoropNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xEquivOp> ::= T_EQV  ;
     */
    public void reduceByProduction147(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEquivOp> ::= T_EQV  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production147UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XequivopNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xEquivOp> ::= T_NEQV  ;
     */
    public void reduceByProduction148(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEquivOp> ::= T_NEQV  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production148UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XequivopNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xDefinedOperator> ::= T_XDOP  ;
     */
    public void reduceByProduction149(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDefinedOperator> ::= T_XDOP  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production149UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XdefinedoperatorNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xDefinedOperator> ::= <xConcatOp>  ;
     */
    public void reduceByProduction150(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDefinedOperator> ::= <xConcatOp>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production150UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XdefinedoperatorNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xDefinedOperator> ::= <xPowerOp>  ;
     */
    public void reduceByProduction151(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDefinedOperator> ::= <xPowerOp>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production151UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XdefinedoperatorNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xDefinedOperator> ::= <xMultOp>  ;
     */
    public void reduceByProduction152(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDefinedOperator> ::= <xMultOp>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production152UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XdefinedoperatorNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xDefinedOperator> ::= <xAddOp>  ;
     */
    public void reduceByProduction153(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDefinedOperator> ::= <xAddOp>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production153UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XdefinedoperatorNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xDefinedOperator> ::= <xRelOp>  ;
     */
    public void reduceByProduction154(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDefinedOperator> ::= <xRelOp>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production154UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XdefinedoperatorNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xDefinedOperator> ::= <xNotOp>  ;
     */
    public void reduceByProduction155(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDefinedOperator> ::= <xNotOp>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production155UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XdefinedoperatorNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xDefinedOperator> ::= <xAndOp>  ;
     */
    public void reduceByProduction156(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDefinedOperator> ::= <xAndOp>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production156UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XdefinedoperatorNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xDefinedOperator> ::= <xOrOp>  ;
     */
    public void reduceByProduction157(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDefinedOperator> ::= <xOrOp>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production157UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XdefinedoperatorNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xDefinedOperator> ::= <xEquivOp>  ;
     */
    public void reduceByProduction158(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDefinedOperator> ::= <xEquivOp>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production158UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XdefinedoperatorNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xDefinedUnaryOp> ::= T_XDOP  ;
     */
    public void reduceByProduction159(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDefinedUnaryOp> ::= T_XDOP  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production159UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XdefinedunaryopNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xDefinedBinaryOp> ::= T_XDOP  ;
     */
    public void reduceByProduction160(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDefinedBinaryOp> ::= T_XDOP  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production160UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XdefinedbinaryopNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xLabel> ::= T_ICON  ;
     */
    public void reduceByProduction161(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLabel> ::= T_ICON  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production161UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XlabelNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xUnsignedArithmeticConstant> ::= T_ICON  ;
     */
    public void reduceByProduction162(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUnsignedArithmeticConstant> ::= T_ICON  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production162UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XunsignedarithmeticconstantNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xUnsignedArithmeticConstant> ::= T_RCON  ;
     */
    public void reduceByProduction163(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUnsignedArithmeticConstant> ::= T_RCON  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production163UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XunsignedarithmeticconstantNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xUnsignedArithmeticConstant> ::= T_DCON  ;
     */
    public void reduceByProduction164(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUnsignedArithmeticConstant> ::= T_DCON  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production164UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XunsignedarithmeticconstantNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xUnsignedArithmeticConstant> ::= <xComplexConst>  ;
     */
    public void reduceByProduction165(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUnsignedArithmeticConstant> ::= <xComplexConst>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production165UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XunsignedarithmeticconstantNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xUnsignedArithmeticConstant> ::= T_ICON T_UNDERSCORE <xKindParam>  ;
     */
    public void reduceByProduction166(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUnsignedArithmeticConstant> ::= T_ICON T_UNDERSCORE <xKindParam>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production166UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XunsignedarithmeticconstantNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xUnsignedArithmeticConstant> ::= T_RCON T_UNDERSCORE <xKindParam>  ;
     */
    public void reduceByProduction167(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUnsignedArithmeticConstant> ::= T_RCON T_UNDERSCORE <xKindParam>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production167UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XunsignedarithmeticconstantNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xUnsignedArithmeticConstant> ::= T_DCON T_UNDERSCORE <xKindParam>  ;
     */
    public void reduceByProduction168(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUnsignedArithmeticConstant> ::= T_DCON T_UNDERSCORE <xKindParam>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production168UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XunsignedarithmeticconstantNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xKindParam> ::= T_ICON  ;
     */
    public void reduceByProduction169(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xKindParam> ::= T_ICON  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production169UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XkindparamNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xKindParam> ::= <xNamedConstantUse>  ;
     */
    public void reduceByProduction170(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xKindParam> ::= <xNamedConstantUse>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production170UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XkindparamNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xBozLiteralConstant> ::= T_BCON  ;
     */
    public void reduceByProduction171(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xBozLiteralConstant> ::= T_BCON  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production171UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XbozliteralconstantNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xBozLiteralConstant> ::= T_OCON  ;
     */
    public void reduceByProduction172(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xBozLiteralConstant> ::= T_OCON  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production172UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XbozliteralconstantNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xBozLiteralConstant> ::= T_ZCON  ;
     */
    public void reduceByProduction173(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xBozLiteralConstant> ::= T_ZCON  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production173UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XbozliteralconstantNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xComplexConst> ::= T_LPAREN <xExpr> T_COMMA <xExpr> T_RPAREN  ;
     */
    public void reduceByProduction174(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xComplexConst> ::= T_LPAREN <xExpr> T_COMMA <xExpr> T_RPAREN  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production174UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XcomplexconstNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xLogicalConstant> ::= T_TRUE  ;
     */
    public void reduceByProduction175(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLogicalConstant> ::= T_TRUE  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production175UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XlogicalconstantNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xLogicalConstant> ::= T_FALSE  ;
     */
    public void reduceByProduction176(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLogicalConstant> ::= T_FALSE  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production176UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XlogicalconstantNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xLogicalConstant> ::= T_TRUE T_UNDERSCORE <xKindParam>  ;
     */
    public void reduceByProduction177(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLogicalConstant> ::= T_TRUE T_UNDERSCORE <xKindParam>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production177UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XlogicalconstantNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xLogicalConstant> ::= T_FALSE T_UNDERSCORE <xKindParam>  ;
     */
    public void reduceByProduction178(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLogicalConstant> ::= T_FALSE T_UNDERSCORE <xKindParam>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production178UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XlogicalconstantNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xDerivedTypeDef> ::= <xDerivedTypeStmt> <xDerivedTypeBody> <xEndTypeStmt>  ;
     */
    public void reduceByProduction179(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDerivedTypeDef> ::= <xDerivedTypeStmt> <xDerivedTypeBody> <xEndTypeStmt>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production179UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XderivedtypedefNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xDerivedTypeBody> ::= <xDerivedTypeBodyConstruct>  ;
     */
    public void reduceByProduction180(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDerivedTypeBody> ::= <xDerivedTypeBodyConstruct>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production180UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XderivedtypebodyNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xDerivedTypeBody> ::= <xDerivedTypeBody> <xDerivedTypeBodyConstruct>  ;
     */
    public void reduceByProduction181(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDerivedTypeBody> ::= <xDerivedTypeBody> <xDerivedTypeBodyConstruct>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production181UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XderivedtypebodyNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xDerivedTypeBodyConstruct> ::= <xPrivateSequenceStmt>  ;
     */
    public void reduceByProduction182(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDerivedTypeBodyConstruct> ::= <xPrivateSequenceStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production182UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XderivedtypebodyconstructNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xDerivedTypeBodyConstruct> ::= <xComponentDefStmt>  ;
     */
    public void reduceByProduction183(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDerivedTypeBodyConstruct> ::= <xComponentDefStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production183UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XderivedtypebodyconstructNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xDerivedTypeStmt> ::= T_TYPE <xTypeName> T_EOS  ;
     */
    public void reduceByProduction184(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDerivedTypeStmt> ::= T_TYPE <xTypeName> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production184UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XderivedtypestmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xDerivedTypeStmt> ::= <xLblDef> T_TYPE <xTypeName> T_EOS  ;
     */
    public void reduceByProduction185(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDerivedTypeStmt> ::= <xLblDef> T_TYPE <xTypeName> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production185UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XderivedtypestmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xDerivedTypeStmt> ::= T_TYPE T_COLON T_COLON <xTypeName> T_EOS  ;
     */
    public void reduceByProduction186(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDerivedTypeStmt> ::= T_TYPE T_COLON T_COLON <xTypeName> T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production186UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XderivedtypestmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xDerivedTypeStmt> ::= <xLblDef> T_TYPE T_COLON T_COLON <xTypeName> T_EOS  ;
     */
    public void reduceByProduction187(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDerivedTypeStmt> ::= <xLblDef> T_TYPE T_COLON T_COLON <xTypeName> T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production187UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XderivedtypestmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xDerivedTypeStmt> ::= T_TYPE T_COMMA <xAccessSpec> T_COLON T_COLON <xTypeName> T_EOS  ;
     */
    public void reduceByProduction188(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDerivedTypeStmt> ::= T_TYPE T_COMMA <xAccessSpec> T_COLON T_COLON <xTypeName> T_EOS  ;
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production188UserAction(v1, v2, v3, v4, v5, v6, v7);

        // The production has 7 symbols on its RHS
        parser.reduce(Nonterminal.XderivedtypestmtNonterminal.getInstance(), 7, userValue);
    }

    /**
     * Reduce by <xDerivedTypeStmt> ::= <xLblDef> T_TYPE T_COMMA <xAccessSpec> T_COLON T_COLON <xTypeName> T_EOS  ;
     */
    public void reduceByProduction189(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDerivedTypeStmt> ::= <xLblDef> T_TYPE T_COMMA <xAccessSpec> T_COLON T_COLON <xTypeName> T_EOS  ;
        Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v7 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production189UserAction(v1, v2, v3, v4, v5, v6, v7, v8);

        // The production has 8 symbols on its RHS
        parser.reduce(Nonterminal.XderivedtypestmtNonterminal.getInstance(), 8, userValue);
    }

    /**
     * Reduce by <xPrivateSequenceStmt> ::= T_PRIVATE T_EOS  ;
     */
    public void reduceByProduction190(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPrivateSequenceStmt> ::= T_PRIVATE T_EOS  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production190UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XprivatesequencestmtNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xPrivateSequenceStmt> ::= <xLblDef> T_PRIVATE T_EOS  ;
     */
    public void reduceByProduction191(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPrivateSequenceStmt> ::= <xLblDef> T_PRIVATE T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production191UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XprivatesequencestmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xPrivateSequenceStmt> ::= T_SEQUENCE T_EOS  ;
     */
    public void reduceByProduction192(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPrivateSequenceStmt> ::= T_SEQUENCE T_EOS  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production192UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XprivatesequencestmtNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xPrivateSequenceStmt> ::= <xLblDef> T_SEQUENCE T_EOS  ;
     */
    public void reduceByProduction193(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPrivateSequenceStmt> ::= <xLblDef> T_SEQUENCE T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production193UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XprivatesequencestmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xComponentDefStmt> ::= <xTypeSpec> T_COMMA <xComponentAttrSpecList> T_COLON T_COLON <xComponentDeclList> T_EOS  ;
     */
    public void reduceByProduction194(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xComponentDefStmt> ::= <xTypeSpec> T_COMMA <xComponentAttrSpecList> T_COLON T_COLON <xComponentDeclList> T_EOS  ;
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production194UserAction(v1, v2, v3, v4, v5, v6, v7);

        // The production has 7 symbols on its RHS
        parser.reduce(Nonterminal.XcomponentdefstmtNonterminal.getInstance(), 7, userValue);
    }

    /**
     * Reduce by <xComponentDefStmt> ::= <xLblDef> <xTypeSpec> T_COMMA <xComponentAttrSpecList> T_COLON T_COLON <xComponentDeclList> T_EOS  ;
     */
    public void reduceByProduction195(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xComponentDefStmt> ::= <xLblDef> <xTypeSpec> T_COMMA <xComponentAttrSpecList> T_COLON T_COLON <xComponentDeclList> T_EOS  ;
        Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v7 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production195UserAction(v1, v2, v3, v4, v5, v6, v7, v8);

        // The production has 8 symbols on its RHS
        parser.reduce(Nonterminal.XcomponentdefstmtNonterminal.getInstance(), 8, userValue);
    }

    /**
     * Reduce by <xComponentDefStmt> ::= <xTypeSpec> T_COLON T_COLON <xComponentDeclList> T_EOS  ;
     */
    public void reduceByProduction196(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xComponentDefStmt> ::= <xTypeSpec> T_COLON T_COLON <xComponentDeclList> T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production196UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XcomponentdefstmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xComponentDefStmt> ::= <xLblDef> <xTypeSpec> T_COLON T_COLON <xComponentDeclList> T_EOS  ;
     */
    public void reduceByProduction197(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xComponentDefStmt> ::= <xLblDef> <xTypeSpec> T_COLON T_COLON <xComponentDeclList> T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production197UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XcomponentdefstmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xComponentDefStmt> ::= <xTypeSpec> <xComponentDeclList> T_EOS  ;
     */
    public void reduceByProduction198(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xComponentDefStmt> ::= <xTypeSpec> <xComponentDeclList> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production198UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XcomponentdefstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xComponentDefStmt> ::= <xLblDef> <xTypeSpec> <xComponentDeclList> T_EOS  ;
     */
    public void reduceByProduction199(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xComponentDefStmt> ::= <xLblDef> <xTypeSpec> <xComponentDeclList> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production199UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XcomponentdefstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xComponentAttrSpecList> ::= <xComponentAttrSpec>  ;
     */
    public void reduceByProduction200(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xComponentAttrSpecList> ::= <xComponentAttrSpec>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production200UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XcomponentattrspeclistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xComponentAttrSpecList> ::= <xComponentAttrSpecList> T_COMMA <xComponentAttrSpec>  ;
     */
    public void reduceByProduction201(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xComponentAttrSpecList> ::= <xComponentAttrSpecList> T_COMMA <xComponentAttrSpec>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production201UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XcomponentattrspeclistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xComponentAttrSpec> ::= T_POINTER  ;
     */
    public void reduceByProduction202(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xComponentAttrSpec> ::= T_POINTER  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production202UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XcomponentattrspecNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xComponentAttrSpec> ::= T_DIMENSION T_LPAREN <xComponentArraySpec> T_RPAREN  ;
     */
    public void reduceByProduction203(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xComponentAttrSpec> ::= T_DIMENSION T_LPAREN <xComponentArraySpec> T_RPAREN  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production203UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XcomponentattrspecNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xComponentArraySpec> ::= <xExplicitShapeSpecList>  ;
     */
    public void reduceByProduction204(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xComponentArraySpec> ::= <xExplicitShapeSpecList>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production204UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XcomponentarrayspecNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xComponentArraySpec> ::= <xDeferredShapeSpecList>  ;
     */
    public void reduceByProduction205(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xComponentArraySpec> ::= <xDeferredShapeSpecList>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production205UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XcomponentarrayspecNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xComponentDeclList> ::= <xComponentDecl>  ;
     */
    public void reduceByProduction206(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xComponentDeclList> ::= <xComponentDecl>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production206UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XcomponentdecllistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xComponentDeclList> ::= <xComponentDeclList> T_COMMA <xComponentDecl>  ;
     */
    public void reduceByProduction207(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xComponentDeclList> ::= <xComponentDeclList> T_COMMA <xComponentDecl>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production207UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XcomponentdecllistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xComponentDecl> ::= <xComponentName> T_LPAREN <xComponentArraySpec> T_RPAREN T_ASTERISK <xCharLength> <xComponentInitialization>  ;
     */
    public void reduceByProduction208(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xComponentDecl> ::= <xComponentName> T_LPAREN <xComponentArraySpec> T_RPAREN T_ASTERISK <xCharLength> <xComponentInitialization>  ;
        Object v7 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production208UserAction(v1, v2, v3, v4, v5, v6, v7);

        // The production has 7 symbols on its RHS
        parser.reduce(Nonterminal.XcomponentdeclNonterminal.getInstance(), 7, userValue);
    }

    /**
     * Reduce by <xComponentDecl> ::= <xComponentName> T_LPAREN <xComponentArraySpec> T_RPAREN <xComponentInitialization>  ;
     */
    public void reduceByProduction209(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xComponentDecl> ::= <xComponentName> T_LPAREN <xComponentArraySpec> T_RPAREN <xComponentInitialization>  ;
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production209UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XcomponentdeclNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xComponentDecl> ::= <xComponentName> T_ASTERISK <xCharLength> <xComponentInitialization>  ;
     */
    public void reduceByProduction210(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xComponentDecl> ::= <xComponentName> T_ASTERISK <xCharLength> <xComponentInitialization>  ;
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production210UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XcomponentdeclNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xComponentDecl> ::= <xComponentName> <xComponentInitialization>  ;
     */
    public void reduceByProduction211(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xComponentDecl> ::= <xComponentName> <xComponentInitialization>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production211UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XcomponentdeclNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xComponentDecl> ::= <xComponentName> T_LPAREN <xComponentArraySpec> T_RPAREN T_ASTERISK <xCharLength>  ;
     */
    public void reduceByProduction212(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xComponentDecl> ::= <xComponentName> T_LPAREN <xComponentArraySpec> T_RPAREN T_ASTERISK <xCharLength>  ;
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production212UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XcomponentdeclNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xComponentDecl> ::= <xComponentName> T_LPAREN <xComponentArraySpec> T_RPAREN  ;
     */
    public void reduceByProduction213(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xComponentDecl> ::= <xComponentName> T_LPAREN <xComponentArraySpec> T_RPAREN  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production213UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XcomponentdeclNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xComponentDecl> ::= <xComponentName> T_ASTERISK <xCharLength>  ;
     */
    public void reduceByProduction214(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xComponentDecl> ::= <xComponentName> T_ASTERISK <xCharLength>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production214UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XcomponentdeclNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xComponentDecl> ::= <xComponentName>  ;
     */
    public void reduceByProduction215(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xComponentDecl> ::= <xComponentName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production215UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XcomponentdeclNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xComponentInitialization> ::= T_EQUALS <xExpr>  ;
     */
    public void reduceByProduction216(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xComponentInitialization> ::= T_EQUALS <xExpr>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production216UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XcomponentinitializationNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xComponentInitialization> ::= T_EQGREATERTHAN T_NULL T_LPAREN T_RPAREN  ;
     */
    public void reduceByProduction217(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xComponentInitialization> ::= T_EQGREATERTHAN T_NULL T_LPAREN T_RPAREN  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production217UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XcomponentinitializationNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndTypeStmt> ::= T_ENDTYPE T_EOS  ;
     */
    public void reduceByProduction218(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndTypeStmt> ::= T_ENDTYPE T_EOS  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production218UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XendtypestmtNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xEndTypeStmt> ::= T_ENDTYPE <xEndTypeStmt@1> T_EOS  ;
     */
    public void reduceByProduction219(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndTypeStmt> ::= T_ENDTYPE <xEndTypeStmt@1> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production219UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XendtypestmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndTypeStmt> ::= <xLblDef> T_ENDTYPE T_EOS  ;
     */
    public void reduceByProduction220(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndTypeStmt> ::= <xLblDef> T_ENDTYPE T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production220UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XendtypestmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndTypeStmt> ::= <xLblDef> T_ENDTYPE <xEndTypeStmt@1> T_EOS  ;
     */
    public void reduceByProduction221(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndTypeStmt> ::= <xLblDef> T_ENDTYPE <xEndTypeStmt@1> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production221UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XendtypestmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndTypeStmt> ::= T_END T_TYPE T_EOS  ;
     */
    public void reduceByProduction222(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndTypeStmt> ::= T_END T_TYPE T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production222UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XendtypestmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndTypeStmt> ::= T_END T_TYPE <xEndTypeStmt@2> T_EOS  ;
     */
    public void reduceByProduction223(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndTypeStmt> ::= T_END T_TYPE <xEndTypeStmt@2> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production223UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XendtypestmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndTypeStmt> ::= <xLblDef> T_END T_TYPE T_EOS  ;
     */
    public void reduceByProduction224(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndTypeStmt> ::= <xLblDef> T_END T_TYPE T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production224UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XendtypestmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndTypeStmt> ::= <xLblDef> T_END T_TYPE <xEndTypeStmt@2> T_EOS  ;
     */
    public void reduceByProduction225(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndTypeStmt> ::= <xLblDef> T_END T_TYPE <xEndTypeStmt@2> T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production225UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XendtypestmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xStructureConstructor> ::= <xTypeName> T_LPAREN <xExprList> T_RPAREN  ;
     */
    public void reduceByProduction226(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xStructureConstructor> ::= <xTypeName> T_LPAREN <xExprList> T_RPAREN  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production226UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XstructureconstructorNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xExprList> ::= <xExpr>  ;
     */
    public void reduceByProduction227(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xExprList> ::= <xExpr>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production227UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XexprlistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xExprList> ::= <xExprList> T_COMMA <xExpr>  ;
     */
    public void reduceByProduction228(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xExprList> ::= <xExprList> T_COMMA <xExpr>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production228UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XexprlistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xArrayConstructor> ::= T_LPARENSLASH <xAcValueList> T_SLASHRPAREN  ;
     */
    public void reduceByProduction229(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xArrayConstructor> ::= T_LPARENSLASH <xAcValueList> T_SLASHRPAREN  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production229UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XarrayconstructorNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xAcValueList> ::= <xExpr>  ;
     */
    public void reduceByProduction230(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAcValueList> ::= <xExpr>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production230UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XacvaluelistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xAcValueList> ::= <xAcValueList1>  ;
     */
    public void reduceByProduction231(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAcValueList> ::= <xAcValueList1>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production231UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XacvaluelistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xAcValueList1> ::= <xExpr> T_COMMA <xExpr>  ;
     */
    public void reduceByProduction232(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAcValueList1> ::= <xExpr> T_COMMA <xExpr>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production232UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.Xacvaluelist1Nonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xAcValueList1> ::= <xExpr> T_COMMA <xAcImpliedDo>  ;
     */
    public void reduceByProduction233(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAcValueList1> ::= <xExpr> T_COMMA <xAcImpliedDo>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production233UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.Xacvaluelist1Nonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xAcValueList1> ::= <xAcImpliedDo>  ;
     */
    public void reduceByProduction234(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAcValueList1> ::= <xAcImpliedDo>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production234UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xacvaluelist1Nonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xAcValueList1> ::= <xAcValueList1> T_COMMA <xExpr>  ;
     */
    public void reduceByProduction235(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAcValueList1> ::= <xAcValueList1> T_COMMA <xExpr>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production235UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.Xacvaluelist1Nonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xAcValueList1> ::= <xAcValueList1> T_COMMA <xAcImpliedDo>  ;
     */
    public void reduceByProduction236(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAcValueList1> ::= <xAcValueList1> T_COMMA <xAcImpliedDo>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production236UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.Xacvaluelist1Nonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xAcImpliedDo> ::= T_LPAREN <xExpr> T_COMMA <T_xImpliedDoVariable> T_EQUALS <xExpr> T_COMMA <xExpr> T_RPAREN  ;
     */
    public void reduceByProduction237(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAcImpliedDo> ::= T_LPAREN <xExpr> T_COMMA <T_xImpliedDoVariable> T_EQUALS <xExpr> T_COMMA <xExpr> T_RPAREN  ;
        Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v8 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production237UserAction(v1, v2, v3, v4, v5, v6, v7, v8, v9);

        // The production has 9 symbols on its RHS
        parser.reduce(Nonterminal.XacimplieddoNonterminal.getInstance(), 9, userValue);
    }

    /**
     * Reduce by <xAcImpliedDo> ::= T_LPAREN <xExpr> T_COMMA <T_xImpliedDoVariable> T_EQUALS <xExpr> T_COMMA <xExpr> T_COMMA <xExpr> T_RPAREN  ;
     */
    public void reduceByProduction238(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAcImpliedDo> ::= T_LPAREN <xExpr> T_COMMA <T_xImpliedDoVariable> T_EQUALS <xExpr> T_COMMA <xExpr> T_COMMA <xExpr> T_RPAREN  ;
        Token v11 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v10 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v8 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production238UserAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);

        // The production has 11 symbols on its RHS
        parser.reduce(Nonterminal.XacimplieddoNonterminal.getInstance(), 11, userValue);
    }

    /**
     * Reduce by <xAcImpliedDo> ::= T_LPAREN <xAcImpliedDo> T_COMMA <T_xImpliedDoVariable> T_EQUALS <xExpr> T_COMMA <xExpr> T_RPAREN  ;
     */
    public void reduceByProduction239(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAcImpliedDo> ::= T_LPAREN <xAcImpliedDo> T_COMMA <T_xImpliedDoVariable> T_EQUALS <xExpr> T_COMMA <xExpr> T_RPAREN  ;
        Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v8 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production239UserAction(v1, v2, v3, v4, v5, v6, v7, v8, v9);

        // The production has 9 symbols on its RHS
        parser.reduce(Nonterminal.XacimplieddoNonterminal.getInstance(), 9, userValue);
    }

    /**
     * Reduce by <xAcImpliedDo> ::= T_LPAREN <xAcImpliedDo> T_COMMA <T_xImpliedDoVariable> T_EQUALS <xExpr> T_COMMA <xExpr> T_COMMA <xExpr> T_RPAREN  ;
     */
    public void reduceByProduction240(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAcImpliedDo> ::= T_LPAREN <xAcImpliedDo> T_COMMA <T_xImpliedDoVariable> T_EQUALS <xExpr> T_COMMA <xExpr> T_COMMA <xExpr> T_RPAREN  ;
        Token v11 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v10 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v8 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production240UserAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);

        // The production has 11 symbols on its RHS
        parser.reduce(Nonterminal.XacimplieddoNonterminal.getInstance(), 11, userValue);
    }

    /**
     * Reduce by <xTypeDeclarationStmt> ::= <xTypeSpec> <xAttrSpecSeq> T_COLON T_COLON <xEntityDeclList> T_EOS  ;
     */
    public void reduceByProduction241(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xTypeDeclarationStmt> ::= <xTypeSpec> <xAttrSpecSeq> T_COLON T_COLON <xEntityDeclList> T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production241UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XtypedeclarationstmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xTypeDeclarationStmt> ::= <xLblDef> <xTypeSpec> <xAttrSpecSeq> T_COLON T_COLON <xEntityDeclList> T_EOS  ;
     */
    public void reduceByProduction242(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xTypeDeclarationStmt> ::= <xLblDef> <xTypeSpec> <xAttrSpecSeq> T_COLON T_COLON <xEntityDeclList> T_EOS  ;
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production242UserAction(v1, v2, v3, v4, v5, v6, v7);

        // The production has 7 symbols on its RHS
        parser.reduce(Nonterminal.XtypedeclarationstmtNonterminal.getInstance(), 7, userValue);
    }

    /**
     * Reduce by <xTypeDeclarationStmt> ::= <xTypeSpec> T_COLON T_COLON <xEntityDeclList> T_EOS  ;
     */
    public void reduceByProduction243(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xTypeDeclarationStmt> ::= <xTypeSpec> T_COLON T_COLON <xEntityDeclList> T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production243UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XtypedeclarationstmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xTypeDeclarationStmt> ::= <xLblDef> <xTypeSpec> T_COLON T_COLON <xEntityDeclList> T_EOS  ;
     */
    public void reduceByProduction244(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xTypeDeclarationStmt> ::= <xLblDef> <xTypeSpec> T_COLON T_COLON <xEntityDeclList> T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production244UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XtypedeclarationstmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xTypeDeclarationStmt> ::= <xTypeSpec> <xEntityDeclList> T_EOS  ;
     */
    public void reduceByProduction245(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xTypeDeclarationStmt> ::= <xTypeSpec> <xEntityDeclList> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production245UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XtypedeclarationstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xTypeDeclarationStmt> ::= <xLblDef> <xTypeSpec> <xEntityDeclList> T_EOS  ;
     */
    public void reduceByProduction246(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xTypeDeclarationStmt> ::= <xLblDef> <xTypeSpec> <xEntityDeclList> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production246UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XtypedeclarationstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xAttrSpecSeq> ::= T_COMMA <xAttrSpec>  ;
     */
    public void reduceByProduction247(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAttrSpecSeq> ::= T_COMMA <xAttrSpec>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production247UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XattrspecseqNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xAttrSpecSeq> ::= <xAttrSpecSeq> T_COMMA <xAttrSpec>  ;
     */
    public void reduceByProduction248(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAttrSpecSeq> ::= <xAttrSpecSeq> T_COMMA <xAttrSpec>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production248UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XattrspecseqNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xTypeSpec> ::= T_INTEGER  ;
     */
    public void reduceByProduction249(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xTypeSpec> ::= T_INTEGER  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production249UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XtypespecNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xTypeSpec> ::= T_REAL  ;
     */
    public void reduceByProduction250(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xTypeSpec> ::= T_REAL  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production250UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XtypespecNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xTypeSpec> ::= T_DOUBLEPRECISION  ;
     */
    public void reduceByProduction251(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xTypeSpec> ::= T_DOUBLEPRECISION  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production251UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XtypespecNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xTypeSpec> ::= T_COMPLEX  ;
     */
    public void reduceByProduction252(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xTypeSpec> ::= T_COMPLEX  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production252UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XtypespecNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xTypeSpec> ::= T_LOGICAL  ;
     */
    public void reduceByProduction253(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xTypeSpec> ::= T_LOGICAL  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production253UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XtypespecNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xTypeSpec> ::= T_CHARACTER  ;
     */
    public void reduceByProduction254(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xTypeSpec> ::= T_CHARACTER  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production254UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XtypespecNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xTypeSpec> ::= T_INTEGER <xKindSelector>  ;
     */
    public void reduceByProduction255(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xTypeSpec> ::= T_INTEGER <xKindSelector>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production255UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XtypespecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xTypeSpec> ::= T_REAL <xKindSelector>  ;
     */
    public void reduceByProduction256(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xTypeSpec> ::= T_REAL <xKindSelector>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production256UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XtypespecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xTypeSpec> ::= T_DOUBLE T_PRECISION  ;
     */
    public void reduceByProduction257(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xTypeSpec> ::= T_DOUBLE T_PRECISION  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production257UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XtypespecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xTypeSpec> ::= T_COMPLEX <xKindSelector>  ;
     */
    public void reduceByProduction258(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xTypeSpec> ::= T_COMPLEX <xKindSelector>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production258UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XtypespecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xTypeSpec> ::= T_CHARACTER <xCharSelector>  ;
     */
    public void reduceByProduction259(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xTypeSpec> ::= T_CHARACTER <xCharSelector>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production259UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XtypespecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xTypeSpec> ::= T_LOGICAL <xKindSelector>  ;
     */
    public void reduceByProduction260(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xTypeSpec> ::= T_LOGICAL <xKindSelector>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production260UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XtypespecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xTypeSpec> ::= T_TYPE T_LPAREN <xTypeName> T_RPAREN  ;
     */
    public void reduceByProduction261(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xTypeSpec> ::= T_TYPE T_LPAREN <xTypeName> T_RPAREN  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production261UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XtypespecNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xAttrSpec> ::= T_PARAMETER  ;
     */
    public void reduceByProduction262(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAttrSpec> ::= T_PARAMETER  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production262UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XattrspecNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xAttrSpec> ::= <xAccessSpec>  ;
     */
    public void reduceByProduction263(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAttrSpec> ::= <xAccessSpec>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production263UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XattrspecNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xAttrSpec> ::= T_ALLOCATABLE  ;
     */
    public void reduceByProduction264(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAttrSpec> ::= T_ALLOCATABLE  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production264UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XattrspecNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xAttrSpec> ::= T_DIMENSION T_LPAREN <xArraySpec> T_RPAREN  ;
     */
    public void reduceByProduction265(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAttrSpec> ::= T_DIMENSION T_LPAREN <xArraySpec> T_RPAREN  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production265UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XattrspecNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xAttrSpec> ::= T_EXTERNAL  ;
     */
    public void reduceByProduction266(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAttrSpec> ::= T_EXTERNAL  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production266UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XattrspecNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xAttrSpec> ::= T_INTENT T_LPAREN <xIntentSpec> T_RPAREN  ;
     */
    public void reduceByProduction267(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAttrSpec> ::= T_INTENT T_LPAREN <xIntentSpec> T_RPAREN  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production267UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XattrspecNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xAttrSpec> ::= T_INTRINSIC  ;
     */
    public void reduceByProduction268(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAttrSpec> ::= T_INTRINSIC  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production268UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XattrspecNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xAttrSpec> ::= T_OPTIONAL  ;
     */
    public void reduceByProduction269(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAttrSpec> ::= T_OPTIONAL  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production269UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XattrspecNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xAttrSpec> ::= T_POINTER  ;
     */
    public void reduceByProduction270(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAttrSpec> ::= T_POINTER  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production270UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XattrspecNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xAttrSpec> ::= T_SAVE  ;
     */
    public void reduceByProduction271(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAttrSpec> ::= T_SAVE  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production271UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XattrspecNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xAttrSpec> ::= T_TARGET  ;
     */
    public void reduceByProduction272(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAttrSpec> ::= T_TARGET  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production272UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XattrspecNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xEntityDeclList> ::= <xEntityDecl>  ;
     */
    public void reduceByProduction273(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEntityDeclList> ::= <xEntityDecl>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production273UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XentitydecllistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xEntityDeclList> ::= <xEntityDeclList> T_COMMA <xEntityDecl>  ;
     */
    public void reduceByProduction274(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEntityDeclList> ::= <xEntityDeclList> T_COMMA <xEntityDecl>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production274UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XentitydecllistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEntityDecl> ::= <xObjectName>  ;
     */
    public void reduceByProduction275(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEntityDecl> ::= <xObjectName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production275UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XentitydeclNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xEntityDecl> ::= <xObjectName> <xEntityDecl@5>  ;
     */
    public void reduceByProduction276(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEntityDecl> ::= <xObjectName> <xEntityDecl@5>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production276UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XentitydeclNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xEntityDecl> ::= <xObjectName> <xEntityDecl@4>  ;
     */
    public void reduceByProduction277(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEntityDecl> ::= <xObjectName> <xEntityDecl@4>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production277UserAction(v1, v2, v3);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XentitydeclNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xEntityDecl> ::= <xObjectName> <xEntityDecl@4> <xEntityDecl@5>  ;
     */
    public void reduceByProduction278(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEntityDecl> ::= <xObjectName> <xEntityDecl@4> <xEntityDecl@5>  ;
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production278UserAction(v1, v2, v3, v4);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XentitydeclNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEntityDecl> ::= <xObjectName> <xEntityDecl@3>  ;
     */
    public void reduceByProduction279(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEntityDecl> ::= <xObjectName> <xEntityDecl@3>  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production279UserAction(v1, v2, v3, v4);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XentitydeclNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xEntityDecl> ::= <xObjectName> <xEntityDecl@3> <xEntityDecl@5>  ;
     */
    public void reduceByProduction280(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEntityDecl> ::= <xObjectName> <xEntityDecl@3> <xEntityDecl@5>  ;
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production280UserAction(v1, v2, v3, v4, v5);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XentitydeclNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEntityDecl> ::= <xObjectName> <xEntityDecl@3> <xEntityDecl@4>  ;
     */
    public void reduceByProduction281(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEntityDecl> ::= <xObjectName> <xEntityDecl@3> <xEntityDecl@4>  ;
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production281UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XentitydeclNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEntityDecl> ::= <xObjectName> <xEntityDecl@3> <xEntityDecl@4> <xEntityDecl@5>  ;
     */
    public void reduceByProduction282(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEntityDecl> ::= <xObjectName> <xEntityDecl@3> <xEntityDecl@4> <xEntityDecl@5>  ;
        Object v7 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production282UserAction(v1, v2, v3, v4, v5, v6, v7);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XentitydeclNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEntityDecl> ::= <xInvalidEntityDecl>  ;
     */
    public void reduceByProduction283(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEntityDecl> ::= <xInvalidEntityDecl>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production283UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XentitydeclNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xInvalidEntityDecl> ::= <xObjectName> T_ASTERISK <xCharLength> T_LPAREN <xArraySpec> T_RPAREN  ;
     */
    public void reduceByProduction284(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInvalidEntityDecl> ::= <xObjectName> T_ASTERISK <xCharLength> T_LPAREN <xArraySpec> T_RPAREN  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production284UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XinvalidentitydeclNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xInvalidEntityDecl> ::= <xObjectName> T_ASTERISK <xCharLength> T_LPAREN <xArraySpec> T_RPAREN <xInvalidEntityDecl@6>  ;
     */
    public void reduceByProduction285(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInvalidEntityDecl> ::= <xObjectName> T_ASTERISK <xCharLength> T_LPAREN <xArraySpec> T_RPAREN <xInvalidEntityDecl@6>  ;
        Object v7 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production285UserAction(v1, v2, v3, v4, v5, v6, v7);

        // The production has 7 symbols on its RHS
        parser.reduce(Nonterminal.XinvalidentitydeclNonterminal.getInstance(), 7, userValue);
    }

    /**
     * Reduce by <xInitialization> ::= T_EQUALS <xExpr>  ;
     */
    public void reduceByProduction286(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInitialization> ::= T_EQUALS <xExpr>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production286UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XinitializationNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xInitialization> ::= T_EQGREATERTHAN T_NULL T_LPAREN T_RPAREN  ;
     */
    public void reduceByProduction287(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInitialization> ::= T_EQGREATERTHAN T_NULL T_LPAREN T_RPAREN  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production287UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XinitializationNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xKindSelector> ::= T_LPAREN T_KINDEQ <xExpr> T_RPAREN  ;
     */
    public void reduceByProduction288(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xKindSelector> ::= T_LPAREN T_KINDEQ <xExpr> T_RPAREN  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production288UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XkindselectorNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xKindSelector> ::= T_LPAREN <xExpr> T_RPAREN  ;
     */
    public void reduceByProduction289(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xKindSelector> ::= T_LPAREN <xExpr> T_RPAREN  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production289UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XkindselectorNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xCharSelector> ::= <xLengthSelector>  ;
     */
    public void reduceByProduction290(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCharSelector> ::= <xLengthSelector>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production290UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XcharselectorNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xCharSelector> ::= T_LPAREN T_LENEQ <xCharLenParamValue> T_COMMA T_KINDEQ <xExpr> T_RPAREN  ;
     */
    public void reduceByProduction291(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCharSelector> ::= T_LPAREN T_LENEQ <xCharLenParamValue> T_COMMA T_KINDEQ <xExpr> T_RPAREN  ;
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production291UserAction(v1, v2, v3, v4, v5, v6, v7);

        // The production has 7 symbols on its RHS
        parser.reduce(Nonterminal.XcharselectorNonterminal.getInstance(), 7, userValue);
    }

    /**
     * Reduce by <xCharSelector> ::= T_LPAREN T_LENEQ <xCharLenParamValue> T_COMMA <xExpr> T_RPAREN  ;
     */
    public void reduceByProduction292(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCharSelector> ::= T_LPAREN T_LENEQ <xCharLenParamValue> T_COMMA <xExpr> T_RPAREN  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production292UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XcharselectorNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xCharSelector> ::= T_LPAREN T_KINDEQ <xExpr> T_RPAREN  ;
     */
    public void reduceByProduction293(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCharSelector> ::= T_LPAREN T_KINDEQ <xExpr> T_RPAREN  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production293UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XcharselectorNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xCharSelector> ::= T_LPAREN T_LENEQ <xCharLenParamValue> T_RPAREN  ;
     */
    public void reduceByProduction294(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCharSelector> ::= T_LPAREN T_LENEQ <xCharLenParamValue> T_RPAREN  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production294UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XcharselectorNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xCharSelector> ::= T_LPAREN <xCharLenParamValue> T_RPAREN  ;
     */
    public void reduceByProduction295(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCharSelector> ::= T_LPAREN <xCharLenParamValue> T_RPAREN  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production295UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XcharselectorNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xLengthSelector> ::= T_ASTERISK <xCharLength>  ;
     */
    public void reduceByProduction296(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLengthSelector> ::= T_ASTERISK <xCharLength>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production296UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XlengthselectorNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xCharLength> ::= T_LPAREN <xCharLenParamValue> T_RPAREN  ;
     */
    public void reduceByProduction297(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCharLength> ::= T_LPAREN <xCharLenParamValue> T_RPAREN  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production297UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XcharlengthNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xCharLength> ::= T_ICON  ;
     */
    public void reduceByProduction298(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCharLength> ::= T_ICON  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production298UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XcharlengthNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xCharLenParamValue> ::= <xExpr>  ;
     */
    public void reduceByProduction299(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCharLenParamValue> ::= <xExpr>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production299UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XcharlenparamvalueNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xCharLenParamValue> ::= T_ASTERISK  ;
     */
    public void reduceByProduction300(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCharLenParamValue> ::= T_ASTERISK  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production300UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XcharlenparamvalueNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xAccessSpec> ::= T_PUBLIC  ;
     */
    public void reduceByProduction301(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAccessSpec> ::= T_PUBLIC  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production301UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XaccessspecNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xAccessSpec> ::= T_PRIVATE  ;
     */
    public void reduceByProduction302(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAccessSpec> ::= T_PRIVATE  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production302UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XaccessspecNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xIntentSpec> ::= T_IN  ;
     */
    public void reduceByProduction303(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xIntentSpec> ::= T_IN  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production303UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XintentspecNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xIntentSpec> ::= T_OUT  ;
     */
    public void reduceByProduction304(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xIntentSpec> ::= T_OUT  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production304UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XintentspecNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xIntentSpec> ::= T_INOUT  ;
     */
    public void reduceByProduction305(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xIntentSpec> ::= T_INOUT  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production305UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XintentspecNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xIntentSpec> ::= T_IN T_OUT  ;
     */
    public void reduceByProduction306(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xIntentSpec> ::= T_IN T_OUT  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production306UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XintentspecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xArraySpec> ::= <xExplicitShapeSpecList>  ;
     */
    public void reduceByProduction307(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xArraySpec> ::= <xExplicitShapeSpecList>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production307UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XarrayspecNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xArraySpec> ::= <xAssumedSizeSpec>  ;
     */
    public void reduceByProduction308(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xArraySpec> ::= <xAssumedSizeSpec>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production308UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XarrayspecNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xArraySpec> ::= <xAssumedShapeSpecList>  ;
     */
    public void reduceByProduction309(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xArraySpec> ::= <xAssumedShapeSpecList>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production309UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XarrayspecNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xArraySpec> ::= <xDeferredShapeSpecList>  ;
     */
    public void reduceByProduction310(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xArraySpec> ::= <xDeferredShapeSpecList>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production310UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XarrayspecNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xAssumedShapeSpecList> ::= <xLowerBound> T_COLON  ;
     */
    public void reduceByProduction311(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssumedShapeSpecList> ::= <xLowerBound> T_COLON  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production311UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XassumedshapespeclistNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xAssumedShapeSpecList> ::= <xDeferredShapeSpecList> T_COMMA <xLowerBound> T_COLON  ;
     */
    public void reduceByProduction312(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssumedShapeSpecList> ::= <xDeferredShapeSpecList> T_COMMA <xLowerBound> T_COLON  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production312UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XassumedshapespeclistNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xAssumedShapeSpecList> ::= <xAssumedShapeSpecList> T_COMMA <xAssumedShapeSpec>  ;
     */
    public void reduceByProduction313(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssumedShapeSpecList> ::= <xAssumedShapeSpecList> T_COMMA <xAssumedShapeSpec>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production313UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XassumedshapespeclistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xExplicitShapeSpecList> ::= <xExplicitShapeSpec>  ;
     */
    public void reduceByProduction314(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xExplicitShapeSpecList> ::= <xExplicitShapeSpec>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production314UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XexplicitshapespeclistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xExplicitShapeSpecList> ::= <xExplicitShapeSpecList> T_COMMA <xExplicitShapeSpec>  ;
     */
    public void reduceByProduction315(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xExplicitShapeSpecList> ::= <xExplicitShapeSpecList> T_COMMA <xExplicitShapeSpec>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production315UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XexplicitshapespeclistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xExplicitShapeSpec> ::= <xLowerBound> T_COLON <xUpperBound>  ;
     */
    public void reduceByProduction316(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xExplicitShapeSpec> ::= <xLowerBound> T_COLON <xUpperBound>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production316UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XexplicitshapespecNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xExplicitShapeSpec> ::= <xUpperBound>  ;
     */
    public void reduceByProduction317(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xExplicitShapeSpec> ::= <xUpperBound>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production317UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XexplicitshapespecNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xLowerBound> ::= <xExpr>  ;
     */
    public void reduceByProduction318(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLowerBound> ::= <xExpr>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production318UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XlowerboundNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xUpperBound> ::= <xExpr>  ;
     */
    public void reduceByProduction319(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUpperBound> ::= <xExpr>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production319UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XupperboundNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xAssumedShapeSpec> ::= <xLowerBound> T_COLON  ;
     */
    public void reduceByProduction320(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssumedShapeSpec> ::= <xLowerBound> T_COLON  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production320UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XassumedshapespecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xAssumedShapeSpec> ::= T_COLON  ;
     */
    public void reduceByProduction321(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssumedShapeSpec> ::= T_COLON  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production321UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XassumedshapespecNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xDeferredShapeSpecList> ::= <xDeferredShapeSpec>  ;
     */
    public void reduceByProduction322(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDeferredShapeSpecList> ::= <xDeferredShapeSpec>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production322UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XdeferredshapespeclistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xDeferredShapeSpecList> ::= <xDeferredShapeSpecList> T_COMMA <xDeferredShapeSpec>  ;
     */
    public void reduceByProduction323(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDeferredShapeSpecList> ::= <xDeferredShapeSpecList> T_COMMA <xDeferredShapeSpec>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production323UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XdeferredshapespeclistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xDeferredShapeSpec> ::= T_COLON  ;
     */
    public void reduceByProduction324(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDeferredShapeSpec> ::= T_COLON  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production324UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XdeferredshapespecNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xAssumedSizeSpec> ::= T_ASTERISK  ;
     */
    public void reduceByProduction325(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssumedSizeSpec> ::= T_ASTERISK  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production325UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XassumedsizespecNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xAssumedSizeSpec> ::= <xLowerBound> T_COLON T_ASTERISK  ;
     */
    public void reduceByProduction326(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssumedSizeSpec> ::= <xLowerBound> T_COLON T_ASTERISK  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production326UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XassumedsizespecNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xAssumedSizeSpec> ::= <xExplicitShapeSpecList> T_COMMA T_ASTERISK  ;
     */
    public void reduceByProduction327(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssumedSizeSpec> ::= <xExplicitShapeSpecList> T_COMMA T_ASTERISK  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production327UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XassumedsizespecNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xAssumedSizeSpec> ::= <xExplicitShapeSpecList> T_COMMA <xLowerBound> T_COLON T_ASTERISK  ;
     */
    public void reduceByProduction328(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssumedSizeSpec> ::= <xExplicitShapeSpecList> T_COMMA <xLowerBound> T_COLON T_ASTERISK  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production328UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XassumedsizespecNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xIntentStmt> ::= T_INTENT T_LPAREN <xIntentSpec> T_RPAREN <xIntentParList> T_EOS  ;
     */
    public void reduceByProduction329(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xIntentStmt> ::= T_INTENT T_LPAREN <xIntentSpec> T_RPAREN <xIntentParList> T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production329UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XintentstmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xIntentStmt> ::= T_INTENT T_LPAREN <xIntentSpec> T_RPAREN <xIntentStmt@7> <xIntentParList> T_EOS  ;
     */
    public void reduceByProduction330(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xIntentStmt> ::= T_INTENT T_LPAREN <xIntentSpec> T_RPAREN <xIntentStmt@7> <xIntentParList> T_EOS  ;
        Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v7 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production330UserAction(v1, v2, v3, v4, v5, v6, v7, v8);

        // The production has 7 symbols on its RHS
        parser.reduce(Nonterminal.XintentstmtNonterminal.getInstance(), 7, userValue);
    }

    /**
     * Reduce by <xIntentStmt> ::= <xLblDef> T_INTENT T_LPAREN <xIntentSpec> T_RPAREN <xIntentParList> T_EOS  ;
     */
    public void reduceByProduction331(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xIntentStmt> ::= <xLblDef> T_INTENT T_LPAREN <xIntentSpec> T_RPAREN <xIntentParList> T_EOS  ;
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production331UserAction(v1, v2, v3, v4, v5, v6, v7);

        // The production has 7 symbols on its RHS
        parser.reduce(Nonterminal.XintentstmtNonterminal.getInstance(), 7, userValue);
    }

    /**
     * Reduce by <xIntentStmt> ::= <xLblDef> T_INTENT T_LPAREN <xIntentSpec> T_RPAREN <xIntentStmt@7> <xIntentParList> T_EOS  ;
     */
    public void reduceByProduction332(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xIntentStmt> ::= <xLblDef> T_INTENT T_LPAREN <xIntentSpec> T_RPAREN <xIntentStmt@7> <xIntentParList> T_EOS  ;
        Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v8 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production332UserAction(v1, v2, v3, v4, v5, v6, v7, v8, v9);

        // The production has 8 symbols on its RHS
        parser.reduce(Nonterminal.XintentstmtNonterminal.getInstance(), 8, userValue);
    }

    /**
     * Reduce by <xIntentParList> ::= <xIntentPar>  ;
     */
    public void reduceByProduction333(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xIntentParList> ::= <xIntentPar>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production333UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XintentparlistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xIntentParList> ::= <xIntentParList> T_COMMA <xIntentPar>  ;
     */
    public void reduceByProduction334(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xIntentParList> ::= <xIntentParList> T_COMMA <xIntentPar>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production334UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XintentparlistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xIntentPar> ::= <xDummyArgName>  ;
     */
    public void reduceByProduction335(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xIntentPar> ::= <xDummyArgName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production335UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XintentparNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xOptionalStmt> ::= T_OPTIONAL <xOptionalParList> T_EOS  ;
     */
    public void reduceByProduction336(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xOptionalStmt> ::= T_OPTIONAL <xOptionalParList> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production336UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XoptionalstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xOptionalStmt> ::= T_OPTIONAL <xOptionalStmt@8> <xOptionalParList> T_EOS  ;
     */
    public void reduceByProduction337(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xOptionalStmt> ::= T_OPTIONAL <xOptionalStmt@8> <xOptionalParList> T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production337UserAction(v1, v2, v3, v4, v5);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XoptionalstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xOptionalStmt> ::= <xLblDef> T_OPTIONAL <xOptionalParList> T_EOS  ;
     */
    public void reduceByProduction338(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xOptionalStmt> ::= <xLblDef> T_OPTIONAL <xOptionalParList> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production338UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XoptionalstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xOptionalStmt> ::= <xLblDef> T_OPTIONAL <xOptionalStmt@8> <xOptionalParList> T_EOS  ;
     */
    public void reduceByProduction339(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xOptionalStmt> ::= <xLblDef> T_OPTIONAL <xOptionalStmt@8> <xOptionalParList> T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production339UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XoptionalstmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xOptionalParList> ::= <xOptionalPar>  ;
     */
    public void reduceByProduction340(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xOptionalParList> ::= <xOptionalPar>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production340UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XoptionalparlistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xOptionalParList> ::= <xOptionalParList> T_COMMA <xOptionalPar>  ;
     */
    public void reduceByProduction341(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xOptionalParList> ::= <xOptionalParList> T_COMMA <xOptionalPar>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production341UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XoptionalparlistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xOptionalPar> ::= <xDummyArgName>  ;
     */
    public void reduceByProduction342(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xOptionalPar> ::= <xDummyArgName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production342UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XoptionalparNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xAccessStmt> ::= <xAccessSpec> <xAccessIdList> T_EOS  ;
     */
    public void reduceByProduction343(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAccessStmt> ::= <xAccessSpec> <xAccessIdList> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production343UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XaccessstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xAccessStmt> ::= <xAccessSpec> <xAccessStmt@9> <xAccessIdList> T_EOS  ;
     */
    public void reduceByProduction344(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAccessStmt> ::= <xAccessSpec> <xAccessStmt@9> <xAccessIdList> T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production344UserAction(v1, v2, v3, v4, v5);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XaccessstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xAccessStmt> ::= <xLblDef> <xAccessSpec> <xAccessIdList> T_EOS  ;
     */
    public void reduceByProduction345(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAccessStmt> ::= <xLblDef> <xAccessSpec> <xAccessIdList> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production345UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XaccessstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xAccessStmt> ::= <xLblDef> <xAccessSpec> <xAccessStmt@9> <xAccessIdList> T_EOS  ;
     */
    public void reduceByProduction346(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAccessStmt> ::= <xLblDef> <xAccessSpec> <xAccessStmt@9> <xAccessIdList> T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production346UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XaccessstmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xAccessStmt> ::= <xAccessSpec> T_EOS  ;
     */
    public void reduceByProduction347(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAccessStmt> ::= <xAccessSpec> T_EOS  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production347UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XaccessstmtNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xAccessStmt> ::= <xLblDef> <xAccessSpec> T_EOS  ;
     */
    public void reduceByProduction348(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAccessStmt> ::= <xLblDef> <xAccessSpec> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production348UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XaccessstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xAccessIdList> ::= <xAccessId>  ;
     */
    public void reduceByProduction349(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAccessIdList> ::= <xAccessId>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production349UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XaccessidlistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xAccessIdList> ::= <xAccessIdList> T_COMMA <xAccessId>  ;
     */
    public void reduceByProduction350(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAccessIdList> ::= <xAccessIdList> T_COMMA <xAccessId>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production350UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XaccessidlistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xAccessId> ::= <xGenericName>  ;
     */
    public void reduceByProduction351(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAccessId> ::= <xGenericName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production351UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XaccessidNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xAccessId> ::= <xGenericSpec>  ;
     */
    public void reduceByProduction352(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAccessId> ::= <xGenericSpec>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production352UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XaccessidNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSaveStmt> ::= T_SAVE T_EOS  ;
     */
    public void reduceByProduction353(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSaveStmt> ::= T_SAVE T_EOS  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production353UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XsavestmtNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xSaveStmt> ::= <xLblDef> T_SAVE T_EOS  ;
     */
    public void reduceByProduction354(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSaveStmt> ::= <xLblDef> T_SAVE T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production354UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XsavestmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xSaveStmt> ::= T_SAVE <xSavedEntityList> T_EOS  ;
     */
    public void reduceByProduction355(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSaveStmt> ::= T_SAVE <xSavedEntityList> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production355UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XsavestmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xSaveStmt> ::= T_SAVE <xSaveStmt@10> <xSavedEntityList> T_EOS  ;
     */
    public void reduceByProduction356(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSaveStmt> ::= T_SAVE <xSaveStmt@10> <xSavedEntityList> T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production356UserAction(v1, v2, v3, v4, v5);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XsavestmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xSaveStmt> ::= <xLblDef> T_SAVE <xSavedEntityList> T_EOS  ;
     */
    public void reduceByProduction357(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSaveStmt> ::= <xLblDef> T_SAVE <xSavedEntityList> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production357UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XsavestmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xSaveStmt> ::= <xLblDef> T_SAVE <xSaveStmt@10> <xSavedEntityList> T_EOS  ;
     */
    public void reduceByProduction358(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSaveStmt> ::= <xLblDef> T_SAVE <xSaveStmt@10> <xSavedEntityList> T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production358UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XsavestmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xSavedEntityList> ::= <xSavedEntity>  ;
     */
    public void reduceByProduction359(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSavedEntityList> ::= <xSavedEntity>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production359UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XsavedentitylistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSavedEntityList> ::= <xSavedEntityList> T_COMMA <xSavedEntity>  ;
     */
    public void reduceByProduction360(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSavedEntityList> ::= <xSavedEntityList> T_COMMA <xSavedEntity>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production360UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XsavedentitylistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xSavedEntity> ::= <xVariableName>  ;
     */
    public void reduceByProduction361(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSavedEntity> ::= <xVariableName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production361UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XsavedentityNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSavedEntity> ::= <xSavedCommonBlock>  ;
     */
    public void reduceByProduction362(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSavedEntity> ::= <xSavedCommonBlock>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production362UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XsavedentityNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSavedCommonBlock> ::= T_SLASH <xCommonBlockName> T_SLASH  ;
     */
    public void reduceByProduction363(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSavedCommonBlock> ::= T_SLASH <xCommonBlockName> T_SLASH  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production363UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XsavedcommonblockNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xDimensionStmt> ::= T_DIMENSION <xArrayDeclaratorList> T_EOS  ;
     */
    public void reduceByProduction364(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDimensionStmt> ::= T_DIMENSION <xArrayDeclaratorList> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production364UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XdimensionstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xDimensionStmt> ::= T_DIMENSION <xDimensionStmt@11> <xArrayDeclaratorList> T_EOS  ;
     */
    public void reduceByProduction365(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDimensionStmt> ::= T_DIMENSION <xDimensionStmt@11> <xArrayDeclaratorList> T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production365UserAction(v1, v2, v3, v4, v5);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XdimensionstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xDimensionStmt> ::= <xLblDef> T_DIMENSION <xArrayDeclaratorList> T_EOS  ;
     */
    public void reduceByProduction366(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDimensionStmt> ::= <xLblDef> T_DIMENSION <xArrayDeclaratorList> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production366UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XdimensionstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xDimensionStmt> ::= <xLblDef> T_DIMENSION <xDimensionStmt@11> <xArrayDeclaratorList> T_EOS  ;
     */
    public void reduceByProduction367(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDimensionStmt> ::= <xLblDef> T_DIMENSION <xDimensionStmt@11> <xArrayDeclaratorList> T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production367UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XdimensionstmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xArrayDeclaratorList> ::= <xArrayDeclarator>  ;
     */
    public void reduceByProduction368(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xArrayDeclaratorList> ::= <xArrayDeclarator>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production368UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XarraydeclaratorlistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xArrayDeclaratorList> ::= <xArrayDeclaratorList> T_COMMA <xArrayDeclarator>  ;
     */
    public void reduceByProduction369(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xArrayDeclaratorList> ::= <xArrayDeclaratorList> T_COMMA <xArrayDeclarator>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production369UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XarraydeclaratorlistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xArrayDeclarator> ::= <xVariableName> T_LPAREN <xArraySpec> T_RPAREN  ;
     */
    public void reduceByProduction370(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xArrayDeclarator> ::= <xVariableName> T_LPAREN <xArraySpec> T_RPAREN  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production370UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XarraydeclaratorNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xAllocatableStmt> ::= T_ALLOCATABLE <xArrayAllocationList> T_EOS  ;
     */
    public void reduceByProduction371(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAllocatableStmt> ::= T_ALLOCATABLE <xArrayAllocationList> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production371UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XallocatablestmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xAllocatableStmt> ::= T_ALLOCATABLE <xAllocatableStmt@12> <xArrayAllocationList> T_EOS  ;
     */
    public void reduceByProduction372(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAllocatableStmt> ::= T_ALLOCATABLE <xAllocatableStmt@12> <xArrayAllocationList> T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production372UserAction(v1, v2, v3, v4, v5);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XallocatablestmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xAllocatableStmt> ::= <xLblDef> T_ALLOCATABLE <xArrayAllocationList> T_EOS  ;
     */
    public void reduceByProduction373(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAllocatableStmt> ::= <xLblDef> T_ALLOCATABLE <xArrayAllocationList> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production373UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XallocatablestmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xAllocatableStmt> ::= <xLblDef> T_ALLOCATABLE <xAllocatableStmt@12> <xArrayAllocationList> T_EOS  ;
     */
    public void reduceByProduction374(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAllocatableStmt> ::= <xLblDef> T_ALLOCATABLE <xAllocatableStmt@12> <xArrayAllocationList> T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production374UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XallocatablestmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xArrayAllocationList> ::= <xArrayAllocation>  ;
     */
    public void reduceByProduction375(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xArrayAllocationList> ::= <xArrayAllocation>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production375UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XarrayallocationlistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xArrayAllocationList> ::= <xArrayAllocationList> T_COMMA <xArrayAllocation>  ;
     */
    public void reduceByProduction376(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xArrayAllocationList> ::= <xArrayAllocationList> T_COMMA <xArrayAllocation>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production376UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XarrayallocationlistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xArrayAllocation> ::= <xArrayName>  ;
     */
    public void reduceByProduction377(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xArrayAllocation> ::= <xArrayName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production377UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XarrayallocationNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xArrayAllocation> ::= <xArrayName> T_LPAREN <xDeferredShapeSpecList> T_RPAREN  ;
     */
    public void reduceByProduction378(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xArrayAllocation> ::= <xArrayName> T_LPAREN <xDeferredShapeSpecList> T_RPAREN  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production378UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XarrayallocationNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xPointerStmt> ::= T_POINTER <xPointerStmtObjectList> T_EOS  ;
     */
    public void reduceByProduction379(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPointerStmt> ::= T_POINTER <xPointerStmtObjectList> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production379UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XpointerstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xPointerStmt> ::= T_POINTER <xPointerStmt@13> <xPointerStmtObjectList> T_EOS  ;
     */
    public void reduceByProduction380(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPointerStmt> ::= T_POINTER <xPointerStmt@13> <xPointerStmtObjectList> T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production380UserAction(v1, v2, v3, v4, v5);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XpointerstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xPointerStmt> ::= <xLblDef> T_POINTER <xPointerStmtObjectList> T_EOS  ;
     */
    public void reduceByProduction381(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPointerStmt> ::= <xLblDef> T_POINTER <xPointerStmtObjectList> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production381UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XpointerstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xPointerStmt> ::= <xLblDef> T_POINTER <xPointerStmt@13> <xPointerStmtObjectList> T_EOS  ;
     */
    public void reduceByProduction382(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPointerStmt> ::= <xLblDef> T_POINTER <xPointerStmt@13> <xPointerStmtObjectList> T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production382UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XpointerstmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xPointerStmtObjectList> ::= <xPointerStmtObject>  ;
     */
    public void reduceByProduction383(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPointerStmtObjectList> ::= <xPointerStmtObject>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production383UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XpointerstmtobjectlistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xPointerStmtObjectList> ::= <xPointerStmtObjectList> T_COMMA <xPointerStmtObject>  ;
     */
    public void reduceByProduction384(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPointerStmtObjectList> ::= <xPointerStmtObjectList> T_COMMA <xPointerStmtObject>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production384UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XpointerstmtobjectlistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xPointerStmtObject> ::= <xPointerName>  ;
     */
    public void reduceByProduction385(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPointerStmtObject> ::= <xPointerName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production385UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XpointerstmtobjectNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xPointerStmtObject> ::= <xPointerName> T_LPAREN <xDeferredShapeSpecList> T_RPAREN  ;
     */
    public void reduceByProduction386(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPointerStmtObject> ::= <xPointerName> T_LPAREN <xDeferredShapeSpecList> T_RPAREN  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production386UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XpointerstmtobjectNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xPointerName> ::= T_IDENT  ;
     */
    public void reduceByProduction387(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPointerName> ::= T_IDENT  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production387UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XpointernameNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xTargetStmt> ::= T_TARGET <xTargetObjectList> T_EOS  ;
     */
    public void reduceByProduction388(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xTargetStmt> ::= T_TARGET <xTargetObjectList> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production388UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XtargetstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xTargetStmt> ::= T_TARGET <xTargetStmt@14> <xTargetObjectList> T_EOS  ;
     */
    public void reduceByProduction389(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xTargetStmt> ::= T_TARGET <xTargetStmt@14> <xTargetObjectList> T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production389UserAction(v1, v2, v3, v4, v5);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XtargetstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xTargetStmt> ::= <xLblDef> T_TARGET <xTargetObjectList> T_EOS  ;
     */
    public void reduceByProduction390(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xTargetStmt> ::= <xLblDef> T_TARGET <xTargetObjectList> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production390UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XtargetstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xTargetStmt> ::= <xLblDef> T_TARGET <xTargetStmt@14> <xTargetObjectList> T_EOS  ;
     */
    public void reduceByProduction391(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xTargetStmt> ::= <xLblDef> T_TARGET <xTargetStmt@14> <xTargetObjectList> T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production391UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XtargetstmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xTargetObjectList> ::= <xTargetObject>  ;
     */
    public void reduceByProduction392(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xTargetObjectList> ::= <xTargetObject>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production392UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XtargetobjectlistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xTargetObjectList> ::= <xTargetObjectList> T_COMMA <xTargetObject>  ;
     */
    public void reduceByProduction393(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xTargetObjectList> ::= <xTargetObjectList> T_COMMA <xTargetObject>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production393UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XtargetobjectlistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xTargetObject> ::= <xTargetName>  ;
     */
    public void reduceByProduction394(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xTargetObject> ::= <xTargetName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production394UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XtargetobjectNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xTargetObject> ::= <xTargetName> T_LPAREN <xArraySpec> T_RPAREN  ;
     */
    public void reduceByProduction395(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xTargetObject> ::= <xTargetName> T_LPAREN <xArraySpec> T_RPAREN  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production395UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XtargetobjectNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xTargetName> ::= T_IDENT  ;
     */
    public void reduceByProduction396(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xTargetName> ::= T_IDENT  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production396UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XtargetnameNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xParameterStmt> ::= T_PARAMETER T_LPAREN <xNamedConstantDefList> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction397(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xParameterStmt> ::= T_PARAMETER T_LPAREN <xNamedConstantDefList> T_RPAREN T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production397UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XparameterstmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xParameterStmt> ::= <xLblDef> T_PARAMETER T_LPAREN <xNamedConstantDefList> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction398(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xParameterStmt> ::= <xLblDef> T_PARAMETER T_LPAREN <xNamedConstantDefList> T_RPAREN T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production398UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XparameterstmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xNamedConstantDefList> ::= <xNamedConstantDef>  ;
     */
    public void reduceByProduction399(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xNamedConstantDefList> ::= <xNamedConstantDef>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production399UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XnamedconstantdeflistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xNamedConstantDefList> ::= <xNamedConstantDefList> T_COMMA <xNamedConstantDef>  ;
     */
    public void reduceByProduction400(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xNamedConstantDefList> ::= <xNamedConstantDefList> T_COMMA <xNamedConstantDef>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production400UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XnamedconstantdeflistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xNamedConstantDef> ::= <xNamedConstant> T_EQUALS <xExpr>  ;
     */
    public void reduceByProduction401(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xNamedConstantDef> ::= <xNamedConstant> T_EQUALS <xExpr>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production401UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XnamedconstantdefNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xDataStmt> ::= T_DATA <xDatalist> T_EOS  ;
     */
    public void reduceByProduction402(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDataStmt> ::= T_DATA <xDatalist> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production402UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XdatastmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xDataStmt> ::= <xLblDef> T_DATA <xDatalist> T_EOS  ;
     */
    public void reduceByProduction403(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDataStmt> ::= <xLblDef> T_DATA <xDatalist> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production403UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XdatastmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xDatalist> ::= <xDataStmtSet>  ;
     */
    public void reduceByProduction404(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDatalist> ::= <xDataStmtSet>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production404UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XdatalistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xDatalist> ::= <xDatalist> <xDataStmtSet>  ;
     */
    public void reduceByProduction405(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDatalist> ::= <xDatalist> <xDataStmtSet>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production405UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XdatalistNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xDatalist> ::= <xDatalist> T_COMMA <xDataStmtSet>  ;
     */
    public void reduceByProduction406(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDatalist> ::= <xDatalist> T_COMMA <xDataStmtSet>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production406UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XdatalistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xDataStmtSet> ::= <xDataStmtObjectList> T_SLASH <xDataStmtValueList> T_SLASH  ;
     */
    public void reduceByProduction407(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDataStmtSet> ::= <xDataStmtObjectList> T_SLASH <xDataStmtValueList> T_SLASH  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production407UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XdatastmtsetNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xDataStmtObjectList> ::= <xDataStmtObject>  ;
     */
    public void reduceByProduction408(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDataStmtObjectList> ::= <xDataStmtObject>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production408UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XdatastmtobjectlistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xDataStmtObjectList> ::= <xDataStmtObjectList> T_COMMA <xDataStmtObject>  ;
     */
    public void reduceByProduction409(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDataStmtObjectList> ::= <xDataStmtObjectList> T_COMMA <xDataStmtObject>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production409UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XdatastmtobjectlistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xDataStmtObject> ::= <xVariable>  ;
     */
    public void reduceByProduction410(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDataStmtObject> ::= <xVariable>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production410UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XdatastmtobjectNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xDataStmtObject> ::= <xDataImpliedDo>  ;
     */
    public void reduceByProduction411(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDataStmtObject> ::= <xDataImpliedDo>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production411UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XdatastmtobjectNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xDataImpliedDo> ::= T_LPAREN <xDataIDoObjectList> T_COMMA <T_xImpliedDoVariable> T_EQUALS <xExpr> T_COMMA <xExpr> T_RPAREN  ;
     */
    public void reduceByProduction412(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDataImpliedDo> ::= T_LPAREN <xDataIDoObjectList> T_COMMA <T_xImpliedDoVariable> T_EQUALS <xExpr> T_COMMA <xExpr> T_RPAREN  ;
        Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v8 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production412UserAction(v1, v2, v3, v4, v5, v6, v7, v8, v9);

        // The production has 9 symbols on its RHS
        parser.reduce(Nonterminal.XdataimplieddoNonterminal.getInstance(), 9, userValue);
    }

    /**
     * Reduce by <xDataImpliedDo> ::= T_LPAREN <xDataIDoObjectList> T_COMMA <T_xImpliedDoVariable> T_EQUALS <xExpr> T_COMMA <xExpr> T_COMMA <xExpr> T_RPAREN  ;
     */
    public void reduceByProduction413(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDataImpliedDo> ::= T_LPAREN <xDataIDoObjectList> T_COMMA <T_xImpliedDoVariable> T_EQUALS <xExpr> T_COMMA <xExpr> T_COMMA <xExpr> T_RPAREN  ;
        Token v11 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v10 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v8 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production413UserAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);

        // The production has 11 symbols on its RHS
        parser.reduce(Nonterminal.XdataimplieddoNonterminal.getInstance(), 11, userValue);
    }

    /**
     * Reduce by <xDataIDoObjectList> ::= <xDataIDoObject>  ;
     */
    public void reduceByProduction414(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDataIDoObjectList> ::= <xDataIDoObject>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production414UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XdataidoobjectlistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xDataIDoObjectList> ::= <xDataIDoObjectList> T_COMMA <xDataIDoObject>  ;
     */
    public void reduceByProduction415(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDataIDoObjectList> ::= <xDataIDoObjectList> T_COMMA <xDataIDoObject>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production415UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XdataidoobjectlistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xDataIDoObject> ::= <xArrayElement>  ;
     */
    public void reduceByProduction416(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDataIDoObject> ::= <xArrayElement>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production416UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XdataidoobjectNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xDataIDoObject> ::= <xDataImpliedDo>  ;
     */
    public void reduceByProduction417(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDataIDoObject> ::= <xDataImpliedDo>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production417UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XdataidoobjectNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xDataIDoObject> ::= <xStructureComponent>  ;
     */
    public void reduceByProduction418(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDataIDoObject> ::= <xStructureComponent>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production418UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XdataidoobjectNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xDataStmtValueList> ::= <xDataStmtValue>  ;
     */
    public void reduceByProduction419(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDataStmtValueList> ::= <xDataStmtValue>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production419UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XdatastmtvaluelistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xDataStmtValueList> ::= <xDataStmtValueList> T_COMMA <xDataStmtValue>  ;
     */
    public void reduceByProduction420(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDataStmtValueList> ::= <xDataStmtValueList> T_COMMA <xDataStmtValue>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production420UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XdatastmtvaluelistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xDataStmtValue> ::= <xDataStmtConstant>  ;
     */
    public void reduceByProduction421(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDataStmtValue> ::= <xDataStmtConstant>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production421UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XdatastmtvalueNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xDataStmtValue> ::= T_ICON T_ASTERISK <xDataStmtConstant>  ;
     */
    public void reduceByProduction422(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDataStmtValue> ::= T_ICON T_ASTERISK <xDataStmtConstant>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production422UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XdatastmtvalueNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xDataStmtValue> ::= <xNamedConstantUse> T_ASTERISK <xDataStmtConstant>  ;
     */
    public void reduceByProduction423(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDataStmtValue> ::= <xNamedConstantUse> T_ASTERISK <xDataStmtConstant>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production423UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XdatastmtvalueNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xDataStmtConstant> ::= <xConstant>  ;
     */
    public void reduceByProduction424(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDataStmtConstant> ::= <xConstant>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production424UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XdatastmtconstantNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xDataStmtConstant> ::= T_NULL T_LPAREN T_RPAREN  ;
     */
    public void reduceByProduction425(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDataStmtConstant> ::= T_NULL T_LPAREN T_RPAREN  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production425UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XdatastmtconstantNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <T_xImplicitStmt> ::= T_IMPLICIT <T_xImplicitSpecList> T_EOS  ;
     */
    public void reduceByProduction426(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <T_xImplicitStmt> ::= T_IMPLICIT <T_xImplicitSpecList> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production426UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.TXimplicitstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <T_xImplicitStmt> ::= <xLblDef> T_IMPLICIT <T_xImplicitSpecList> T_EOS  ;
     */
    public void reduceByProduction427(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <T_xImplicitStmt> ::= <xLblDef> T_IMPLICIT <T_xImplicitSpecList> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production427UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.TXimplicitstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <T_xImplicitStmt> ::= T_IMPLICIT T_NONE T_EOS  ;
     */
    public void reduceByProduction428(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <T_xImplicitStmt> ::= T_IMPLICIT T_NONE T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production428UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.TXimplicitstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <T_xImplicitStmt> ::= <xLblDef> T_IMPLICIT T_NONE T_EOS  ;
     */
    public void reduceByProduction429(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <T_xImplicitStmt> ::= <xLblDef> T_IMPLICIT T_NONE T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production429UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.TXimplicitstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <T_xImplicitSpecList> ::= <T_xImplicitSpec>  ;
     */
    public void reduceByProduction430(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <T_xImplicitSpecList> ::= <T_xImplicitSpec>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production430UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.TXimplicitspeclistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <T_xImplicitSpecList> ::= <T_xImplicitSpecList> T_COMMA <T_xImplicitSpec>  ;
     */
    public void reduceByProduction431(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <T_xImplicitSpecList> ::= <T_xImplicitSpecList> T_COMMA <T_xImplicitSpec>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production431UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.TXimplicitspeclistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <T_xImplicitSpec> ::= <xTypeSpec> T_xImpl  ;
     */
    public void reduceByProduction432(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <T_xImplicitSpec> ::= <xTypeSpec> T_xImpl  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production432UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.TXimplicitspecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xNamelistStmt> ::= T_NAMELIST <xNamelistGroups> T_EOS  ;
     */
    public void reduceByProduction433(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xNamelistStmt> ::= T_NAMELIST <xNamelistGroups> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production433UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XnameliststmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xNamelistStmt> ::= <xLblDef> T_NAMELIST <xNamelistGroups> T_EOS  ;
     */
    public void reduceByProduction434(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xNamelistStmt> ::= <xLblDef> T_NAMELIST <xNamelistGroups> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production434UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XnameliststmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xNamelistGroups> ::= T_SLASH <xNamelistGroupName> T_SLASH <xNamelistGroupObject>  ;
     */
    public void reduceByProduction435(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xNamelistGroups> ::= T_SLASH <xNamelistGroupName> T_SLASH <xNamelistGroupObject>  ;
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production435UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XnamelistgroupsNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xNamelistGroups> ::= <xNamelistGroups> T_SLASH <xNamelistGroupName> T_SLASH <xNamelistGroupObject>  ;
     */
    public void reduceByProduction436(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xNamelistGroups> ::= <xNamelistGroups> T_SLASH <xNamelistGroupName> T_SLASH <xNamelistGroupObject>  ;
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production436UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XnamelistgroupsNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xNamelistGroups> ::= <xNamelistGroups> T_COMMA T_SLASH <xNamelistGroupName> T_SLASH <xNamelistGroupObject>  ;
     */
    public void reduceByProduction437(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xNamelistGroups> ::= <xNamelistGroups> T_COMMA T_SLASH <xNamelistGroupName> T_SLASH <xNamelistGroupObject>  ;
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production437UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XnamelistgroupsNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xNamelistGroups> ::= <xNamelistGroups> T_COMMA <xNamelistGroupObject>  ;
     */
    public void reduceByProduction438(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xNamelistGroups> ::= <xNamelistGroups> T_COMMA <xNamelistGroupObject>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production438UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XnamelistgroupsNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xNamelistGroupObject> ::= <xVariableName>  ;
     */
    public void reduceByProduction439(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xNamelistGroupObject> ::= <xVariableName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production439UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XnamelistgroupobjectNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xEquivalenceStmt> ::= T_EQUIVALENCE <xEquivalenceSetList> T_EOS  ;
     */
    public void reduceByProduction440(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEquivalenceStmt> ::= T_EQUIVALENCE <xEquivalenceSetList> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production440UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XequivalencestmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEquivalenceStmt> ::= <xLblDef> T_EQUIVALENCE <xEquivalenceSetList> T_EOS  ;
     */
    public void reduceByProduction441(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEquivalenceStmt> ::= <xLblDef> T_EQUIVALENCE <xEquivalenceSetList> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production441UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XequivalencestmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEquivalenceSetList> ::= <xEquivalenceSet>  ;
     */
    public void reduceByProduction442(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEquivalenceSetList> ::= <xEquivalenceSet>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production442UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XequivalencesetlistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xEquivalenceSetList> ::= <xEquivalenceSetList> T_COMMA <xEquivalenceSet>  ;
     */
    public void reduceByProduction443(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEquivalenceSetList> ::= <xEquivalenceSetList> T_COMMA <xEquivalenceSet>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production443UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XequivalencesetlistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEquivalenceSet> ::= T_LPAREN <xEquivalenceObject> T_COMMA <xEquivalenceObjectList> T_RPAREN  ;
     */
    public void reduceByProduction444(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEquivalenceSet> ::= T_LPAREN <xEquivalenceObject> T_COMMA <xEquivalenceObjectList> T_RPAREN  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production444UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XequivalencesetNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xEquivalenceObjectList> ::= <xEquivalenceObject>  ;
     */
    public void reduceByProduction445(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEquivalenceObjectList> ::= <xEquivalenceObject>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production445UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XequivalenceobjectlistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xEquivalenceObjectList> ::= <xEquivalenceObjectList> T_COMMA <xEquivalenceObject>  ;
     */
    public void reduceByProduction446(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEquivalenceObjectList> ::= <xEquivalenceObjectList> T_COMMA <xEquivalenceObject>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production446UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XequivalenceobjectlistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEquivalenceObject> ::= <xVariable>  ;
     */
    public void reduceByProduction447(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEquivalenceObject> ::= <xVariable>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production447UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XequivalenceobjectNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xCommonStmt> ::= T_COMMON <xComlist> T_EOS  ;
     */
    public void reduceByProduction448(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCommonStmt> ::= T_COMMON <xComlist> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production448UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XcommonstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xCommonStmt> ::= <xLblDef> T_COMMON <xComlist> T_EOS  ;
     */
    public void reduceByProduction449(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCommonStmt> ::= <xLblDef> T_COMMON <xComlist> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production449UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XcommonstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xComlist> ::= <xCommonBlockObject>  ;
     */
    public void reduceByProduction450(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xComlist> ::= <xCommonBlockObject>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production450UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XcomlistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xComlist> ::= <xComblock> <xCommonBlockObject>  ;
     */
    public void reduceByProduction451(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xComlist> ::= <xComblock> <xCommonBlockObject>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production451UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XcomlistNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xComlist> ::= <xComlist> T_COMMA <xCommonBlockObject>  ;
     */
    public void reduceByProduction452(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xComlist> ::= <xComlist> T_COMMA <xCommonBlockObject>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production452UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XcomlistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xComlist> ::= <xComlist> <xComblock> <xCommonBlockObject>  ;
     */
    public void reduceByProduction453(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xComlist> ::= <xComlist> <xComblock> <xCommonBlockObject>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production453UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XcomlistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xComlist> ::= <xComlist> T_COMMA <xComblock> <xCommonBlockObject>  ;
     */
    public void reduceByProduction454(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xComlist> ::= <xComlist> T_COMMA <xComblock> <xCommonBlockObject>  ;
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production454UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XcomlistNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xComblock> ::= T_SLASH T_SLASH  ;
     */
    public void reduceByProduction455(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xComblock> ::= T_SLASH T_SLASH  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production455UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XcomblockNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xComblock> ::= T_SLASH <xCommonBlockName> T_SLASH  ;
     */
    public void reduceByProduction456(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xComblock> ::= T_SLASH <xCommonBlockName> T_SLASH  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production456UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XcomblockNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xCommonBlockObject> ::= <xVariableName>  ;
     */
    public void reduceByProduction457(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCommonBlockObject> ::= <xVariableName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production457UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XcommonblockobjectNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xCommonBlockObject> ::= <xArrayDeclarator>  ;
     */
    public void reduceByProduction458(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCommonBlockObject> ::= <xArrayDeclarator>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production458UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XcommonblockobjectNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xVariable> ::= <xDataRef>  ;
     */
    public void reduceByProduction459(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xVariable> ::= <xDataRef>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production459UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XvariableNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xVariable> ::= <xDataRef> <xVariable@15>  ;
     */
    public void reduceByProduction460(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xVariable> ::= <xDataRef> <xVariable@15>  ;
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production460UserAction(v1, v2, v3, v4, v5);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XvariableNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xVariable> ::= <xSubstrConst>  ;
     */
    public void reduceByProduction461(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xVariable> ::= <xSubstrConst>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production461UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XvariableNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSubstrConst> ::= T_SCON <xSubstringRange>  ;
     */
    public void reduceByProduction462(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSubstrConst> ::= T_SCON <xSubstringRange>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production462UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XsubstrconstNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xVariableName> ::= T_IDENT  ;
     */
    public void reduceByProduction463(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xVariableName> ::= T_IDENT  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production463UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XvariablenameNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xScalarVariable> ::= <xVariableName>  ;
     */
    public void reduceByProduction464(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xScalarVariable> ::= <xVariableName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production464UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XscalarvariableNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xScalarVariable> ::= <xArrayElement>  ;
     */
    public void reduceByProduction465(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xScalarVariable> ::= <xArrayElement>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production465UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XscalarvariableNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSubstringRange> ::= T_LPAREN <xSubscriptTriplet> T_RPAREN  ;
     */
    public void reduceByProduction466(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSubstringRange> ::= T_LPAREN <xSubscriptTriplet> T_RPAREN  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production466UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XsubstringrangeNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xDataRef> ::= <xName>  ;
     */
    public void reduceByProduction467(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDataRef> ::= <xName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production467UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XdatarefNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xDataRef> ::= <xDataRef> T_PERCENT <xName>  ;
     */
    public void reduceByProduction468(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDataRef> ::= <xDataRef> T_PERCENT <xName>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production468UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XdatarefNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xDataRef> ::= <xDataRef> <xDataRef@17> T_PERCENT <xName>  ;
     */
    public void reduceByProduction469(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDataRef> ::= <xDataRef> <xDataRef@17> T_PERCENT <xName>  ;
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production469UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XdatarefNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xSFDataRef> ::= <xName> T_PERCENT <xName>  ;
     */
    public void reduceByProduction470(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSFDataRef> ::= <xName> T_PERCENT <xName>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production470UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XsfdatarefNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xSFDataRef> ::= <xName> T_LPAREN <xSectionSubscriptList> T_RPAREN  ;
     */
    public void reduceByProduction471(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSFDataRef> ::= <xName> T_LPAREN <xSectionSubscriptList> T_RPAREN  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production471UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XsfdatarefNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xSFDataRef> ::= <xSFDataRef> T_PERCENT <xName>  ;
     */
    public void reduceByProduction472(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSFDataRef> ::= <xSFDataRef> T_PERCENT <xName>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production472UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XsfdatarefNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xSFDataRef> ::= <xSFDataRef> <xSFDataRef@18> T_PERCENT <xName>  ;
     */
    public void reduceByProduction473(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSFDataRef> ::= <xSFDataRef> <xSFDataRef@18> T_PERCENT <xName>  ;
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production473UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XsfdatarefNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xStructureComponent> ::= <xVariableName> <xFieldSelector>  ;
     */
    public void reduceByProduction474(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xStructureComponent> ::= <xVariableName> <xFieldSelector>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production474UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XstructurecomponentNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xStructureComponent> ::= <xStructureComponent> <xFieldSelector>  ;
     */
    public void reduceByProduction475(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xStructureComponent> ::= <xStructureComponent> <xFieldSelector>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production475UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XstructurecomponentNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xFieldSelector> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN T_PERCENT <xName>  ;
     */
    public void reduceByProduction476(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFieldSelector> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN T_PERCENT <xName>  ;
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production476UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XfieldselectorNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xFieldSelector> ::= T_PERCENT <xName>  ;
     */
    public void reduceByProduction477(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFieldSelector> ::= T_PERCENT <xName>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production477UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XfieldselectorNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xArrayElement> ::= <xVariableName> T_LPAREN <xSectionSubscriptList> T_RPAREN  ;
     */
    public void reduceByProduction478(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xArrayElement> ::= <xVariableName> T_LPAREN <xSectionSubscriptList> T_RPAREN  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production478UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XarrayelementNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xArrayElement> ::= <xStructureComponent> T_LPAREN <xSectionSubscriptList> T_RPAREN  ;
     */
    public void reduceByProduction479(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xArrayElement> ::= <xStructureComponent> T_LPAREN <xSectionSubscriptList> T_RPAREN  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production479UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XarrayelementNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xSubscript> ::= <xExpr>  ;
     */
    public void reduceByProduction480(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSubscript> ::= <xExpr>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production480UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XsubscriptNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSectionSubscriptList> ::= <xSectionSubscript>  ;
     */
    public void reduceByProduction481(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSectionSubscriptList> ::= <xSectionSubscript>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production481UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XsectionsubscriptlistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSectionSubscriptList> ::= <xSectionSubscriptList> T_COMMA <xSectionSubscript>  ;
     */
    public void reduceByProduction482(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSectionSubscriptList> ::= <xSectionSubscriptList> T_COMMA <xSectionSubscript>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production482UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XsectionsubscriptlistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xSectionSubscript> ::= <xExpr>  ;
     */
    public void reduceByProduction483(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSectionSubscript> ::= <xExpr>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production483UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XsectionsubscriptNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSectionSubscript> ::= <xSubscriptTriplet>  ;
     */
    public void reduceByProduction484(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSectionSubscript> ::= <xSubscriptTriplet>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production484UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XsectionsubscriptNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSubscriptTriplet> ::= T_COLON  ;
     */
    public void reduceByProduction485(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSubscriptTriplet> ::= T_COLON  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production485UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XsubscripttripletNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSubscriptTriplet> ::= T_COLON <xExpr>  ;
     */
    public void reduceByProduction486(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSubscriptTriplet> ::= T_COLON <xExpr>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production486UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XsubscripttripletNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xSubscriptTriplet> ::= <xExpr> T_COLON  ;
     */
    public void reduceByProduction487(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSubscriptTriplet> ::= <xExpr> T_COLON  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production487UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XsubscripttripletNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xSubscriptTriplet> ::= <xExpr> T_COLON <xExpr>  ;
     */
    public void reduceByProduction488(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSubscriptTriplet> ::= <xExpr> T_COLON <xExpr>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production488UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XsubscripttripletNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xSubscriptTriplet> ::= <xExpr> T_COLON <xExpr> T_COLON <xExpr>  ;
     */
    public void reduceByProduction489(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSubscriptTriplet> ::= <xExpr> T_COLON <xExpr> T_COLON <xExpr>  ;
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production489UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XsubscripttripletNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xSubscriptTriplet> ::= <xExpr> T_COLON T_COLON <xExpr>  ;
     */
    public void reduceByProduction490(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSubscriptTriplet> ::= <xExpr> T_COLON T_COLON <xExpr>  ;
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production490UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XsubscripttripletNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xSubscriptTriplet> ::= T_COLON <xExpr> T_COLON <xExpr>  ;
     */
    public void reduceByProduction491(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSubscriptTriplet> ::= T_COLON <xExpr> T_COLON <xExpr>  ;
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production491UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XsubscripttripletNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xSubscriptTriplet> ::= T_COLON T_COLON <xExpr>  ;
     */
    public void reduceByProduction492(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSubscriptTriplet> ::= T_COLON T_COLON <xExpr>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production492UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XsubscripttripletNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xAllocateStmt> ::= T_ALLOCATE T_LPAREN <xAllocationList> T_COMMA T_STATEQ <xVariable> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction493(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAllocateStmt> ::= T_ALLOCATE T_LPAREN <xAllocationList> T_COMMA T_STATEQ <xVariable> T_RPAREN T_EOS  ;
        Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production493UserAction(v1, v2, v3, v4, v5, v6, v7, v8);

        // The production has 8 symbols on its RHS
        parser.reduce(Nonterminal.XallocatestmtNonterminal.getInstance(), 8, userValue);
    }

    /**
     * Reduce by <xAllocateStmt> ::= <xLblDef> T_ALLOCATE T_LPAREN <xAllocationList> T_COMMA T_STATEQ <xVariable> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction494(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAllocateStmt> ::= <xLblDef> T_ALLOCATE T_LPAREN <xAllocationList> T_COMMA T_STATEQ <xVariable> T_RPAREN T_EOS  ;
        Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v7 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production494UserAction(v1, v2, v3, v4, v5, v6, v7, v8, v9);

        // The production has 9 symbols on its RHS
        parser.reduce(Nonterminal.XallocatestmtNonterminal.getInstance(), 9, userValue);
    }

    /**
     * Reduce by <xAllocateStmt> ::= T_ALLOCATE T_LPAREN <xAllocationList> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction495(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAllocateStmt> ::= T_ALLOCATE T_LPAREN <xAllocationList> T_RPAREN T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production495UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XallocatestmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xAllocateStmt> ::= <xLblDef> T_ALLOCATE T_LPAREN <xAllocationList> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction496(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAllocateStmt> ::= <xLblDef> T_ALLOCATE T_LPAREN <xAllocationList> T_RPAREN T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production496UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XallocatestmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xAllocationList> ::= <xAllocation>  ;
     */
    public void reduceByProduction497(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAllocationList> ::= <xAllocation>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production497UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XallocationlistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xAllocationList> ::= <xAllocationList> T_COMMA <xAllocation>  ;
     */
    public void reduceByProduction498(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAllocationList> ::= <xAllocationList> T_COMMA <xAllocation>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production498UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XallocationlistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xAllocation> ::= <xAllocateObject>  ;
     */
    public void reduceByProduction499(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAllocation> ::= <xAllocateObject>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production499UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XallocationNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xAllocation> ::= <xAllocateObject> <xAllocatedShape>  ;
     */
    public void reduceByProduction500(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAllocation> ::= <xAllocateObject> <xAllocatedShape>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production500UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XallocationNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xAllocatedShape> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN  ;
     */
    public void reduceByProduction501(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAllocatedShape> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production501UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XallocatedshapeNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xAllocateObjectList> ::= <xAllocateObject>  ;
     */
    public void reduceByProduction502(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAllocateObjectList> ::= <xAllocateObject>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production502UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XallocateobjectlistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xAllocateObjectList> ::= <xAllocateObjectList> T_COMMA <xAllocateObject>  ;
     */
    public void reduceByProduction503(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAllocateObjectList> ::= <xAllocateObjectList> T_COMMA <xAllocateObject>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production503UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XallocateobjectlistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xAllocateObject> ::= <xVariableName>  ;
     */
    public void reduceByProduction504(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAllocateObject> ::= <xVariableName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production504UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XallocateobjectNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xAllocateObject> ::= <xAllocateObject> <xFieldSelector>  ;
     */
    public void reduceByProduction505(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAllocateObject> ::= <xAllocateObject> <xFieldSelector>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production505UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XallocateobjectNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xNullifyStmt> ::= T_NULLIFY T_LPAREN <xPointerObjectList> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction506(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xNullifyStmt> ::= T_NULLIFY T_LPAREN <xPointerObjectList> T_RPAREN T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production506UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XnullifystmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xNullifyStmt> ::= <xLblDef> T_NULLIFY T_LPAREN <xPointerObjectList> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction507(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xNullifyStmt> ::= <xLblDef> T_NULLIFY T_LPAREN <xPointerObjectList> T_RPAREN T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production507UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XnullifystmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xPointerObjectList> ::= <xPointerObject>  ;
     */
    public void reduceByProduction508(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPointerObjectList> ::= <xPointerObject>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production508UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XpointerobjectlistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xPointerObjectList> ::= <xPointerObjectList> T_COMMA <xPointerObject>  ;
     */
    public void reduceByProduction509(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPointerObjectList> ::= <xPointerObjectList> T_COMMA <xPointerObject>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production509UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XpointerobjectlistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xPointerObject> ::= <xName>  ;
     */
    public void reduceByProduction510(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPointerObject> ::= <xName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production510UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XpointerobjectNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xPointerObject> ::= <xPointerField>  ;
     */
    public void reduceByProduction511(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPointerObject> ::= <xPointerField>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production511UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XpointerobjectNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xPointerField> ::= <xName> T_LPAREN <xSFExprList> T_RPAREN T_PERCENT <xName>  ;
     */
    public void reduceByProduction512(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPointerField> ::= <xName> T_LPAREN <xSFExprList> T_RPAREN T_PERCENT <xName>  ;
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production512UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XpointerfieldNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xPointerField> ::= <xName> T_LPAREN <xSFDummyArgNameList> T_RPAREN T_PERCENT <xName>  ;
     */
    public void reduceByProduction513(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPointerField> ::= <xName> T_LPAREN <xSFDummyArgNameList> T_RPAREN T_PERCENT <xName>  ;
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production513UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XpointerfieldNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xPointerField> ::= <xName> T_PERCENT <xName>  ;
     */
    public void reduceByProduction514(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPointerField> ::= <xName> T_PERCENT <xName>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production514UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XpointerfieldNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xPointerField> ::= <xPointerField> <xFieldSelector>  ;
     */
    public void reduceByProduction515(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPointerField> ::= <xPointerField> <xFieldSelector>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production515UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XpointerfieldNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xDeallocateStmt> ::= T_DEALLOCATE T_LPAREN <xAllocateObjectList> T_COMMA T_STATEQ <xVariable> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction516(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDeallocateStmt> ::= T_DEALLOCATE T_LPAREN <xAllocateObjectList> T_COMMA T_STATEQ <xVariable> T_RPAREN T_EOS  ;
        Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production516UserAction(v1, v2, v3, v4, v5, v6, v7, v8);

        // The production has 8 symbols on its RHS
        parser.reduce(Nonterminal.XdeallocatestmtNonterminal.getInstance(), 8, userValue);
    }

    /**
     * Reduce by <xDeallocateStmt> ::= <xLblDef> T_DEALLOCATE T_LPAREN <xAllocateObjectList> T_COMMA T_STATEQ <xVariable> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction517(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDeallocateStmt> ::= <xLblDef> T_DEALLOCATE T_LPAREN <xAllocateObjectList> T_COMMA T_STATEQ <xVariable> T_RPAREN T_EOS  ;
        Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v7 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production517UserAction(v1, v2, v3, v4, v5, v6, v7, v8, v9);

        // The production has 9 symbols on its RHS
        parser.reduce(Nonterminal.XdeallocatestmtNonterminal.getInstance(), 9, userValue);
    }

    /**
     * Reduce by <xDeallocateStmt> ::= T_DEALLOCATE T_LPAREN <xAllocateObjectList> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction518(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDeallocateStmt> ::= T_DEALLOCATE T_LPAREN <xAllocateObjectList> T_RPAREN T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production518UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XdeallocatestmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xDeallocateStmt> ::= <xLblDef> T_DEALLOCATE T_LPAREN <xAllocateObjectList> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction519(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDeallocateStmt> ::= <xLblDef> T_DEALLOCATE T_LPAREN <xAllocateObjectList> T_RPAREN T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production519UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XdeallocatestmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xPrimary> ::= <xLogicalConstant>  ;
     */
    public void reduceByProduction520(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPrimary> ::= <xLogicalConstant>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production520UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XprimaryNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xPrimary> ::= T_SCON  ;
     */
    public void reduceByProduction521(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPrimary> ::= T_SCON  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production521UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XprimaryNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xPrimary> ::= <xUnsignedArithmeticConstant>  ;
     */
    public void reduceByProduction522(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPrimary> ::= <xUnsignedArithmeticConstant>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production522UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XprimaryNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xPrimary> ::= <xArrayConstructor>  ;
     */
    public void reduceByProduction523(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPrimary> ::= <xArrayConstructor>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production523UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XprimaryNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xPrimary> ::= <xName>  ;
     */
    public void reduceByProduction524(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPrimary> ::= <xName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production524UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XprimaryNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xPrimary> ::= <xName> <xPrimary@19>  ;
     */
    public void reduceByProduction525(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPrimary> ::= <xName> <xPrimary@19>  ;
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production525UserAction(v1, v2, v3, v4, v5);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XprimaryNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xPrimary> ::= <xName> T_PERCENT <xDataRef>  ;
     */
    public void reduceByProduction526(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPrimary> ::= <xName> T_PERCENT <xDataRef>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production526UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XprimaryNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xPrimary> ::= <xName> T_PERCENT <xDataRef> <xPrimary@21>  ;
     */
    public void reduceByProduction527(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPrimary> ::= <xName> T_PERCENT <xDataRef> <xPrimary@21>  ;
        Object v7 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production527UserAction(v1, v2, v3, v4, v5, v6, v7);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XprimaryNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xPrimary> ::= <xName> T_LPAREN <xSectionSubscriptList> T_RPAREN T_PERCENT <xDataRef>  ;
     */
    public void reduceByProduction528(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPrimary> ::= <xName> T_LPAREN <xSectionSubscriptList> T_RPAREN T_PERCENT <xDataRef>  ;
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production528UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XprimaryNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xPrimary> ::= <xName> T_LPAREN <xSectionSubscriptList> T_RPAREN T_PERCENT <xDataRef> <xPrimary@23>  ;
     */
    public void reduceByProduction529(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPrimary> ::= <xName> T_LPAREN <xSectionSubscriptList> T_RPAREN T_PERCENT <xDataRef> <xPrimary@23>  ;
        Object v10 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v8 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production529UserAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);

        // The production has 7 symbols on its RHS
        parser.reduce(Nonterminal.XprimaryNonterminal.getInstance(), 7, userValue);
    }

    /**
     * Reduce by <xPrimary> ::= <xFunctionReference>  ;
     */
    public void reduceByProduction530(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPrimary> ::= <xFunctionReference>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production530UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XprimaryNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xPrimary> ::= <xFunctionReference> <xPrimary@25>  ;
     */
    public void reduceByProduction531(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPrimary> ::= <xFunctionReference> <xPrimary@25>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production531UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XprimaryNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xPrimary> ::= <xFunctionReference> T_PERCENT <xDataRef>  ;
     */
    public void reduceByProduction532(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPrimary> ::= <xFunctionReference> T_PERCENT <xDataRef>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production532UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XprimaryNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xPrimary> ::= <xFunctionReference> T_PERCENT <xDataRef> <xPrimary@26>  ;
     */
    public void reduceByProduction533(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPrimary> ::= <xFunctionReference> T_PERCENT <xDataRef> <xPrimary@26>  ;
        Object v7 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production533UserAction(v1, v2, v3, v4, v5, v6, v7);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XprimaryNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xPrimary> ::= T_LPAREN <xExpr> T_RPAREN  ;
     */
    public void reduceByProduction534(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPrimary> ::= T_LPAREN <xExpr> T_RPAREN  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production534UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XprimaryNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xPrimary> ::= <xSubstrConst>  ;
     */
    public void reduceByProduction535(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPrimary> ::= <xSubstrConst>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production535UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XprimaryNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xCPrimary> ::= <xCOperand>  ;
     */
    public void reduceByProduction536(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCPrimary> ::= <xCOperand>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production536UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XcprimaryNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xCPrimary> ::= T_LPAREN <xCExpr> T_RPAREN  ;
     */
    public void reduceByProduction537(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCPrimary> ::= T_LPAREN <xCExpr> T_RPAREN  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production537UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XcprimaryNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xCOperand> ::= T_SCON  ;
     */
    public void reduceByProduction538(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCOperand> ::= T_SCON  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production538UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XcoperandNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xCOperand> ::= <xName>  ;
     */
    public void reduceByProduction539(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCOperand> ::= <xName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production539UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XcoperandNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xCOperand> ::= <xName> <xCOperand@28>  ;
     */
    public void reduceByProduction540(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCOperand> ::= <xName> <xCOperand@28>  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production540UserAction(v1, v2, v3, v4);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XcoperandNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xCOperand> ::= <xName> T_PERCENT <xDataRef>  ;
     */
    public void reduceByProduction541(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCOperand> ::= <xName> T_PERCENT <xDataRef>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production541UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XcoperandNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xCOperand> ::= <xName> T_PERCENT <xDataRef> <xCOperand@30>  ;
     */
    public void reduceByProduction542(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCOperand> ::= <xName> T_PERCENT <xDataRef> <xCOperand@30>  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production542UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XcoperandNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xCOperand> ::= <xName> <xCOperand@29> T_PERCENT <xDataRef>  ;
     */
    public void reduceByProduction543(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCOperand> ::= <xName> <xCOperand@29> T_PERCENT <xDataRef>  ;
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production543UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XcoperandNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xCOperand> ::= <xName> <xCOperand@29> T_PERCENT <xDataRef> <xCOperand@30>  ;
     */
    public void reduceByProduction544(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCOperand> ::= <xName> <xCOperand@29> T_PERCENT <xDataRef> <xCOperand@30>  ;
        Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v8 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production544UserAction(v1, v2, v3, v4, v5, v6, v7, v8, v9);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XcoperandNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xCOperand> ::= <xFunctionReference>  ;
     */
    public void reduceByProduction545(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCOperand> ::= <xFunctionReference>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production545UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XcoperandNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xUFPrimary> ::= T_ICON  ;
     */
    public void reduceByProduction546(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUFPrimary> ::= T_ICON  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production546UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XufprimaryNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xUFPrimary> ::= T_SCON  ;
     */
    public void reduceByProduction547(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUFPrimary> ::= T_SCON  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production547UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XufprimaryNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xUFPrimary> ::= <xFunctionReference>  ;
     */
    public void reduceByProduction548(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUFPrimary> ::= <xFunctionReference>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production548UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XufprimaryNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xUFPrimary> ::= <xName>  ;
     */
    public void reduceByProduction549(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUFPrimary> ::= <xName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production549UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XufprimaryNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xUFPrimary> ::= <xName> <xUFPrimary@31>  ;
     */
    public void reduceByProduction550(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUFPrimary> ::= <xName> <xUFPrimary@31>  ;
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production550UserAction(v1, v2, v3, v4, v5);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XufprimaryNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xUFPrimary> ::= <xName> T_PERCENT <xDataRef>  ;
     */
    public void reduceByProduction551(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUFPrimary> ::= <xName> T_PERCENT <xDataRef>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production551UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XufprimaryNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xUFPrimary> ::= <xName> T_PERCENT <xDataRef> <xUFPrimary@34>  ;
     */
    public void reduceByProduction552(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUFPrimary> ::= <xName> T_PERCENT <xDataRef> <xUFPrimary@34>  ;
        Object v7 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production552UserAction(v1, v2, v3, v4, v5, v6, v7);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XufprimaryNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xUFPrimary> ::= <xName> <xUFPrimary@33> T_PERCENT <xDataRef>  ;
     */
    public void reduceByProduction553(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUFPrimary> ::= <xName> <xUFPrimary@33> T_PERCENT <xDataRef>  ;
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production553UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XufprimaryNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xUFPrimary> ::= <xName> <xUFPrimary@33> T_PERCENT <xDataRef> <xUFPrimary@34>  ;
     */
    public void reduceByProduction554(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUFPrimary> ::= <xName> <xUFPrimary@33> T_PERCENT <xDataRef> <xUFPrimary@34>  ;
        Object v10 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v8 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production554UserAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XufprimaryNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xUFPrimary> ::= T_LPAREN <xUFExpr> T_RPAREN  ;
     */
    public void reduceByProduction555(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUFPrimary> ::= T_LPAREN <xUFExpr> T_RPAREN  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production555UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XufprimaryNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xLevel1Expr> ::= <xPrimary>  ;
     */
    public void reduceByProduction556(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLevel1Expr> ::= <xPrimary>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production556UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xlevel1exprNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xLevel1Expr> ::= <xDefinedUnaryOp> <xPrimary>  ;
     */
    public void reduceByProduction557(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLevel1Expr> ::= <xDefinedUnaryOp> <xPrimary>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production557UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.Xlevel1exprNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xMultOperand> ::= <xLevel1Expr>  ;
     */
    public void reduceByProduction558(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xMultOperand> ::= <xLevel1Expr>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production558UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XmultoperandNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xMultOperand> ::= <xLevel1Expr> <xMultOperand@36>  ;
     */
    public void reduceByProduction559(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xMultOperand> ::= <xLevel1Expr> <xMultOperand@36>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production559UserAction(v1, v2, v3);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XmultoperandNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xUFFactor> ::= <xUFPrimary>  ;
     */
    public void reduceByProduction560(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUFFactor> ::= <xUFPrimary>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production560UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XuffactorNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xUFFactor> ::= <xUFPrimary> <xUFFactor@37>  ;
     */
    public void reduceByProduction561(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUFFactor> ::= <xUFPrimary> <xUFFactor@37>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production561UserAction(v1, v2, v3);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XuffactorNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xAddOperand> ::= <xMultOperand>  ;
     */
    public void reduceByProduction562(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAddOperand> ::= <xMultOperand>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production562UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XaddoperandNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xAddOperand> ::= <xAddOperand@38> <xMultOperand>  ;
     */
    public void reduceByProduction563(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAddOperand> ::= <xAddOperand@38> <xMultOperand>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production563UserAction(v1, v2, v3);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XaddoperandNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xUFTerm> ::= <xUFFactor>  ;
     */
    public void reduceByProduction564(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUFTerm> ::= <xUFFactor>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production564UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XuftermNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xUFTerm> ::= <xUFTerm> <xMultOp> <xUFFactor>  ;
     */
    public void reduceByProduction565(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUFTerm> ::= <xUFTerm> <xMultOp> <xUFFactor>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production565UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XuftermNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xUFTerm> ::= <xUFTerm> <xConcatOp> <xUFPrimary>  ;
     */
    public void reduceByProduction566(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUFTerm> ::= <xUFTerm> <xConcatOp> <xUFPrimary>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production566UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XuftermNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xLevel2Expr> ::= <xAddOperand>  ;
     */
    public void reduceByProduction567(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLevel2Expr> ::= <xAddOperand>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production567UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xlevel2exprNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xLevel2Expr> ::= <xLevel2Expr@39> <xAddOperand>  ;
     */
    public void reduceByProduction568(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLevel2Expr> ::= <xLevel2Expr@39> <xAddOperand>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production568UserAction(v1, v2, v3);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.Xlevel2exprNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xLevel2Expr> ::= <xSign> <xAddOperand>  ;
     */
    public void reduceByProduction569(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLevel2Expr> ::= <xSign> <xAddOperand>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production569UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.Xlevel2exprNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xUFExpr> ::= <xUFTerm>  ;
     */
    public void reduceByProduction570(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUFExpr> ::= <xUFTerm>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production570UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XufexprNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xUFExpr> ::= <xSign> <xUFTerm>  ;
     */
    public void reduceByProduction571(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUFExpr> ::= <xSign> <xUFTerm>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production571UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XufexprNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xUFExpr> ::= <xUFExpr> <xAddOp> <xUFTerm>  ;
     */
    public void reduceByProduction572(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUFExpr> ::= <xUFExpr> <xAddOp> <xUFTerm>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production572UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XufexprNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xLevel3Expr> ::= <xLevel2Expr>  ;
     */
    public void reduceByProduction573(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLevel3Expr> ::= <xLevel2Expr>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production573UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xlevel3exprNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xLevel3Expr> ::= <xLevel3Expr@40> <xLevel2Expr>  ;
     */
    public void reduceByProduction574(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLevel3Expr> ::= <xLevel3Expr@40> <xLevel2Expr>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production574UserAction(v1, v2, v3);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.Xlevel3exprNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xCExpr> ::= <xCPrimary>  ;
     */
    public void reduceByProduction575(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCExpr> ::= <xCPrimary>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production575UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XcexprNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xCExpr> ::= <xCExpr@41> <xCPrimary>  ;
     */
    public void reduceByProduction576(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCExpr> ::= <xCExpr@41> <xCPrimary>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production576UserAction(v1, v2, v3);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XcexprNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xLevel4Expr> ::= <xLevel3Expr>  ;
     */
    public void reduceByProduction577(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLevel4Expr> ::= <xLevel3Expr>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production577UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xlevel4exprNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xLevel4Expr> ::= <xLevel4Expr@42> <xLevel3Expr>  ;
     */
    public void reduceByProduction578(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLevel4Expr> ::= <xLevel4Expr@42> <xLevel3Expr>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production578UserAction(v1, v2, v3);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.Xlevel4exprNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xAndOperand> ::= <xLevel4Expr>  ;
     */
    public void reduceByProduction579(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAndOperand> ::= <xLevel4Expr>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production579UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XandoperandNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xAndOperand> ::= <xAndOperand@43> <xLevel4Expr>  ;
     */
    public void reduceByProduction580(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAndOperand> ::= <xAndOperand@43> <xLevel4Expr>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production580UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XandoperandNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xOrOperand> ::= <xAndOperand>  ;
     */
    public void reduceByProduction581(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xOrOperand> ::= <xAndOperand>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production581UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XoroperandNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xOrOperand> ::= <xOrOperand@44> <xAndOperand>  ;
     */
    public void reduceByProduction582(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xOrOperand> ::= <xOrOperand@44> <xAndOperand>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production582UserAction(v1, v2, v3);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XoroperandNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xEquivOperand> ::= <xOrOperand>  ;
     */
    public void reduceByProduction583(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEquivOperand> ::= <xOrOperand>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production583UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XequivoperandNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xEquivOperand> ::= <xEquivOperand@45> <xOrOperand>  ;
     */
    public void reduceByProduction584(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEquivOperand> ::= <xEquivOperand@45> <xOrOperand>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production584UserAction(v1, v2, v3);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XequivoperandNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xLevel5Expr> ::= <xEquivOperand>  ;
     */
    public void reduceByProduction585(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLevel5Expr> ::= <xEquivOperand>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production585UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xlevel5exprNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xLevel5Expr> ::= <xLevel5Expr@46> <xEquivOperand>  ;
     */
    public void reduceByProduction586(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLevel5Expr> ::= <xLevel5Expr@46> <xEquivOperand>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production586UserAction(v1, v2, v3);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.Xlevel5exprNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xExpr> ::= <xLevel5Expr>  ;
     */
    public void reduceByProduction587(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xExpr> ::= <xLevel5Expr>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production587UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XexprNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xExpr> ::= <xExpr> <xDefinedBinaryOp> <xLevel5Expr>  ;
     */
    public void reduceByProduction588(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xExpr> ::= <xExpr> <xDefinedBinaryOp> <xLevel5Expr>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production588UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XexprNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xSFExprList> ::= <xSFExpr> T_COLON <xExpr> T_COLON <xExpr>  ;
     */
    public void reduceByProduction589(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSFExprList> ::= <xSFExpr> T_COLON <xExpr> T_COLON <xExpr>  ;
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production589UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XsfexprlistNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xSFExprList> ::= <xSFExpr> T_COLON T_COLON <xExpr>  ;
     */
    public void reduceByProduction590(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSFExprList> ::= <xSFExpr> T_COLON T_COLON <xExpr>  ;
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production590UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XsfexprlistNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xSFExprList> ::= T_COLON <xExpr> T_COLON <xExpr>  ;
     */
    public void reduceByProduction591(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSFExprList> ::= T_COLON <xExpr> T_COLON <xExpr>  ;
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production591UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XsfexprlistNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xSFExprList> ::= T_COLON T_COLON <xExpr>  ;
     */
    public void reduceByProduction592(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSFExprList> ::= T_COLON T_COLON <xExpr>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production592UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XsfexprlistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xAssignmentStmt> ::= <xName> T_EQUALS <xExpr> T_EOS  ;
     */
    public void reduceByProduction593(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssignmentStmt> ::= <xName> T_EQUALS <xExpr> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production593UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XassignmentstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xAssignmentStmt> ::= <xLblDef> <xName> T_EQUALS <xExpr> T_EOS  ;
     */
    public void reduceByProduction594(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssignmentStmt> ::= <xLblDef> <xName> T_EQUALS <xExpr> T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production594UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XassignmentstmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xAssignmentStmt> ::= <xName> T_LPAREN <xSFExprList> T_RPAREN T_EQUALS <xExpr> T_EOS  ;
     */
    public void reduceByProduction595(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssignmentStmt> ::= <xName> T_LPAREN <xSFExprList> T_RPAREN T_EQUALS <xExpr> T_EOS  ;
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production595UserAction(v1, v2, v3, v4, v5, v6, v7);

        // The production has 7 symbols on its RHS
        parser.reduce(Nonterminal.XassignmentstmtNonterminal.getInstance(), 7, userValue);
    }

    /**
     * Reduce by <xAssignmentStmt> ::= <xLblDef> <xName> T_LPAREN <xSFExprList> T_RPAREN T_EQUALS <xExpr> T_EOS  ;
     */
    public void reduceByProduction596(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssignmentStmt> ::= <xLblDef> <xName> T_LPAREN <xSFExprList> T_RPAREN T_EQUALS <xExpr> T_EOS  ;
        Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v7 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production596UserAction(v1, v2, v3, v4, v5, v6, v7, v8);

        // The production has 8 symbols on its RHS
        parser.reduce(Nonterminal.XassignmentstmtNonterminal.getInstance(), 8, userValue);
    }

    /**
     * Reduce by <xAssignmentStmt> ::= <xName> T_LPAREN <xSFExprList> T_RPAREN <xSubstringRange> T_EQUALS <xExpr> T_EOS  ;
     */
    public void reduceByProduction597(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssignmentStmt> ::= <xName> T_LPAREN <xSFExprList> T_RPAREN <xSubstringRange> T_EQUALS <xExpr> T_EOS  ;
        Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v7 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production597UserAction(v1, v2, v3, v4, v5, v6, v7, v8);

        // The production has 8 symbols on its RHS
        parser.reduce(Nonterminal.XassignmentstmtNonterminal.getInstance(), 8, userValue);
    }

    /**
     * Reduce by <xAssignmentStmt> ::= <xLblDef> <xName> T_LPAREN <xSFExprList> T_RPAREN <xSubstringRange> T_EQUALS <xExpr> T_EOS  ;
     */
    public void reduceByProduction598(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssignmentStmt> ::= <xLblDef> <xName> T_LPAREN <xSFExprList> T_RPAREN <xSubstringRange> T_EQUALS <xExpr> T_EOS  ;
        Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v8 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production598UserAction(v1, v2, v3, v4, v5, v6, v7, v8, v9);

        // The production has 9 symbols on its RHS
        parser.reduce(Nonterminal.XassignmentstmtNonterminal.getInstance(), 9, userValue);
    }

    /**
     * Reduce by <xAssignmentStmt> ::= <xName> T_LPAREN <xSFDummyArgNameList> T_RPAREN <xSubstringRange> T_EQUALS <xExpr> T_EOS  ;
     */
    public void reduceByProduction599(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssignmentStmt> ::= <xName> T_LPAREN <xSFDummyArgNameList> T_RPAREN <xSubstringRange> T_EQUALS <xExpr> T_EOS  ;
        Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v7 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production599UserAction(v1, v2, v3, v4, v5, v6, v7, v8);

        // The production has 8 symbols on its RHS
        parser.reduce(Nonterminal.XassignmentstmtNonterminal.getInstance(), 8, userValue);
    }

    /**
     * Reduce by <xAssignmentStmt> ::= <xLblDef> <xName> T_LPAREN <xSFDummyArgNameList> T_RPAREN <xSubstringRange> T_EQUALS <xExpr> T_EOS  ;
     */
    public void reduceByProduction600(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssignmentStmt> ::= <xLblDef> <xName> T_LPAREN <xSFDummyArgNameList> T_RPAREN <xSubstringRange> T_EQUALS <xExpr> T_EOS  ;
        Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v8 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production600UserAction(v1, v2, v3, v4, v5, v6, v7, v8, v9);

        // The production has 9 symbols on its RHS
        parser.reduce(Nonterminal.XassignmentstmtNonterminal.getInstance(), 9, userValue);
    }

    /**
     * Reduce by <xAssignmentStmt> ::= <xName> T_PERCENT <xDataRef> T_EQUALS <xExpr> T_EOS  ;
     */
    public void reduceByProduction601(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssignmentStmt> ::= <xName> T_PERCENT <xDataRef> T_EQUALS <xExpr> T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production601UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XassignmentstmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xAssignmentStmt> ::= <xName> T_PERCENT <xDataRef> <xAssignmentStmt@47> T_EQUALS <xExpr> T_EOS  ;
     */
    public void reduceByProduction602(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssignmentStmt> ::= <xName> T_PERCENT <xDataRef> <xAssignmentStmt@47> T_EQUALS <xExpr> T_EOS  ;
        Token v10 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v9 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v7 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production602UserAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);

        // The production has 7 symbols on its RHS
        parser.reduce(Nonterminal.XassignmentstmtNonterminal.getInstance(), 7, userValue);
    }

    /**
     * Reduce by <xAssignmentStmt> ::= <xLblDef> <xName> T_PERCENT <xDataRef> T_EQUALS <xExpr> T_EOS  ;
     */
    public void reduceByProduction603(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssignmentStmt> ::= <xLblDef> <xName> T_PERCENT <xDataRef> T_EQUALS <xExpr> T_EOS  ;
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production603UserAction(v1, v2, v3, v4, v5, v6, v7);

        // The production has 7 symbols on its RHS
        parser.reduce(Nonterminal.XassignmentstmtNonterminal.getInstance(), 7, userValue);
    }

    /**
     * Reduce by <xAssignmentStmt> ::= <xLblDef> <xName> T_PERCENT <xDataRef> <xAssignmentStmt@47> T_EQUALS <xExpr> T_EOS  ;
     */
    public void reduceByProduction604(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssignmentStmt> ::= <xLblDef> <xName> T_PERCENT <xDataRef> <xAssignmentStmt@47> T_EQUALS <xExpr> T_EOS  ;
        Token v11 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v10 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v8 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production604UserAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);

        // The production has 8 symbols on its RHS
        parser.reduce(Nonterminal.XassignmentstmtNonterminal.getInstance(), 8, userValue);
    }

    /**
     * Reduce by <xAssignmentStmt> ::= <xName> T_LPAREN <xSFExprList> T_RPAREN T_PERCENT <xDataRef> T_EQUALS <xExpr> T_EOS  ;
     */
    public void reduceByProduction605(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssignmentStmt> ::= <xName> T_LPAREN <xSFExprList> T_RPAREN T_PERCENT <xDataRef> T_EQUALS <xExpr> T_EOS  ;
        Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v8 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production605UserAction(v1, v2, v3, v4, v5, v6, v7, v8, v9);

        // The production has 9 symbols on its RHS
        parser.reduce(Nonterminal.XassignmentstmtNonterminal.getInstance(), 9, userValue);
    }

    /**
     * Reduce by <xAssignmentStmt> ::= <xName> T_LPAREN <xSFExprList> T_RPAREN T_PERCENT <xDataRef> <xAssignmentStmt@49> T_EQUALS <xExpr> T_EOS  ;
     */
    public void reduceByProduction606(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssignmentStmt> ::= <xName> T_LPAREN <xSFExprList> T_RPAREN T_PERCENT <xDataRef> <xAssignmentStmt@49> T_EQUALS <xExpr> T_EOS  ;
        Token v13 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v12 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v11 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v10 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v8 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production606UserAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13);

        // The production has 10 symbols on its RHS
        parser.reduce(Nonterminal.XassignmentstmtNonterminal.getInstance(), 10, userValue);
    }

    /**
     * Reduce by <xAssignmentStmt> ::= <xLblDef> <xName> T_LPAREN <xSFExprList> T_RPAREN T_PERCENT <xDataRef> T_EQUALS <xExpr> T_EOS  ;
     */
    public void reduceByProduction607(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssignmentStmt> ::= <xLblDef> <xName> T_LPAREN <xSFExprList> T_RPAREN T_PERCENT <xDataRef> T_EQUALS <xExpr> T_EOS  ;
        Token v10 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v9 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v7 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production607UserAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);

        // The production has 10 symbols on its RHS
        parser.reduce(Nonterminal.XassignmentstmtNonterminal.getInstance(), 10, userValue);
    }

    /**
     * Reduce by <xAssignmentStmt> ::= <xLblDef> <xName> T_LPAREN <xSFExprList> T_RPAREN T_PERCENT <xDataRef> <xAssignmentStmt@49> T_EQUALS <xExpr> T_EOS  ;
     */
    public void reduceByProduction608(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssignmentStmt> ::= <xLblDef> <xName> T_LPAREN <xSFExprList> T_RPAREN T_PERCENT <xDataRef> <xAssignmentStmt@49> T_EQUALS <xExpr> T_EOS  ;
        Token v14 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v13 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v12 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v11 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v10 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v9 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v7 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production608UserAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14);

        // The production has 11 symbols on its RHS
        parser.reduce(Nonterminal.XassignmentstmtNonterminal.getInstance(), 11, userValue);
    }

    /**
     * Reduce by <xAssignmentStmt> ::= <xName> T_LPAREN <xSFDummyArgNameList> T_RPAREN T_PERCENT <xDataRef> T_EQUALS <xExpr> T_EOS  ;
     */
    public void reduceByProduction609(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssignmentStmt> ::= <xName> T_LPAREN <xSFDummyArgNameList> T_RPAREN T_PERCENT <xDataRef> T_EQUALS <xExpr> T_EOS  ;
        Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v8 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production609UserAction(v1, v2, v3, v4, v5, v6, v7, v8, v9);

        // The production has 9 symbols on its RHS
        parser.reduce(Nonterminal.XassignmentstmtNonterminal.getInstance(), 9, userValue);
    }

    /**
     * Reduce by <xAssignmentStmt> ::= <xName> T_LPAREN <xSFDummyArgNameList> T_RPAREN T_PERCENT <xDataRef> <xAssignmentStmt@51> T_EQUALS <xExpr> T_EOS  ;
     */
    public void reduceByProduction610(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssignmentStmt> ::= <xName> T_LPAREN <xSFDummyArgNameList> T_RPAREN T_PERCENT <xDataRef> <xAssignmentStmt@51> T_EQUALS <xExpr> T_EOS  ;
        Token v13 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v12 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v11 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v10 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v8 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production610UserAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13);

        // The production has 10 symbols on its RHS
        parser.reduce(Nonterminal.XassignmentstmtNonterminal.getInstance(), 10, userValue);
    }

    /**
     * Reduce by <xAssignmentStmt> ::= <xLblDef> <xName> T_LPAREN <xSFDummyArgNameList> T_RPAREN T_PERCENT <xDataRef> T_EQUALS <xExpr> T_EOS  ;
     */
    public void reduceByProduction611(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssignmentStmt> ::= <xLblDef> <xName> T_LPAREN <xSFDummyArgNameList> T_RPAREN T_PERCENT <xDataRef> T_EQUALS <xExpr> T_EOS  ;
        Token v10 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v9 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v7 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production611UserAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);

        // The production has 10 symbols on its RHS
        parser.reduce(Nonterminal.XassignmentstmtNonterminal.getInstance(), 10, userValue);
    }

    /**
     * Reduce by <xAssignmentStmt> ::= <xLblDef> <xName> T_LPAREN <xSFDummyArgNameList> T_RPAREN T_PERCENT <xDataRef> <xAssignmentStmt@51> T_EQUALS <xExpr> T_EOS  ;
     */
    public void reduceByProduction612(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssignmentStmt> ::= <xLblDef> <xName> T_LPAREN <xSFDummyArgNameList> T_RPAREN T_PERCENT <xDataRef> <xAssignmentStmt@51> T_EQUALS <xExpr> T_EOS  ;
        Token v14 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v13 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v12 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v11 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v10 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v9 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v7 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production612UserAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14);

        // The production has 11 symbols on its RHS
        parser.reduce(Nonterminal.XassignmentstmtNonterminal.getInstance(), 11, userValue);
    }

    /**
     * Reduce by <xSFExprList> ::= T_COLON  ;
     */
    public void reduceByProduction613(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSFExprList> ::= T_COLON  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production613UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XsfexprlistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSFExprList> ::= T_COLON <xExpr>  ;
     */
    public void reduceByProduction614(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSFExprList> ::= T_COLON <xExpr>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production614UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XsfexprlistNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xSFExprList> ::= <xSFExpr>  ;
     */
    public void reduceByProduction615(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSFExprList> ::= <xSFExpr>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production615UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XsfexprlistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSFExprList> ::= <xSFExpr> T_COLON  ;
     */
    public void reduceByProduction616(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSFExprList> ::= <xSFExpr> T_COLON  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production616UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XsfexprlistNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xSFExprList> ::= <xSFExpr> T_COLON <xExpr>  ;
     */
    public void reduceByProduction617(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSFExprList> ::= <xSFExpr> T_COLON <xExpr>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production617UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XsfexprlistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xSFExprList> ::= <xSFExprList> T_COMMA <xSectionSubscript>  ;
     */
    public void reduceByProduction618(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSFExprList> ::= <xSFExprList> T_COMMA <xSectionSubscript>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production618UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XsfexprlistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xSFExprList> ::= <xSFDummyArgNameList> T_COMMA T_COLON  ;
     */
    public void reduceByProduction619(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSFExprList> ::= <xSFDummyArgNameList> T_COMMA T_COLON  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production619UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XsfexprlistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xSFExprList> ::= <xSFDummyArgNameList> T_COMMA T_COLON <xExpr>  ;
     */
    public void reduceByProduction620(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSFExprList> ::= <xSFDummyArgNameList> T_COMMA T_COLON <xExpr>  ;
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production620UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XsfexprlistNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xSFExprList> ::= <xSFDummyArgNameList> T_COMMA <xSFExpr>  ;
     */
    public void reduceByProduction621(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSFExprList> ::= <xSFDummyArgNameList> T_COMMA <xSFExpr>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production621UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XsfexprlistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xSFExprList> ::= <xSFDummyArgNameList> T_COMMA <xSFExpr> T_COLON  ;
     */
    public void reduceByProduction622(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSFExprList> ::= <xSFDummyArgNameList> T_COMMA <xSFExpr> T_COLON  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production622UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XsfexprlistNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xSFExprList> ::= <xSFDummyArgNameList> T_COMMA <xSFExpr> T_COLON <xExpr>  ;
     */
    public void reduceByProduction623(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSFExprList> ::= <xSFDummyArgNameList> T_COMMA <xSFExpr> T_COLON <xExpr>  ;
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production623UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XsfexprlistNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xSFExpr> ::= <xSFTerm>  ;
     */
    public void reduceByProduction624(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSFExpr> ::= <xSFTerm>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production624UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XsfexprNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSFExpr> ::= <xSign> <xAddOperand>  ;
     */
    public void reduceByProduction625(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSFExpr> ::= <xSign> <xAddOperand>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production625UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XsfexprNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xSFExpr> ::= <xSFExpr> <xAddOp> <xAddOperand>  ;
     */
    public void reduceByProduction626(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSFExpr> ::= <xSFExpr> <xAddOp> <xAddOperand>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production626UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XsfexprNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xSFTerm> ::= <xSFFactor>  ;
     */
    public void reduceByProduction627(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSFTerm> ::= <xSFFactor>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production627UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XsftermNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSFTerm> ::= <xSFTerm> <xMultOp> <xMultOperand>  ;
     */
    public void reduceByProduction628(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSFTerm> ::= <xSFTerm> <xMultOp> <xMultOperand>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production628UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XsftermNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xSFFactor> ::= <xSFPrimary>  ;
     */
    public void reduceByProduction629(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSFFactor> ::= <xSFPrimary>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production629UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XsffactorNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSFFactor> ::= <xSFPrimary> <xPowerOp> <xMultOperand>  ;
     */
    public void reduceByProduction630(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSFFactor> ::= <xSFPrimary> <xPowerOp> <xMultOperand>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production630UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XsffactorNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xSFPrimary> ::= <xArrayConstructor>  ;
     */
    public void reduceByProduction631(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSFPrimary> ::= <xArrayConstructor>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production631UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XsfprimaryNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSFPrimary> ::= T_ICON  ;
     */
    public void reduceByProduction632(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSFPrimary> ::= T_ICON  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production632UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XsfprimaryNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSFPrimary> ::= <xSFVarName>  ;
     */
    public void reduceByProduction633(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSFPrimary> ::= <xSFVarName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production633UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XsfprimaryNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSFPrimary> ::= <xSFDataRef>  ;
     */
    public void reduceByProduction634(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSFPrimary> ::= <xSFDataRef>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production634UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XsfprimaryNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSFPrimary> ::= <xFunctionReference>  ;
     */
    public void reduceByProduction635(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSFPrimary> ::= <xFunctionReference>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production635UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XsfprimaryNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSFPrimary> ::= T_LPAREN <xExpr> T_RPAREN  ;
     */
    public void reduceByProduction636(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSFPrimary> ::= T_LPAREN <xExpr> T_RPAREN  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production636UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XsfprimaryNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xPointerAssignmentStmt> ::= <xName> T_EQGREATERTHAN <xTarget> T_EOS  ;
     */
    public void reduceByProduction637(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPointerAssignmentStmt> ::= <xName> T_EQGREATERTHAN <xTarget> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production637UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XpointerassignmentstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xPointerAssignmentStmt> ::= <xLblDef> <xName> T_EQGREATERTHAN <xTarget> T_EOS  ;
     */
    public void reduceByProduction638(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPointerAssignmentStmt> ::= <xLblDef> <xName> T_EQGREATERTHAN <xTarget> T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production638UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XpointerassignmentstmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xPointerAssignmentStmt> ::= <xName> T_PERCENT <xDataRef> T_EQGREATERTHAN <xTarget> T_EOS  ;
     */
    public void reduceByProduction639(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPointerAssignmentStmt> ::= <xName> T_PERCENT <xDataRef> T_EQGREATERTHAN <xTarget> T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production639UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XpointerassignmentstmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xPointerAssignmentStmt> ::= <xLblDef> <xName> T_PERCENT <xDataRef> T_EQGREATERTHAN <xTarget> T_EOS  ;
     */
    public void reduceByProduction640(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPointerAssignmentStmt> ::= <xLblDef> <xName> T_PERCENT <xDataRef> T_EQGREATERTHAN <xTarget> T_EOS  ;
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production640UserAction(v1, v2, v3, v4, v5, v6, v7);

        // The production has 7 symbols on its RHS
        parser.reduce(Nonterminal.XpointerassignmentstmtNonterminal.getInstance(), 7, userValue);
    }

    /**
     * Reduce by <xPointerAssignmentStmt> ::= <xName> T_LPAREN <xSFExprList> T_RPAREN T_PERCENT <xDataRef> T_EQGREATERTHAN <xTarget> T_EOS  ;
     */
    public void reduceByProduction641(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPointerAssignmentStmt> ::= <xName> T_LPAREN <xSFExprList> T_RPAREN T_PERCENT <xDataRef> T_EQGREATERTHAN <xTarget> T_EOS  ;
        Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v8 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production641UserAction(v1, v2, v3, v4, v5, v6, v7, v8, v9);

        // The production has 9 symbols on its RHS
        parser.reduce(Nonterminal.XpointerassignmentstmtNonterminal.getInstance(), 9, userValue);
    }

    /**
     * Reduce by <xPointerAssignmentStmt> ::= <xLblDef> <xName> T_LPAREN <xSFExprList> T_RPAREN T_PERCENT <xDataRef> T_EQGREATERTHAN <xTarget> T_EOS  ;
     */
    public void reduceByProduction642(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPointerAssignmentStmt> ::= <xLblDef> <xName> T_LPAREN <xSFExprList> T_RPAREN T_PERCENT <xDataRef> T_EQGREATERTHAN <xTarget> T_EOS  ;
        Token v10 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v9 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v7 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production642UserAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);

        // The production has 10 symbols on its RHS
        parser.reduce(Nonterminal.XpointerassignmentstmtNonterminal.getInstance(), 10, userValue);
    }

    /**
     * Reduce by <xPointerAssignmentStmt> ::= <xName> T_LPAREN <xSFDummyArgNameList> T_RPAREN T_PERCENT <xDataRef> T_EQGREATERTHAN <xTarget> T_EOS  ;
     */
    public void reduceByProduction643(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPointerAssignmentStmt> ::= <xName> T_LPAREN <xSFDummyArgNameList> T_RPAREN T_PERCENT <xDataRef> T_EQGREATERTHAN <xTarget> T_EOS  ;
        Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v8 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production643UserAction(v1, v2, v3, v4, v5, v6, v7, v8, v9);

        // The production has 9 symbols on its RHS
        parser.reduce(Nonterminal.XpointerassignmentstmtNonterminal.getInstance(), 9, userValue);
    }

    /**
     * Reduce by <xPointerAssignmentStmt> ::= <xLblDef> <xName> T_LPAREN <xSFDummyArgNameList> T_RPAREN T_PERCENT <xDataRef> T_EQGREATERTHAN <xTarget> T_EOS  ;
     */
    public void reduceByProduction644(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPointerAssignmentStmt> ::= <xLblDef> <xName> T_LPAREN <xSFDummyArgNameList> T_RPAREN T_PERCENT <xDataRef> T_EQGREATERTHAN <xTarget> T_EOS  ;
        Token v10 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v9 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v7 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production644UserAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);

        // The production has 10 symbols on its RHS
        parser.reduce(Nonterminal.XpointerassignmentstmtNonterminal.getInstance(), 10, userValue);
    }

    /**
     * Reduce by <xTarget> ::= <xExpr>  ;
     */
    public void reduceByProduction645(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xTarget> ::= <xExpr>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production645UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XtargetNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xWhereStmt> ::= T_WHERE T_LPAREN <xMaskExpr> T_RPAREN <xAssignmentStmt>  ;
     */
    public void reduceByProduction646(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xWhereStmt> ::= T_WHERE T_LPAREN <xMaskExpr> T_RPAREN <xAssignmentStmt>  ;
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production646UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XwherestmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xWhereStmt> ::= <xLblDef> T_WHERE T_LPAREN <xMaskExpr> T_RPAREN <xAssignmentStmt>  ;
     */
    public void reduceByProduction647(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xWhereStmt> ::= <xLblDef> T_WHERE T_LPAREN <xMaskExpr> T_RPAREN <xAssignmentStmt>  ;
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production647UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XwherestmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xWhereConstruct> ::= <xWhereConstructStmt> <xWhereRange>  ;
     */
    public void reduceByProduction648(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xWhereConstruct> ::= <xWhereConstructStmt> <xWhereRange>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production648UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XwhereconstructNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xWhereRange> ::= <xEndWhereStmt>  ;
     */
    public void reduceByProduction649(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xWhereRange> ::= <xEndWhereStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production649UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XwhererangeNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xWhereRange> ::= <xWhereBodyConstructBlock> <xEndWhereStmt>  ;
     */
    public void reduceByProduction650(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xWhereRange> ::= <xWhereBodyConstructBlock> <xEndWhereStmt>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production650UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XwhererangeNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xWhereRange> ::= <xMaskedElsewhereConstruct>  ;
     */
    public void reduceByProduction651(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xWhereRange> ::= <xMaskedElsewhereConstruct>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production651UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XwhererangeNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xWhereRange> ::= <xWhereBodyConstructBlock> <xMaskedElsewhereConstruct>  ;
     */
    public void reduceByProduction652(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xWhereRange> ::= <xWhereBodyConstructBlock> <xMaskedElsewhereConstruct>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production652UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XwhererangeNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xWhereRange> ::= <xElsewhereConstruct>  ;
     */
    public void reduceByProduction653(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xWhereRange> ::= <xElsewhereConstruct>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production653UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XwhererangeNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xWhereRange> ::= <xWhereBodyConstructBlock> <xElsewhereConstruct>  ;
     */
    public void reduceByProduction654(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xWhereRange> ::= <xWhereBodyConstructBlock> <xElsewhereConstruct>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production654UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XwhererangeNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xMaskedElsewhereConstruct> ::= <xMaskedElsewhereStmt> <xWhereRange>  ;
     */
    public void reduceByProduction655(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xMaskedElsewhereConstruct> ::= <xMaskedElsewhereStmt> <xWhereRange>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production655UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XmaskedelsewhereconstructNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xElsewhereConstruct> ::= <xElsewhereStmt> <xElsewherePart>  ;
     */
    public void reduceByProduction656(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xElsewhereConstruct> ::= <xElsewhereStmt> <xElsewherePart>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production656UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XelsewhereconstructNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xElsewherePart> ::= <xEndWhereStmt>  ;
     */
    public void reduceByProduction657(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xElsewherePart> ::= <xEndWhereStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production657UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XelsewherepartNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xElsewherePart> ::= <xWhereBodyConstructBlock> <xEndWhereStmt>  ;
     */
    public void reduceByProduction658(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xElsewherePart> ::= <xWhereBodyConstructBlock> <xEndWhereStmt>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production658UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XelsewherepartNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xWhereBodyConstructBlock> ::= <xWhereBodyConstruct>  ;
     */
    public void reduceByProduction659(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xWhereBodyConstructBlock> ::= <xWhereBodyConstruct>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production659UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XwherebodyconstructblockNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xWhereBodyConstructBlock> ::= <xWhereBodyConstructBlock> <xWhereBodyConstruct>  ;
     */
    public void reduceByProduction660(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xWhereBodyConstructBlock> ::= <xWhereBodyConstructBlock> <xWhereBodyConstruct>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production660UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XwherebodyconstructblockNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xWhereConstructStmt> ::= <xName> T_COLON T_WHERE T_LPAREN <xMaskExpr> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction661(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xWhereConstructStmt> ::= <xName> T_COLON T_WHERE T_LPAREN <xMaskExpr> T_RPAREN T_EOS  ;
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production661UserAction(v1, v2, v3, v4, v5, v6, v7);

        // The production has 7 symbols on its RHS
        parser.reduce(Nonterminal.XwhereconstructstmtNonterminal.getInstance(), 7, userValue);
    }

    /**
     * Reduce by <xWhereConstructStmt> ::= <xLblDef> <xName> T_COLON T_WHERE T_LPAREN <xMaskExpr> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction662(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xWhereConstructStmt> ::= <xLblDef> <xName> T_COLON T_WHERE T_LPAREN <xMaskExpr> T_RPAREN T_EOS  ;
        Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production662UserAction(v1, v2, v3, v4, v5, v6, v7, v8);

        // The production has 8 symbols on its RHS
        parser.reduce(Nonterminal.XwhereconstructstmtNonterminal.getInstance(), 8, userValue);
    }

    /**
     * Reduce by <xWhereConstructStmt> ::= T_WHERE T_LPAREN <xMaskExpr> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction663(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xWhereConstructStmt> ::= T_WHERE T_LPAREN <xMaskExpr> T_RPAREN T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production663UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XwhereconstructstmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xWhereConstructStmt> ::= <xLblDef> T_WHERE T_LPAREN <xMaskExpr> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction664(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xWhereConstructStmt> ::= <xLblDef> T_WHERE T_LPAREN <xMaskExpr> T_RPAREN T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production664UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XwhereconstructstmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xWhereBodyConstruct> ::= <xAssignmentStmt>  ;
     */
    public void reduceByProduction665(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xWhereBodyConstruct> ::= <xAssignmentStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production665UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XwherebodyconstructNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xWhereBodyConstruct> ::= <xWhereStmt>  ;
     */
    public void reduceByProduction666(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xWhereBodyConstruct> ::= <xWhereStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production666UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XwherebodyconstructNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xWhereBodyConstruct> ::= <xWhereConstruct>  ;
     */
    public void reduceByProduction667(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xWhereBodyConstruct> ::= <xWhereConstruct>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production667UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XwherebodyconstructNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xMaskExpr> ::= <xExpr>  ;
     */
    public void reduceByProduction668(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xMaskExpr> ::= <xExpr>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production668UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XmaskexprNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xMaskedElsewhereStmt> ::= T_ELSEWHERE T_LPAREN <xMaskExpr> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction669(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xMaskedElsewhereStmt> ::= T_ELSEWHERE T_LPAREN <xMaskExpr> T_RPAREN T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production669UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XmaskedelsewherestmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xMaskedElsewhereStmt> ::= T_ELSEWHERE T_LPAREN <xMaskExpr> T_RPAREN <xMaskedElsewhereStmt@53> T_EOS  ;
     */
    public void reduceByProduction670(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xMaskedElsewhereStmt> ::= T_ELSEWHERE T_LPAREN <xMaskExpr> T_RPAREN <xMaskedElsewhereStmt@53> T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production670UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XmaskedelsewherestmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xMaskedElsewhereStmt> ::= <xLblDef> T_ELSEWHERE T_LPAREN <xMaskExpr> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction671(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xMaskedElsewhereStmt> ::= <xLblDef> T_ELSEWHERE T_LPAREN <xMaskExpr> T_RPAREN T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production671UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XmaskedelsewherestmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xMaskedElsewhereStmt> ::= <xLblDef> T_ELSEWHERE T_LPAREN <xMaskExpr> T_RPAREN <xMaskedElsewhereStmt@53> T_EOS  ;
     */
    public void reduceByProduction672(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xMaskedElsewhereStmt> ::= <xLblDef> T_ELSEWHERE T_LPAREN <xMaskExpr> T_RPAREN <xMaskedElsewhereStmt@53> T_EOS  ;
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production672UserAction(v1, v2, v3, v4, v5, v6, v7);

        // The production has 7 symbols on its RHS
        parser.reduce(Nonterminal.XmaskedelsewherestmtNonterminal.getInstance(), 7, userValue);
    }

    /**
     * Reduce by <xElsewhereStmt> ::= T_ELSEWHERE T_EOS  ;
     */
    public void reduceByProduction673(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xElsewhereStmt> ::= T_ELSEWHERE T_EOS  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production673UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XelsewherestmtNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xElsewhereStmt> ::= T_ELSEWHERE <xElsewhereStmt@54> T_EOS  ;
     */
    public void reduceByProduction674(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xElsewhereStmt> ::= T_ELSEWHERE <xElsewhereStmt@54> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production674UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XelsewherestmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xElsewhereStmt> ::= <xLblDef> T_ELSEWHERE T_EOS  ;
     */
    public void reduceByProduction675(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xElsewhereStmt> ::= <xLblDef> T_ELSEWHERE T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production675UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XelsewherestmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xElsewhereStmt> ::= <xLblDef> T_ELSEWHERE <xElsewhereStmt@54> T_EOS  ;
     */
    public void reduceByProduction676(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xElsewhereStmt> ::= <xLblDef> T_ELSEWHERE <xElsewhereStmt@54> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production676UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XelsewherestmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndWhereStmt> ::= T_ENDWHERE T_EOS  ;
     */
    public void reduceByProduction677(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndWhereStmt> ::= T_ENDWHERE T_EOS  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production677UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XendwherestmtNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xEndWhereStmt> ::= T_ENDWHERE <xEndWhereStmt@55> T_EOS  ;
     */
    public void reduceByProduction678(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndWhereStmt> ::= T_ENDWHERE <xEndWhereStmt@55> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production678UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XendwherestmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndWhereStmt> ::= <xLblDef> T_ENDWHERE T_EOS  ;
     */
    public void reduceByProduction679(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndWhereStmt> ::= <xLblDef> T_ENDWHERE T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production679UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XendwherestmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndWhereStmt> ::= <xLblDef> T_ENDWHERE <xEndWhereStmt@55> T_EOS  ;
     */
    public void reduceByProduction680(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndWhereStmt> ::= <xLblDef> T_ENDWHERE <xEndWhereStmt@55> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production680UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XendwherestmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndWhereStmt> ::= T_END T_WHERE T_EOS  ;
     */
    public void reduceByProduction681(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndWhereStmt> ::= T_END T_WHERE T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production681UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XendwherestmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndWhereStmt> ::= T_END T_WHERE <xEndWhereStmt@56> T_EOS  ;
     */
    public void reduceByProduction682(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndWhereStmt> ::= T_END T_WHERE <xEndWhereStmt@56> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production682UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XendwherestmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndWhereStmt> ::= <xLblDef> T_END T_WHERE T_EOS  ;
     */
    public void reduceByProduction683(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndWhereStmt> ::= <xLblDef> T_END T_WHERE T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production683UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XendwherestmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndWhereStmt> ::= <xLblDef> T_END T_WHERE <xEndWhereStmt@56> T_EOS  ;
     */
    public void reduceByProduction684(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndWhereStmt> ::= <xLblDef> T_END T_WHERE <xEndWhereStmt@56> T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production684UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XendwherestmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xForallConstruct> ::= <xForallConstructStmt> <xEndForallStmt>  ;
     */
    public void reduceByProduction685(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xForallConstruct> ::= <xForallConstructStmt> <xEndForallStmt>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production685UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XforallconstructNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xForallConstruct> ::= <xForallConstructStmt> <xForallBody> <xEndForallStmt>  ;
     */
    public void reduceByProduction686(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xForallConstruct> ::= <xForallConstructStmt> <xForallBody> <xEndForallStmt>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production686UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XforallconstructNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xForallBody> ::= <xForallBodyConstruct>  ;
     */
    public void reduceByProduction687(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xForallBody> ::= <xForallBodyConstruct>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production687UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XforallbodyNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xForallBody> ::= <xForallBody> <xForallBodyConstruct>  ;
     */
    public void reduceByProduction688(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xForallBody> ::= <xForallBody> <xForallBodyConstruct>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production688UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XforallbodyNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xForallConstructStmt> ::= T_FORALL <xForallHeader> T_EOS  ;
     */
    public void reduceByProduction689(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xForallConstructStmt> ::= T_FORALL <xForallHeader> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production689UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XforallconstructstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xForallConstructStmt> ::= <xLblDef> T_FORALL <xForallHeader> T_EOS  ;
     */
    public void reduceByProduction690(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xForallConstructStmt> ::= <xLblDef> T_FORALL <xForallHeader> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production690UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XforallconstructstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xForallConstructStmt> ::= <xName> T_COLON T_FORALL <xForallHeader> T_EOS  ;
     */
    public void reduceByProduction691(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xForallConstructStmt> ::= <xName> T_COLON T_FORALL <xForallHeader> T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production691UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XforallconstructstmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xForallConstructStmt> ::= <xLblDef> <xName> T_COLON T_FORALL <xForallHeader> T_EOS  ;
     */
    public void reduceByProduction692(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xForallConstructStmt> ::= <xLblDef> <xName> T_COLON T_FORALL <xForallHeader> T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production692UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XforallconstructstmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xForallHeader> ::= T_LPAREN <xForallTripletSpecList> T_RPAREN  ;
     */
    public void reduceByProduction693(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xForallHeader> ::= T_LPAREN <xForallTripletSpecList> T_RPAREN  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production693UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XforallheaderNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xForallHeader> ::= T_LPAREN <xForallTripletSpecList> T_COMMA <xScalarMaskExpr> T_RPAREN  ;
     */
    public void reduceByProduction694(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xForallHeader> ::= T_LPAREN <xForallTripletSpecList> T_COMMA <xScalarMaskExpr> T_RPAREN  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production694UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XforallheaderNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xScalarMaskExpr> ::= <xMaskExpr>  ;
     */
    public void reduceByProduction695(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xScalarMaskExpr> ::= <xMaskExpr>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production695UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XscalarmaskexprNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xForallTripletSpecList> ::= <xName> T_EQUALS <xSubscript> T_COLON <xSubscript>  ;
     */
    public void reduceByProduction696(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xForallTripletSpecList> ::= <xName> T_EQUALS <xSubscript> T_COLON <xSubscript>  ;
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production696UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XforalltripletspeclistNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xForallTripletSpecList> ::= <xName> T_EQUALS <xSubscript> T_COLON <xSubscript> T_COLON <xExpr>  ;
     */
    public void reduceByProduction697(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xForallTripletSpecList> ::= <xName> T_EQUALS <xSubscript> T_COLON <xSubscript> T_COLON <xExpr>  ;
        Object v7 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production697UserAction(v1, v2, v3, v4, v5, v6, v7);

        // The production has 7 symbols on its RHS
        parser.reduce(Nonterminal.XforalltripletspeclistNonterminal.getInstance(), 7, userValue);
    }

    /**
     * Reduce by <xForallBodyConstruct> ::= <xAssignmentStmt>  ;
     */
    public void reduceByProduction698(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xForallBodyConstruct> ::= <xAssignmentStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production698UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XforallbodyconstructNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xForallBodyConstruct> ::= <xPointerAssignmentStmt>  ;
     */
    public void reduceByProduction699(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xForallBodyConstruct> ::= <xPointerAssignmentStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production699UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XforallbodyconstructNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xForallBodyConstruct> ::= <xWhereStmt>  ;
     */
    public void reduceByProduction700(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xForallBodyConstruct> ::= <xWhereStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production700UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XforallbodyconstructNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xForallBodyConstruct> ::= <xWhereConstruct>  ;
     */
    public void reduceByProduction701(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xForallBodyConstruct> ::= <xWhereConstruct>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production701UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XforallbodyconstructNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xForallBodyConstruct> ::= <xForallConstruct>  ;
     */
    public void reduceByProduction702(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xForallBodyConstruct> ::= <xForallConstruct>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production702UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XforallbodyconstructNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xForallBodyConstruct> ::= <xForallStmt>  ;
     */
    public void reduceByProduction703(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xForallBodyConstruct> ::= <xForallStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production703UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XforallbodyconstructNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xEndForallStmt> ::= T_END T_FORALL T_EOS  ;
     */
    public void reduceByProduction704(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndForallStmt> ::= T_END T_FORALL T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production704UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XendforallstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndForallStmt> ::= T_END T_FORALL <xEndForallStmt@57> T_EOS  ;
     */
    public void reduceByProduction705(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndForallStmt> ::= T_END T_FORALL <xEndForallStmt@57> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production705UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XendforallstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndForallStmt> ::= <xLblDef> T_END T_FORALL T_EOS  ;
     */
    public void reduceByProduction706(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndForallStmt> ::= <xLblDef> T_END T_FORALL T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production706UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XendforallstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndForallStmt> ::= <xLblDef> T_END T_FORALL <xEndForallStmt@57> T_EOS  ;
     */
    public void reduceByProduction707(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndForallStmt> ::= <xLblDef> T_END T_FORALL <xEndForallStmt@57> T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production707UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XendforallstmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xEndForallStmt> ::= T_ENDFORALL T_EOS  ;
     */
    public void reduceByProduction708(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndForallStmt> ::= T_ENDFORALL T_EOS  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production708UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XendforallstmtNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xEndForallStmt> ::= T_ENDFORALL <xEndForallStmt@58> T_EOS  ;
     */
    public void reduceByProduction709(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndForallStmt> ::= T_ENDFORALL <xEndForallStmt@58> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production709UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XendforallstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndForallStmt> ::= <xLblDef> T_ENDFORALL T_EOS  ;
     */
    public void reduceByProduction710(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndForallStmt> ::= <xLblDef> T_ENDFORALL T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production710UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XendforallstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndForallStmt> ::= <xLblDef> T_ENDFORALL <xEndForallStmt@58> T_EOS  ;
     */
    public void reduceByProduction711(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndForallStmt> ::= <xLblDef> T_ENDFORALL <xEndForallStmt@58> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production711UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XendforallstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xForallStmt> ::= T_FORALL <xForallHeader> <xAssignmentStmt> T_EOS  ;
     */
    public void reduceByProduction712(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xForallStmt> ::= T_FORALL <xForallHeader> <xAssignmentStmt> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production712UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XforallstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xForallStmt> ::= <xLblDef> T_FORALL <xForallHeader> <xAssignmentStmt> T_EOS  ;
     */
    public void reduceByProduction713(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xForallStmt> ::= <xLblDef> T_FORALL <xForallHeader> <xAssignmentStmt> T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production713UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XforallstmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xForallStmt> ::= T_FORALL <xForallHeader> <xPointerAssignmentStmt> T_EOS  ;
     */
    public void reduceByProduction714(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xForallStmt> ::= T_FORALL <xForallHeader> <xPointerAssignmentStmt> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production714UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XforallstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xForallStmt> ::= <xLblDef> T_FORALL <xForallHeader> <xPointerAssignmentStmt> T_EOS  ;
     */
    public void reduceByProduction715(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xForallStmt> ::= <xLblDef> T_FORALL <xForallHeader> <xPointerAssignmentStmt> T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production715UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XforallstmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xIfConstruct> ::= <xIfThenStmt> <xThenPart>  ;
     */
    public void reduceByProduction716(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xIfConstruct> ::= <xIfThenStmt> <xThenPart>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production716UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XifconstructNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xThenPart> ::= <xEndIfStmt>  ;
     */
    public void reduceByProduction717(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xThenPart> ::= <xEndIfStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production717UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XthenpartNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xThenPart> ::= <xConditionalBody> <xEndIfStmt>  ;
     */
    public void reduceByProduction718(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xThenPart> ::= <xConditionalBody> <xEndIfStmt>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production718UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XthenpartNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xThenPart> ::= <xElseIfConstruct>  ;
     */
    public void reduceByProduction719(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xThenPart> ::= <xElseIfConstruct>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production719UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XthenpartNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xThenPart> ::= <xConditionalBody> <xElseIfConstruct>  ;
     */
    public void reduceByProduction720(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xThenPart> ::= <xConditionalBody> <xElseIfConstruct>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production720UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XthenpartNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xThenPart> ::= <xElseConstruct>  ;
     */
    public void reduceByProduction721(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xThenPart> ::= <xElseConstruct>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production721UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XthenpartNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xThenPart> ::= <xConditionalBody> <xElseConstruct>  ;
     */
    public void reduceByProduction722(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xThenPart> ::= <xConditionalBody> <xElseConstruct>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production722UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XthenpartNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xElseIfConstruct> ::= <xElseIfStmt> <xThenPart>  ;
     */
    public void reduceByProduction723(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xElseIfConstruct> ::= <xElseIfStmt> <xThenPart>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production723UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XelseifconstructNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xElseConstruct> ::= <xElseStmt> <xElsePart>  ;
     */
    public void reduceByProduction724(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xElseConstruct> ::= <xElseStmt> <xElsePart>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production724UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XelseconstructNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xElsePart> ::= <xEndIfStmt>  ;
     */
    public void reduceByProduction725(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xElsePart> ::= <xEndIfStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production725UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XelsepartNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xElsePart> ::= <xConditionalBody> <xEndIfStmt>  ;
     */
    public void reduceByProduction726(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xElsePart> ::= <xConditionalBody> <xEndIfStmt>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production726UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XelsepartNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xConditionalBody> ::= <xExecutionPartConstruct>  ;
     */
    public void reduceByProduction727(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xConditionalBody> ::= <xExecutionPartConstruct>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production727UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XconditionalbodyNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xConditionalBody> ::= <xConditionalBody> <xExecutionPartConstruct>  ;
     */
    public void reduceByProduction728(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xConditionalBody> ::= <xConditionalBody> <xExecutionPartConstruct>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production728UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XconditionalbodyNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xIfThenStmt> ::= T_IF T_LPAREN <xExpr> T_RPAREN T_THEN T_EOS  ;
     */
    public void reduceByProduction729(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xIfThenStmt> ::= T_IF T_LPAREN <xExpr> T_RPAREN T_THEN T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production729UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XifthenstmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xIfThenStmt> ::= <xLblDef> T_IF T_LPAREN <xExpr> T_RPAREN T_THEN T_EOS  ;
     */
    public void reduceByProduction730(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xIfThenStmt> ::= <xLblDef> T_IF T_LPAREN <xExpr> T_RPAREN T_THEN T_EOS  ;
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production730UserAction(v1, v2, v3, v4, v5, v6, v7);

        // The production has 7 symbols on its RHS
        parser.reduce(Nonterminal.XifthenstmtNonterminal.getInstance(), 7, userValue);
    }

    /**
     * Reduce by <xIfThenStmt> ::= <xName> T_COLON T_IF T_LPAREN <xExpr> T_RPAREN T_THEN T_EOS  ;
     */
    public void reduceByProduction731(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xIfThenStmt> ::= <xName> T_COLON T_IF T_LPAREN <xExpr> T_RPAREN T_THEN T_EOS  ;
        Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production731UserAction(v1, v2, v3, v4, v5, v6, v7, v8);

        // The production has 8 symbols on its RHS
        parser.reduce(Nonterminal.XifthenstmtNonterminal.getInstance(), 8, userValue);
    }

    /**
     * Reduce by <xIfThenStmt> ::= <xLblDef> <xName> T_COLON T_IF T_LPAREN <xExpr> T_RPAREN T_THEN T_EOS  ;
     */
    public void reduceByProduction732(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xIfThenStmt> ::= <xLblDef> <xName> T_COLON T_IF T_LPAREN <xExpr> T_RPAREN T_THEN T_EOS  ;
        Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production732UserAction(v1, v2, v3, v4, v5, v6, v7, v8, v9);

        // The production has 9 symbols on its RHS
        parser.reduce(Nonterminal.XifthenstmtNonterminal.getInstance(), 9, userValue);
    }

    /**
     * Reduce by <xElseIfStmt> ::= T_ELSEIF T_LPAREN <xExpr> T_RPAREN T_THEN T_EOS  ;
     */
    public void reduceByProduction733(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xElseIfStmt> ::= T_ELSEIF T_LPAREN <xExpr> T_RPAREN T_THEN T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production733UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XelseifstmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xElseIfStmt> ::= <xLblDef> T_ELSEIF T_LPAREN <xExpr> T_RPAREN T_THEN T_EOS  ;
     */
    public void reduceByProduction734(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xElseIfStmt> ::= <xLblDef> T_ELSEIF T_LPAREN <xExpr> T_RPAREN T_THEN T_EOS  ;
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production734UserAction(v1, v2, v3, v4, v5, v6, v7);

        // The production has 7 symbols on its RHS
        parser.reduce(Nonterminal.XelseifstmtNonterminal.getInstance(), 7, userValue);
    }

    /**
     * Reduce by <xElseIfStmt> ::= T_ELSEIF T_LPAREN <xExpr> T_RPAREN T_THEN <xEndName> T_EOS  ;
     */
    public void reduceByProduction735(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xElseIfStmt> ::= T_ELSEIF T_LPAREN <xExpr> T_RPAREN T_THEN <xEndName> T_EOS  ;
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production735UserAction(v1, v2, v3, v4, v5, v6, v7);

        // The production has 7 symbols on its RHS
        parser.reduce(Nonterminal.XelseifstmtNonterminal.getInstance(), 7, userValue);
    }

    /**
     * Reduce by <xElseIfStmt> ::= <xLblDef> T_ELSEIF T_LPAREN <xExpr> T_RPAREN T_THEN <xEndName> T_EOS  ;
     */
    public void reduceByProduction736(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xElseIfStmt> ::= <xLblDef> T_ELSEIF T_LPAREN <xExpr> T_RPAREN T_THEN <xEndName> T_EOS  ;
        Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v7 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production736UserAction(v1, v2, v3, v4, v5, v6, v7, v8);

        // The production has 8 symbols on its RHS
        parser.reduce(Nonterminal.XelseifstmtNonterminal.getInstance(), 8, userValue);
    }

    /**
     * Reduce by <xElseIfStmt> ::= T_ELSE T_IF T_LPAREN <xExpr> T_RPAREN T_THEN T_EOS  ;
     */
    public void reduceByProduction737(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xElseIfStmt> ::= T_ELSE T_IF T_LPAREN <xExpr> T_RPAREN T_THEN T_EOS  ;
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production737UserAction(v1, v2, v3, v4, v5, v6, v7);

        // The production has 7 symbols on its RHS
        parser.reduce(Nonterminal.XelseifstmtNonterminal.getInstance(), 7, userValue);
    }

    /**
     * Reduce by <xElseIfStmt> ::= <xLblDef> T_ELSE T_IF T_LPAREN <xExpr> T_RPAREN T_THEN T_EOS  ;
     */
    public void reduceByProduction738(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xElseIfStmt> ::= <xLblDef> T_ELSE T_IF T_LPAREN <xExpr> T_RPAREN T_THEN T_EOS  ;
        Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production738UserAction(v1, v2, v3, v4, v5, v6, v7, v8);

        // The production has 8 symbols on its RHS
        parser.reduce(Nonterminal.XelseifstmtNonterminal.getInstance(), 8, userValue);
    }

    /**
     * Reduce by <xElseIfStmt> ::= T_ELSE T_IF T_LPAREN <xExpr> T_RPAREN T_THEN <xEndName> T_EOS  ;
     */
    public void reduceByProduction739(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xElseIfStmt> ::= T_ELSE T_IF T_LPAREN <xExpr> T_RPAREN T_THEN <xEndName> T_EOS  ;
        Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v7 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production739UserAction(v1, v2, v3, v4, v5, v6, v7, v8);

        // The production has 8 symbols on its RHS
        parser.reduce(Nonterminal.XelseifstmtNonterminal.getInstance(), 8, userValue);
    }

    /**
     * Reduce by <xElseIfStmt> ::= <xLblDef> T_ELSE T_IF T_LPAREN <xExpr> T_RPAREN T_THEN <xEndName> T_EOS  ;
     */
    public void reduceByProduction740(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xElseIfStmt> ::= <xLblDef> T_ELSE T_IF T_LPAREN <xExpr> T_RPAREN T_THEN <xEndName> T_EOS  ;
        Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v8 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production740UserAction(v1, v2, v3, v4, v5, v6, v7, v8, v9);

        // The production has 9 symbols on its RHS
        parser.reduce(Nonterminal.XelseifstmtNonterminal.getInstance(), 9, userValue);
    }

    /**
     * Reduce by <xElseStmt> ::= T_ELSE T_EOS  ;
     */
    public void reduceByProduction741(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xElseStmt> ::= T_ELSE T_EOS  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production741UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XelsestmtNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xElseStmt> ::= <xLblDef> T_ELSE T_EOS  ;
     */
    public void reduceByProduction742(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xElseStmt> ::= <xLblDef> T_ELSE T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production742UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XelsestmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xElseStmt> ::= T_ELSE <xEndName> T_EOS  ;
     */
    public void reduceByProduction743(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xElseStmt> ::= T_ELSE <xEndName> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production743UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XelsestmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xElseStmt> ::= <xLblDef> T_ELSE <xEndName> T_EOS  ;
     */
    public void reduceByProduction744(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xElseStmt> ::= <xLblDef> T_ELSE <xEndName> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production744UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XelsestmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndIfStmt> ::= T_ENDIF T_EOS  ;
     */
    public void reduceByProduction745(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndIfStmt> ::= T_ENDIF T_EOS  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production745UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XendifstmtNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xEndIfStmt> ::= T_ENDIF <xEndIfStmt@59> T_EOS  ;
     */
    public void reduceByProduction746(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndIfStmt> ::= T_ENDIF <xEndIfStmt@59> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production746UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XendifstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndIfStmt> ::= <xLblDef> T_ENDIF T_EOS  ;
     */
    public void reduceByProduction747(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndIfStmt> ::= <xLblDef> T_ENDIF T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production747UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XendifstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndIfStmt> ::= <xLblDef> T_ENDIF <xEndIfStmt@59> T_EOS  ;
     */
    public void reduceByProduction748(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndIfStmt> ::= <xLblDef> T_ENDIF <xEndIfStmt@59> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production748UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XendifstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndIfStmt> ::= T_END T_IF T_EOS  ;
     */
    public void reduceByProduction749(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndIfStmt> ::= T_END T_IF T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production749UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XendifstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndIfStmt> ::= T_END T_IF <xEndIfStmt@60> T_EOS  ;
     */
    public void reduceByProduction750(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndIfStmt> ::= T_END T_IF <xEndIfStmt@60> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production750UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XendifstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndIfStmt> ::= <xLblDef> T_END T_IF T_EOS  ;
     */
    public void reduceByProduction751(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndIfStmt> ::= <xLblDef> T_END T_IF T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production751UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XendifstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndIfStmt> ::= <xLblDef> T_END T_IF <xEndIfStmt@60> T_EOS  ;
     */
    public void reduceByProduction752(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndIfStmt> ::= <xLblDef> T_END T_IF <xEndIfStmt@60> T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production752UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XendifstmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xIfStmt> ::= T_IF T_LPAREN <xExpr> T_RPAREN <xActionStmt>  ;
     */
    public void reduceByProduction753(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xIfStmt> ::= T_IF T_LPAREN <xExpr> T_RPAREN <xActionStmt>  ;
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production753UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XifstmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xIfStmt> ::= <xLblDef> T_IF T_LPAREN <xExpr> T_RPAREN <xActionStmt>  ;
     */
    public void reduceByProduction754(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xIfStmt> ::= <xLblDef> T_IF T_LPAREN <xExpr> T_RPAREN <xActionStmt>  ;
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production754UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XifstmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xCaseConstruct> ::= <xSelectCaseStmt> <xSelectCaseRange>  ;
     */
    public void reduceByProduction755(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCaseConstruct> ::= <xSelectCaseStmt> <xSelectCaseRange>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production755UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XcaseconstructNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xSelectCaseRange> ::= <xSelectCaseBody> <xEndSelectStmt>  ;
     */
    public void reduceByProduction756(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSelectCaseRange> ::= <xSelectCaseBody> <xEndSelectStmt>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production756UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XselectcaserangeNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xSelectCaseRange> ::= <xEndSelectStmt>  ;
     */
    public void reduceByProduction757(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSelectCaseRange> ::= <xEndSelectStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production757UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XselectcaserangeNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSelectCaseBody> ::= <xCaseStmt>  ;
     */
    public void reduceByProduction758(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSelectCaseBody> ::= <xCaseStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production758UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XselectcasebodyNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSelectCaseBody> ::= <xSelectCaseBody> <xCaseBodyConstruct>  ;
     */
    public void reduceByProduction759(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSelectCaseBody> ::= <xSelectCaseBody> <xCaseBodyConstruct>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production759UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XselectcasebodyNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xCaseBodyConstruct> ::= <xCaseStmt>  ;
     */
    public void reduceByProduction760(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCaseBodyConstruct> ::= <xCaseStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production760UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XcasebodyconstructNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xCaseBodyConstruct> ::= <xExecutionPartConstruct>  ;
     */
    public void reduceByProduction761(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCaseBodyConstruct> ::= <xExecutionPartConstruct>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production761UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XcasebodyconstructNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSelectCaseStmt> ::= <xName> T_COLON T_SELECTCASE T_LPAREN <xExpr> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction762(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSelectCaseStmt> ::= <xName> T_COLON T_SELECTCASE T_LPAREN <xExpr> T_RPAREN T_EOS  ;
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production762UserAction(v1, v2, v3, v4, v5, v6, v7);

        // The production has 7 symbols on its RHS
        parser.reduce(Nonterminal.XselectcasestmtNonterminal.getInstance(), 7, userValue);
    }

    /**
     * Reduce by <xSelectCaseStmt> ::= <xLblDef> <xName> T_COLON T_SELECTCASE T_LPAREN <xExpr> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction763(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSelectCaseStmt> ::= <xLblDef> <xName> T_COLON T_SELECTCASE T_LPAREN <xExpr> T_RPAREN T_EOS  ;
        Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production763UserAction(v1, v2, v3, v4, v5, v6, v7, v8);

        // The production has 8 symbols on its RHS
        parser.reduce(Nonterminal.XselectcasestmtNonterminal.getInstance(), 8, userValue);
    }

    /**
     * Reduce by <xSelectCaseStmt> ::= T_SELECTCASE T_LPAREN <xExpr> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction764(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSelectCaseStmt> ::= T_SELECTCASE T_LPAREN <xExpr> T_RPAREN T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production764UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XselectcasestmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xSelectCaseStmt> ::= <xLblDef> T_SELECTCASE T_LPAREN <xExpr> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction765(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSelectCaseStmt> ::= <xLblDef> T_SELECTCASE T_LPAREN <xExpr> T_RPAREN T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production765UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XselectcasestmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xSelectCaseStmt> ::= <xName> T_COLON T_SELECT T_CASE T_LPAREN <xExpr> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction766(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSelectCaseStmt> ::= <xName> T_COLON T_SELECT T_CASE T_LPAREN <xExpr> T_RPAREN T_EOS  ;
        Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production766UserAction(v1, v2, v3, v4, v5, v6, v7, v8);

        // The production has 8 symbols on its RHS
        parser.reduce(Nonterminal.XselectcasestmtNonterminal.getInstance(), 8, userValue);
    }

    /**
     * Reduce by <xSelectCaseStmt> ::= <xLblDef> <xName> T_COLON T_SELECT T_CASE T_LPAREN <xExpr> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction767(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSelectCaseStmt> ::= <xLblDef> <xName> T_COLON T_SELECT T_CASE T_LPAREN <xExpr> T_RPAREN T_EOS  ;
        Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v7 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production767UserAction(v1, v2, v3, v4, v5, v6, v7, v8, v9);

        // The production has 9 symbols on its RHS
        parser.reduce(Nonterminal.XselectcasestmtNonterminal.getInstance(), 9, userValue);
    }

    /**
     * Reduce by <xSelectCaseStmt> ::= T_SELECT T_CASE T_LPAREN <xExpr> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction768(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSelectCaseStmt> ::= T_SELECT T_CASE T_LPAREN <xExpr> T_RPAREN T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production768UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XselectcasestmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xSelectCaseStmt> ::= <xLblDef> T_SELECT T_CASE T_LPAREN <xExpr> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction769(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSelectCaseStmt> ::= <xLblDef> T_SELECT T_CASE T_LPAREN <xExpr> T_RPAREN T_EOS  ;
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production769UserAction(v1, v2, v3, v4, v5, v6, v7);

        // The production has 7 symbols on its RHS
        parser.reduce(Nonterminal.XselectcasestmtNonterminal.getInstance(), 7, userValue);
    }

    /**
     * Reduce by <xCaseStmt> ::= T_CASE <xCaseSelector> T_EOS  ;
     */
    public void reduceByProduction770(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCaseStmt> ::= T_CASE <xCaseSelector> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production770UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XcasestmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xCaseStmt> ::= <xLblDef> T_CASE <xCaseSelector> T_EOS  ;
     */
    public void reduceByProduction771(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCaseStmt> ::= <xLblDef> T_CASE <xCaseSelector> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production771UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XcasestmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xCaseStmt> ::= T_CASE <xCaseSelector> <xName> T_EOS  ;
     */
    public void reduceByProduction772(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCaseStmt> ::= T_CASE <xCaseSelector> <xName> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production772UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XcasestmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xCaseStmt> ::= <xLblDef> T_CASE <xCaseSelector> <xName> T_EOS  ;
     */
    public void reduceByProduction773(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCaseStmt> ::= <xLblDef> T_CASE <xCaseSelector> <xName> T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production773UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XcasestmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xEndSelectStmt> ::= T_ENDSELECT T_EOS  ;
     */
    public void reduceByProduction774(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndSelectStmt> ::= T_ENDSELECT T_EOS  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production774UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XendselectstmtNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xEndSelectStmt> ::= T_ENDSELECT <xEndSelectStmt@61> T_EOS  ;
     */
    public void reduceByProduction775(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndSelectStmt> ::= T_ENDSELECT <xEndSelectStmt@61> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production775UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XendselectstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndSelectStmt> ::= <xLblDef> T_ENDSELECT T_EOS  ;
     */
    public void reduceByProduction776(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndSelectStmt> ::= <xLblDef> T_ENDSELECT T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production776UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XendselectstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndSelectStmt> ::= <xLblDef> T_ENDSELECT <xEndSelectStmt@61> T_EOS  ;
     */
    public void reduceByProduction777(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndSelectStmt> ::= <xLblDef> T_ENDSELECT <xEndSelectStmt@61> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production777UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XendselectstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndSelectStmt> ::= T_END T_SELECT T_EOS  ;
     */
    public void reduceByProduction778(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndSelectStmt> ::= T_END T_SELECT T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production778UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XendselectstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndSelectStmt> ::= T_END T_SELECT <xEndSelectStmt@62> T_EOS  ;
     */
    public void reduceByProduction779(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndSelectStmt> ::= T_END T_SELECT <xEndSelectStmt@62> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production779UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XendselectstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndSelectStmt> ::= <xLblDef> T_END T_SELECT T_EOS  ;
     */
    public void reduceByProduction780(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndSelectStmt> ::= <xLblDef> T_END T_SELECT T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production780UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XendselectstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndSelectStmt> ::= <xLblDef> T_END T_SELECT <xEndSelectStmt@62> T_EOS  ;
     */
    public void reduceByProduction781(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndSelectStmt> ::= <xLblDef> T_END T_SELECT <xEndSelectStmt@62> T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production781UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XendselectstmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xCaseSelector> ::= T_LPAREN <xCaseValueRangeList> T_RPAREN  ;
     */
    public void reduceByProduction782(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCaseSelector> ::= T_LPAREN <xCaseValueRangeList> T_RPAREN  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production782UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XcaseselectorNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xCaseSelector> ::= T_DEFAULT  ;
     */
    public void reduceByProduction783(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCaseSelector> ::= T_DEFAULT  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production783UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XcaseselectorNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xCaseValueRangeList> ::= <xCaseValueRange>  ;
     */
    public void reduceByProduction784(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCaseValueRangeList> ::= <xCaseValueRange>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production784UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XcasevaluerangelistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xCaseValueRangeList> ::= <xCaseValueRangeList> T_COMMA <xCaseValueRange>  ;
     */
    public void reduceByProduction785(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCaseValueRangeList> ::= <xCaseValueRangeList> T_COMMA <xCaseValueRange>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production785UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XcasevaluerangelistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xCaseValueRange> ::= <xExpr>  ;
     */
    public void reduceByProduction786(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCaseValueRange> ::= <xExpr>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production786UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XcasevaluerangeNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xCaseValueRange> ::= <xExpr> T_COLON  ;
     */
    public void reduceByProduction787(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCaseValueRange> ::= <xExpr> T_COLON  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production787UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XcasevaluerangeNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xCaseValueRange> ::= T_COLON <xExpr>  ;
     */
    public void reduceByProduction788(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCaseValueRange> ::= T_COLON <xExpr>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production788UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XcasevaluerangeNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xCaseValueRange> ::= <xExpr> T_COLON <xExpr>  ;
     */
    public void reduceByProduction789(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCaseValueRange> ::= <xExpr> T_COLON <xExpr>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production789UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XcasevaluerangeNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xDoConstruct> ::= <xBlockDoConstruct>  ;
     */
    public void reduceByProduction790(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDoConstruct> ::= <xBlockDoConstruct>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production790UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XdoconstructNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xBlockDoConstruct> ::= <xLabelDoStmt>  ;
     */
    public void reduceByProduction791(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xBlockDoConstruct> ::= <xLabelDoStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production791UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XblockdoconstructNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xLabelDoStmt> ::= T_DO <xLblRef> <xCommaLoopControl> T_EOS  ;
     */
    public void reduceByProduction792(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLabelDoStmt> ::= T_DO <xLblRef> <xCommaLoopControl> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production792UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XlabeldostmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xLabelDoStmt> ::= <xLblDef> T_DO <xLblRef> <xCommaLoopControl> T_EOS  ;
     */
    public void reduceByProduction793(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLabelDoStmt> ::= <xLblDef> T_DO <xLblRef> <xCommaLoopControl> T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production793UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XlabeldostmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xLabelDoStmt> ::= T_DO <xLblRef> T_EOS  ;
     */
    public void reduceByProduction794(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLabelDoStmt> ::= T_DO <xLblRef> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production794UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XlabeldostmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xLabelDoStmt> ::= <xLblDef> T_DO <xLblRef> T_EOS  ;
     */
    public void reduceByProduction795(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLabelDoStmt> ::= <xLblDef> T_DO <xLblRef> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production795UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XlabeldostmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xLabelDoStmt> ::= T_DO <xCommaLoopControl> T_EOS  ;
     */
    public void reduceByProduction796(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLabelDoStmt> ::= T_DO <xCommaLoopControl> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production796UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XlabeldostmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xLabelDoStmt> ::= <xLblDef> T_DO <xCommaLoopControl> T_EOS  ;
     */
    public void reduceByProduction797(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLabelDoStmt> ::= <xLblDef> T_DO <xCommaLoopControl> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production797UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XlabeldostmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xLabelDoStmt> ::= T_DO T_EOS  ;
     */
    public void reduceByProduction798(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLabelDoStmt> ::= T_DO T_EOS  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production798UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XlabeldostmtNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xLabelDoStmt> ::= <xLblDef> T_DO T_EOS  ;
     */
    public void reduceByProduction799(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLabelDoStmt> ::= <xLblDef> T_DO T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production799UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XlabeldostmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xLabelDoStmt> ::= <xName> T_COLON T_DO <xLblRef> <xCommaLoopControl> T_EOS  ;
     */
    public void reduceByProduction800(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLabelDoStmt> ::= <xName> T_COLON T_DO <xLblRef> <xCommaLoopControl> T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production800UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XlabeldostmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xLabelDoStmt> ::= <xLblDef> <xName> T_COLON T_DO <xLblRef> <xCommaLoopControl> T_EOS  ;
     */
    public void reduceByProduction801(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLabelDoStmt> ::= <xLblDef> <xName> T_COLON T_DO <xLblRef> <xCommaLoopControl> T_EOS  ;
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production801UserAction(v1, v2, v3, v4, v5, v6, v7);

        // The production has 7 symbols on its RHS
        parser.reduce(Nonterminal.XlabeldostmtNonterminal.getInstance(), 7, userValue);
    }

    /**
     * Reduce by <xLabelDoStmt> ::= <xName> T_COLON T_DO <xLblRef> T_EOS  ;
     */
    public void reduceByProduction802(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLabelDoStmt> ::= <xName> T_COLON T_DO <xLblRef> T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production802UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XlabeldostmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xLabelDoStmt> ::= <xLblDef> <xName> T_COLON T_DO <xLblRef> T_EOS  ;
     */
    public void reduceByProduction803(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLabelDoStmt> ::= <xLblDef> <xName> T_COLON T_DO <xLblRef> T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production803UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XlabeldostmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xLabelDoStmt> ::= <xName> T_COLON T_DO <xCommaLoopControl> T_EOS  ;
     */
    public void reduceByProduction804(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLabelDoStmt> ::= <xName> T_COLON T_DO <xCommaLoopControl> T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production804UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XlabeldostmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xLabelDoStmt> ::= <xLblDef> <xName> T_COLON T_DO <xCommaLoopControl> T_EOS  ;
     */
    public void reduceByProduction805(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLabelDoStmt> ::= <xLblDef> <xName> T_COLON T_DO <xCommaLoopControl> T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production805UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XlabeldostmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xLabelDoStmt> ::= <xName> T_COLON T_DO T_EOS  ;
     */
    public void reduceByProduction806(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLabelDoStmt> ::= <xName> T_COLON T_DO T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production806UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XlabeldostmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xLabelDoStmt> ::= <xLblDef> <xName> T_COLON T_DO T_EOS  ;
     */
    public void reduceByProduction807(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLabelDoStmt> ::= <xLblDef> <xName> T_COLON T_DO T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production807UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XlabeldostmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xCommaLoopControl> ::= T_COMMA <xLoopControl>  ;
     */
    public void reduceByProduction808(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCommaLoopControl> ::= T_COMMA <xLoopControl>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production808UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XcommaloopcontrolNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xCommaLoopControl> ::= <xLoopControl>  ;
     */
    public void reduceByProduction809(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCommaLoopControl> ::= <xLoopControl>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production809UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XcommaloopcontrolNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xLoopControl> ::= <xVariableName> T_EQUALS <xExpr> T_COMMA <xExpr>  ;
     */
    public void reduceByProduction810(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLoopControl> ::= <xVariableName> T_EQUALS <xExpr> T_COMMA <xExpr>  ;
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production810UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XloopcontrolNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xLoopControl> ::= <xVariableName> T_EQUALS <xExpr> T_COMMA <xExpr> T_COMMA <xExpr>  ;
     */
    public void reduceByProduction811(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLoopControl> ::= <xVariableName> T_EQUALS <xExpr> T_COMMA <xExpr> T_COMMA <xExpr>  ;
        Object v7 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production811UserAction(v1, v2, v3, v4, v5, v6, v7);

        // The production has 7 symbols on its RHS
        parser.reduce(Nonterminal.XloopcontrolNonterminal.getInstance(), 7, userValue);
    }

    /**
     * Reduce by <xLoopControl> ::= T_WHILE T_LPAREN <xExpr> T_RPAREN  ;
     */
    public void reduceByProduction812(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLoopControl> ::= T_WHILE T_LPAREN <xExpr> T_RPAREN  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production812UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XloopcontrolNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndDoStmt> ::= T_ENDDO T_EOS  ;
     */
    public void reduceByProduction813(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndDoStmt> ::= T_ENDDO T_EOS  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production813UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XenddostmtNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xEndDoStmt> ::= T_ENDDO <xEndDoStmt@63> T_EOS  ;
     */
    public void reduceByProduction814(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndDoStmt> ::= T_ENDDO <xEndDoStmt@63> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production814UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XenddostmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndDoStmt> ::= <xLblDef> T_ENDDO T_EOS  ;
     */
    public void reduceByProduction815(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndDoStmt> ::= <xLblDef> T_ENDDO T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production815UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XenddostmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndDoStmt> ::= <xLblDef> T_ENDDO <xEndDoStmt@63> T_EOS  ;
     */
    public void reduceByProduction816(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndDoStmt> ::= <xLblDef> T_ENDDO <xEndDoStmt@63> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production816UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XenddostmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndDoStmt> ::= T_END T_DO T_EOS  ;
     */
    public void reduceByProduction817(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndDoStmt> ::= T_END T_DO T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production817UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XenddostmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndDoStmt> ::= T_END T_DO <xEndDoStmt@64> T_EOS  ;
     */
    public void reduceByProduction818(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndDoStmt> ::= T_END T_DO <xEndDoStmt@64> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production818UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XenddostmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndDoStmt> ::= <xLblDef> T_END T_DO T_EOS  ;
     */
    public void reduceByProduction819(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndDoStmt> ::= <xLblDef> T_END T_DO T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production819UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XenddostmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndDoStmt> ::= <xLblDef> T_END T_DO <xEndDoStmt@64> T_EOS  ;
     */
    public void reduceByProduction820(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndDoStmt> ::= <xLblDef> T_END T_DO <xEndDoStmt@64> T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production820UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XenddostmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xCycleStmt> ::= T_CYCLE T_EOS  ;
     */
    public void reduceByProduction821(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCycleStmt> ::= T_CYCLE T_EOS  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production821UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XcyclestmtNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xCycleStmt> ::= T_CYCLE <xCycleStmt@65> T_EOS  ;
     */
    public void reduceByProduction822(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCycleStmt> ::= T_CYCLE <xCycleStmt@65> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production822UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XcyclestmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xCycleStmt> ::= <xLblDef> T_CYCLE T_EOS  ;
     */
    public void reduceByProduction823(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCycleStmt> ::= <xLblDef> T_CYCLE T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production823UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XcyclestmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xCycleStmt> ::= <xLblDef> T_CYCLE <xCycleStmt@65> T_EOS  ;
     */
    public void reduceByProduction824(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCycleStmt> ::= <xLblDef> T_CYCLE <xCycleStmt@65> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production824UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XcyclestmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xExitStmt> ::= T_EXIT T_EOS  ;
     */
    public void reduceByProduction825(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xExitStmt> ::= T_EXIT T_EOS  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production825UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XexitstmtNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xExitStmt> ::= T_EXIT <xExitStmt@66> T_EOS  ;
     */
    public void reduceByProduction826(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xExitStmt> ::= T_EXIT <xExitStmt@66> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production826UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XexitstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xExitStmt> ::= <xLblDef> T_EXIT T_EOS  ;
     */
    public void reduceByProduction827(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xExitStmt> ::= <xLblDef> T_EXIT T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production827UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XexitstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xExitStmt> ::= <xLblDef> T_EXIT <xExitStmt@66> T_EOS  ;
     */
    public void reduceByProduction828(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xExitStmt> ::= <xLblDef> T_EXIT <xExitStmt@66> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production828UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XexitstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xGotoStmt> ::= <GoToKw> <xLblRef> T_EOS  ;
     */
    public void reduceByProduction829(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xGotoStmt> ::= <GoToKw> <xLblRef> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production829UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XgotostmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xGotoStmt> ::= <xLblDef> <GoToKw> <xLblRef> T_EOS  ;
     */
    public void reduceByProduction830(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xGotoStmt> ::= <xLblDef> <GoToKw> <xLblRef> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production830UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XgotostmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <GoToKw> ::= T_GOTO  ;
     */
    public void reduceByProduction831(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <GoToKw> ::= T_GOTO  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production831UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.GotokwNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <GoToKw> ::= T_GO T_TO  ;
     */
    public void reduceByProduction832(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <GoToKw> ::= T_GO T_TO  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production832UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.GotokwNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xComputedGotoStmt> ::= <GoToKw> T_LPAREN <xLblRefList> T_RPAREN <xExpr> T_EOS  ;
     */
    public void reduceByProduction833(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xComputedGotoStmt> ::= <GoToKw> T_LPAREN <xLblRefList> T_RPAREN <xExpr> T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production833UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XcomputedgotostmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xComputedGotoStmt> ::= <xLblDef> <GoToKw> T_LPAREN <xLblRefList> T_RPAREN <xExpr> T_EOS  ;
     */
    public void reduceByProduction834(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xComputedGotoStmt> ::= <xLblDef> <GoToKw> T_LPAREN <xLblRefList> T_RPAREN <xExpr> T_EOS  ;
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production834UserAction(v1, v2, v3, v4, v5, v6, v7);

        // The production has 7 symbols on its RHS
        parser.reduce(Nonterminal.XcomputedgotostmtNonterminal.getInstance(), 7, userValue);
    }

    /**
     * Reduce by <xComputedGotoStmt> ::= <GoToKw> T_LPAREN <xLblRefList> T_RPAREN <xCommaExp> T_EOS  ;
     */
    public void reduceByProduction835(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xComputedGotoStmt> ::= <GoToKw> T_LPAREN <xLblRefList> T_RPAREN <xCommaExp> T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production835UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XcomputedgotostmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xComputedGotoStmt> ::= <xLblDef> <GoToKw> T_LPAREN <xLblRefList> T_RPAREN <xCommaExp> T_EOS  ;
     */
    public void reduceByProduction836(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xComputedGotoStmt> ::= <xLblDef> <GoToKw> T_LPAREN <xLblRefList> T_RPAREN <xCommaExp> T_EOS  ;
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production836UserAction(v1, v2, v3, v4, v5, v6, v7);

        // The production has 7 symbols on its RHS
        parser.reduce(Nonterminal.XcomputedgotostmtNonterminal.getInstance(), 7, userValue);
    }

    /**
     * Reduce by <xCommaExp> ::= T_COMMA <xExpr>  ;
     */
    public void reduceByProduction837(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCommaExp> ::= T_COMMA <xExpr>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production837UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XcommaexpNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xLblRefList> ::= <xLblRef>  ;
     */
    public void reduceByProduction838(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLblRefList> ::= <xLblRef>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production838UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XlblreflistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xLblRefList> ::= <xLblRefList> T_COMMA <xLblRef>  ;
     */
    public void reduceByProduction839(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLblRefList> ::= <xLblRefList> T_COMMA <xLblRef>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production839UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XlblreflistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xLblRef> ::= <xLabel>  ;
     */
    public void reduceByProduction840(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLblRef> ::= <xLabel>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production840UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XlblrefNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xArithmeticIfStmt> ::= T_IF T_LPAREN <xExpr> T_RPAREN <xLblRef> T_COMMA <xLblRef> T_COMMA <xLblRef> T_EOS  ;
     */
    public void reduceByProduction841(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xArithmeticIfStmt> ::= T_IF T_LPAREN <xExpr> T_RPAREN <xLblRef> T_COMMA <xLblRef> T_COMMA <xLblRef> T_EOS  ;
        Token v10 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v9 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v7 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production841UserAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);

        // The production has 10 symbols on its RHS
        parser.reduce(Nonterminal.XarithmeticifstmtNonterminal.getInstance(), 10, userValue);
    }

    /**
     * Reduce by <xArithmeticIfStmt> ::= <xLblDef> T_IF T_LPAREN <xExpr> T_RPAREN <xLblRef> T_COMMA <xLblRef> T_COMMA <xLblRef> T_EOS  ;
     */
    public void reduceByProduction842(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xArithmeticIfStmt> ::= <xLblDef> T_IF T_LPAREN <xExpr> T_RPAREN <xLblRef> T_COMMA <xLblRef> T_COMMA <xLblRef> T_EOS  ;
        Token v11 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v10 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v8 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production842UserAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);

        // The production has 11 symbols on its RHS
        parser.reduce(Nonterminal.XarithmeticifstmtNonterminal.getInstance(), 11, userValue);
    }

    /**
     * Reduce by <xContinueStmt> ::= T_CONTINUE T_EOS  ;
     */
    public void reduceByProduction843(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xContinueStmt> ::= T_CONTINUE T_EOS  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production843UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XcontinuestmtNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xContinueStmt> ::= <xLblDef> T_CONTINUE T_EOS  ;
     */
    public void reduceByProduction844(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xContinueStmt> ::= <xLblDef> T_CONTINUE T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production844UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XcontinuestmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xStopStmt> ::= T_STOP T_EOS  ;
     */
    public void reduceByProduction845(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xStopStmt> ::= T_STOP T_EOS  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production845UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XstopstmtNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xStopStmt> ::= <xLblDef> T_STOP T_EOS  ;
     */
    public void reduceByProduction846(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xStopStmt> ::= <xLblDef> T_STOP T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production846UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XstopstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xStopStmt> ::= T_STOP T_ICON T_EOS  ;
     */
    public void reduceByProduction847(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xStopStmt> ::= T_STOP T_ICON T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production847UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XstopstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xStopStmt> ::= <xLblDef> T_STOP T_ICON T_EOS  ;
     */
    public void reduceByProduction848(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xStopStmt> ::= <xLblDef> T_STOP T_ICON T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production848UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XstopstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xStopStmt> ::= T_STOP T_SCON T_EOS  ;
     */
    public void reduceByProduction849(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xStopStmt> ::= T_STOP T_SCON T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production849UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XstopstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xStopStmt> ::= <xLblDef> T_STOP T_SCON T_EOS  ;
     */
    public void reduceByProduction850(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xStopStmt> ::= <xLblDef> T_STOP T_SCON T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production850UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XstopstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xUnitIdentifier> ::= <xUFExpr>  ;
     */
    public void reduceByProduction851(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUnitIdentifier> ::= <xUFExpr>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production851UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XunitidentifierNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xUnitIdentifier> ::= T_ASTERISK  ;
     */
    public void reduceByProduction852(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUnitIdentifier> ::= T_ASTERISK  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production852UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XunitidentifierNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xOpenStmt> ::= T_OPEN T_LPAREN <xConnectSpecList> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction853(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xOpenStmt> ::= T_OPEN T_LPAREN <xConnectSpecList> T_RPAREN T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production853UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XopenstmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xOpenStmt> ::= <xLblDef> T_OPEN T_LPAREN <xConnectSpecList> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction854(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xOpenStmt> ::= <xLblDef> T_OPEN T_LPAREN <xConnectSpecList> T_RPAREN T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production854UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XopenstmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xConnectSpecList> ::= <xUnitIdentifier>  ;
     */
    public void reduceByProduction855(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xConnectSpecList> ::= <xUnitIdentifier>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production855UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XconnectspeclistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xConnectSpecList> ::= <xConnectSpec>  ;
     */
    public void reduceByProduction856(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xConnectSpecList> ::= <xConnectSpec>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production856UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XconnectspeclistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xConnectSpecList> ::= <xConnectSpecList> T_COMMA <xConnectSpec>  ;
     */
    public void reduceByProduction857(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xConnectSpecList> ::= <xConnectSpecList> T_COMMA <xConnectSpec>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production857UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XconnectspeclistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xConnectSpec> ::= T_UNITEQ <xUnitIdentifier>  ;
     */
    public void reduceByProduction858(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xConnectSpec> ::= T_UNITEQ <xUnitIdentifier>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production858UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XconnectspecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xConnectSpec> ::= T_ERREQ <xLblRef>  ;
     */
    public void reduceByProduction859(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xConnectSpec> ::= T_ERREQ <xLblRef>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production859UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XconnectspecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xConnectSpec> ::= T_FILEEQ <xCExpr>  ;
     */
    public void reduceByProduction860(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xConnectSpec> ::= T_FILEEQ <xCExpr>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production860UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XconnectspecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xConnectSpec> ::= T_STATUSEQ <xCExpr>  ;
     */
    public void reduceByProduction861(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xConnectSpec> ::= T_STATUSEQ <xCExpr>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production861UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XconnectspecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xConnectSpec> ::= T_ACCESSEQ <xCExpr>  ;
     */
    public void reduceByProduction862(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xConnectSpec> ::= T_ACCESSEQ <xCExpr>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production862UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XconnectspecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xConnectSpec> ::= T_FORMEQ <xCExpr>  ;
     */
    public void reduceByProduction863(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xConnectSpec> ::= T_FORMEQ <xCExpr>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production863UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XconnectspecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xConnectSpec> ::= T_RECLEQ <xExpr>  ;
     */
    public void reduceByProduction864(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xConnectSpec> ::= T_RECLEQ <xExpr>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production864UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XconnectspecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xConnectSpec> ::= T_BLANKEQ <xCExpr>  ;
     */
    public void reduceByProduction865(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xConnectSpec> ::= T_BLANKEQ <xCExpr>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production865UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XconnectspecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xConnectSpec> ::= T_IOSTATEQ <xScalarVariable>  ;
     */
    public void reduceByProduction866(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xConnectSpec> ::= T_IOSTATEQ <xScalarVariable>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production866UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XconnectspecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xConnectSpec> ::= T_POSITIONEQ <xCExpr>  ;
     */
    public void reduceByProduction867(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xConnectSpec> ::= T_POSITIONEQ <xCExpr>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production867UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XconnectspecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xConnectSpec> ::= T_ACTIONEQ <xCExpr>  ;
     */
    public void reduceByProduction868(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xConnectSpec> ::= T_ACTIONEQ <xCExpr>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production868UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XconnectspecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xConnectSpec> ::= T_DELIMEQ <xCExpr>  ;
     */
    public void reduceByProduction869(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xConnectSpec> ::= T_DELIMEQ <xCExpr>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production869UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XconnectspecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xConnectSpec> ::= T_PADEQ <xCExpr>  ;
     */
    public void reduceByProduction870(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xConnectSpec> ::= T_PADEQ <xCExpr>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production870UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XconnectspecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xCloseStmt> ::= T_CLOSE T_LPAREN <xCloseSpecList> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction871(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCloseStmt> ::= T_CLOSE T_LPAREN <xCloseSpecList> T_RPAREN T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production871UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XclosestmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xCloseStmt> ::= <xLblDef> T_CLOSE T_LPAREN <xCloseSpecList> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction872(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCloseStmt> ::= <xLblDef> T_CLOSE T_LPAREN <xCloseSpecList> T_RPAREN T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production872UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XclosestmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xCloseSpecList> ::= <xUnitIdentifier>  ;
     */
    public void reduceByProduction873(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCloseSpecList> ::= <xUnitIdentifier>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production873UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XclosespeclistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xCloseSpecList> ::= <xCloseSpec>  ;
     */
    public void reduceByProduction874(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCloseSpecList> ::= <xCloseSpec>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production874UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XclosespeclistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xCloseSpecList> ::= <xCloseSpecList> T_COMMA <xCloseSpec>  ;
     */
    public void reduceByProduction875(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCloseSpecList> ::= <xCloseSpecList> T_COMMA <xCloseSpec>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production875UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XclosespeclistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xCloseSpec> ::= T_UNITEQ <xUnitIdentifier>  ;
     */
    public void reduceByProduction876(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCloseSpec> ::= T_UNITEQ <xUnitIdentifier>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production876UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XclosespecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xCloseSpec> ::= T_ERREQ <xLblRef>  ;
     */
    public void reduceByProduction877(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCloseSpec> ::= T_ERREQ <xLblRef>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production877UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XclosespecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xCloseSpec> ::= T_STATUSEQ <xCExpr>  ;
     */
    public void reduceByProduction878(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCloseSpec> ::= T_STATUSEQ <xCExpr>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production878UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XclosespecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xCloseSpec> ::= T_IOSTATEQ <xScalarVariable>  ;
     */
    public void reduceByProduction879(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCloseSpec> ::= T_IOSTATEQ <xScalarVariable>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production879UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XclosespecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xReadStmt> ::= T_READ <xRdCtlSpec> <xInputItemList> T_EOS  ;
     */
    public void reduceByProduction880(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xReadStmt> ::= T_READ <xRdCtlSpec> <xInputItemList> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production880UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XreadstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xReadStmt> ::= <xLblDef> T_READ <xRdCtlSpec> <xInputItemList> T_EOS  ;
     */
    public void reduceByProduction881(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xReadStmt> ::= <xLblDef> T_READ <xRdCtlSpec> <xInputItemList> T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production881UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XreadstmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xReadStmt> ::= T_READ <xRdCtlSpec> T_EOS  ;
     */
    public void reduceByProduction882(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xReadStmt> ::= T_READ <xRdCtlSpec> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production882UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XreadstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xReadStmt> ::= <xLblDef> T_READ <xRdCtlSpec> T_EOS  ;
     */
    public void reduceByProduction883(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xReadStmt> ::= <xLblDef> T_READ <xRdCtlSpec> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production883UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XreadstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xReadStmt> ::= T_READ <xRdFmtId> T_COMMA <xInputItemList> T_EOS  ;
     */
    public void reduceByProduction884(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xReadStmt> ::= T_READ <xRdFmtId> T_COMMA <xInputItemList> T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production884UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XreadstmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xReadStmt> ::= <xLblDef> T_READ <xRdFmtId> T_COMMA <xInputItemList> T_EOS  ;
     */
    public void reduceByProduction885(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xReadStmt> ::= <xLblDef> T_READ <xRdFmtId> T_COMMA <xInputItemList> T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production885UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XreadstmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xReadStmt> ::= T_READ <xRdFmtId> T_EOS  ;
     */
    public void reduceByProduction886(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xReadStmt> ::= T_READ <xRdFmtId> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production886UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XreadstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xReadStmt> ::= <xLblDef> T_READ <xRdFmtId> T_EOS  ;
     */
    public void reduceByProduction887(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xReadStmt> ::= <xLblDef> T_READ <xRdFmtId> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production887UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XreadstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xRdCtlSpec> ::= <xRdUnitId>  ;
     */
    public void reduceByProduction888(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xRdCtlSpec> ::= <xRdUnitId>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production888UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XrdctlspecNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xRdCtlSpec> ::= T_LPAREN <xRdIoCtlSpecList> T_RPAREN  ;
     */
    public void reduceByProduction889(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xRdCtlSpec> ::= T_LPAREN <xRdIoCtlSpecList> T_RPAREN  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production889UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XrdctlspecNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xRdUnitId> ::= T_LPAREN <xUFExpr> T_RPAREN  ;
     */
    public void reduceByProduction890(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xRdUnitId> ::= T_LPAREN <xUFExpr> T_RPAREN  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production890UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XrdunitidNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xRdUnitId> ::= T_LPAREN T_ASTERISK T_RPAREN  ;
     */
    public void reduceByProduction891(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xRdUnitId> ::= T_LPAREN T_ASTERISK T_RPAREN  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production891UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XrdunitidNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xRdIoCtlSpecList> ::= <xUnitIdentifier> T_COMMA <xIoControlSpec>  ;
     */
    public void reduceByProduction892(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xRdIoCtlSpecList> ::= <xUnitIdentifier> T_COMMA <xIoControlSpec>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production892UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XrdioctlspeclistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xRdIoCtlSpecList> ::= <xUnitIdentifier> T_COMMA <xFormatIdentifier>  ;
     */
    public void reduceByProduction893(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xRdIoCtlSpecList> ::= <xUnitIdentifier> T_COMMA <xFormatIdentifier>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production893UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XrdioctlspeclistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xRdIoCtlSpecList> ::= <xIoControlSpec>  ;
     */
    public void reduceByProduction894(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xRdIoCtlSpecList> ::= <xIoControlSpec>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production894UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XrdioctlspeclistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xRdIoCtlSpecList> ::= <xRdIoCtlSpecList> T_COMMA <xIoControlSpec>  ;
     */
    public void reduceByProduction895(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xRdIoCtlSpecList> ::= <xRdIoCtlSpecList> T_COMMA <xIoControlSpec>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production895UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XrdioctlspeclistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xRdFmtId> ::= <xLblRef>  ;
     */
    public void reduceByProduction896(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xRdFmtId> ::= <xLblRef>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production896UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XrdfmtidNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xRdFmtId> ::= T_ASTERISK  ;
     */
    public void reduceByProduction897(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xRdFmtId> ::= T_ASTERISK  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production897UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XrdfmtidNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xRdFmtId> ::= <xCOperand>  ;
     */
    public void reduceByProduction898(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xRdFmtId> ::= <xCOperand>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production898UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XrdfmtidNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xRdFmtId> ::= <xCOperand> <xConcatOp> <xCPrimary>  ;
     */
    public void reduceByProduction899(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xRdFmtId> ::= <xCOperand> <xConcatOp> <xCPrimary>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production899UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XrdfmtidNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xRdFmtId> ::= <xRdFmtIdExpr> <xConcatOp> <xCPrimary>  ;
     */
    public void reduceByProduction900(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xRdFmtId> ::= <xRdFmtIdExpr> <xConcatOp> <xCPrimary>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production900UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XrdfmtidNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xRdFmtIdExpr> ::= T_LPAREN <xUFExpr> T_RPAREN  ;
     */
    public void reduceByProduction901(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xRdFmtIdExpr> ::= T_LPAREN <xUFExpr> T_RPAREN  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production901UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XrdfmtidexprNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xWriteStmt> ::= T_WRITE T_LPAREN <xIoControlSpecList> T_RPAREN <xOutputItemList> T_EOS  ;
     */
    public void reduceByProduction902(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xWriteStmt> ::= T_WRITE T_LPAREN <xIoControlSpecList> T_RPAREN <xOutputItemList> T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production902UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XwritestmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xWriteStmt> ::= <xLblDef> T_WRITE T_LPAREN <xIoControlSpecList> T_RPAREN <xOutputItemList> T_EOS  ;
     */
    public void reduceByProduction903(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xWriteStmt> ::= <xLblDef> T_WRITE T_LPAREN <xIoControlSpecList> T_RPAREN <xOutputItemList> T_EOS  ;
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production903UserAction(v1, v2, v3, v4, v5, v6, v7);

        // The production has 7 symbols on its RHS
        parser.reduce(Nonterminal.XwritestmtNonterminal.getInstance(), 7, userValue);
    }

    /**
     * Reduce by <xWriteStmt> ::= T_WRITE T_LPAREN <xIoControlSpecList> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction904(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xWriteStmt> ::= T_WRITE T_LPAREN <xIoControlSpecList> T_RPAREN T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production904UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XwritestmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xWriteStmt> ::= <xLblDef> T_WRITE T_LPAREN <xIoControlSpecList> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction905(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xWriteStmt> ::= <xLblDef> T_WRITE T_LPAREN <xIoControlSpecList> T_RPAREN T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production905UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XwritestmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xPrintStmt> ::= T_PRINT <xFormatIdentifier> T_COMMA <xOutputItemList> T_EOS  ;
     */
    public void reduceByProduction906(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPrintStmt> ::= T_PRINT <xFormatIdentifier> T_COMMA <xOutputItemList> T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production906UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XprintstmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xPrintStmt> ::= <xLblDef> T_PRINT <xFormatIdentifier> T_COMMA <xOutputItemList> T_EOS  ;
     */
    public void reduceByProduction907(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPrintStmt> ::= <xLblDef> T_PRINT <xFormatIdentifier> T_COMMA <xOutputItemList> T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production907UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XprintstmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xPrintStmt> ::= T_PRINT <xFormatIdentifier> T_EOS  ;
     */
    public void reduceByProduction908(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPrintStmt> ::= T_PRINT <xFormatIdentifier> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production908UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XprintstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xPrintStmt> ::= <xLblDef> T_PRINT <xFormatIdentifier> T_EOS  ;
     */
    public void reduceByProduction909(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPrintStmt> ::= <xLblDef> T_PRINT <xFormatIdentifier> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production909UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XprintstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xIoControlSpecList> ::= <xUnitIdentifier>  ;
     */
    public void reduceByProduction910(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xIoControlSpecList> ::= <xUnitIdentifier>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production910UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XiocontrolspeclistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xIoControlSpecList> ::= <xUnitIdentifier> T_COMMA <xFormatIdentifier>  ;
     */
    public void reduceByProduction911(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xIoControlSpecList> ::= <xUnitIdentifier> T_COMMA <xFormatIdentifier>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production911UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XiocontrolspeclistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xIoControlSpecList> ::= <xUnitIdentifier> T_COMMA <xIoControlSpec>  ;
     */
    public void reduceByProduction912(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xIoControlSpecList> ::= <xUnitIdentifier> T_COMMA <xIoControlSpec>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production912UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XiocontrolspeclistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xIoControlSpecList> ::= <xIoControlSpec>  ;
     */
    public void reduceByProduction913(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xIoControlSpecList> ::= <xIoControlSpec>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production913UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XiocontrolspeclistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xIoControlSpecList> ::= <xIoControlSpecList> T_COMMA <xIoControlSpec>  ;
     */
    public void reduceByProduction914(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xIoControlSpecList> ::= <xIoControlSpecList> T_COMMA <xIoControlSpec>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production914UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XiocontrolspeclistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xIoControlSpec> ::= T_FMTEQ <xFormatIdentifier>  ;
     */
    public void reduceByProduction915(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xIoControlSpec> ::= T_FMTEQ <xFormatIdentifier>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production915UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XiocontrolspecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xIoControlSpec> ::= T_UNITEQ <xUnitIdentifier>  ;
     */
    public void reduceByProduction916(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xIoControlSpec> ::= T_UNITEQ <xUnitIdentifier>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production916UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XiocontrolspecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xIoControlSpec> ::= T_RECEQ <xExpr>  ;
     */
    public void reduceByProduction917(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xIoControlSpec> ::= T_RECEQ <xExpr>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production917UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XiocontrolspecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xIoControlSpec> ::= T_ENDEQ <xLblRef>  ;
     */
    public void reduceByProduction918(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xIoControlSpec> ::= T_ENDEQ <xLblRef>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production918UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XiocontrolspecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xIoControlSpec> ::= T_ERREQ <xLblRef>  ;
     */
    public void reduceByProduction919(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xIoControlSpec> ::= T_ERREQ <xLblRef>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production919UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XiocontrolspecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xIoControlSpec> ::= T_IOSTATEQ <xScalarVariable>  ;
     */
    public void reduceByProduction920(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xIoControlSpec> ::= T_IOSTATEQ <xScalarVariable>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production920UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XiocontrolspecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xIoControlSpec> ::= T_NMLEQ <xNamelistGroupName>  ;
     */
    public void reduceByProduction921(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xIoControlSpec> ::= T_NMLEQ <xNamelistGroupName>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production921UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XiocontrolspecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xIoControlSpec> ::= T_ADVANCEEQ <xCExpr>  ;
     */
    public void reduceByProduction922(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xIoControlSpec> ::= T_ADVANCEEQ <xCExpr>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production922UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XiocontrolspecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xIoControlSpec> ::= T_SIZEEQ <xVariable>  ;
     */
    public void reduceByProduction923(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xIoControlSpec> ::= T_SIZEEQ <xVariable>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production923UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XiocontrolspecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xIoControlSpec> ::= T_EOREQ <xLblRef>  ;
     */
    public void reduceByProduction924(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xIoControlSpec> ::= T_EOREQ <xLblRef>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production924UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XiocontrolspecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xFormatIdentifier> ::= <xLblRef>  ;
     */
    public void reduceByProduction925(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFormatIdentifier> ::= <xLblRef>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production925UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XformatidentifierNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xFormatIdentifier> ::= <xCExpr>  ;
     */
    public void reduceByProduction926(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFormatIdentifier> ::= <xCExpr>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production926UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XformatidentifierNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xFormatIdentifier> ::= T_ASTERISK  ;
     */
    public void reduceByProduction927(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFormatIdentifier> ::= T_ASTERISK  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production927UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XformatidentifierNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xInputItemList> ::= <xInputItem>  ;
     */
    public void reduceByProduction928(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInputItemList> ::= <xInputItem>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production928UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XinputitemlistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xInputItemList> ::= <xInputItemList> T_COMMA <xInputItem>  ;
     */
    public void reduceByProduction929(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInputItemList> ::= <xInputItemList> T_COMMA <xInputItem>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production929UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XinputitemlistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xInputItem> ::= <xVariable>  ;
     */
    public void reduceByProduction930(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInputItem> ::= <xVariable>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production930UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XinputitemNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xInputItem> ::= <xInputImpliedDo>  ;
     */
    public void reduceByProduction931(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInputItem> ::= <xInputImpliedDo>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production931UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XinputitemNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xOutputItemList> ::= <xExpr>  ;
     */
    public void reduceByProduction932(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xOutputItemList> ::= <xExpr>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production932UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XoutputitemlistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xOutputItemList> ::= <xOutputItemList1>  ;
     */
    public void reduceByProduction933(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xOutputItemList> ::= <xOutputItemList1>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production933UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XoutputitemlistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xOutputItemList1> ::= <xExpr> T_COMMA <xExpr>  ;
     */
    public void reduceByProduction934(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xOutputItemList1> ::= <xExpr> T_COMMA <xExpr>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production934UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.Xoutputitemlist1Nonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xOutputItemList1> ::= <xExpr> T_COMMA <xOutputImpliedDo>  ;
     */
    public void reduceByProduction935(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xOutputItemList1> ::= <xExpr> T_COMMA <xOutputImpliedDo>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production935UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.Xoutputitemlist1Nonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xOutputItemList1> ::= <xOutputImpliedDo>  ;
     */
    public void reduceByProduction936(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xOutputItemList1> ::= <xOutputImpliedDo>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production936UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xoutputitemlist1Nonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xOutputItemList1> ::= <xOutputItemList1> T_COMMA <xExpr>  ;
     */
    public void reduceByProduction937(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xOutputItemList1> ::= <xOutputItemList1> T_COMMA <xExpr>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production937UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.Xoutputitemlist1Nonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xOutputItemList1> ::= <xOutputItemList1> T_COMMA <xOutputImpliedDo>  ;
     */
    public void reduceByProduction938(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xOutputItemList1> ::= <xOutputItemList1> T_COMMA <xOutputImpliedDo>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production938UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.Xoutputitemlist1Nonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xInputImpliedDo> ::= T_LPAREN <xInputItemList> T_COMMA <T_xImpliedDoVariable> T_EQUALS <xExpr> T_COMMA <xExpr> T_RPAREN  ;
     */
    public void reduceByProduction939(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInputImpliedDo> ::= T_LPAREN <xInputItemList> T_COMMA <T_xImpliedDoVariable> T_EQUALS <xExpr> T_COMMA <xExpr> T_RPAREN  ;
        Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v8 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production939UserAction(v1, v2, v3, v4, v5, v6, v7, v8, v9);

        // The production has 9 symbols on its RHS
        parser.reduce(Nonterminal.XinputimplieddoNonterminal.getInstance(), 9, userValue);
    }

    /**
     * Reduce by <xInputImpliedDo> ::= T_LPAREN <xInputItemList> T_COMMA <T_xImpliedDoVariable> T_EQUALS <xExpr> T_COMMA <xExpr> T_COMMA <xExpr> T_RPAREN  ;
     */
    public void reduceByProduction940(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInputImpliedDo> ::= T_LPAREN <xInputItemList> T_COMMA <T_xImpliedDoVariable> T_EQUALS <xExpr> T_COMMA <xExpr> T_COMMA <xExpr> T_RPAREN  ;
        Token v11 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v10 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v8 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production940UserAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);

        // The production has 11 symbols on its RHS
        parser.reduce(Nonterminal.XinputimplieddoNonterminal.getInstance(), 11, userValue);
    }

    /**
     * Reduce by <xOutputImpliedDo> ::= T_LPAREN <xExpr> T_COMMA <T_xImpliedDoVariable> T_EQUALS <xExpr> T_COMMA <xExpr> T_RPAREN  ;
     */
    public void reduceByProduction941(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xOutputImpliedDo> ::= T_LPAREN <xExpr> T_COMMA <T_xImpliedDoVariable> T_EQUALS <xExpr> T_COMMA <xExpr> T_RPAREN  ;
        Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v8 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production941UserAction(v1, v2, v3, v4, v5, v6, v7, v8, v9);

        // The production has 9 symbols on its RHS
        parser.reduce(Nonterminal.XoutputimplieddoNonterminal.getInstance(), 9, userValue);
    }

    /**
     * Reduce by <xOutputImpliedDo> ::= T_LPAREN <xExpr> T_COMMA <T_xImpliedDoVariable> T_EQUALS <xExpr> T_COMMA <xExpr> T_COMMA <xExpr> T_RPAREN  ;
     */
    public void reduceByProduction942(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xOutputImpliedDo> ::= T_LPAREN <xExpr> T_COMMA <T_xImpliedDoVariable> T_EQUALS <xExpr> T_COMMA <xExpr> T_COMMA <xExpr> T_RPAREN  ;
        Token v11 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v10 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v8 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production942UserAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);

        // The production has 11 symbols on its RHS
        parser.reduce(Nonterminal.XoutputimplieddoNonterminal.getInstance(), 11, userValue);
    }

    /**
     * Reduce by <xOutputImpliedDo> ::= T_LPAREN <xOutputItemList1> T_COMMA <T_xImpliedDoVariable> T_EQUALS <xExpr> T_COMMA <xExpr> T_RPAREN  ;
     */
    public void reduceByProduction943(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xOutputImpliedDo> ::= T_LPAREN <xOutputItemList1> T_COMMA <T_xImpliedDoVariable> T_EQUALS <xExpr> T_COMMA <xExpr> T_RPAREN  ;
        Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v8 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production943UserAction(v1, v2, v3, v4, v5, v6, v7, v8, v9);

        // The production has 9 symbols on its RHS
        parser.reduce(Nonterminal.XoutputimplieddoNonterminal.getInstance(), 9, userValue);
    }

    /**
     * Reduce by <xOutputImpliedDo> ::= T_LPAREN <xOutputItemList1> T_COMMA <T_xImpliedDoVariable> T_EQUALS <xExpr> T_COMMA <xExpr> T_COMMA <xExpr> T_RPAREN  ;
     */
    public void reduceByProduction944(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xOutputImpliedDo> ::= T_LPAREN <xOutputItemList1> T_COMMA <T_xImpliedDoVariable> T_EQUALS <xExpr> T_COMMA <xExpr> T_COMMA <xExpr> T_RPAREN  ;
        Token v11 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v10 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v8 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production944UserAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);

        // The production has 11 symbols on its RHS
        parser.reduce(Nonterminal.XoutputimplieddoNonterminal.getInstance(), 11, userValue);
    }

    /**
     * Reduce by <xBackspaceStmt> ::= T_BACKSPACE <xUnitIdentifier> T_EOS  ;
     */
    public void reduceByProduction945(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xBackspaceStmt> ::= T_BACKSPACE <xUnitIdentifier> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production945UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XbackspacestmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xBackspaceStmt> ::= <xLblDef> T_BACKSPACE <xUnitIdentifier> T_EOS  ;
     */
    public void reduceByProduction946(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xBackspaceStmt> ::= <xLblDef> T_BACKSPACE <xUnitIdentifier> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production946UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XbackspacestmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xBackspaceStmt> ::= T_BACKSPACE T_LPAREN <xPositionSpecList> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction947(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xBackspaceStmt> ::= T_BACKSPACE T_LPAREN <xPositionSpecList> T_RPAREN T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production947UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XbackspacestmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xBackspaceStmt> ::= <xLblDef> T_BACKSPACE T_LPAREN <xPositionSpecList> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction948(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xBackspaceStmt> ::= <xLblDef> T_BACKSPACE T_LPAREN <xPositionSpecList> T_RPAREN T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production948UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XbackspacestmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xEndfileStmt> ::= T_ENDFILE <xUnitIdentifier> T_EOS  ;
     */
    public void reduceByProduction949(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndfileStmt> ::= T_ENDFILE <xUnitIdentifier> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production949UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XendfilestmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndfileStmt> ::= <xLblDef> T_ENDFILE <xUnitIdentifier> T_EOS  ;
     */
    public void reduceByProduction950(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndfileStmt> ::= <xLblDef> T_ENDFILE <xUnitIdentifier> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production950UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XendfilestmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndfileStmt> ::= T_ENDFILE T_LPAREN <xPositionSpecList> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction951(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndfileStmt> ::= T_ENDFILE T_LPAREN <xPositionSpecList> T_RPAREN T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production951UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XendfilestmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xEndfileStmt> ::= <xLblDef> T_ENDFILE T_LPAREN <xPositionSpecList> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction952(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndfileStmt> ::= <xLblDef> T_ENDFILE T_LPAREN <xPositionSpecList> T_RPAREN T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production952UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XendfilestmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xEndfileStmt> ::= T_END T_FILE <xUnitIdentifier> T_EOS  ;
     */
    public void reduceByProduction953(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndfileStmt> ::= T_END T_FILE <xUnitIdentifier> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production953UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XendfilestmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndfileStmt> ::= <xLblDef> T_END T_FILE <xUnitIdentifier> T_EOS  ;
     */
    public void reduceByProduction954(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndfileStmt> ::= <xLblDef> T_END T_FILE <xUnitIdentifier> T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production954UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XendfilestmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xEndfileStmt> ::= T_END T_FILE T_LPAREN <xPositionSpecList> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction955(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndfileStmt> ::= T_END T_FILE T_LPAREN <xPositionSpecList> T_RPAREN T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production955UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XendfilestmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xEndfileStmt> ::= <xLblDef> T_END T_FILE T_LPAREN <xPositionSpecList> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction956(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndfileStmt> ::= <xLblDef> T_END T_FILE T_LPAREN <xPositionSpecList> T_RPAREN T_EOS  ;
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production956UserAction(v1, v2, v3, v4, v5, v6, v7);

        // The production has 7 symbols on its RHS
        parser.reduce(Nonterminal.XendfilestmtNonterminal.getInstance(), 7, userValue);
    }

    /**
     * Reduce by <xRewindStmt> ::= T_REWIND <xUnitIdentifier> T_EOS  ;
     */
    public void reduceByProduction957(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xRewindStmt> ::= T_REWIND <xUnitIdentifier> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production957UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XrewindstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xRewindStmt> ::= <xLblDef> T_REWIND <xUnitIdentifier> T_EOS  ;
     */
    public void reduceByProduction958(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xRewindStmt> ::= <xLblDef> T_REWIND <xUnitIdentifier> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production958UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XrewindstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xRewindStmt> ::= T_REWIND T_LPAREN <xPositionSpecList> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction959(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xRewindStmt> ::= T_REWIND T_LPAREN <xPositionSpecList> T_RPAREN T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production959UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XrewindstmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xRewindStmt> ::= <xLblDef> T_REWIND T_LPAREN <xPositionSpecList> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction960(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xRewindStmt> ::= <xLblDef> T_REWIND T_LPAREN <xPositionSpecList> T_RPAREN T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production960UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XrewindstmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xPositionSpecList> ::= <xUnitIdentifier> T_COMMA <xPositionSpec>  ;
     */
    public void reduceByProduction961(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPositionSpecList> ::= <xUnitIdentifier> T_COMMA <xPositionSpec>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production961UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XpositionspeclistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xPositionSpecList> ::= <xPositionSpec>  ;
     */
    public void reduceByProduction962(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPositionSpecList> ::= <xPositionSpec>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production962UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XpositionspeclistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xPositionSpecList> ::= <xPositionSpecList> T_COMMA <xPositionSpec>  ;
     */
    public void reduceByProduction963(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPositionSpecList> ::= <xPositionSpecList> T_COMMA <xPositionSpec>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production963UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XpositionspeclistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xPositionSpec> ::= T_UNITEQ <xUnitIdentifier>  ;
     */
    public void reduceByProduction964(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPositionSpec> ::= T_UNITEQ <xUnitIdentifier>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production964UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XpositionspecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xPositionSpec> ::= T_ERREQ <xLblRef>  ;
     */
    public void reduceByProduction965(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPositionSpec> ::= T_ERREQ <xLblRef>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production965UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XpositionspecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xPositionSpec> ::= T_IOSTATEQ <xScalarVariable>  ;
     */
    public void reduceByProduction966(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPositionSpec> ::= T_IOSTATEQ <xScalarVariable>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production966UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XpositionspecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xInquireStmt> ::= T_INQUIRE T_LPAREN <xInquireSpecList> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction967(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInquireStmt> ::= T_INQUIRE T_LPAREN <xInquireSpecList> T_RPAREN T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production967UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XinquirestmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xInquireStmt> ::= <xLblDef> T_INQUIRE T_LPAREN <xInquireSpecList> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction968(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInquireStmt> ::= <xLblDef> T_INQUIRE T_LPAREN <xInquireSpecList> T_RPAREN T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production968UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XinquirestmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xInquireStmt> ::= T_INQUIRE T_LPAREN T_IOLENGTHEQ <xScalarVariable> T_RPAREN <xOutputItemList> T_EOS  ;
     */
    public void reduceByProduction969(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInquireStmt> ::= T_INQUIRE T_LPAREN T_IOLENGTHEQ <xScalarVariable> T_RPAREN <xOutputItemList> T_EOS  ;
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production969UserAction(v1, v2, v3, v4, v5, v6, v7);

        // The production has 7 symbols on its RHS
        parser.reduce(Nonterminal.XinquirestmtNonterminal.getInstance(), 7, userValue);
    }

    /**
     * Reduce by <xInquireStmt> ::= <xLblDef> T_INQUIRE T_LPAREN T_IOLENGTHEQ <xScalarVariable> T_RPAREN <xOutputItemList> T_EOS  ;
     */
    public void reduceByProduction970(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInquireStmt> ::= <xLblDef> T_INQUIRE T_LPAREN T_IOLENGTHEQ <xScalarVariable> T_RPAREN <xOutputItemList> T_EOS  ;
        Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v7 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production970UserAction(v1, v2, v3, v4, v5, v6, v7, v8);

        // The production has 8 symbols on its RHS
        parser.reduce(Nonterminal.XinquirestmtNonterminal.getInstance(), 8, userValue);
    }

    /**
     * Reduce by <xInquireSpecList> ::= <xUnitIdentifier>  ;
     */
    public void reduceByProduction971(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInquireSpecList> ::= <xUnitIdentifier>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production971UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XinquirespeclistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xInquireSpecList> ::= <xInquireSpec>  ;
     */
    public void reduceByProduction972(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInquireSpecList> ::= <xInquireSpec>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production972UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XinquirespeclistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xInquireSpecList> ::= <xInquireSpecList> T_COMMA <xInquireSpec>  ;
     */
    public void reduceByProduction973(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInquireSpecList> ::= <xInquireSpecList> T_COMMA <xInquireSpec>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production973UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XinquirespeclistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xInquireSpec> ::= T_UNITEQ <xUnitIdentifier>  ;
     */
    public void reduceByProduction974(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInquireSpec> ::= T_UNITEQ <xUnitIdentifier>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production974UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XinquirespecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xInquireSpec> ::= T_FILEEQ <xCExpr>  ;
     */
    public void reduceByProduction975(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInquireSpec> ::= T_FILEEQ <xCExpr>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production975UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XinquirespecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xInquireSpec> ::= T_ERREQ <xLblRef>  ;
     */
    public void reduceByProduction976(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInquireSpec> ::= T_ERREQ <xLblRef>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production976UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XinquirespecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xInquireSpec> ::= T_IOSTATEQ <xScalarVariable>  ;
     */
    public void reduceByProduction977(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInquireSpec> ::= T_IOSTATEQ <xScalarVariable>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production977UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XinquirespecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xInquireSpec> ::= T_EXISTEQ <xScalarVariable>  ;
     */
    public void reduceByProduction978(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInquireSpec> ::= T_EXISTEQ <xScalarVariable>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production978UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XinquirespecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xInquireSpec> ::= T_OPENEDEQ <xScalarVariable>  ;
     */
    public void reduceByProduction979(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInquireSpec> ::= T_OPENEDEQ <xScalarVariable>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production979UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XinquirespecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xInquireSpec> ::= T_NUMBEREQ <xScalarVariable>  ;
     */
    public void reduceByProduction980(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInquireSpec> ::= T_NUMBEREQ <xScalarVariable>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production980UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XinquirespecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xInquireSpec> ::= T_NAMEDEQ <xScalarVariable>  ;
     */
    public void reduceByProduction981(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInquireSpec> ::= T_NAMEDEQ <xScalarVariable>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production981UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XinquirespecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xInquireSpec> ::= T_NAMEEQ <xScalarVariable>  ;
     */
    public void reduceByProduction982(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInquireSpec> ::= T_NAMEEQ <xScalarVariable>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production982UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XinquirespecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xInquireSpec> ::= T_ACCESSEQ <xScalarVariable>  ;
     */
    public void reduceByProduction983(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInquireSpec> ::= T_ACCESSEQ <xScalarVariable>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production983UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XinquirespecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xInquireSpec> ::= T_SEQUENTIALEQ <xScalarVariable>  ;
     */
    public void reduceByProduction984(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInquireSpec> ::= T_SEQUENTIALEQ <xScalarVariable>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production984UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XinquirespecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xInquireSpec> ::= T_DIRECTEQ <xScalarVariable>  ;
     */
    public void reduceByProduction985(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInquireSpec> ::= T_DIRECTEQ <xScalarVariable>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production985UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XinquirespecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xInquireSpec> ::= T_FORMEQ <xScalarVariable>  ;
     */
    public void reduceByProduction986(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInquireSpec> ::= T_FORMEQ <xScalarVariable>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production986UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XinquirespecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xInquireSpec> ::= T_FORMATTEDEQ <xScalarVariable>  ;
     */
    public void reduceByProduction987(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInquireSpec> ::= T_FORMATTEDEQ <xScalarVariable>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production987UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XinquirespecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xInquireSpec> ::= T_UNFORMATTEDEQ <xScalarVariable>  ;
     */
    public void reduceByProduction988(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInquireSpec> ::= T_UNFORMATTEDEQ <xScalarVariable>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production988UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XinquirespecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xInquireSpec> ::= T_RECLEQ <xExpr>  ;
     */
    public void reduceByProduction989(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInquireSpec> ::= T_RECLEQ <xExpr>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production989UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XinquirespecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xInquireSpec> ::= T_NEXTRECEQ <xScalarVariable>  ;
     */
    public void reduceByProduction990(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInquireSpec> ::= T_NEXTRECEQ <xScalarVariable>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production990UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XinquirespecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xInquireSpec> ::= T_BLANKEQ <xScalarVariable>  ;
     */
    public void reduceByProduction991(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInquireSpec> ::= T_BLANKEQ <xScalarVariable>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production991UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XinquirespecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xInquireSpec> ::= T_POSITIONEQ <xScalarVariable>  ;
     */
    public void reduceByProduction992(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInquireSpec> ::= T_POSITIONEQ <xScalarVariable>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production992UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XinquirespecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xInquireSpec> ::= T_ACTIONEQ <xScalarVariable>  ;
     */
    public void reduceByProduction993(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInquireSpec> ::= T_ACTIONEQ <xScalarVariable>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production993UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XinquirespecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xInquireSpec> ::= T_READEQ <xScalarVariable>  ;
     */
    public void reduceByProduction994(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInquireSpec> ::= T_READEQ <xScalarVariable>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production994UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XinquirespecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xInquireSpec> ::= T_WRITEEQ <xScalarVariable>  ;
     */
    public void reduceByProduction995(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInquireSpec> ::= T_WRITEEQ <xScalarVariable>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production995UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XinquirespecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xInquireSpec> ::= T_READWRITEEQ <xScalarVariable>  ;
     */
    public void reduceByProduction996(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInquireSpec> ::= T_READWRITEEQ <xScalarVariable>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production996UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XinquirespecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xInquireSpec> ::= T_DELIMEQ <xScalarVariable>  ;
     */
    public void reduceByProduction997(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInquireSpec> ::= T_DELIMEQ <xScalarVariable>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production997UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XinquirespecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xInquireSpec> ::= T_PADEQ <xScalarVariable>  ;
     */
    public void reduceByProduction998(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInquireSpec> ::= T_PADEQ <xScalarVariable>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production998UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XinquirespecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xFormatStmt> ::= T_FORMAT T_LPAREN T_RPAREN T_EOS  ;
     */
    public void reduceByProduction999(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFormatStmt> ::= T_FORMAT T_LPAREN T_RPAREN T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production999UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XformatstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xFormatStmt> ::= T_FORMAT T_LPAREN <xFormatStmt@67> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction1000(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFormatStmt> ::= T_FORMAT T_LPAREN <xFormatStmt@67> T_RPAREN T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1000UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XformatstmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xFormatStmt> ::= <xLblDef> T_FORMAT T_LPAREN T_RPAREN T_EOS  ;
     */
    public void reduceByProduction1001(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFormatStmt> ::= <xLblDef> T_FORMAT T_LPAREN T_RPAREN T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1001UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XformatstmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xFormatStmt> ::= <xLblDef> T_FORMAT T_LPAREN <xFormatStmt@67> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction1002(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFormatStmt> ::= <xLblDef> T_FORMAT T_LPAREN <xFormatStmt@67> T_RPAREN T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1002UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XformatstmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xFmtSpec> ::= <xFormatedit>  ;
     */
    public void reduceByProduction1003(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFmtSpec> ::= <xFormatedit>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1003UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XfmtspecNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xFmtSpec> ::= <xFormatsep>  ;
     */
    public void reduceByProduction1004(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFmtSpec> ::= <xFormatsep>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1004UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XfmtspecNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xFmtSpec> ::= <xFormatsep> <xFormatedit>  ;
     */
    public void reduceByProduction1005(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFmtSpec> ::= <xFormatsep> <xFormatedit>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1005UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XfmtspecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xFmtSpec> ::= <xFmtSpec> <xFormatsep>  ;
     */
    public void reduceByProduction1006(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFmtSpec> ::= <xFmtSpec> <xFormatsep>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1006UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XfmtspecNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xFmtSpec> ::= <xFmtSpec> <xFormatsep> <xFormatedit>  ;
     */
    public void reduceByProduction1007(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFmtSpec> ::= <xFmtSpec> <xFormatsep> <xFormatedit>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1007UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XfmtspecNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xFmtSpec> ::= <xFmtSpec> T_COMMA <xFormatedit>  ;
     */
    public void reduceByProduction1008(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFmtSpec> ::= <xFmtSpec> T_COMMA <xFormatedit>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1008UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XfmtspecNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xFmtSpec> ::= <xFmtSpec> T_COMMA <xFormatsep>  ;
     */
    public void reduceByProduction1009(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFmtSpec> ::= <xFmtSpec> T_COMMA <xFormatsep>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1009UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XfmtspecNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xFmtSpec> ::= <xFmtSpec> T_COMMA <xFormatsep> <xFormatedit>  ;
     */
    public void reduceByProduction1010(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFmtSpec> ::= <xFmtSpec> T_COMMA <xFormatsep> <xFormatedit>  ;
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1010UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XfmtspecNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xFormatedit> ::= <xEditElement>  ;
     */
    public void reduceByProduction1011(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFormatedit> ::= <xEditElement>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1011UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XformateditNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xFormatedit> ::= T_ICON <xEditElement>  ;
     */
    public void reduceByProduction1012(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFormatedit> ::= T_ICON <xEditElement>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1012UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XformateditNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xFormatedit> ::= T_XCON  ;
     */
    public void reduceByProduction1013(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFormatedit> ::= T_XCON  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1013UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XformateditNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xFormatedit> ::= T_PCON  ;
     */
    public void reduceByProduction1014(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFormatedit> ::= T_PCON  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1014UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XformateditNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xFormatedit> ::= T_PCON <xEditElement>  ;
     */
    public void reduceByProduction1015(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFormatedit> ::= T_PCON <xEditElement>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1015UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XformateditNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xFormatedit> ::= T_PCON T_ICON <xEditElement>  ;
     */
    public void reduceByProduction1016(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFormatedit> ::= T_PCON T_ICON <xEditElement>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1016UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XformateditNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEditElement> ::= T_FCON  ;
     */
    public void reduceByProduction1017(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEditElement> ::= T_FCON  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1017UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XeditelementNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xEditElement> ::= T_SCON  ;
     */
    public void reduceByProduction1018(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEditElement> ::= T_SCON  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1018UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XeditelementNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xEditElement> ::= T_IDENT  ;
     */
    public void reduceByProduction1019(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEditElement> ::= T_IDENT  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1019UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XeditelementNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xEditElement> ::= T_LPAREN <xFmtSpec> T_RPAREN  ;
     */
    public void reduceByProduction1020(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEditElement> ::= T_LPAREN <xFmtSpec> T_RPAREN  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1020UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XeditelementNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEditElement> ::= T_HCON  ;
     */
    public void reduceByProduction1021(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEditElement> ::= T_HCON  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1021UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XeditelementNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xFormatsep> ::= T_SLASH  ;
     */
    public void reduceByProduction1022(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFormatsep> ::= T_SLASH  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1022UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XformatsepNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xFormatsep> ::= T_COLON  ;
     */
    public void reduceByProduction1023(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFormatsep> ::= T_COLON  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1023UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XformatsepNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xProgramStmt> ::= T_PROGRAM <xProgramName> T_EOS  ;
     */
    public void reduceByProduction1024(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xProgramStmt> ::= T_PROGRAM <xProgramName> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Token userValue = userActions.production1024UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XprogramstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xProgramStmt> ::= <xLblDef> T_PROGRAM <xProgramName> T_EOS  ;
     */
    public void reduceByProduction1025(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xProgramStmt> ::= <xLblDef> T_PROGRAM <xProgramName> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Token userValue = userActions.production1025UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XprogramstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndProgramStmt> ::= T_END T_EOS  ;
     */
    public void reduceByProduction1026(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndProgramStmt> ::= T_END T_EOS  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1026UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XendprogramstmtNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xEndProgramStmt> ::= <xLblDef> T_END T_EOS  ;
     */
    public void reduceByProduction1027(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndProgramStmt> ::= <xLblDef> T_END T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1027UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XendprogramstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndProgramStmt> ::= T_ENDPROGRAM T_EOS  ;
     */
    public void reduceByProduction1028(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndProgramStmt> ::= T_ENDPROGRAM T_EOS  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1028UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XendprogramstmtNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xEndProgramStmt> ::= T_ENDPROGRAM <xEndProgramStmt@68> T_EOS  ;
     */
    public void reduceByProduction1029(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndProgramStmt> ::= T_ENDPROGRAM <xEndProgramStmt@68> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1029UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XendprogramstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndProgramStmt> ::= <xLblDef> T_ENDPROGRAM T_EOS  ;
     */
    public void reduceByProduction1030(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndProgramStmt> ::= <xLblDef> T_ENDPROGRAM T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1030UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XendprogramstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndProgramStmt> ::= <xLblDef> T_ENDPROGRAM <xEndProgramStmt@68> T_EOS  ;
     */
    public void reduceByProduction1031(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndProgramStmt> ::= <xLblDef> T_ENDPROGRAM <xEndProgramStmt@68> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1031UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XendprogramstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndProgramStmt> ::= T_END T_PROGRAM T_EOS  ;
     */
    public void reduceByProduction1032(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndProgramStmt> ::= T_END T_PROGRAM T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1032UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XendprogramstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndProgramStmt> ::= T_END T_PROGRAM <xEndProgramStmt@69> T_EOS  ;
     */
    public void reduceByProduction1033(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndProgramStmt> ::= T_END T_PROGRAM <xEndProgramStmt@69> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1033UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XendprogramstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndProgramStmt> ::= <xLblDef> T_END T_PROGRAM T_EOS  ;
     */
    public void reduceByProduction1034(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndProgramStmt> ::= <xLblDef> T_END T_PROGRAM T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1034UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XendprogramstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndProgramStmt> ::= <xLblDef> T_END T_PROGRAM <xEndProgramStmt@69> T_EOS  ;
     */
    public void reduceByProduction1035(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndProgramStmt> ::= <xLblDef> T_END T_PROGRAM <xEndProgramStmt@69> T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1035UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XendprogramstmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xModuleStmt> ::= T_MODULE <xModuleName> T_EOS  ;
     */
    public void reduceByProduction1036(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xModuleStmt> ::= T_MODULE <xModuleName> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Token userValue = userActions.production1036UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XmodulestmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xModuleStmt> ::= <xLblDef> T_MODULE <xModuleName> T_EOS  ;
     */
    public void reduceByProduction1037(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xModuleStmt> ::= <xLblDef> T_MODULE <xModuleName> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Token userValue = userActions.production1037UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XmodulestmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndModuleStmt> ::= T_END T_EOS  ;
     */
    public void reduceByProduction1038(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndModuleStmt> ::= T_END T_EOS  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1038UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XendmodulestmtNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xEndModuleStmt> ::= <xLblDef> T_END T_EOS  ;
     */
    public void reduceByProduction1039(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndModuleStmt> ::= <xLblDef> T_END T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1039UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XendmodulestmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndModuleStmt> ::= T_ENDMODULE T_EOS  ;
     */
    public void reduceByProduction1040(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndModuleStmt> ::= T_ENDMODULE T_EOS  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1040UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XendmodulestmtNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xEndModuleStmt> ::= T_ENDMODULE <xEndModuleStmt@70> T_EOS  ;
     */
    public void reduceByProduction1041(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndModuleStmt> ::= T_ENDMODULE <xEndModuleStmt@70> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1041UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XendmodulestmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndModuleStmt> ::= <xLblDef> T_ENDMODULE T_EOS  ;
     */
    public void reduceByProduction1042(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndModuleStmt> ::= <xLblDef> T_ENDMODULE T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1042UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XendmodulestmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndModuleStmt> ::= <xLblDef> T_ENDMODULE <xEndModuleStmt@70> T_EOS  ;
     */
    public void reduceByProduction1043(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndModuleStmt> ::= <xLblDef> T_ENDMODULE <xEndModuleStmt@70> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1043UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XendmodulestmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndModuleStmt> ::= T_END T_MODULE T_EOS  ;
     */
    public void reduceByProduction1044(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndModuleStmt> ::= T_END T_MODULE T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1044UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XendmodulestmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndModuleStmt> ::= T_END T_MODULE <xEndModuleStmt@71> T_EOS  ;
     */
    public void reduceByProduction1045(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndModuleStmt> ::= T_END T_MODULE <xEndModuleStmt@71> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1045UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XendmodulestmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndModuleStmt> ::= <xLblDef> T_END T_MODULE T_EOS  ;
     */
    public void reduceByProduction1046(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndModuleStmt> ::= <xLblDef> T_END T_MODULE T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1046UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XendmodulestmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndModuleStmt> ::= <xLblDef> T_END T_MODULE <xEndModuleStmt@71> T_EOS  ;
     */
    public void reduceByProduction1047(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndModuleStmt> ::= <xLblDef> T_END T_MODULE <xEndModuleStmt@71> T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1047UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XendmodulestmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xUseStmt> ::= T_USE <xName> T_EOS  ;
     */
    public void reduceByProduction1048(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUseStmt> ::= T_USE <xName> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1048UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XusestmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xUseStmt> ::= <xLblDef> T_USE <xName> T_EOS  ;
     */
    public void reduceByProduction1049(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUseStmt> ::= <xLblDef> T_USE <xName> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1049UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XusestmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xUseStmt> ::= T_USE <xName> T_COMMA <xRenameList> T_EOS  ;
     */
    public void reduceByProduction1050(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUseStmt> ::= T_USE <xName> T_COMMA <xRenameList> T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1050UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XusestmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xUseStmt> ::= <xLblDef> T_USE <xName> T_COMMA <xRenameList> T_EOS  ;
     */
    public void reduceByProduction1051(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUseStmt> ::= <xLblDef> T_USE <xName> T_COMMA <xRenameList> T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1051UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XusestmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xUseStmt> ::= T_USE <xName> T_COMMA T_ONLY T_COLON T_EOS  ;
     */
    public void reduceByProduction1052(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUseStmt> ::= T_USE <xName> T_COMMA T_ONLY T_COLON T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1052UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XusestmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xUseStmt> ::= T_USE <xName> T_COMMA T_ONLY T_COLON <xUseStmt@72> T_EOS  ;
     */
    public void reduceByProduction1053(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUseStmt> ::= T_USE <xName> T_COMMA T_ONLY T_COLON <xUseStmt@72> T_EOS  ;
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v6 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1053UserAction(v1, v2, v3, v4, v5, v6, v7);

        // The production has 7 symbols on its RHS
        parser.reduce(Nonterminal.XusestmtNonterminal.getInstance(), 7, userValue);
    }

    /**
     * Reduce by <xUseStmt> ::= <xLblDef> T_USE <xName> T_COMMA T_ONLY T_COLON T_EOS  ;
     */
    public void reduceByProduction1054(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUseStmt> ::= <xLblDef> T_USE <xName> T_COMMA T_ONLY T_COLON T_EOS  ;
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1054UserAction(v1, v2, v3, v4, v5, v6, v7);

        // The production has 7 symbols on its RHS
        parser.reduce(Nonterminal.XusestmtNonterminal.getInstance(), 7, userValue);
    }

    /**
     * Reduce by <xUseStmt> ::= <xLblDef> T_USE <xName> T_COMMA T_ONLY T_COLON <xUseStmt@72> T_EOS  ;
     */
    public void reduceByProduction1055(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUseStmt> ::= <xLblDef> T_USE <xName> T_COMMA T_ONLY T_COLON <xUseStmt@72> T_EOS  ;
        Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v7 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1055UserAction(v1, v2, v3, v4, v5, v6, v7, v8);

        // The production has 8 symbols on its RHS
        parser.reduce(Nonterminal.XusestmtNonterminal.getInstance(), 8, userValue);
    }

    /**
     * Reduce by <xRenameList> ::= <xRename>  ;
     */
    public void reduceByProduction1056(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xRenameList> ::= <xRename>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1056UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XrenamelistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xRenameList> ::= <xRenameList> T_COMMA <xRename>  ;
     */
    public void reduceByProduction1057(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xRenameList> ::= <xRenameList> T_COMMA <xRename>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1057UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XrenamelistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xOnlyList> ::= <xOnly>  ;
     */
    public void reduceByProduction1058(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xOnlyList> ::= <xOnly>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1058UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XonlylistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xOnlyList> ::= <xOnlyList> T_COMMA <xOnly>  ;
     */
    public void reduceByProduction1059(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xOnlyList> ::= <xOnlyList> T_COMMA <xOnly>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1059UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XonlylistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xRename> ::= T_IDENT T_EQGREATERTHAN <xUseName>  ;
     */
    public void reduceByProduction1060(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xRename> ::= T_IDENT T_EQGREATERTHAN <xUseName>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1060UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XrenameNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xOnly> ::= <xGenericSpec>  ;
     */
    public void reduceByProduction1061(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xOnly> ::= <xGenericSpec>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1061UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XonlyNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xOnly> ::= T_IDENT T_EQGREATERTHAN <xUseName>  ;
     */
    public void reduceByProduction1062(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xOnly> ::= T_IDENT T_EQGREATERTHAN <xUseName>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1062UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XonlyNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xOnly> ::= <xUseName>  ;
     */
    public void reduceByProduction1063(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xOnly> ::= <xUseName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1063UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XonlyNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xBlockDataStmt> ::= T_BLOCKDATA <xBlockDataName> T_EOS  ;
     */
    public void reduceByProduction1064(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xBlockDataStmt> ::= T_BLOCKDATA <xBlockDataName> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Token userValue = userActions.production1064UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XblockdatastmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xBlockDataStmt> ::= <xLblDef> T_BLOCKDATA <xBlockDataName> T_EOS  ;
     */
    public void reduceByProduction1065(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xBlockDataStmt> ::= <xLblDef> T_BLOCKDATA <xBlockDataName> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Token userValue = userActions.production1065UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XblockdatastmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xBlockDataStmt> ::= T_BLOCKDATA T_EOS  ;
     */
    public void reduceByProduction1066(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xBlockDataStmt> ::= T_BLOCKDATA T_EOS  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Token userValue = userActions.production1066UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XblockdatastmtNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xBlockDataStmt> ::= <xLblDef> T_BLOCKDATA T_EOS  ;
     */
    public void reduceByProduction1067(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xBlockDataStmt> ::= <xLblDef> T_BLOCKDATA T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Token userValue = userActions.production1067UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XblockdatastmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndBlockDataStmt> ::= T_END T_EOS  ;
     */
    public void reduceByProduction1068(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndBlockDataStmt> ::= T_END T_EOS  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1068UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XendblockdatastmtNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xEndBlockDataStmt> ::= <xLblDef> T_END T_EOS  ;
     */
    public void reduceByProduction1069(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndBlockDataStmt> ::= <xLblDef> T_END T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1069UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XendblockdatastmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndBlockDataStmt> ::= T_ENDBLOCKDATA T_EOS  ;
     */
    public void reduceByProduction1070(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndBlockDataStmt> ::= T_ENDBLOCKDATA T_EOS  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1070UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XendblockdatastmtNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xEndBlockDataStmt> ::= T_ENDBLOCKDATA <xEndBlockDataStmt@73> T_EOS  ;
     */
    public void reduceByProduction1071(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndBlockDataStmt> ::= T_ENDBLOCKDATA <xEndBlockDataStmt@73> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1071UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XendblockdatastmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndBlockDataStmt> ::= <xLblDef> T_ENDBLOCKDATA T_EOS  ;
     */
    public void reduceByProduction1072(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndBlockDataStmt> ::= <xLblDef> T_ENDBLOCKDATA T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1072UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XendblockdatastmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndBlockDataStmt> ::= <xLblDef> T_ENDBLOCKDATA <xEndBlockDataStmt@73> T_EOS  ;
     */
    public void reduceByProduction1073(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndBlockDataStmt> ::= <xLblDef> T_ENDBLOCKDATA <xEndBlockDataStmt@73> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1073UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XendblockdatastmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndBlockDataStmt> ::= T_END T_BLOCKDATA T_EOS  ;
     */
    public void reduceByProduction1074(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndBlockDataStmt> ::= T_END T_BLOCKDATA T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1074UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XendblockdatastmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndBlockDataStmt> ::= T_END T_BLOCKDATA <xEndBlockDataStmt@74> T_EOS  ;
     */
    public void reduceByProduction1075(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndBlockDataStmt> ::= T_END T_BLOCKDATA <xEndBlockDataStmt@74> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1075UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XendblockdatastmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndBlockDataStmt> ::= <xLblDef> T_END T_BLOCKDATA T_EOS  ;
     */
    public void reduceByProduction1076(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndBlockDataStmt> ::= <xLblDef> T_END T_BLOCKDATA T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1076UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XendblockdatastmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndBlockDataStmt> ::= <xLblDef> T_END T_BLOCKDATA <xEndBlockDataStmt@74> T_EOS  ;
     */
    public void reduceByProduction1077(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndBlockDataStmt> ::= <xLblDef> T_END T_BLOCKDATA <xEndBlockDataStmt@74> T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1077UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XendblockdatastmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xEndBlockDataStmt> ::= T_ENDBLOCK T_DATA T_EOS  ;
     */
    public void reduceByProduction1078(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndBlockDataStmt> ::= T_ENDBLOCK T_DATA T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1078UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XendblockdatastmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndBlockDataStmt> ::= T_ENDBLOCK T_DATA <xEndBlockDataStmt@75> T_EOS  ;
     */
    public void reduceByProduction1079(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndBlockDataStmt> ::= T_ENDBLOCK T_DATA <xEndBlockDataStmt@75> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1079UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XendblockdatastmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndBlockDataStmt> ::= <xLblDef> T_ENDBLOCK T_DATA T_EOS  ;
     */
    public void reduceByProduction1080(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndBlockDataStmt> ::= <xLblDef> T_ENDBLOCK T_DATA T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1080UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XendblockdatastmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndBlockDataStmt> ::= <xLblDef> T_ENDBLOCK T_DATA <xEndBlockDataStmt@75> T_EOS  ;
     */
    public void reduceByProduction1081(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndBlockDataStmt> ::= <xLblDef> T_ENDBLOCK T_DATA <xEndBlockDataStmt@75> T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1081UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XendblockdatastmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xEndBlockDataStmt> ::= T_END T_BLOCK T_DATA T_EOS  ;
     */
    public void reduceByProduction1082(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndBlockDataStmt> ::= T_END T_BLOCK T_DATA T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1082UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XendblockdatastmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndBlockDataStmt> ::= T_END T_BLOCK T_DATA <xEndBlockDataStmt@76> T_EOS  ;
     */
    public void reduceByProduction1083(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndBlockDataStmt> ::= T_END T_BLOCK T_DATA <xEndBlockDataStmt@76> T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1083UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XendblockdatastmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xEndBlockDataStmt> ::= <xLblDef> T_END T_BLOCK T_DATA T_EOS  ;
     */
    public void reduceByProduction1084(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndBlockDataStmt> ::= <xLblDef> T_END T_BLOCK T_DATA T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1084UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XendblockdatastmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xEndBlockDataStmt> ::= <xLblDef> T_END T_BLOCK T_DATA <xEndBlockDataStmt@76> T_EOS  ;
     */
    public void reduceByProduction1085(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndBlockDataStmt> ::= <xLblDef> T_END T_BLOCK T_DATA <xEndBlockDataStmt@76> T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1085UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XendblockdatastmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xInterfaceBlock> ::= <xInterfaceStmt> <xInterfaceRange>  ;
     */
    public void reduceByProduction1086(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInterfaceBlock> ::= <xInterfaceStmt> <xInterfaceRange>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1086UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XinterfaceblockNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xInterfaceRange> ::= <xInterfaceBlockBody> <xEndInterfaceStmt>  ;
     */
    public void reduceByProduction1087(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInterfaceRange> ::= <xInterfaceBlockBody> <xEndInterfaceStmt>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1087UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XinterfacerangeNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xInterfaceBlockBody> ::= <xInterfaceSpecification>  ;
     */
    public void reduceByProduction1088(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInterfaceBlockBody> ::= <xInterfaceSpecification>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1088UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XinterfaceblockbodyNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xInterfaceBlockBody> ::= <xInterfaceBlockBody> <xInterfaceSpecification>  ;
     */
    public void reduceByProduction1089(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInterfaceBlockBody> ::= <xInterfaceBlockBody> <xInterfaceSpecification>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1089UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XinterfaceblockbodyNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xInterfaceSpecification> ::= <xInterfaceBody>  ;
     */
    public void reduceByProduction1090(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInterfaceSpecification> ::= <xInterfaceBody>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1090UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XinterfacespecificationNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xInterfaceSpecification> ::= <xModuleProcedureStmt>  ;
     */
    public void reduceByProduction1091(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInterfaceSpecification> ::= <xModuleProcedureStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1091UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XinterfacespecificationNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xInterfaceStmt> ::= T_INTERFACE <xGenericName> T_EOS  ;
     */
    public void reduceByProduction1092(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInterfaceStmt> ::= T_INTERFACE <xGenericName> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1092UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XinterfacestmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xInterfaceStmt> ::= <xLblDef> T_INTERFACE <xGenericName> T_EOS  ;
     */
    public void reduceByProduction1093(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInterfaceStmt> ::= <xLblDef> T_INTERFACE <xGenericName> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1093UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XinterfacestmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xInterfaceStmt> ::= T_INTERFACE <xGenericSpec> T_EOS  ;
     */
    public void reduceByProduction1094(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInterfaceStmt> ::= T_INTERFACE <xGenericSpec> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1094UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XinterfacestmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xInterfaceStmt> ::= <xLblDef> T_INTERFACE <xGenericSpec> T_EOS  ;
     */
    public void reduceByProduction1095(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInterfaceStmt> ::= <xLblDef> T_INTERFACE <xGenericSpec> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1095UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XinterfacestmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xInterfaceStmt> ::= T_INTERFACE T_EOS  ;
     */
    public void reduceByProduction1096(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInterfaceStmt> ::= T_INTERFACE T_EOS  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1096UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XinterfacestmtNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xInterfaceStmt> ::= <xLblDef> T_INTERFACE T_EOS  ;
     */
    public void reduceByProduction1097(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInterfaceStmt> ::= <xLblDef> T_INTERFACE T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1097UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XinterfacestmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndInterfaceStmt> ::= T_ENDINTERFACE T_EOS  ;
     */
    public void reduceByProduction1098(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndInterfaceStmt> ::= T_ENDINTERFACE T_EOS  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1098UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XendinterfacestmtNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xEndInterfaceStmt> ::= T_ENDINTERFACE <xEndInterfaceStmt@77> T_EOS  ;
     */
    public void reduceByProduction1099(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndInterfaceStmt> ::= T_ENDINTERFACE <xEndInterfaceStmt@77> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1099UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XendinterfacestmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndInterfaceStmt> ::= <xLblDef> T_ENDINTERFACE T_EOS  ;
     */
    public void reduceByProduction1100(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndInterfaceStmt> ::= <xLblDef> T_ENDINTERFACE T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1100UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XendinterfacestmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndInterfaceStmt> ::= <xLblDef> T_ENDINTERFACE <xEndInterfaceStmt@77> T_EOS  ;
     */
    public void reduceByProduction1101(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndInterfaceStmt> ::= <xLblDef> T_ENDINTERFACE <xEndInterfaceStmt@77> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1101UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XendinterfacestmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndInterfaceStmt> ::= T_END T_INTERFACE T_EOS  ;
     */
    public void reduceByProduction1102(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndInterfaceStmt> ::= T_END T_INTERFACE T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1102UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XendinterfacestmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndInterfaceStmt> ::= T_END T_INTERFACE <xEndInterfaceStmt@78> T_EOS  ;
     */
    public void reduceByProduction1103(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndInterfaceStmt> ::= T_END T_INTERFACE <xEndInterfaceStmt@78> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1103UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XendinterfacestmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndInterfaceStmt> ::= <xLblDef> T_END T_INTERFACE T_EOS  ;
     */
    public void reduceByProduction1104(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndInterfaceStmt> ::= <xLblDef> T_END T_INTERFACE T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1104UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XendinterfacestmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndInterfaceStmt> ::= <xLblDef> T_END T_INTERFACE <xEndInterfaceStmt@78> T_EOS  ;
     */
    public void reduceByProduction1105(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndInterfaceStmt> ::= <xLblDef> T_END T_INTERFACE <xEndInterfaceStmt@78> T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1105UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XendinterfacestmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xInterfaceBody> ::= <xFunctionStmt> <xFunctionInterfaceRange>  ;
     */
    public void reduceByProduction1106(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInterfaceBody> ::= <xFunctionStmt> <xFunctionInterfaceRange>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1106UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XinterfacebodyNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xInterfaceBody> ::= <xSubroutineStmt> <xSubroutineInterfaceRange>  ;
     */
    public void reduceByProduction1107(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInterfaceBody> ::= <xSubroutineStmt> <xSubroutineInterfaceRange>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1107UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XinterfacebodyNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xFunctionInterfaceRange> ::= <xSubprogramInterfaceBody> <xEndFunctionStmt>  ;
     */
    public void reduceByProduction1108(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFunctionInterfaceRange> ::= <xSubprogramInterfaceBody> <xEndFunctionStmt>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1108UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XfunctioninterfacerangeNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xFunctionInterfaceRange> ::= <xEndFunctionStmt>  ;
     */
    public void reduceByProduction1109(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFunctionInterfaceRange> ::= <xEndFunctionStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1109UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XfunctioninterfacerangeNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSubroutineInterfaceRange> ::= <xSubprogramInterfaceBody> <xEndSubroutineStmt>  ;
     */
    public void reduceByProduction1110(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSubroutineInterfaceRange> ::= <xSubprogramInterfaceBody> <xEndSubroutineStmt>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1110UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XsubroutineinterfacerangeNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xSubroutineInterfaceRange> ::= <xEndSubroutineStmt>  ;
     */
    public void reduceByProduction1111(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSubroutineInterfaceRange> ::= <xEndSubroutineStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1111UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XsubroutineinterfacerangeNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSubprogramInterfaceBody> ::= <xSpecificationPartConstruct>  ;
     */
    public void reduceByProduction1112(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSubprogramInterfaceBody> ::= <xSpecificationPartConstruct>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1112UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XsubprograminterfacebodyNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSubprogramInterfaceBody> ::= <xSubprogramInterfaceBody> <xSpecificationPartConstruct>  ;
     */
    public void reduceByProduction1113(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSubprogramInterfaceBody> ::= <xSubprogramInterfaceBody> <xSpecificationPartConstruct>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1113UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XsubprograminterfacebodyNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xModuleProcedureStmt> ::= T_MODULE T_PROCEDURE <xProcedureNameList> T_EOS  ;
     */
    public void reduceByProduction1114(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xModuleProcedureStmt> ::= T_MODULE T_PROCEDURE <xProcedureNameList> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1114UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XmoduleprocedurestmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xModuleProcedureStmt> ::= <xLblDef> T_MODULE T_PROCEDURE <xProcedureNameList> T_EOS  ;
     */
    public void reduceByProduction1115(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xModuleProcedureStmt> ::= <xLblDef> T_MODULE T_PROCEDURE <xProcedureNameList> T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1115UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XmoduleprocedurestmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xProcedureNameList> ::= <xProcedureName>  ;
     */
    public void reduceByProduction1116(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xProcedureNameList> ::= <xProcedureName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1116UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XprocedurenamelistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xProcedureNameList> ::= <xProcedureNameList> T_COMMA <xProcedureName>  ;
     */
    public void reduceByProduction1117(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xProcedureNameList> ::= <xProcedureNameList> T_COMMA <xProcedureName>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1117UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XprocedurenamelistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xProcedureName> ::= T_IDENT  ;
     */
    public void reduceByProduction1118(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xProcedureName> ::= T_IDENT  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1118UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XprocedurenameNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xGenericSpec> ::= T_OPERATOR T_LPAREN <xDefinedOperator> T_RPAREN  ;
     */
    public void reduceByProduction1119(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xGenericSpec> ::= T_OPERATOR T_LPAREN <xDefinedOperator> T_RPAREN  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1119UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XgenericspecNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xGenericSpec> ::= T_ASSIGNMENT T_LPAREN T_EQUALS T_RPAREN  ;
     */
    public void reduceByProduction1120(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xGenericSpec> ::= T_ASSIGNMENT T_LPAREN T_EQUALS T_RPAREN  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1120UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XgenericspecNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xExternalStmt> ::= T_EXTERNAL <xExternalNameList> T_EOS  ;
     */
    public void reduceByProduction1121(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xExternalStmt> ::= T_EXTERNAL <xExternalNameList> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1121UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XexternalstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xExternalStmt> ::= <xLblDef> T_EXTERNAL <xExternalNameList> T_EOS  ;
     */
    public void reduceByProduction1122(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xExternalStmt> ::= <xLblDef> T_EXTERNAL <xExternalNameList> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1122UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XexternalstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xExternalStmt> ::= T_EXTERNAL T_COLON T_COLON <xExternalNameList> T_EOS  ;
     */
    public void reduceByProduction1123(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xExternalStmt> ::= T_EXTERNAL T_COLON T_COLON <xExternalNameList> T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1123UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XexternalstmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xExternalStmt> ::= <xLblDef> T_EXTERNAL T_COLON T_COLON <xExternalNameList> T_EOS  ;
     */
    public void reduceByProduction1124(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xExternalStmt> ::= <xLblDef> T_EXTERNAL T_COLON T_COLON <xExternalNameList> T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1124UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XexternalstmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xExternalNameList> ::= <xExternalName>  ;
     */
    public void reduceByProduction1125(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xExternalNameList> ::= <xExternalName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1125UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XexternalnamelistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xExternalNameList> ::= <xExternalNameList> T_COMMA <xExternalName>  ;
     */
    public void reduceByProduction1126(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xExternalNameList> ::= <xExternalNameList> T_COMMA <xExternalName>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1126UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XexternalnamelistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xIntrinsicStmt> ::= T_INTRINSIC <xIntrinsicList> T_EOS  ;
     */
    public void reduceByProduction1127(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xIntrinsicStmt> ::= T_INTRINSIC <xIntrinsicList> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1127UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XintrinsicstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xIntrinsicStmt> ::= <xLblDef> T_INTRINSIC <xIntrinsicList> T_EOS  ;
     */
    public void reduceByProduction1128(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xIntrinsicStmt> ::= <xLblDef> T_INTRINSIC <xIntrinsicList> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1128UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XintrinsicstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xIntrinsicStmt> ::= T_INTRINSIC T_COLON T_COLON <xIntrinsicList> T_EOS  ;
     */
    public void reduceByProduction1129(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xIntrinsicStmt> ::= T_INTRINSIC T_COLON T_COLON <xIntrinsicList> T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1129UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XintrinsicstmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xIntrinsicStmt> ::= <xLblDef> T_INTRINSIC T_COLON T_COLON <xIntrinsicList> T_EOS  ;
     */
    public void reduceByProduction1130(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xIntrinsicStmt> ::= <xLblDef> T_INTRINSIC T_COLON T_COLON <xIntrinsicList> T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1130UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XintrinsicstmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xIntrinsicList> ::= <xIntrinsicProcedureName>  ;
     */
    public void reduceByProduction1131(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xIntrinsicList> ::= <xIntrinsicProcedureName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1131UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XintrinsiclistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xIntrinsicList> ::= <xIntrinsicList> T_COMMA <xIntrinsicProcedureName>  ;
     */
    public void reduceByProduction1132(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xIntrinsicList> ::= <xIntrinsicList> T_COMMA <xIntrinsicProcedureName>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1132UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XintrinsiclistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xFunctionReference> ::= <xName> T_LPAREN T_RPAREN  ;
     */
    public void reduceByProduction1133(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFunctionReference> ::= <xName> T_LPAREN T_RPAREN  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1133UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XfunctionreferenceNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xFunctionReference> ::= <xName> T_LPAREN <xFunctionArgList> T_RPAREN  ;
     */
    public void reduceByProduction1134(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFunctionReference> ::= <xName> T_LPAREN <xFunctionArgList> T_RPAREN  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1134UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XfunctionreferenceNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xCallStmt> ::= T_CALL <xSubroutineNameUse> T_EOS  ;
     */
    public void reduceByProduction1135(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCallStmt> ::= T_CALL <xSubroutineNameUse> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1135UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XcallstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xCallStmt> ::= <xLblDef> T_CALL <xSubroutineNameUse> T_EOS  ;
     */
    public void reduceByProduction1136(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCallStmt> ::= <xLblDef> T_CALL <xSubroutineNameUse> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1136UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XcallstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xCallStmt> ::= T_CALL <xSubroutineNameUse> T_LPAREN T_RPAREN T_EOS  ;
     */
    public void reduceByProduction1137(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCallStmt> ::= T_CALL <xSubroutineNameUse> T_LPAREN T_RPAREN T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1137UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XcallstmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xCallStmt> ::= T_CALL <xSubroutineNameUse> T_LPAREN <xSubroutineArgList> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction1138(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCallStmt> ::= T_CALL <xSubroutineNameUse> T_LPAREN <xSubroutineArgList> T_RPAREN T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1138UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XcallstmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xCallStmt> ::= <xLblDef> T_CALL <xSubroutineNameUse> T_LPAREN T_RPAREN T_EOS  ;
     */
    public void reduceByProduction1139(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCallStmt> ::= <xLblDef> T_CALL <xSubroutineNameUse> T_LPAREN T_RPAREN T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1139UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XcallstmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xCallStmt> ::= <xLblDef> T_CALL <xSubroutineNameUse> T_LPAREN <xSubroutineArgList> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction1140(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCallStmt> ::= <xLblDef> T_CALL <xSubroutineNameUse> T_LPAREN <xSubroutineArgList> T_RPAREN T_EOS  ;
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1140UserAction(v1, v2, v3, v4, v5, v6, v7);

        // The production has 7 symbols on its RHS
        parser.reduce(Nonterminal.XcallstmtNonterminal.getInstance(), 7, userValue);
    }

    /**
     * Reduce by <xSubroutineArgList> ::= <xSubroutineArg>  ;
     */
    public void reduceByProduction1141(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSubroutineArgList> ::= <xSubroutineArg>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1141UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XsubroutinearglistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSubroutineArgList> ::= T_COMMA <xSubroutineArg>  ;
     */
    public void reduceByProduction1142(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSubroutineArgList> ::= T_COMMA <xSubroutineArg>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1142UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XsubroutinearglistNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xSubroutineArgList> ::= <xSubroutineArgList> T_COMMA <xSubroutineArg>  ;
     */
    public void reduceByProduction1143(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSubroutineArgList> ::= <xSubroutineArgList> T_COMMA <xSubroutineArg>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1143UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XsubroutinearglistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xFunctionArgList> ::= <xFunctionArg>  ;
     */
    public void reduceByProduction1144(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFunctionArgList> ::= <xFunctionArg>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1144UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XfunctionarglistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xFunctionArgList> ::= <xFunctionArgList> T_COMMA <xFunctionArg>  ;
     */
    public void reduceByProduction1145(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFunctionArgList> ::= <xFunctionArgList> T_COMMA <xFunctionArg>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1145UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XfunctionarglistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xFunctionArgList> ::= <xSectionSubscriptList> T_COMMA <xFunctionArg>  ;
     */
    public void reduceByProduction1146(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFunctionArgList> ::= <xSectionSubscriptList> T_COMMA <xFunctionArg>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1146UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XfunctionarglistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xFunctionArg> ::= <xName> T_EQUALS <xExpr>  ;
     */
    public void reduceByProduction1147(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFunctionArg> ::= <xName> T_EQUALS <xExpr>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1147UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XfunctionargNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xSubroutineArg> ::= <xExpr>  ;
     */
    public void reduceByProduction1148(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSubroutineArg> ::= <xExpr>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1148UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XsubroutineargNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSubroutineArg> ::= T_ASTERISK <xLblRef>  ;
     */
    public void reduceByProduction1149(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSubroutineArg> ::= T_ASTERISK <xLblRef>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1149UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XsubroutineargNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xSubroutineArg> ::= <xName> T_EQUALS <xExpr>  ;
     */
    public void reduceByProduction1150(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSubroutineArg> ::= <xName> T_EQUALS <xExpr>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1150UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XsubroutineargNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xSubroutineArg> ::= <xName> T_EQUALS T_ASTERISK <xLblRef>  ;
     */
    public void reduceByProduction1151(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSubroutineArg> ::= <xName> T_EQUALS T_ASTERISK <xLblRef>  ;
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1151UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XsubroutineargNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xSubroutineArg> ::= T_HCON  ;
     */
    public void reduceByProduction1152(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSubroutineArg> ::= T_HCON  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1152UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XsubroutineargNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSubroutineArg> ::= <xName> T_EQUALS T_HCON  ;
     */
    public void reduceByProduction1153(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSubroutineArg> ::= <xName> T_EQUALS T_HCON  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1153UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XsubroutineargNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xFunctionStmt> ::= <xFunctionPrefix> <xFunctionName> T_LPAREN T_RPAREN T_EOS  ;
     */
    public void reduceByProduction1154(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFunctionStmt> ::= <xFunctionPrefix> <xFunctionName> T_LPAREN T_RPAREN T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Token userValue = userActions.production1154UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XfunctionstmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xFunctionStmt> ::= <xFunctionPrefix> <xFunctionName> T_LPAREN T_RPAREN <xFunctionStmt@79> T_EOS  ;
     */
    public void reduceByProduction1155(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFunctionStmt> ::= <xFunctionPrefix> <xFunctionName> T_LPAREN T_RPAREN <xFunctionStmt@79> T_EOS  ;
        Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v7 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Token userValue = userActions.production1155UserAction(v1, v2, v3, v4, v5, v6, v7, v8, v9);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XfunctionstmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xFunctionStmt> ::= <xFunctionPrefix> <xFunctionName> T_LPAREN <xFunctionPars> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction1156(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFunctionStmt> ::= <xFunctionPrefix> <xFunctionName> T_LPAREN <xFunctionPars> T_RPAREN T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Token userValue = userActions.production1156UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XfunctionstmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xFunctionStmt> ::= <xFunctionPrefix> <xFunctionName> T_LPAREN <xFunctionPars> T_RPAREN <xFunctionStmt@79> T_EOS  ;
     */
    public void reduceByProduction1157(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFunctionStmt> ::= <xFunctionPrefix> <xFunctionName> T_LPAREN <xFunctionPars> T_RPAREN <xFunctionStmt@79> T_EOS  ;
        Token v10 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v8 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Token userValue = userActions.production1157UserAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);

        // The production has 7 symbols on its RHS
        parser.reduce(Nonterminal.XfunctionstmtNonterminal.getInstance(), 7, userValue);
    }

    /**
     * Reduce by <xFunctionStmt> ::= <xLblDef> <xFunctionPrefix> <xFunctionName> T_LPAREN T_RPAREN T_EOS  ;
     */
    public void reduceByProduction1158(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFunctionStmt> ::= <xLblDef> <xFunctionPrefix> <xFunctionName> T_LPAREN T_RPAREN T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Token userValue = userActions.production1158UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XfunctionstmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xFunctionStmt> ::= <xLblDef> <xFunctionPrefix> <xFunctionName> T_LPAREN T_RPAREN <xFunctionStmt@79> T_EOS  ;
     */
    public void reduceByProduction1159(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFunctionStmt> ::= <xLblDef> <xFunctionPrefix> <xFunctionName> T_LPAREN T_RPAREN <xFunctionStmt@79> T_EOS  ;
        Token v10 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v9 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v8 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Token userValue = userActions.production1159UserAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);

        // The production has 7 symbols on its RHS
        parser.reduce(Nonterminal.XfunctionstmtNonterminal.getInstance(), 7, userValue);
    }

    /**
     * Reduce by <xFunctionStmt> ::= <xLblDef> <xFunctionPrefix> <xFunctionName> T_LPAREN <xFunctionPars> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction1160(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFunctionStmt> ::= <xLblDef> <xFunctionPrefix> <xFunctionName> T_LPAREN <xFunctionPars> T_RPAREN T_EOS  ;
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Token userValue = userActions.production1160UserAction(v1, v2, v3, v4, v5, v6, v7);

        // The production has 7 symbols on its RHS
        parser.reduce(Nonterminal.XfunctionstmtNonterminal.getInstance(), 7, userValue);
    }

    /**
     * Reduce by <xFunctionStmt> ::= <xLblDef> <xFunctionPrefix> <xFunctionName> T_LPAREN <xFunctionPars> T_RPAREN <xFunctionStmt@79> T_EOS  ;
     */
    public void reduceByProduction1161(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFunctionStmt> ::= <xLblDef> <xFunctionPrefix> <xFunctionName> T_LPAREN <xFunctionPars> T_RPAREN <xFunctionStmt@79> T_EOS  ;
        Token v11 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v10 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v9 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v8 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Token userValue = userActions.production1161UserAction(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);

        // The production has 8 symbols on its RHS
        parser.reduce(Nonterminal.XfunctionstmtNonterminal.getInstance(), 8, userValue);
    }

    /**
     * Reduce by <xFunctionPars> ::= <xFunctionPar>  ;
     */
    public void reduceByProduction1162(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFunctionPars> ::= <xFunctionPar>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1162UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XfunctionparsNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xFunctionPars> ::= T_COMMA <xFunctionPar>  ;
     */
    public void reduceByProduction1163(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFunctionPars> ::= T_COMMA <xFunctionPar>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1163UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XfunctionparsNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xFunctionPars> ::= <xFunctionPars> T_COMMA <xFunctionPar>  ;
     */
    public void reduceByProduction1164(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFunctionPars> ::= <xFunctionPars> T_COMMA <xFunctionPar>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1164UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XfunctionparsNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xFunctionPar> ::= <xDummyArgName>  ;
     */
    public void reduceByProduction1165(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFunctionPar> ::= <xDummyArgName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1165UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XfunctionparNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xFunctionPrefix> ::= T_FUNCTION  ;
     */
    public void reduceByProduction1166(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFunctionPrefix> ::= T_FUNCTION  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1166UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XfunctionprefixNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xFunctionPrefix> ::= <xPrefixSpecList> T_FUNCTION  ;
     */
    public void reduceByProduction1167(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFunctionPrefix> ::= <xPrefixSpecList> T_FUNCTION  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1167UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XfunctionprefixNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xPrefixSpecList> ::= <xPrefixSpec>  ;
     */
    public void reduceByProduction1168(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPrefixSpecList> ::= <xPrefixSpec>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1168UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XprefixspeclistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xPrefixSpecList> ::= <xPrefixSpecList> <xPrefixSpec>  ;
     */
    public void reduceByProduction1169(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPrefixSpecList> ::= <xPrefixSpecList> <xPrefixSpec>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1169UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XprefixspeclistNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xPrefixSpec> ::= <xTypeSpec>  ;
     */
    public void reduceByProduction1170(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPrefixSpec> ::= <xTypeSpec>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1170UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XprefixspecNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xPrefixSpec> ::= T_RECURSIVE  ;
     */
    public void reduceByProduction1171(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPrefixSpec> ::= T_RECURSIVE  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1171UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XprefixspecNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xPrefixSpec> ::= T_PURE  ;
     */
    public void reduceByProduction1172(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPrefixSpec> ::= T_PURE  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1172UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XprefixspecNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xPrefixSpec> ::= T_ELEMENTAL  ;
     */
    public void reduceByProduction1173(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPrefixSpec> ::= T_ELEMENTAL  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1173UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XprefixspecNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xEndFunctionStmt> ::= T_END T_EOS  ;
     */
    public void reduceByProduction1174(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndFunctionStmt> ::= T_END T_EOS  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1174UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XendfunctionstmtNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xEndFunctionStmt> ::= <xLblDef> T_END T_EOS  ;
     */
    public void reduceByProduction1175(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndFunctionStmt> ::= <xLblDef> T_END T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1175UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XendfunctionstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndFunctionStmt> ::= T_ENDFUNCTION T_EOS  ;
     */
    public void reduceByProduction1176(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndFunctionStmt> ::= T_ENDFUNCTION T_EOS  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1176UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XendfunctionstmtNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xEndFunctionStmt> ::= T_ENDFUNCTION <xEndFunctionStmt@80> T_EOS  ;
     */
    public void reduceByProduction1177(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndFunctionStmt> ::= T_ENDFUNCTION <xEndFunctionStmt@80> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1177UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XendfunctionstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndFunctionStmt> ::= <xLblDef> T_ENDFUNCTION T_EOS  ;
     */
    public void reduceByProduction1178(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndFunctionStmt> ::= <xLblDef> T_ENDFUNCTION T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1178UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XendfunctionstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndFunctionStmt> ::= <xLblDef> T_ENDFUNCTION <xEndFunctionStmt@80> T_EOS  ;
     */
    public void reduceByProduction1179(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndFunctionStmt> ::= <xLblDef> T_ENDFUNCTION <xEndFunctionStmt@80> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1179UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XendfunctionstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndFunctionStmt> ::= T_END T_FUNCTION T_EOS  ;
     */
    public void reduceByProduction1180(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndFunctionStmt> ::= T_END T_FUNCTION T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1180UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XendfunctionstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndFunctionStmt> ::= T_END T_FUNCTION <xEndFunctionStmt@81> T_EOS  ;
     */
    public void reduceByProduction1181(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndFunctionStmt> ::= T_END T_FUNCTION <xEndFunctionStmt@81> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1181UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XendfunctionstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndFunctionStmt> ::= <xLblDef> T_END T_FUNCTION T_EOS  ;
     */
    public void reduceByProduction1182(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndFunctionStmt> ::= <xLblDef> T_END T_FUNCTION T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1182UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XendfunctionstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndFunctionStmt> ::= <xLblDef> T_END T_FUNCTION <xEndFunctionStmt@81> T_EOS  ;
     */
    public void reduceByProduction1183(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndFunctionStmt> ::= <xLblDef> T_END T_FUNCTION <xEndFunctionStmt@81> T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1183UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XendfunctionstmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xSubroutineStmt> ::= <xSubroutinePrefix> <xSubroutineName> T_EOS  ;
     */
    public void reduceByProduction1184(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSubroutineStmt> ::= <xSubroutinePrefix> <xSubroutineName> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Token userValue = userActions.production1184UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XsubroutinestmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xSubroutineStmt> ::= <xSubroutinePrefix> <xSubroutineName> <xSubroutineStmt@82> T_EOS  ;
     */
    public void reduceByProduction1185(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSubroutineStmt> ::= <xSubroutinePrefix> <xSubroutineName> <xSubroutineStmt@82> T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Token userValue = userActions.production1185UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XsubroutinestmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xSubroutineStmt> ::= <xLblDef> <xSubroutinePrefix> <xSubroutineName> T_EOS  ;
     */
    public void reduceByProduction1186(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSubroutineStmt> ::= <xLblDef> <xSubroutinePrefix> <xSubroutineName> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Token userValue = userActions.production1186UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XsubroutinestmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xSubroutineStmt> ::= <xLblDef> <xSubroutinePrefix> <xSubroutineName> <xSubroutineStmt@82> T_EOS  ;
     */
    public void reduceByProduction1187(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSubroutineStmt> ::= <xLblDef> <xSubroutinePrefix> <xSubroutineName> <xSubroutineStmt@82> T_EOS  ;
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Token userValue = userActions.production1187UserAction(v1, v2, v3, v4, v5, v6, v7);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XsubroutinestmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xSubroutinePrefix> ::= T_SUBROUTINE  ;
     */
    public void reduceByProduction1188(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSubroutinePrefix> ::= T_SUBROUTINE  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1188UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XsubroutineprefixNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSubroutinePrefix> ::= <xPrefixSpecList> T_SUBROUTINE  ;
     */
    public void reduceByProduction1189(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSubroutinePrefix> ::= <xPrefixSpecList> T_SUBROUTINE  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1189UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XsubroutineprefixNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xSubroutinePars> ::= <xSubroutinePar>  ;
     */
    public void reduceByProduction1190(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSubroutinePars> ::= <xSubroutinePar>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1190UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XsubroutineparsNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSubroutinePars> ::= T_COMMA <xSubroutinePar>  ;
     */
    public void reduceByProduction1191(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSubroutinePars> ::= T_COMMA <xSubroutinePar>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1191UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XsubroutineparsNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xSubroutinePars> ::= <xSubroutinePars> T_COMMA <xSubroutinePar>  ;
     */
    public void reduceByProduction1192(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSubroutinePars> ::= <xSubroutinePars> T_COMMA <xSubroutinePar>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1192UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XsubroutineparsNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xSubroutinePar> ::= <xDummyArgName>  ;
     */
    public void reduceByProduction1193(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSubroutinePar> ::= <xDummyArgName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1193UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XsubroutineparNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSubroutinePar> ::= T_ASTERISK  ;
     */
    public void reduceByProduction1194(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSubroutinePar> ::= T_ASTERISK  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1194UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XsubroutineparNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xEndSubroutineStmt> ::= T_END T_EOS  ;
     */
    public void reduceByProduction1195(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndSubroutineStmt> ::= T_END T_EOS  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1195UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XendsubroutinestmtNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xEndSubroutineStmt> ::= <xLblDef> T_END T_EOS  ;
     */
    public void reduceByProduction1196(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndSubroutineStmt> ::= <xLblDef> T_END T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1196UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XendsubroutinestmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndSubroutineStmt> ::= T_ENDSUBROUTINE T_EOS  ;
     */
    public void reduceByProduction1197(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndSubroutineStmt> ::= T_ENDSUBROUTINE T_EOS  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1197UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XendsubroutinestmtNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xEndSubroutineStmt> ::= T_ENDSUBROUTINE <xEndSubroutineStmt@83> T_EOS  ;
     */
    public void reduceByProduction1198(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndSubroutineStmt> ::= T_ENDSUBROUTINE <xEndSubroutineStmt@83> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1198UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XendsubroutinestmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndSubroutineStmt> ::= <xLblDef> T_ENDSUBROUTINE T_EOS  ;
     */
    public void reduceByProduction1199(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndSubroutineStmt> ::= <xLblDef> T_ENDSUBROUTINE T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1199UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XendsubroutinestmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndSubroutineStmt> ::= <xLblDef> T_ENDSUBROUTINE <xEndSubroutineStmt@83> T_EOS  ;
     */
    public void reduceByProduction1200(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndSubroutineStmt> ::= <xLblDef> T_ENDSUBROUTINE <xEndSubroutineStmt@83> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1200UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XendsubroutinestmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndSubroutineStmt> ::= T_END T_SUBROUTINE T_EOS  ;
     */
    public void reduceByProduction1201(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndSubroutineStmt> ::= T_END T_SUBROUTINE T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1201UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XendsubroutinestmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEndSubroutineStmt> ::= T_END T_SUBROUTINE <xEndSubroutineStmt@84> T_EOS  ;
     */
    public void reduceByProduction1202(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndSubroutineStmt> ::= T_END T_SUBROUTINE <xEndSubroutineStmt@84> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1202UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XendsubroutinestmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndSubroutineStmt> ::= <xLblDef> T_END T_SUBROUTINE T_EOS  ;
     */
    public void reduceByProduction1203(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndSubroutineStmt> ::= <xLblDef> T_END T_SUBROUTINE T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1203UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XendsubroutinestmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEndSubroutineStmt> ::= <xLblDef> T_END T_SUBROUTINE <xEndSubroutineStmt@84> T_EOS  ;
     */
    public void reduceByProduction1204(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndSubroutineStmt> ::= <xLblDef> T_END T_SUBROUTINE <xEndSubroutineStmt@84> T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1204UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XendsubroutinestmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xEntryStmt> ::= T_ENTRY <xEntryName> T_EOS  ;
     */
    public void reduceByProduction1205(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEntryStmt> ::= T_ENTRY <xEntryName> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1205UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XentrystmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xEntryStmt> ::= T_ENTRY <xEntryName> <xEntryStmt@85> T_EOS  ;
     */
    public void reduceByProduction1206(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEntryStmt> ::= T_ENTRY <xEntryName> <xEntryStmt@85> T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1206UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XentrystmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEntryStmt> ::= <xLblDef> T_ENTRY <xEntryName> T_EOS  ;
     */
    public void reduceByProduction1207(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEntryStmt> ::= <xLblDef> T_ENTRY <xEntryName> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1207UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XentrystmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xEntryStmt> ::= <xLblDef> T_ENTRY <xEntryName> <xEntryStmt@85> T_EOS  ;
     */
    public void reduceByProduction1208(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEntryStmt> ::= <xLblDef> T_ENTRY <xEntryName> <xEntryStmt@85> T_EOS  ;
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1208UserAction(v1, v2, v3, v4, v5, v6, v7);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XentrystmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xReturnStmt> ::= T_RETURN T_EOS  ;
     */
    public void reduceByProduction1209(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xReturnStmt> ::= T_RETURN T_EOS  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1209UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XreturnstmtNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xReturnStmt> ::= <xLblDef> T_RETURN T_EOS  ;
     */
    public void reduceByProduction1210(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xReturnStmt> ::= <xLblDef> T_RETURN T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1210UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XreturnstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xReturnStmt> ::= T_RETURN <xExpr> T_EOS  ;
     */
    public void reduceByProduction1211(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xReturnStmt> ::= T_RETURN <xExpr> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1211UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XreturnstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xReturnStmt> ::= <xLblDef> T_RETURN <xExpr> T_EOS  ;
     */
    public void reduceByProduction1212(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xReturnStmt> ::= <xLblDef> T_RETURN <xExpr> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1212UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XreturnstmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xContainsStmt> ::= T_CONTAINS T_EOS  ;
     */
    public void reduceByProduction1213(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xContainsStmt> ::= T_CONTAINS T_EOS  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1213UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XcontainsstmtNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xContainsStmt> ::= <xLblDef> T_CONTAINS T_EOS  ;
     */
    public void reduceByProduction1214(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xContainsStmt> ::= <xLblDef> T_CONTAINS T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1214UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XcontainsstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xStmtFunctionStmt> ::= <xName> <xStmtFunctionRange>  ;
     */
    public void reduceByProduction1215(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xStmtFunctionStmt> ::= <xName> <xStmtFunctionRange>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1215UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XstmtfunctionstmtNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xStmtFunctionStmt> ::= <xLblDef> <xName> <xStmtFunctionRange>  ;
     */
    public void reduceByProduction1216(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xStmtFunctionStmt> ::= <xLblDef> <xName> <xStmtFunctionRange>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1216UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XstmtfunctionstmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xStmtFunctionRange> ::= T_LPAREN T_RPAREN T_EQUALS <xExpr> T_EOS  ;
     */
    public void reduceByProduction1217(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xStmtFunctionRange> ::= T_LPAREN T_RPAREN T_EQUALS <xExpr> T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1217UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XstmtfunctionrangeNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xStmtFunctionRange> ::= T_LPAREN <xSFDummyArgNameList> T_RPAREN T_EQUALS <xExpr> T_EOS  ;
     */
    public void reduceByProduction1218(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xStmtFunctionRange> ::= T_LPAREN <xSFDummyArgNameList> T_RPAREN T_EQUALS <xExpr> T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1218UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XstmtfunctionrangeNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xSFDummyArgNameList> ::= <xSFDummyArgName>  ;
     */
    public void reduceByProduction1219(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSFDummyArgNameList> ::= <xSFDummyArgName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1219UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XsfdummyargnamelistNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSFDummyArgNameList> ::= <xSFDummyArgNameList> T_COMMA <xSFDummyArgName>  ;
     */
    public void reduceByProduction1220(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSFDummyArgNameList> ::= <xSFDummyArgNameList> T_COMMA <xSFDummyArgName>  ;
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1220UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XsfdummyargnamelistNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xArrayName> ::= T_IDENT  ;
     */
    public void reduceByProduction1221(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xArrayName> ::= T_IDENT  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1221UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XarraynameNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xBlockDataName> ::= T_IDENT  ;
     */
    public void reduceByProduction1222(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xBlockDataName> ::= T_IDENT  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Token userValue = userActions.production1222UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XblockdatanameNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xCommonBlockName> ::= T_IDENT  ;
     */
    public void reduceByProduction1223(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCommonBlockName> ::= T_IDENT  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1223UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XcommonblocknameNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xComponentName> ::= T_IDENT  ;
     */
    public void reduceByProduction1224(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xComponentName> ::= T_IDENT  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1224UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XcomponentnameNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xDummyArgName> ::= T_IDENT  ;
     */
    public void reduceByProduction1225(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDummyArgName> ::= T_IDENT  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1225UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XdummyargnameNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xEndName> ::= T_IDENT  ;
     */
    public void reduceByProduction1226(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndName> ::= T_IDENT  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1226UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XendnameNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xEntryName> ::= T_IDENT  ;
     */
    public void reduceByProduction1227(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEntryName> ::= T_IDENT  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1227UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XentrynameNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xExternalName> ::= T_IDENT  ;
     */
    public void reduceByProduction1228(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xExternalName> ::= T_IDENT  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1228UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XexternalnameNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xFunctionName> ::= T_IDENT  ;
     */
    public void reduceByProduction1229(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFunctionName> ::= T_IDENT  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Token userValue = userActions.production1229UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XfunctionnameNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xGenericName> ::= T_IDENT  ;
     */
    public void reduceByProduction1230(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xGenericName> ::= T_IDENT  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1230UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XgenericnameNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <T_xImpliedDoVariable> ::= T_IDENT  ;
     */
    public void reduceByProduction1231(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <T_xImpliedDoVariable> ::= T_IDENT  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1231UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.TXimplieddovariableNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xIntrinsicProcedureName> ::= T_IDENT  ;
     */
    public void reduceByProduction1232(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xIntrinsicProcedureName> ::= T_IDENT  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1232UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XintrinsicprocedurenameNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xModuleName> ::= T_IDENT  ;
     */
    public void reduceByProduction1233(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xModuleName> ::= T_IDENT  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Token userValue = userActions.production1233UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XmodulenameNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xNamelistGroupName> ::= T_IDENT  ;
     */
    public void reduceByProduction1234(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xNamelistGroupName> ::= T_IDENT  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1234UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XnamelistgroupnameNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xObjectName> ::= T_IDENT  ;
     */
    public void reduceByProduction1235(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xObjectName> ::= T_IDENT  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1235UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XobjectnameNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xProgramName> ::= T_IDENT  ;
     */
    public void reduceByProduction1236(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xProgramName> ::= T_IDENT  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Token userValue = userActions.production1236UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XprogramnameNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSFDummyArgName> ::= <xName>  ;
     */
    public void reduceByProduction1237(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSFDummyArgName> ::= <xName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1237UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XsfdummyargnameNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSFVarName> ::= <xName>  ;
     */
    public void reduceByProduction1238(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSFVarName> ::= <xName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1238UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XsfvarnameNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSubroutineName> ::= T_IDENT  ;
     */
    public void reduceByProduction1239(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSubroutineName> ::= T_IDENT  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Token userValue = userActions.production1239UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XsubroutinenameNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xSubroutineNameUse> ::= T_IDENT  ;
     */
    public void reduceByProduction1240(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSubroutineNameUse> ::= T_IDENT  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1240UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XsubroutinenameuseNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xTypeName> ::= T_IDENT  ;
     */
    public void reduceByProduction1241(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xTypeName> ::= T_IDENT  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1241UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XtypenameNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xUseName> ::= T_IDENT  ;
     */
    public void reduceByProduction1242(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUseName> ::= T_IDENT  ;
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1242UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XusenameNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xLblDef> ::= <xLabel>  ;
     */
    public void reduceByProduction1243(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLblDef> ::= <xLabel>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1243UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XlbldefNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xActionStmt> ::= <xAssignStmt>  ;
     */
    public void reduceByProduction1244(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xActionStmt> ::= <xAssignStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1244UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XactionstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xActionStmt> ::= <xAssignedGotoStmt>  ;
     */
    public void reduceByProduction1245(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xActionStmt> ::= <xAssignedGotoStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1245UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XactionstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xActionStmt> ::= <xPauseStmt>  ;
     */
    public void reduceByProduction1246(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xActionStmt> ::= <xPauseStmt>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1246UserAction(v1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.XactionstmtNonterminal.getInstance(), 1, userValue);
    }

    /**
     * Reduce by <xPauseStmt> ::= T_PAUSE T_EOS  ;
     */
    public void reduceByProduction1247(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPauseStmt> ::= T_PAUSE T_EOS  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1247UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XpausestmtNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xPauseStmt> ::= <xLblDef> T_PAUSE T_EOS  ;
     */
    public void reduceByProduction1248(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPauseStmt> ::= <xLblDef> T_PAUSE T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1248UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XpausestmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xPauseStmt> ::= T_PAUSE T_ICON T_EOS  ;
     */
    public void reduceByProduction1249(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPauseStmt> ::= T_PAUSE T_ICON T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1249UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XpausestmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xPauseStmt> ::= <xLblDef> T_PAUSE T_ICON T_EOS  ;
     */
    public void reduceByProduction1250(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPauseStmt> ::= <xLblDef> T_PAUSE T_ICON T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1250UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XpausestmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xPauseStmt> ::= T_PAUSE T_SCON T_EOS  ;
     */
    public void reduceByProduction1251(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPauseStmt> ::= T_PAUSE T_SCON T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1251UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XpausestmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xPauseStmt> ::= <xLblDef> T_PAUSE T_SCON T_EOS  ;
     */
    public void reduceByProduction1252(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPauseStmt> ::= <xLblDef> T_PAUSE T_SCON T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1252UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XpausestmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xAssignStmt> ::= T_ASSIGN <xLblRef> T_TO <xVariableName> T_EOS  ;
     */
    public void reduceByProduction1253(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssignStmt> ::= T_ASSIGN <xLblRef> T_TO <xVariableName> T_EOS  ;
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1253UserAction(v1, v2, v3, v4, v5);

        // The production has 5 symbols on its RHS
        parser.reduce(Nonterminal.XassignstmtNonterminal.getInstance(), 5, userValue);
    }

    /**
     * Reduce by <xAssignStmt> ::= <xLblDef> T_ASSIGN <xLblRef> T_TO <xVariableName> T_EOS  ;
     */
    public void reduceByProduction1254(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssignStmt> ::= <xLblDef> T_ASSIGN <xLblRef> T_TO <xVariableName> T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1254UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XassignstmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xAssignedGotoStmt> ::= <GoToKw> <xVariableName> T_EOS  ;
     */
    public void reduceByProduction1255(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssignedGotoStmt> ::= <GoToKw> <xVariableName> T_EOS  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1255UserAction(v1, v2, v3);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.XassignedgotostmtNonterminal.getInstance(), 3, userValue);
    }

    /**
     * Reduce by <xAssignedGotoStmt> ::= <xLblDef> <GoToKw> <xVariableName> T_EOS  ;
     */
    public void reduceByProduction1256(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssignedGotoStmt> ::= <xLblDef> <GoToKw> <xVariableName> T_EOS  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1256UserAction(v1, v2, v3, v4);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.XassignedgotostmtNonterminal.getInstance(), 4, userValue);
    }

    /**
     * Reduce by <xAssignedGotoStmt> ::= <GoToKw> <xVariableName> T_LPAREN <xLblRefList> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction1257(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssignedGotoStmt> ::= <GoToKw> <xVariableName> T_LPAREN <xLblRefList> T_RPAREN T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1257UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XassignedgotostmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xAssignedGotoStmt> ::= <xLblDef> <GoToKw> <xVariableName> T_LPAREN <xLblRefList> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction1258(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssignedGotoStmt> ::= <xLblDef> <GoToKw> <xVariableName> T_LPAREN <xLblRefList> T_RPAREN T_EOS  ;
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1258UserAction(v1, v2, v3, v4, v5, v6, v7);

        // The production has 7 symbols on its RHS
        parser.reduce(Nonterminal.XassignedgotostmtNonterminal.getInstance(), 7, userValue);
    }

    /**
     * Reduce by <xAssignedGotoStmt> ::= <GoToKw> <xVariableComma> T_LPAREN <xLblRefList> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction1259(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssignedGotoStmt> ::= <GoToKw> <xVariableComma> T_LPAREN <xLblRefList> T_RPAREN T_EOS  ;
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v5 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1259UserAction(v1, v2, v3, v4, v5, v6);

        // The production has 6 symbols on its RHS
        parser.reduce(Nonterminal.XassignedgotostmtNonterminal.getInstance(), 6, userValue);
    }

    /**
     * Reduce by <xAssignedGotoStmt> ::= <xLblDef> <GoToKw> <xVariableComma> T_LPAREN <xLblRefList> T_RPAREN T_EOS  ;
     */
    public void reduceByProduction1260(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssignedGotoStmt> ::= <xLblDef> <GoToKw> <xVariableComma> T_LPAREN <xLblRefList> T_RPAREN T_EOS  ;
        Token v7 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v6 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v5 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1260UserAction(v1, v2, v3, v4, v5, v6, v7);

        // The production has 7 symbols on its RHS
        parser.reduce(Nonterminal.XassignedgotostmtNonterminal.getInstance(), 7, userValue);
    }

    /**
     * Reduce by <xVariableComma> ::= <xVariableName> T_COMMA  ;
     */
    public void reduceByProduction1261(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xVariableComma> ::= <xVariableName> T_COMMA  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // Run the user's code for this production
        Object userValue = userActions.production1261UserAction(v1, v2);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.XvariablecommaNonterminal.getInstance(), 2, userValue);
    }

    /**
     * Reduce by <xEndTypeStmt@1> ::= <xTypeName>  ;
     */
    public void reduceByProduction1262(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndTypeStmt@1> ::= <xTypeName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xendtypestmt1ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xEndTypeStmt@2> ::= <xTypeName>  ;
     */
    public void reduceByProduction1263(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndTypeStmt@2> ::= <xTypeName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xendtypestmt2ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xEntityDecl@3> ::= T_LPAREN <xArraySpec> T_RPAREN  ;
     */
    public void reduceByProduction1264(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEntityDecl@3> ::= T_LPAREN <xArraySpec> T_RPAREN  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.Xentitydecl3ReductionNonterminal.getInstance(), 3);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
        parser.getValueStack().add(v3);
    }

    /**
     * Reduce by <xEntityDecl@4> ::= T_ASTERISK <xCharLength>  ;
     */
    public void reduceByProduction1265(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEntityDecl@4> ::= T_ASTERISK <xCharLength>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.Xentitydecl4ReductionNonterminal.getInstance(), 2);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
    }

    /**
     * Reduce by <xEntityDecl@5> ::= <xInitialization>  ;
     */
    public void reduceByProduction1266(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEntityDecl@5> ::= <xInitialization>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xentitydecl5ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xInvalidEntityDecl@6> ::= <xInitialization>  ;
     */
    public void reduceByProduction1267(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xInvalidEntityDecl@6> ::= <xInitialization>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xinvalidentitydecl6ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xIntentStmt@7> ::= T_COLON T_COLON  ;
     */
    public void reduceByProduction1268(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xIntentStmt@7> ::= T_COLON T_COLON  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.Xintentstmt7ReductionNonterminal.getInstance(), 2);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
    }

    /**
     * Reduce by <xOptionalStmt@8> ::= T_COLON T_COLON  ;
     */
    public void reduceByProduction1269(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xOptionalStmt@8> ::= T_COLON T_COLON  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.Xoptionalstmt8ReductionNonterminal.getInstance(), 2);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
    }

    /**
     * Reduce by <xAccessStmt@9> ::= T_COLON T_COLON  ;
     */
    public void reduceByProduction1270(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAccessStmt@9> ::= T_COLON T_COLON  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.Xaccessstmt9ReductionNonterminal.getInstance(), 2);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
    }

    /**
     * Reduce by <xSaveStmt@10> ::= T_COLON T_COLON  ;
     */
    public void reduceByProduction1271(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSaveStmt@10> ::= T_COLON T_COLON  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.Xsavestmt10ReductionNonterminal.getInstance(), 2);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
    }

    /**
     * Reduce by <xDimensionStmt@11> ::= T_COLON T_COLON  ;
     */
    public void reduceByProduction1272(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDimensionStmt@11> ::= T_COLON T_COLON  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.Xdimensionstmt11ReductionNonterminal.getInstance(), 2);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
    }

    /**
     * Reduce by <xAllocatableStmt@12> ::= T_COLON T_COLON  ;
     */
    public void reduceByProduction1273(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAllocatableStmt@12> ::= T_COLON T_COLON  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.Xallocatablestmt12ReductionNonterminal.getInstance(), 2);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
    }

    /**
     * Reduce by <xPointerStmt@13> ::= T_COLON T_COLON  ;
     */
    public void reduceByProduction1274(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPointerStmt@13> ::= T_COLON T_COLON  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.Xpointerstmt13ReductionNonterminal.getInstance(), 2);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
    }

    /**
     * Reduce by <xTargetStmt@14> ::= T_COLON T_COLON  ;
     */
    public void reduceByProduction1275(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xTargetStmt@14> ::= T_COLON T_COLON  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.Xtargetstmt14ReductionNonterminal.getInstance(), 2);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
    }

    /**
     * Reduce by <xVariable@15> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN  ;
     */
    public void reduceByProduction1276(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xVariable@15> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.Xvariable15ReductionNonterminal.getInstance(), 3);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
        parser.getValueStack().add(v3);
        parser.getValueStack().add(null);
    }

    /**
     * Reduce by <xVariable@15> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN <xVariable@16>  ;
     */
    public void reduceByProduction1277(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xVariable@15> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN <xVariable@16>  ;
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.Xvariable15ReductionNonterminal.getInstance(), 4);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
        parser.getValueStack().add(v3);
        parser.getValueStack().add(v4);
    }

    /**
     * Reduce by <xVariable@16> ::= <xSubstringRange>  ;
     */
    public void reduceByProduction1278(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xVariable@16> ::= <xSubstringRange>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xvariable16ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xDataRef@17> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN  ;
     */
    public void reduceByProduction1279(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xDataRef@17> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.Xdataref17ReductionNonterminal.getInstance(), 3);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
        parser.getValueStack().add(v3);
    }

    /**
     * Reduce by <xSFDataRef@18> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN  ;
     */
    public void reduceByProduction1280(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSFDataRef@18> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.Xsfdataref18ReductionNonterminal.getInstance(), 3);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
        parser.getValueStack().add(v3);
    }

    /**
     * Reduce by <xPrimary@19> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN  ;
     */
    public void reduceByProduction1281(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPrimary@19> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.Xprimary19ReductionNonterminal.getInstance(), 3);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
        parser.getValueStack().add(v3);
        parser.getValueStack().add(null);
    }

    /**
     * Reduce by <xPrimary@19> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN <xPrimary@20>  ;
     */
    public void reduceByProduction1282(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPrimary@19> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN <xPrimary@20>  ;
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.Xprimary19ReductionNonterminal.getInstance(), 4);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
        parser.getValueStack().add(v3);
        parser.getValueStack().add(v4);
    }

    /**
     * Reduce by <xPrimary@20> ::= <xSubstringRange>  ;
     */
    public void reduceByProduction1283(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPrimary@20> ::= <xSubstringRange>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xprimary20ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xPrimary@21> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN  ;
     */
    public void reduceByProduction1284(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPrimary@21> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.Xprimary21ReductionNonterminal.getInstance(), 3);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
        parser.getValueStack().add(v3);
        parser.getValueStack().add(null);
    }

    /**
     * Reduce by <xPrimary@21> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN <xPrimary@22>  ;
     */
    public void reduceByProduction1285(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPrimary@21> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN <xPrimary@22>  ;
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.Xprimary21ReductionNonterminal.getInstance(), 4);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
        parser.getValueStack().add(v3);
        parser.getValueStack().add(v4);
    }

    /**
     * Reduce by <xPrimary@22> ::= <xSubstringRange>  ;
     */
    public void reduceByProduction1286(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPrimary@22> ::= <xSubstringRange>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xprimary22ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xPrimary@23> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN  ;
     */
    public void reduceByProduction1287(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPrimary@23> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.Xprimary23ReductionNonterminal.getInstance(), 3);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
        parser.getValueStack().add(v3);
        parser.getValueStack().add(null);
    }

    /**
     * Reduce by <xPrimary@23> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN <xPrimary@24>  ;
     */
    public void reduceByProduction1288(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPrimary@23> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN <xPrimary@24>  ;
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.Xprimary23ReductionNonterminal.getInstance(), 4);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
        parser.getValueStack().add(v3);
        parser.getValueStack().add(v4);
    }

    /**
     * Reduce by <xPrimary@24> ::= <xSubstringRange>  ;
     */
    public void reduceByProduction1289(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPrimary@24> ::= <xSubstringRange>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xprimary24ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xPrimary@25> ::= <xSubstringRange>  ;
     */
    public void reduceByProduction1290(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPrimary@25> ::= <xSubstringRange>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xprimary25ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xPrimary@26> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN  ;
     */
    public void reduceByProduction1291(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPrimary@26> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.Xprimary26ReductionNonterminal.getInstance(), 3);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
        parser.getValueStack().add(v3);
        parser.getValueStack().add(null);
    }

    /**
     * Reduce by <xPrimary@26> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN <xPrimary@27>  ;
     */
    public void reduceByProduction1292(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPrimary@26> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN <xPrimary@27>  ;
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.Xprimary26ReductionNonterminal.getInstance(), 4);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
        parser.getValueStack().add(v3);
        parser.getValueStack().add(v4);
    }

    /**
     * Reduce by <xPrimary@27> ::= <xSubstringRange>  ;
     */
    public void reduceByProduction1293(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xPrimary@27> ::= <xSubstringRange>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xprimary27ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xCOperand@28> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN  ;
     */
    public void reduceByProduction1294(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCOperand@28> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.Xcoperand28ReductionNonterminal.getInstance(), 3);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
        parser.getValueStack().add(v3);
    }

    /**
     * Reduce by <xCOperand@29> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN  ;
     */
    public void reduceByProduction1295(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCOperand@29> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.Xcoperand29ReductionNonterminal.getInstance(), 3);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
        parser.getValueStack().add(v3);
    }

    /**
     * Reduce by <xCOperand@30> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN  ;
     */
    public void reduceByProduction1296(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCOperand@30> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.Xcoperand30ReductionNonterminal.getInstance(), 3);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
        parser.getValueStack().add(v3);
    }

    /**
     * Reduce by <xUFPrimary@31> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN  ;
     */
    public void reduceByProduction1297(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUFPrimary@31> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.Xufprimary31ReductionNonterminal.getInstance(), 3);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
        parser.getValueStack().add(v3);
        parser.getValueStack().add(null);
    }

    /**
     * Reduce by <xUFPrimary@31> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN <xUFPrimary@32>  ;
     */
    public void reduceByProduction1298(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUFPrimary@31> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN <xUFPrimary@32>  ;
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.Xufprimary31ReductionNonterminal.getInstance(), 4);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
        parser.getValueStack().add(v3);
        parser.getValueStack().add(v4);
    }

    /**
     * Reduce by <xUFPrimary@32> ::= <xSubstringRange>  ;
     */
    public void reduceByProduction1299(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUFPrimary@32> ::= <xSubstringRange>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xufprimary32ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xUFPrimary@33> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN  ;
     */
    public void reduceByProduction1300(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUFPrimary@33> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.Xufprimary33ReductionNonterminal.getInstance(), 3);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
        parser.getValueStack().add(v3);
    }

    /**
     * Reduce by <xUFPrimary@34> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN  ;
     */
    public void reduceByProduction1301(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUFPrimary@34> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.Xufprimary34ReductionNonterminal.getInstance(), 3);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
        parser.getValueStack().add(v3);
        parser.getValueStack().add(null);
    }

    /**
     * Reduce by <xUFPrimary@34> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN <xUFPrimary@35>  ;
     */
    public void reduceByProduction1302(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUFPrimary@34> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN <xUFPrimary@35>  ;
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.Xufprimary34ReductionNonterminal.getInstance(), 4);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
        parser.getValueStack().add(v3);
        parser.getValueStack().add(v4);
    }

    /**
     * Reduce by <xUFPrimary@35> ::= <xSubstringRange>  ;
     */
    public void reduceByProduction1303(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUFPrimary@35> ::= <xSubstringRange>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xufprimary35ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xMultOperand@36> ::= <xPowerOp> <xMultOperand>  ;
     */
    public void reduceByProduction1304(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xMultOperand@36> ::= <xPowerOp> <xMultOperand>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.Xmultoperand36ReductionNonterminal.getInstance(), 2);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
    }

    /**
     * Reduce by <xUFFactor@37> ::= <xPowerOp> <xUFFactor>  ;
     */
    public void reduceByProduction1305(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUFFactor@37> ::= <xPowerOp> <xUFFactor>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.Xuffactor37ReductionNonterminal.getInstance(), 2);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
    }

    /**
     * Reduce by <xAddOperand@38> ::= <xAddOperand> <xMultOp>  ;
     */
    public void reduceByProduction1306(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAddOperand@38> ::= <xAddOperand> <xMultOp>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.Xaddoperand38ReductionNonterminal.getInstance(), 2);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
    }

    /**
     * Reduce by <xLevel2Expr@39> ::= <xLevel2Expr> <xAddOp>  ;
     */
    public void reduceByProduction1307(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLevel2Expr@39> ::= <xLevel2Expr> <xAddOp>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.Xlevel2expr39ReductionNonterminal.getInstance(), 2);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
    }

    /**
     * Reduce by <xLevel3Expr@40> ::= <xLevel3Expr> <xConcatOp>  ;
     */
    public void reduceByProduction1308(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLevel3Expr@40> ::= <xLevel3Expr> <xConcatOp>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.Xlevel3expr40ReductionNonterminal.getInstance(), 2);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
    }

    /**
     * Reduce by <xCExpr@41> ::= <xCExpr> <xConcatOp>  ;
     */
    public void reduceByProduction1309(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCExpr@41> ::= <xCExpr> <xConcatOp>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.Xcexpr41ReductionNonterminal.getInstance(), 2);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
    }

    /**
     * Reduce by <xLevel4Expr@42> ::= <xLevel3Expr> <xRelOp>  ;
     */
    public void reduceByProduction1310(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLevel4Expr@42> ::= <xLevel3Expr> <xRelOp>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.Xlevel4expr42ReductionNonterminal.getInstance(), 2);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
    }

    /**
     * Reduce by <xAndOperand@43> ::= <xNotOp>  ;
     */
    public void reduceByProduction1311(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAndOperand@43> ::= <xNotOp>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xandoperand43ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xOrOperand@44> ::= <xOrOperand> <xAndOp>  ;
     */
    public void reduceByProduction1312(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xOrOperand@44> ::= <xOrOperand> <xAndOp>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.Xoroperand44ReductionNonterminal.getInstance(), 2);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
    }

    /**
     * Reduce by <xEquivOperand@45> ::= <xEquivOperand> <xOrOp>  ;
     */
    public void reduceByProduction1313(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEquivOperand@45> ::= <xEquivOperand> <xOrOp>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.Xequivoperand45ReductionNonterminal.getInstance(), 2);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
    }

    /**
     * Reduce by <xLevel5Expr@46> ::= <xLevel5Expr> <xEquivOp>  ;
     */
    public void reduceByProduction1314(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xLevel5Expr@46> ::= <xLevel5Expr> <xEquivOp>  ;
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.Xlevel5expr46ReductionNonterminal.getInstance(), 2);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
    }

    /**
     * Reduce by <xAssignmentStmt@47> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN  ;
     */
    public void reduceByProduction1315(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssignmentStmt@47> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.Xassignmentstmt47ReductionNonterminal.getInstance(), 3);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
        parser.getValueStack().add(v3);
        parser.getValueStack().add(null);
    }

    /**
     * Reduce by <xAssignmentStmt@47> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN <xAssignmentStmt@48>  ;
     */
    public void reduceByProduction1316(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssignmentStmt@47> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN <xAssignmentStmt@48>  ;
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.Xassignmentstmt47ReductionNonterminal.getInstance(), 4);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
        parser.getValueStack().add(v3);
        parser.getValueStack().add(v4);
    }

    /**
     * Reduce by <xAssignmentStmt@48> ::= <xSubstringRange>  ;
     */
    public void reduceByProduction1317(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssignmentStmt@48> ::= <xSubstringRange>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xassignmentstmt48ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xAssignmentStmt@49> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN  ;
     */
    public void reduceByProduction1318(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssignmentStmt@49> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.Xassignmentstmt49ReductionNonterminal.getInstance(), 3);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
        parser.getValueStack().add(v3);
        parser.getValueStack().add(null);
    }

    /**
     * Reduce by <xAssignmentStmt@49> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN <xAssignmentStmt@50>  ;
     */
    public void reduceByProduction1319(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssignmentStmt@49> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN <xAssignmentStmt@50>  ;
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.Xassignmentstmt49ReductionNonterminal.getInstance(), 4);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
        parser.getValueStack().add(v3);
        parser.getValueStack().add(v4);
    }

    /**
     * Reduce by <xAssignmentStmt@50> ::= <xSubstringRange>  ;
     */
    public void reduceByProduction1320(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssignmentStmt@50> ::= <xSubstringRange>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xassignmentstmt50ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xAssignmentStmt@51> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN  ;
     */
    public void reduceByProduction1321(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssignmentStmt@51> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.Xassignmentstmt51ReductionNonterminal.getInstance(), 3);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
        parser.getValueStack().add(v3);
        parser.getValueStack().add(null);
    }

    /**
     * Reduce by <xAssignmentStmt@51> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN <xAssignmentStmt@52>  ;
     */
    public void reduceByProduction1322(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssignmentStmt@51> ::= T_LPAREN <xSectionSubscriptList> T_RPAREN <xAssignmentStmt@52>  ;
        Object v4 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.Xassignmentstmt51ReductionNonterminal.getInstance(), 4);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
        parser.getValueStack().add(v3);
        parser.getValueStack().add(v4);
    }

    /**
     * Reduce by <xAssignmentStmt@52> ::= <xSubstringRange>  ;
     */
    public void reduceByProduction1323(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xAssignmentStmt@52> ::= <xSubstringRange>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xassignmentstmt52ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xMaskedElsewhereStmt@53> ::= <xEndName>  ;
     */
    public void reduceByProduction1324(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xMaskedElsewhereStmt@53> ::= <xEndName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xmaskedelsewherestmt53ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xElsewhereStmt@54> ::= <xEndName>  ;
     */
    public void reduceByProduction1325(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xElsewhereStmt@54> ::= <xEndName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xelsewherestmt54ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xEndWhereStmt@55> ::= <xEndName>  ;
     */
    public void reduceByProduction1326(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndWhereStmt@55> ::= <xEndName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xendwherestmt55ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xEndWhereStmt@56> ::= <xEndName>  ;
     */
    public void reduceByProduction1327(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndWhereStmt@56> ::= <xEndName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xendwherestmt56ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xEndForallStmt@57> ::= <xEndName>  ;
     */
    public void reduceByProduction1328(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndForallStmt@57> ::= <xEndName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xendforallstmt57ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xEndForallStmt@58> ::= <xEndName>  ;
     */
    public void reduceByProduction1329(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndForallStmt@58> ::= <xEndName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xendforallstmt58ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xEndIfStmt@59> ::= <xEndName>  ;
     */
    public void reduceByProduction1330(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndIfStmt@59> ::= <xEndName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xendifstmt59ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xEndIfStmt@60> ::= <xEndName>  ;
     */
    public void reduceByProduction1331(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndIfStmt@60> ::= <xEndName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xendifstmt60ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xEndSelectStmt@61> ::= <xEndName>  ;
     */
    public void reduceByProduction1332(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndSelectStmt@61> ::= <xEndName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xendselectstmt61ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xEndSelectStmt@62> ::= <xEndName>  ;
     */
    public void reduceByProduction1333(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndSelectStmt@62> ::= <xEndName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xendselectstmt62ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xEndDoStmt@63> ::= <xEndName>  ;
     */
    public void reduceByProduction1334(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndDoStmt@63> ::= <xEndName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xenddostmt63ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xEndDoStmt@64> ::= <xEndName>  ;
     */
    public void reduceByProduction1335(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndDoStmt@64> ::= <xEndName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xenddostmt64ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xCycleStmt@65> ::= <xName>  ;
     */
    public void reduceByProduction1336(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xCycleStmt@65> ::= <xName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xcyclestmt65ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xExitStmt@66> ::= <xName>  ;
     */
    public void reduceByProduction1337(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xExitStmt@66> ::= <xName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xexitstmt66ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xFormatStmt@67> ::= <xFmtSpec>  ;
     */
    public void reduceByProduction1338(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFormatStmt@67> ::= <xFmtSpec>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xformatstmt67ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xEndProgramStmt@68> ::= <xEndName>  ;
     */
    public void reduceByProduction1339(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndProgramStmt@68> ::= <xEndName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xendprogramstmt68ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xEndProgramStmt@69> ::= <xEndName>  ;
     */
    public void reduceByProduction1340(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndProgramStmt@69> ::= <xEndName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xendprogramstmt69ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xEndModuleStmt@70> ::= <xEndName>  ;
     */
    public void reduceByProduction1341(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndModuleStmt@70> ::= <xEndName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xendmodulestmt70ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xEndModuleStmt@71> ::= <xEndName>  ;
     */
    public void reduceByProduction1342(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndModuleStmt@71> ::= <xEndName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xendmodulestmt71ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xUseStmt@72> ::= <xOnlyList>  ;
     */
    public void reduceByProduction1343(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xUseStmt@72> ::= <xOnlyList>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xusestmt72ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xEndBlockDataStmt@73> ::= <xEndName>  ;
     */
    public void reduceByProduction1344(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndBlockDataStmt@73> ::= <xEndName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xendblockdatastmt73ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xEndBlockDataStmt@74> ::= <xEndName>  ;
     */
    public void reduceByProduction1345(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndBlockDataStmt@74> ::= <xEndName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xendblockdatastmt74ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xEndBlockDataStmt@75> ::= <xEndName>  ;
     */
    public void reduceByProduction1346(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndBlockDataStmt@75> ::= <xEndName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xendblockdatastmt75ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xEndBlockDataStmt@76> ::= <xEndName>  ;
     */
    public void reduceByProduction1347(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndBlockDataStmt@76> ::= <xEndName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xendblockdatastmt76ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xEndInterfaceStmt@77> ::= <xEndName>  ;
     */
    public void reduceByProduction1348(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndInterfaceStmt@77> ::= <xEndName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xendinterfacestmt77ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xEndInterfaceStmt@78> ::= <xEndName>  ;
     */
    public void reduceByProduction1349(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndInterfaceStmt@78> ::= <xEndName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xendinterfacestmt78ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xFunctionStmt@79> ::= T_RESULT T_LPAREN <xName> T_RPAREN  ;
     */
    public void reduceByProduction1350(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xFunctionStmt@79> ::= T_RESULT T_LPAREN <xName> T_RPAREN  ;
        Token v4 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v3 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 4 symbols on its RHS
        parser.reduce(Nonterminal.Xfunctionstmt79ReductionNonterminal.getInstance(), 4);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
        parser.getValueStack().add(v3);
        parser.getValueStack().add(v4);
    }

    /**
     * Reduce by <xEndFunctionStmt@80> ::= <xEndName>  ;
     */
    public void reduceByProduction1351(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndFunctionStmt@80> ::= <xEndName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xendfunctionstmt80ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xEndFunctionStmt@81> ::= <xEndName>  ;
     */
    public void reduceByProduction1352(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndFunctionStmt@81> ::= <xEndName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xendfunctionstmt81ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xSubroutineStmt@82> ::= T_LPAREN T_RPAREN  ;
     */
    public void reduceByProduction1353(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSubroutineStmt@82> ::= T_LPAREN T_RPAREN  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.Xsubroutinestmt82ReductionNonterminal.getInstance(), 2);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(null);
        parser.getValueStack().add(v2);
    }

    /**
     * Reduce by <xSubroutineStmt@82> ::= T_LPAREN <xSubroutinePars> T_RPAREN  ;
     */
    public void reduceByProduction1354(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xSubroutineStmt@82> ::= T_LPAREN <xSubroutinePars> T_RPAREN  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.Xsubroutinestmt82ReductionNonterminal.getInstance(), 3);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
        parser.getValueStack().add(v3);
    }

    /**
     * Reduce by <xEndSubroutineStmt@83> ::= <xEndName>  ;
     */
    public void reduceByProduction1355(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndSubroutineStmt@83> ::= <xEndName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xendsubroutinestmt83ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xEndSubroutineStmt@84> ::= <xEndName>  ;
     */
    public void reduceByProduction1356(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEndSubroutineStmt@84> ::= <xEndName>  ;
        Object v1 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 1 symbol on its RHS
        parser.reduce(Nonterminal.Xendsubroutinestmt84ReductionNonterminal.getInstance(), 1);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
    }

    /**
     * Reduce by <xEntryStmt@85> ::= T_LPAREN T_RPAREN  ;
     */
    public void reduceByProduction1357(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEntryStmt@85> ::= T_LPAREN T_RPAREN  ;
        Token v2 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 2 symbols on its RHS
        parser.reduce(Nonterminal.Xentrystmt85ReductionNonterminal.getInstance(), 2);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(null);
        parser.getValueStack().add(v2);
    }

    /**
     * Reduce by <xEntryStmt@85> ::= T_LPAREN <xSubroutinePars> T_RPAREN  ;
     */
    public void reduceByProduction1358(Parser parser)
    {
        ArrayList valueStack = parser.getValueStack();

        // Reduce by <xEntryStmt@85> ::= T_LPAREN <xSubroutinePars> T_RPAREN  ;
        Token v3 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Object v2 = (Object)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);
        Token v1 = (Token)valueStack.get(valueStack.size()-1); valueStack.remove(valueStack.size() - 1);

        // The production has 3 symbols on its RHS
        parser.reduce(Nonterminal.Xentrystmt85ReductionNonterminal.getInstance(), 3);

        // Run the auto-generated user code for this production,
        // which will push values onto the valueStack
        parser.getValueStack().add(v1);
        parser.getValueStack().add(v2);
        parser.getValueStack().add(v3);
    }
}
